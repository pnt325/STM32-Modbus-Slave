
nucleo-l432kc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e90  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800401c  0800401c  0001401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004064  08004064  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004064  08004064  00014064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800406c  0800406c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800406c  0800406c  0001406c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004070  08004070  00014070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001020  2000000c  08004080  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000102c  08004080  0002102c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001299d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002868  00000000  00000000  000329d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  00035248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  00036290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000210d0  00000000  00000000  000371c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001363f  00000000  00000000  00058298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbbd6  00000000  00000000  0006b8d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001374ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004290  00000000  00000000  00137500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004004 	.word	0x08004004

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08004004 	.word	0x08004004

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 faeb 	bl	8000aae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f84b 	bl	8000572 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f946 	bl	800076c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f914 	bl	800070c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004e4:	f000 f894 	bl	8000610 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80004e8:	f000 f8e0 	bl	80006ac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  bsp_mb_slave_init();
 80004ec:	f003 f8d0 	bl	8003690 <bsp_mb_slave_init>

	// Update coil status
	bsp_mb_coil_set(0, 1);
 80004f0:	2101      	movs	r1, #1
 80004f2:	2000      	movs	r0, #0
 80004f4:	f003 f8e4 	bl	80036c0 <bsp_mb_coil_set>
	bsp_mb_coil_set(1, 0);
 80004f8:	2100      	movs	r1, #0
 80004fa:	2001      	movs	r0, #1
 80004fc:	f003 f8e0 	bl	80036c0 <bsp_mb_coil_set>
	bsp_mb_coil_set(2, 1);
 8000500:	2101      	movs	r1, #1
 8000502:	2002      	movs	r0, #2
 8000504:	f003 f8dc 	bl	80036c0 <bsp_mb_coil_set>
	bsp_mb_coil_set(3, 0);
 8000508:	2100      	movs	r1, #0
 800050a:	2003      	movs	r0, #3
 800050c:	f003 f8d8 	bl	80036c0 <bsp_mb_coil_set>

	// Update input register
	bsp_mb_discrete_input_set(0, 0);
 8000510:	2100      	movs	r1, #0
 8000512:	2000      	movs	r0, #0
 8000514:	f003 f8ec 	bl	80036f0 <bsp_mb_discrete_input_set>
	bsp_mb_discrete_input_set(0, 1);
 8000518:	2101      	movs	r1, #1
 800051a:	2000      	movs	r0, #0
 800051c:	f003 f8e8 	bl	80036f0 <bsp_mb_discrete_input_set>
	bsp_mb_discrete_input_set(0, 0);
 8000520:	2100      	movs	r1, #0
 8000522:	2000      	movs	r0, #0
 8000524:	f003 f8e4 	bl	80036f0 <bsp_mb_discrete_input_set>
	bsp_mb_discrete_input_set(0, 1);
 8000528:	2101      	movs	r1, #1
 800052a:	2000      	movs	r0, #0
 800052c:	f003 f8e0 	bl	80036f0 <bsp_mb_discrete_input_set>

	// Update input register
	bsp_mb_input_reg_set(0, 1);
 8000530:	2101      	movs	r1, #1
 8000532:	2000      	movs	r0, #0
 8000534:	f003 f8f4 	bl	8003720 <bsp_mb_input_reg_set>
	bsp_mb_input_reg_set(1, 2);
 8000538:	2102      	movs	r1, #2
 800053a:	2001      	movs	r0, #1
 800053c:	f003 f8f0 	bl	8003720 <bsp_mb_input_reg_set>
	bsp_mb_input_reg_set(2, 3);
 8000540:	2103      	movs	r1, #3
 8000542:	2002      	movs	r0, #2
 8000544:	f003 f8ec 	bl	8003720 <bsp_mb_input_reg_set>
	bsp_mb_input_reg_set(3, 4);
 8000548:	2104      	movs	r1, #4
 800054a:	2003      	movs	r0, #3
 800054c:	f003 f8e8 	bl	8003720 <bsp_mb_input_reg_set>

	// Update holding register
	bsp_mb_holding_reg_set(0, 5);
 8000550:	2105      	movs	r1, #5
 8000552:	2000      	movs	r0, #0
 8000554:	f003 f8fc 	bl	8003750 <bsp_mb_holding_reg_set>
	bsp_mb_holding_reg_set(1, 6);
 8000558:	2106      	movs	r1, #6
 800055a:	2001      	movs	r0, #1
 800055c:	f003 f8f8 	bl	8003750 <bsp_mb_holding_reg_set>
	bsp_mb_holding_reg_set(2, 7);
 8000560:	2107      	movs	r1, #7
 8000562:	2002      	movs	r0, #2
 8000564:	f003 f8f4 	bl	8003750 <bsp_mb_holding_reg_set>
	bsp_mb_holding_reg_set(3, 8);
 8000568:	2108      	movs	r1, #8
 800056a:	2003      	movs	r0, #3
 800056c:	f003 f8f0 	bl	8003750 <bsp_mb_holding_reg_set>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000570:	e7fe      	b.n	8000570 <main+0xa0>

08000572 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	b096      	sub	sp, #88	; 0x58
 8000576:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	2244      	movs	r2, #68	; 0x44
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f003 fd37 	bl	8003ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000586:	463b      	mov	r3, r7
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000594:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000598:	f000 fd74 	bl	8001084 <HAL_PWREx_ControlVoltageScaling>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005a2:	f000 f92d 	bl	8000800 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a6:	2301      	movs	r3, #1
 80005a8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005aa:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005ae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b0:	2302      	movs	r3, #2
 80005b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b4:	2303      	movs	r3, #3
 80005b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005b8:	2301      	movs	r3, #1
 80005ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80005bc:	2314      	movs	r3, #20
 80005be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005c0:	2307      	movs	r3, #7
 80005c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 fdad 	bl	8001130 <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005dc:	f000 f910 	bl	8000800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	230f      	movs	r3, #15
 80005e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e4:	2303      	movs	r3, #3
 80005e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f4:	463b      	mov	r3, r7
 80005f6:	2104      	movs	r1, #4
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 f9ad 	bl	8001958 <HAL_RCC_ClockConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000604:	f000 f8fc 	bl	8000800 <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	3758      	adds	r7, #88	; 0x58
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000616:	f107 0310 	add.w	r3, r7, #16
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800062e:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <MX_TIM2_Init+0x98>)
 8000630:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000634:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80;
 8000636:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <MX_TIM2_Init+0x98>)
 8000638:	2250      	movs	r2, #80	; 0x50
 800063a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800063c:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <MX_TIM2_Init+0x98>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 8000642:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <MX_TIM2_Init+0x98>)
 8000644:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000648:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800064a:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <MX_TIM2_Init+0x98>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <MX_TIM2_Init+0x98>)
 8000652:	2200      	movs	r2, #0
 8000654:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000656:	4814      	ldr	r0, [pc, #80]	; (80006a8 <MX_TIM2_Init+0x98>)
 8000658:	f001 fe8a 	bl	8002370 <HAL_TIM_Base_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000662:	f000 f8cd 	bl	8000800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800066c:	f107 0310 	add.w	r3, r7, #16
 8000670:	4619      	mov	r1, r3
 8000672:	480d      	ldr	r0, [pc, #52]	; (80006a8 <MX_TIM2_Init+0x98>)
 8000674:	f001 ff28 	bl	80024c8 <HAL_TIM_ConfigClockSource>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800067e:	f000 f8bf 	bl	8000800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	4619      	mov	r1, r3
 800068e:	4806      	ldr	r0, [pc, #24]	; (80006a8 <MX_TIM2_Init+0x98>)
 8000690:	f002 f8e2 	bl	8002858 <HAL_TIMEx_MasterConfigSynchronization>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800069a:	f000 f8b1 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	3720      	adds	r7, #32
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000028 	.word	0x20000028

080006ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006b2:	4a15      	ldr	r2, [pc, #84]	; (8000708 <MX_USART1_UART_Init+0x5c>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006f0:	f002 f918 	bl	8002924 <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006fa:	f000 f881 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000074 	.word	0x20000074
 8000708:	40013800 	.word	0x40013800

0800070c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000712:	4a15      	ldr	r2, [pc, #84]	; (8000768 <MX_USART2_UART_Init+0x5c>)
 8000714:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_USART2_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_USART2_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_USART2_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000750:	f002 f8e8 	bl	8002924 <HAL_UART_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800075a:	f000 f851 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000f8 	.word	0x200000f8
 8000768:	40004400 	.word	0x40004400

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <MX_GPIO_Init+0x8c>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4a1c      	ldr	r2, [pc, #112]	; (80007f8 <MX_GPIO_Init+0x8c>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_GPIO_Init+0x8c>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_GPIO_Init+0x8c>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	4a16      	ldr	r2, [pc, #88]	; (80007f8 <MX_GPIO_Init+0x8c>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_GPIO_Init+0x8c>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_GPIO_Init+0x8c>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	4a10      	ldr	r2, [pc, #64]	; (80007f8 <MX_GPIO_Init+0x8c>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_GPIO_Init+0x8c>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2108      	movs	r1, #8
 80007ce:	480b      	ldr	r0, [pc, #44]	; (80007fc <MX_GPIO_Init+0x90>)
 80007d0:	f000 fc32 	bl	8001038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80007d4:	2308      	movs	r3, #8
 80007d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	4619      	mov	r1, r3
 80007ea:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_GPIO_Init+0x90>)
 80007ec:	f000 faba 	bl	8000d64 <HAL_GPIO_Init>

}
 80007f0:	bf00      	nop
 80007f2:	3720      	adds	r7, #32
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40021000 	.word	0x40021000
 80007fc:	48000400 	.word	0x48000400

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	e7fe      	b.n	8000808 <Error_Handler+0x8>
	...

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <HAL_MspInit+0x44>)
 8000814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000816:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <HAL_MspInit+0x44>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6613      	str	r3, [r2, #96]	; 0x60
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <HAL_MspInit+0x44>)
 8000820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <HAL_MspInit+0x44>)
 800082c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800082e:	4a08      	ldr	r2, [pc, #32]	; (8000850 <HAL_MspInit+0x44>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000834:	6593      	str	r3, [r2, #88]	; 0x58
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_MspInit+0x44>)
 8000838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000

08000854 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000864:	d10b      	bne.n	800087e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <HAL_TIM_Base_MspInit+0x38>)
 8000868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086a:	4a08      	ldr	r2, [pc, #32]	; (800088c <HAL_TIM_Base_MspInit+0x38>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6593      	str	r3, [r2, #88]	; 0x58
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_TIM_Base_MspInit+0x38>)
 8000874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800087e:	bf00      	nop
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000

08000890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b0a0      	sub	sp, #128	; 0x80
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a8:	f107 0318 	add.w	r3, r7, #24
 80008ac:	2254      	movs	r2, #84	; 0x54
 80008ae:	2100      	movs	r1, #0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f003 fb9f 	bl	8003ff4 <memset>
  if(huart->Instance==USART1)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a47      	ldr	r2, [pc, #284]	; (80009d8 <HAL_UART_MspInit+0x148>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d138      	bne.n	8000932 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008c0:	2301      	movs	r3, #1
 80008c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008c4:	2300      	movs	r3, #0
 80008c6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c8:	f107 0318 	add.w	r3, r7, #24
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 fa67 	bl	8001da0 <HAL_RCCEx_PeriphCLKConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008d8:	f7ff ff92 	bl	8000800 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008dc:	4b3f      	ldr	r3, [pc, #252]	; (80009dc <HAL_UART_MspInit+0x14c>)
 80008de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e0:	4a3e      	ldr	r2, [pc, #248]	; (80009dc <HAL_UART_MspInit+0x14c>)
 80008e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e6:	6613      	str	r3, [r2, #96]	; 0x60
 80008e8:	4b3c      	ldr	r3, [pc, #240]	; (80009dc <HAL_UART_MspInit+0x14c>)
 80008ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f4:	4b39      	ldr	r3, [pc, #228]	; (80009dc <HAL_UART_MspInit+0x14c>)
 80008f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f8:	4a38      	ldr	r2, [pc, #224]	; (80009dc <HAL_UART_MspInit+0x14c>)
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000900:	4b36      	ldr	r3, [pc, #216]	; (80009dc <HAL_UART_MspInit+0x14c>)
 8000902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800090c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000910:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091a:	2303      	movs	r3, #3
 800091c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800091e:	2307      	movs	r3, #7
 8000920:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000922:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000926:	4619      	mov	r1, r3
 8000928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092c:	f000 fa1a 	bl	8000d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000930:	e04d      	b.n	80009ce <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a2a      	ldr	r2, [pc, #168]	; (80009e0 <HAL_UART_MspInit+0x150>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d148      	bne.n	80009ce <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800093c:	2302      	movs	r3, #2
 800093e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000940:	2300      	movs	r3, #0
 8000942:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000944:	f107 0318 	add.w	r3, r7, #24
 8000948:	4618      	mov	r0, r3
 800094a:	f001 fa29 	bl	8001da0 <HAL_RCCEx_PeriphCLKConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8000954:	f7ff ff54 	bl	8000800 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000958:	4b20      	ldr	r3, [pc, #128]	; (80009dc <HAL_UART_MspInit+0x14c>)
 800095a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095c:	4a1f      	ldr	r2, [pc, #124]	; (80009dc <HAL_UART_MspInit+0x14c>)
 800095e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000962:	6593      	str	r3, [r2, #88]	; 0x58
 8000964:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <HAL_UART_MspInit+0x14c>)
 8000966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000970:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <HAL_UART_MspInit+0x14c>)
 8000972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000974:	4a19      	ldr	r2, [pc, #100]	; (80009dc <HAL_UART_MspInit+0x14c>)
 8000976:	f043 0301 	orr.w	r3, r3, #1
 800097a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <HAL_UART_MspInit+0x14c>)
 800097e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000988:	2304      	movs	r3, #4
 800098a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000998:	2307      	movs	r3, #7
 800099a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009a0:	4619      	mov	r1, r3
 80009a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a6:	f000 f9dd 	bl	8000d64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80009aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80009bc:	2303      	movs	r3, #3
 80009be:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009c4:	4619      	mov	r1, r3
 80009c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ca:	f000 f9cb 	bl	8000d64 <HAL_GPIO_Init>
}
 80009ce:	bf00      	nop
 80009d0:	3780      	adds	r7, #128	; 0x80
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40013800 	.word	0x40013800
 80009dc:	40021000 	.word	0x40021000
 80009e0:	40004400 	.word	0x40004400

080009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <NMI_Handler+0x4>

080009ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <HardFault_Handler+0x4>

080009f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <MemManage_Handler+0x4>

080009f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <BusFault_Handler+0x4>

080009fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <UsageFault_Handler+0x4>

08000a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a30:	f000 f892 	bl	8000b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <SystemInit+0x20>)
 8000a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a42:	4a05      	ldr	r2, [pc, #20]	; (8000a58 <SystemInit+0x20>)
 8000a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <Reset_Handler>:
 8000a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a94 <LoopForever+0x2>
 8000a60:	f7ff ffea 	bl	8000a38 <SystemInit>
 8000a64:	480c      	ldr	r0, [pc, #48]	; (8000a98 <LoopForever+0x6>)
 8000a66:	490d      	ldr	r1, [pc, #52]	; (8000a9c <LoopForever+0xa>)
 8000a68:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <LoopForever+0xe>)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e002      	b.n	8000a74 <LoopCopyDataInit>

08000a6e <CopyDataInit>:
 8000a6e:	58d4      	ldr	r4, [r2, r3]
 8000a70:	50c4      	str	r4, [r0, r3]
 8000a72:	3304      	adds	r3, #4

08000a74 <LoopCopyDataInit>:
 8000a74:	18c4      	adds	r4, r0, r3
 8000a76:	428c      	cmp	r4, r1
 8000a78:	d3f9      	bcc.n	8000a6e <CopyDataInit>
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <LoopForever+0x12>)
 8000a7c:	4c0a      	ldr	r4, [pc, #40]	; (8000aa8 <LoopForever+0x16>)
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e001      	b.n	8000a86 <LoopFillZerobss>

08000a82 <FillZerobss>:
 8000a82:	6013      	str	r3, [r2, #0]
 8000a84:	3204      	adds	r2, #4

08000a86 <LoopFillZerobss>:
 8000a86:	42a2      	cmp	r2, r4
 8000a88:	d3fb      	bcc.n	8000a82 <FillZerobss>
 8000a8a:	f003 fa8f 	bl	8003fac <__libc_init_array>
 8000a8e:	f7ff fd1f 	bl	80004d0 <main>

08000a92 <LoopForever>:
 8000a92:	e7fe      	b.n	8000a92 <LoopForever>
 8000a94:	20010000 	.word	0x20010000
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	2000000c 	.word	0x2000000c
 8000aa0:	08004074 	.word	0x08004074
 8000aa4:	2000000c 	.word	0x2000000c
 8000aa8:	2000102c 	.word	0x2000102c

08000aac <ADC1_IRQHandler>:
 8000aac:	e7fe      	b.n	8000aac <ADC1_IRQHandler>

08000aae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab8:	2003      	movs	r0, #3
 8000aba:	f000 f91f 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f000 f80e 	bl	8000ae0 <HAL_InitTick>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d002      	beq.n	8000ad0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	71fb      	strb	r3, [r7, #7]
 8000ace:	e001      	b.n	8000ad4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ad0:	f7ff fe9c 	bl	800080c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000aec:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <HAL_InitTick+0x6c>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d023      	beq.n	8000b3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_InitTick+0x70>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <HAL_InitTick+0x6c>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f91d 	bl	8000d4a <HAL_SYSTICK_Config>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d10f      	bne.n	8000b36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b0f      	cmp	r3, #15
 8000b1a:	d809      	bhi.n	8000b30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	f000 f8f5 	bl	8000d12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b28:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <HAL_InitTick+0x74>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6013      	str	r3, [r2, #0]
 8000b2e:	e007      	b.n	8000b40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b30:	2301      	movs	r3, #1
 8000b32:	73fb      	strb	r3, [r7, #15]
 8000b34:	e004      	b.n	8000b40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	73fb      	strb	r3, [r7, #15]
 8000b3a:	e001      	b.n	8000b40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	20000000 	.word	0x20000000
 8000b54:	20000004 	.word	0x20000004

08000b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_IncTick+0x20>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_IncTick+0x24>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <HAL_IncTick+0x24>)
 8000b6a:	6013      	str	r3, [r2, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	2000017c 	.word	0x2000017c

08000b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return uwTick;
 8000b84:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <HAL_GetTick+0x14>)
 8000b86:	681b      	ldr	r3, [r3, #0]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	2000017c 	.word	0x2000017c

08000b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bca:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	60d3      	str	r3, [r2, #12]
}
 8000bd0:	bf00      	nop
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	0a1b      	lsrs	r3, r3, #8
 8000bea:	f003 0307 	and.w	r3, r3, #7
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	db0a      	blt.n	8000c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	490c      	ldr	r1, [pc, #48]	; (8000c48 <__NVIC_SetPriority+0x4c>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	0112      	lsls	r2, r2, #4
 8000c1c:	b2d2      	uxtb	r2, r2
 8000c1e:	440b      	add	r3, r1
 8000c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c24:	e00a      	b.n	8000c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4908      	ldr	r1, [pc, #32]	; (8000c4c <__NVIC_SetPriority+0x50>)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	3b04      	subs	r3, #4
 8000c34:	0112      	lsls	r2, r2, #4
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	440b      	add	r3, r1
 8000c3a:	761a      	strb	r2, [r3, #24]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	; 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	bf28      	it	cs
 8000c6e:	2304      	movcs	r3, #4
 8000c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3304      	adds	r3, #4
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d902      	bls.n	8000c80 <NVIC_EncodePriority+0x30>
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	e000      	b.n	8000c82 <NVIC_EncodePriority+0x32>
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43d9      	mvns	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	4313      	orrs	r3, r2
         );
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	; 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc8:	d301      	bcc.n	8000cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00f      	b.n	8000cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <SysTick_Config+0x40>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f7ff ff8e 	bl	8000bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ff47 	bl	8000b98 <__NVIC_SetPriorityGrouping>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d24:	f7ff ff5c 	bl	8000be0 <__NVIC_GetPriorityGrouping>
 8000d28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff8e 	bl	8000c50 <NVIC_EncodePriority>
 8000d34:	4602      	mov	r2, r0
 8000d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff5d 	bl	8000bfc <__NVIC_SetPriority>
}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ffb0 	bl	8000cb8 <SysTick_Config>
 8000d58:	4603      	mov	r3, r0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b087      	sub	sp, #28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d72:	e148      	b.n	8001006 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	2101      	movs	r1, #1
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 813a 	beq.w	8001000 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0303 	and.w	r3, r3, #3
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d005      	beq.n	8000da4 <HAL_GPIO_Init+0x40>
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d130      	bne.n	8000e06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	2203      	movs	r2, #3
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	68da      	ldr	r2, [r3, #12]
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dda:	2201      	movs	r2, #1
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4013      	ands	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	091b      	lsrs	r3, r3, #4
 8000df0:	f003 0201 	and.w	r2, r3, #1
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	2b03      	cmp	r3, #3
 8000e10:	d017      	beq.n	8000e42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4013      	ands	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 0303 	and.w	r3, r3, #3
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d123      	bne.n	8000e96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	08da      	lsrs	r2, r3, #3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3208      	adds	r2, #8
 8000e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	220f      	movs	r2, #15
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	691a      	ldr	r2, [r3, #16]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	f003 0307 	and.w	r3, r3, #7
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	08da      	lsrs	r2, r3, #3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3208      	adds	r2, #8
 8000e90:	6939      	ldr	r1, [r7, #16]
 8000e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0203 	and.w	r2, r3, #3
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f000 8094 	beq.w	8001000 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed8:	4b52      	ldr	r3, [pc, #328]	; (8001024 <HAL_GPIO_Init+0x2c0>)
 8000eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000edc:	4a51      	ldr	r2, [pc, #324]	; (8001024 <HAL_GPIO_Init+0x2c0>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6613      	str	r3, [r2, #96]	; 0x60
 8000ee4:	4b4f      	ldr	r3, [pc, #316]	; (8001024 <HAL_GPIO_Init+0x2c0>)
 8000ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ef0:	4a4d      	ldr	r2, [pc, #308]	; (8001028 <HAL_GPIO_Init+0x2c4>)
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	089b      	lsrs	r3, r3, #2
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	220f      	movs	r2, #15
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f1a:	d00d      	beq.n	8000f38 <HAL_GPIO_Init+0x1d4>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a43      	ldr	r2, [pc, #268]	; (800102c <HAL_GPIO_Init+0x2c8>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d007      	beq.n	8000f34 <HAL_GPIO_Init+0x1d0>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a42      	ldr	r2, [pc, #264]	; (8001030 <HAL_GPIO_Init+0x2cc>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d101      	bne.n	8000f30 <HAL_GPIO_Init+0x1cc>
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	e004      	b.n	8000f3a <HAL_GPIO_Init+0x1d6>
 8000f30:	2307      	movs	r3, #7
 8000f32:	e002      	b.n	8000f3a <HAL_GPIO_Init+0x1d6>
 8000f34:	2301      	movs	r3, #1
 8000f36:	e000      	b.n	8000f3a <HAL_GPIO_Init+0x1d6>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	f002 0203 	and.w	r2, r2, #3
 8000f40:	0092      	lsls	r2, r2, #2
 8000f42:	4093      	lsls	r3, r2
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f4a:	4937      	ldr	r1, [pc, #220]	; (8001028 <HAL_GPIO_Init+0x2c4>)
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	089b      	lsrs	r3, r3, #2
 8000f50:	3302      	adds	r3, #2
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f58:	4b36      	ldr	r3, [pc, #216]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f7c:	4a2d      	ldr	r2, [pc, #180]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f82:	4b2c      	ldr	r3, [pc, #176]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fa6:	4a23      	ldr	r2, [pc, #140]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fac:	4b21      	ldr	r3, [pc, #132]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fd0:	4a18      	ldr	r2, [pc, #96]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ffa:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	3301      	adds	r3, #1
 8001004:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	fa22 f303 	lsr.w	r3, r2, r3
 8001010:	2b00      	cmp	r3, #0
 8001012:	f47f aeaf 	bne.w	8000d74 <HAL_GPIO_Init+0x10>
  }
}
 8001016:	bf00      	nop
 8001018:	bf00      	nop
 800101a:	371c      	adds	r7, #28
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	40021000 	.word	0x40021000
 8001028:	40010000 	.word	0x40010000
 800102c:	48000400 	.word	0x48000400
 8001030:	48000800 	.word	0x48000800
 8001034:	40010400 	.word	0x40010400

08001038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
 8001044:	4613      	mov	r3, r2
 8001046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001048:	787b      	ldrb	r3, [r7, #1]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800104e:	887a      	ldrh	r2, [r7, #2]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001054:	e002      	b.n	800105c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001056:	887a      	ldrh	r2, [r7, #2]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <HAL_PWREx_GetVoltageRange+0x18>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40007000 	.word	0x40007000

08001084 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001092:	d130      	bne.n	80010f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001094:	4b23      	ldr	r3, [pc, #140]	; (8001124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800109c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010a0:	d038      	beq.n	8001114 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a2:	4b20      	ldr	r3, [pc, #128]	; (8001124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010aa:	4a1e      	ldr	r2, [pc, #120]	; (8001124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010b2:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2232      	movs	r2, #50	; 0x32
 80010b8:	fb02 f303 	mul.w	r3, r2, r3
 80010bc:	4a1b      	ldr	r2, [pc, #108]	; (800112c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010be:	fba2 2303 	umull	r2, r3, r2, r3
 80010c2:	0c9b      	lsrs	r3, r3, #18
 80010c4:	3301      	adds	r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010c8:	e002      	b.n	80010d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	3b01      	subs	r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010dc:	d102      	bne.n	80010e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1f2      	bne.n	80010ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010f0:	d110      	bne.n	8001114 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e00f      	b.n	8001116 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001102:	d007      	beq.n	8001114 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800110c:	4a05      	ldr	r2, [pc, #20]	; (8001124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800110e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001112:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40007000 	.word	0x40007000
 8001128:	20000000 	.word	0x20000000
 800112c:	431bde83 	.word	0x431bde83

08001130 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d102      	bne.n	8001144 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	f000 bc02 	b.w	8001948 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001144:	4b96      	ldr	r3, [pc, #600]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f003 030c 	and.w	r3, r3, #12
 800114c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800114e:	4b94      	ldr	r3, [pc, #592]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0310 	and.w	r3, r3, #16
 8001160:	2b00      	cmp	r3, #0
 8001162:	f000 80e4 	beq.w	800132e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d007      	beq.n	800117c <HAL_RCC_OscConfig+0x4c>
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	2b0c      	cmp	r3, #12
 8001170:	f040 808b 	bne.w	800128a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	2b01      	cmp	r3, #1
 8001178:	f040 8087 	bne.w	800128a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800117c:	4b88      	ldr	r3, [pc, #544]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d005      	beq.n	8001194 <HAL_RCC_OscConfig+0x64>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e3d9      	b.n	8001948 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a1a      	ldr	r2, [r3, #32]
 8001198:	4b81      	ldr	r3, [pc, #516]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0308 	and.w	r3, r3, #8
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d004      	beq.n	80011ae <HAL_RCC_OscConfig+0x7e>
 80011a4:	4b7e      	ldr	r3, [pc, #504]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011ac:	e005      	b.n	80011ba <HAL_RCC_OscConfig+0x8a>
 80011ae:	4b7c      	ldr	r3, [pc, #496]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 80011b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011b4:	091b      	lsrs	r3, r3, #4
 80011b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d223      	bcs.n	8001206 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 fd8c 	bl	8001ce0 <RCC_SetFlashLatencyFromMSIRange>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e3ba      	b.n	8001948 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011d2:	4b73      	ldr	r3, [pc, #460]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a72      	ldr	r2, [pc, #456]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 80011d8:	f043 0308 	orr.w	r3, r3, #8
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	4b70      	ldr	r3, [pc, #448]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	496d      	ldr	r1, [pc, #436]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 80011ec:	4313      	orrs	r3, r2
 80011ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011f0:	4b6b      	ldr	r3, [pc, #428]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	021b      	lsls	r3, r3, #8
 80011fe:	4968      	ldr	r1, [pc, #416]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001200:	4313      	orrs	r3, r2
 8001202:	604b      	str	r3, [r1, #4]
 8001204:	e025      	b.n	8001252 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001206:	4b66      	ldr	r3, [pc, #408]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a65      	ldr	r2, [pc, #404]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 800120c:	f043 0308 	orr.w	r3, r3, #8
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	4b63      	ldr	r3, [pc, #396]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a1b      	ldr	r3, [r3, #32]
 800121e:	4960      	ldr	r1, [pc, #384]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001220:	4313      	orrs	r3, r2
 8001222:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001224:	4b5e      	ldr	r3, [pc, #376]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	69db      	ldr	r3, [r3, #28]
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	495b      	ldr	r1, [pc, #364]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001234:	4313      	orrs	r3, r2
 8001236:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d109      	bne.n	8001252 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	4618      	mov	r0, r3
 8001244:	f000 fd4c 	bl	8001ce0 <RCC_SetFlashLatencyFromMSIRange>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e37a      	b.n	8001948 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001252:	f000 fc81 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 8001256:	4602      	mov	r2, r0
 8001258:	4b51      	ldr	r3, [pc, #324]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	091b      	lsrs	r3, r3, #4
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	4950      	ldr	r1, [pc, #320]	; (80013a4 <HAL_RCC_OscConfig+0x274>)
 8001264:	5ccb      	ldrb	r3, [r1, r3]
 8001266:	f003 031f 	and.w	r3, r3, #31
 800126a:	fa22 f303 	lsr.w	r3, r2, r3
 800126e:	4a4e      	ldr	r2, [pc, #312]	; (80013a8 <HAL_RCC_OscConfig+0x278>)
 8001270:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001272:	4b4e      	ldr	r3, [pc, #312]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fc32 	bl	8000ae0 <HAL_InitTick>
 800127c:	4603      	mov	r3, r0
 800127e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d052      	beq.n	800132c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	e35e      	b.n	8001948 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d032      	beq.n	80012f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001292:	4b43      	ldr	r3, [pc, #268]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a42      	ldr	r2, [pc, #264]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800129e:	f7ff fc6f 	bl	8000b80 <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012a6:	f7ff fc6b 	bl	8000b80 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e347      	b.n	8001948 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012b8:	4b39      	ldr	r3, [pc, #228]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0f0      	beq.n	80012a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012c4:	4b36      	ldr	r3, [pc, #216]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a35      	ldr	r2, [pc, #212]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 80012ca:	f043 0308 	orr.w	r3, r3, #8
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	4b33      	ldr	r3, [pc, #204]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	4930      	ldr	r1, [pc, #192]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012e2:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	492b      	ldr	r1, [pc, #172]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	604b      	str	r3, [r1, #4]
 80012f6:	e01a      	b.n	800132e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012f8:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a28      	ldr	r2, [pc, #160]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 80012fe:	f023 0301 	bic.w	r3, r3, #1
 8001302:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001304:	f7ff fc3c 	bl	8000b80 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800130c:	f7ff fc38 	bl	8000b80 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e314      	b.n	8001948 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800131e:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1f0      	bne.n	800130c <HAL_RCC_OscConfig+0x1dc>
 800132a:	e000      	b.n	800132e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800132c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	2b00      	cmp	r3, #0
 8001338:	d073      	beq.n	8001422 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	2b08      	cmp	r3, #8
 800133e:	d005      	beq.n	800134c <HAL_RCC_OscConfig+0x21c>
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	2b0c      	cmp	r3, #12
 8001344:	d10e      	bne.n	8001364 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	2b03      	cmp	r3, #3
 800134a:	d10b      	bne.n	8001364 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d063      	beq.n	8001420 <HAL_RCC_OscConfig+0x2f0>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d15f      	bne.n	8001420 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e2f1      	b.n	8001948 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800136c:	d106      	bne.n	800137c <HAL_RCC_OscConfig+0x24c>
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	e025      	b.n	80013c8 <HAL_RCC_OscConfig+0x298>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001384:	d114      	bne.n	80013b0 <HAL_RCC_OscConfig+0x280>
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 800138c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	4b03      	ldr	r3, [pc, #12]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a02      	ldr	r2, [pc, #8]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	e013      	b.n	80013c8 <HAL_RCC_OscConfig+0x298>
 80013a0:	40021000 	.word	0x40021000
 80013a4:	0800401c 	.word	0x0800401c
 80013a8:	20000000 	.word	0x20000000
 80013ac:	20000004 	.word	0x20000004
 80013b0:	4ba0      	ldr	r3, [pc, #640]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a9f      	ldr	r2, [pc, #636]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 80013b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	4b9d      	ldr	r3, [pc, #628]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a9c      	ldr	r2, [pc, #624]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 80013c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d013      	beq.n	80013f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d0:	f7ff fbd6 	bl	8000b80 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d8:	f7ff fbd2 	bl	8000b80 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b64      	cmp	r3, #100	; 0x64
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e2ae      	b.n	8001948 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013ea:	4b92      	ldr	r3, [pc, #584]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0x2a8>
 80013f6:	e014      	b.n	8001422 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f8:	f7ff fbc2 	bl	8000b80 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001400:	f7ff fbbe 	bl	8000b80 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b64      	cmp	r3, #100	; 0x64
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e29a      	b.n	8001948 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001412:	4b88      	ldr	r3, [pc, #544]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0x2d0>
 800141e:	e000      	b.n	8001422 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d060      	beq.n	80014f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	2b04      	cmp	r3, #4
 8001432:	d005      	beq.n	8001440 <HAL_RCC_OscConfig+0x310>
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	2b0c      	cmp	r3, #12
 8001438:	d119      	bne.n	800146e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	2b02      	cmp	r3, #2
 800143e:	d116      	bne.n	800146e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001440:	4b7c      	ldr	r3, [pc, #496]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001448:	2b00      	cmp	r3, #0
 800144a:	d005      	beq.n	8001458 <HAL_RCC_OscConfig+0x328>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d101      	bne.n	8001458 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e277      	b.n	8001948 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001458:	4b76      	ldr	r3, [pc, #472]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	061b      	lsls	r3, r3, #24
 8001466:	4973      	ldr	r1, [pc, #460]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800146c:	e040      	b.n	80014f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d023      	beq.n	80014be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001476:	4b6f      	ldr	r3, [pc, #444]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a6e      	ldr	r2, [pc, #440]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 800147c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001482:	f7ff fb7d 	bl	8000b80 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800148a:	f7ff fb79 	bl	8000b80 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e255      	b.n	8001948 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800149c:	4b65      	ldr	r3, [pc, #404]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0f0      	beq.n	800148a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a8:	4b62      	ldr	r3, [pc, #392]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	061b      	lsls	r3, r3, #24
 80014b6:	495f      	ldr	r1, [pc, #380]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	604b      	str	r3, [r1, #4]
 80014bc:	e018      	b.n	80014f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014be:	4b5d      	ldr	r3, [pc, #372]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a5c      	ldr	r2, [pc, #368]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 80014c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ca:	f7ff fb59 	bl	8000b80 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d2:	f7ff fb55 	bl	8000b80 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e231      	b.n	8001948 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014e4:	4b53      	ldr	r3, [pc, #332]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1f0      	bne.n	80014d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0308 	and.w	r3, r3, #8
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d03c      	beq.n	8001576 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	695b      	ldr	r3, [r3, #20]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d01c      	beq.n	800153e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001504:	4b4b      	ldr	r3, [pc, #300]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 8001506:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800150a:	4a4a      	ldr	r2, [pc, #296]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001514:	f7ff fb34 	bl	8000b80 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800151c:	f7ff fb30 	bl	8000b80 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e20c      	b.n	8001948 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800152e:	4b41      	ldr	r3, [pc, #260]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 8001530:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0ef      	beq.n	800151c <HAL_RCC_OscConfig+0x3ec>
 800153c:	e01b      	b.n	8001576 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800153e:	4b3d      	ldr	r3, [pc, #244]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 8001540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001544:	4a3b      	ldr	r2, [pc, #236]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 8001546:	f023 0301 	bic.w	r3, r3, #1
 800154a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154e:	f7ff fb17 	bl	8000b80 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001556:	f7ff fb13 	bl	8000b80 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e1ef      	b.n	8001948 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001568:	4b32      	ldr	r3, [pc, #200]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 800156a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1ef      	bne.n	8001556 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 80a6 	beq.w	80016d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001584:	2300      	movs	r3, #0
 8001586:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001588:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 800158a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d10d      	bne.n	80015b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001594:	4b27      	ldr	r3, [pc, #156]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 8001596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001598:	4a26      	ldr	r2, [pc, #152]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 800159a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800159e:	6593      	str	r3, [r2, #88]	; 0x58
 80015a0:	4b24      	ldr	r3, [pc, #144]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 80015a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ac:	2301      	movs	r3, #1
 80015ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b0:	4b21      	ldr	r3, [pc, #132]	; (8001638 <HAL_RCC_OscConfig+0x508>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d118      	bne.n	80015ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015bc:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <HAL_RCC_OscConfig+0x508>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a1d      	ldr	r2, [pc, #116]	; (8001638 <HAL_RCC_OscConfig+0x508>)
 80015c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015c8:	f7ff fada 	bl	8000b80 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d0:	f7ff fad6 	bl	8000b80 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e1b2      	b.n	8001948 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <HAL_RCC_OscConfig+0x508>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d108      	bne.n	8001608 <HAL_RCC_OscConfig+0x4d8>
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 80015f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015fc:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001606:	e029      	b.n	800165c <HAL_RCC_OscConfig+0x52c>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2b05      	cmp	r3, #5
 800160e:	d115      	bne.n	800163c <HAL_RCC_OscConfig+0x50c>
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 8001612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001616:	4a07      	ldr	r2, [pc, #28]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 8001618:	f043 0304 	orr.w	r3, r3, #4
 800161c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 8001622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001626:	4a03      	ldr	r2, [pc, #12]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001630:	e014      	b.n	800165c <HAL_RCC_OscConfig+0x52c>
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000
 8001638:	40007000 	.word	0x40007000
 800163c:	4b9a      	ldr	r3, [pc, #616]	; (80018a8 <HAL_RCC_OscConfig+0x778>)
 800163e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001642:	4a99      	ldr	r2, [pc, #612]	; (80018a8 <HAL_RCC_OscConfig+0x778>)
 8001644:	f023 0301 	bic.w	r3, r3, #1
 8001648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800164c:	4b96      	ldr	r3, [pc, #600]	; (80018a8 <HAL_RCC_OscConfig+0x778>)
 800164e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001652:	4a95      	ldr	r2, [pc, #596]	; (80018a8 <HAL_RCC_OscConfig+0x778>)
 8001654:	f023 0304 	bic.w	r3, r3, #4
 8001658:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d016      	beq.n	8001692 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001664:	f7ff fa8c 	bl	8000b80 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800166a:	e00a      	b.n	8001682 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800166c:	f7ff fa88 	bl	8000b80 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	f241 3288 	movw	r2, #5000	; 0x1388
 800167a:	4293      	cmp	r3, r2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e162      	b.n	8001948 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001682:	4b89      	ldr	r3, [pc, #548]	; (80018a8 <HAL_RCC_OscConfig+0x778>)
 8001684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0ed      	beq.n	800166c <HAL_RCC_OscConfig+0x53c>
 8001690:	e015      	b.n	80016be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001692:	f7ff fa75 	bl	8000b80 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001698:	e00a      	b.n	80016b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800169a:	f7ff fa71 	bl	8000b80 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e14b      	b.n	8001948 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016b0:	4b7d      	ldr	r3, [pc, #500]	; (80018a8 <HAL_RCC_OscConfig+0x778>)
 80016b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1ed      	bne.n	800169a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016be:	7ffb      	ldrb	r3, [r7, #31]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d105      	bne.n	80016d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c4:	4b78      	ldr	r3, [pc, #480]	; (80018a8 <HAL_RCC_OscConfig+0x778>)
 80016c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c8:	4a77      	ldr	r2, [pc, #476]	; (80018a8 <HAL_RCC_OscConfig+0x778>)
 80016ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0320 	and.w	r3, r3, #32
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d03c      	beq.n	8001756 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d01c      	beq.n	800171e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016e4:	4b70      	ldr	r3, [pc, #448]	; (80018a8 <HAL_RCC_OscConfig+0x778>)
 80016e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016ea:	4a6f      	ldr	r2, [pc, #444]	; (80018a8 <HAL_RCC_OscConfig+0x778>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f4:	f7ff fa44 	bl	8000b80 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016fc:	f7ff fa40 	bl	8000b80 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e11c      	b.n	8001948 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800170e:	4b66      	ldr	r3, [pc, #408]	; (80018a8 <HAL_RCC_OscConfig+0x778>)
 8001710:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0ef      	beq.n	80016fc <HAL_RCC_OscConfig+0x5cc>
 800171c:	e01b      	b.n	8001756 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800171e:	4b62      	ldr	r3, [pc, #392]	; (80018a8 <HAL_RCC_OscConfig+0x778>)
 8001720:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001724:	4a60      	ldr	r2, [pc, #384]	; (80018a8 <HAL_RCC_OscConfig+0x778>)
 8001726:	f023 0301 	bic.w	r3, r3, #1
 800172a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172e:	f7ff fa27 	bl	8000b80 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001736:	f7ff fa23 	bl	8000b80 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e0ff      	b.n	8001948 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001748:	4b57      	ldr	r3, [pc, #348]	; (80018a8 <HAL_RCC_OscConfig+0x778>)
 800174a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1ef      	bne.n	8001736 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 80f3 	beq.w	8001946 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001764:	2b02      	cmp	r3, #2
 8001766:	f040 80c9 	bne.w	80018fc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800176a:	4b4f      	ldr	r3, [pc, #316]	; (80018a8 <HAL_RCC_OscConfig+0x778>)
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	f003 0203 	and.w	r2, r3, #3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177a:	429a      	cmp	r2, r3
 800177c:	d12c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001788:	3b01      	subs	r3, #1
 800178a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800178c:	429a      	cmp	r2, r3
 800178e:	d123      	bne.n	80017d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800179a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800179c:	429a      	cmp	r2, r3
 800179e:	d11b      	bne.n	80017d8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d113      	bne.n	80017d8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ba:	085b      	lsrs	r3, r3, #1
 80017bc:	3b01      	subs	r3, #1
 80017be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d109      	bne.n	80017d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	085b      	lsrs	r3, r3, #1
 80017d0:	3b01      	subs	r3, #1
 80017d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d06b      	beq.n	80018b0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	2b0c      	cmp	r3, #12
 80017dc:	d062      	beq.n	80018a4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017de:	4b32      	ldr	r3, [pc, #200]	; (80018a8 <HAL_RCC_OscConfig+0x778>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e0ac      	b.n	8001948 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017ee:	4b2e      	ldr	r3, [pc, #184]	; (80018a8 <HAL_RCC_OscConfig+0x778>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a2d      	ldr	r2, [pc, #180]	; (80018a8 <HAL_RCC_OscConfig+0x778>)
 80017f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017fa:	f7ff f9c1 	bl	8000b80 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001802:	f7ff f9bd 	bl	8000b80 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e099      	b.n	8001948 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001814:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <HAL_RCC_OscConfig+0x778>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1f0      	bne.n	8001802 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001820:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <HAL_RCC_OscConfig+0x778>)
 8001822:	68da      	ldr	r2, [r3, #12]
 8001824:	4b21      	ldr	r3, [pc, #132]	; (80018ac <HAL_RCC_OscConfig+0x77c>)
 8001826:	4013      	ands	r3, r2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001830:	3a01      	subs	r2, #1
 8001832:	0112      	lsls	r2, r2, #4
 8001834:	4311      	orrs	r1, r2
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800183a:	0212      	lsls	r2, r2, #8
 800183c:	4311      	orrs	r1, r2
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001842:	0852      	lsrs	r2, r2, #1
 8001844:	3a01      	subs	r2, #1
 8001846:	0552      	lsls	r2, r2, #21
 8001848:	4311      	orrs	r1, r2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800184e:	0852      	lsrs	r2, r2, #1
 8001850:	3a01      	subs	r2, #1
 8001852:	0652      	lsls	r2, r2, #25
 8001854:	4311      	orrs	r1, r2
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800185a:	06d2      	lsls	r2, r2, #27
 800185c:	430a      	orrs	r2, r1
 800185e:	4912      	ldr	r1, [pc, #72]	; (80018a8 <HAL_RCC_OscConfig+0x778>)
 8001860:	4313      	orrs	r3, r2
 8001862:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001864:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <HAL_RCC_OscConfig+0x778>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0f      	ldr	r2, [pc, #60]	; (80018a8 <HAL_RCC_OscConfig+0x778>)
 800186a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800186e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001870:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <HAL_RCC_OscConfig+0x778>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <HAL_RCC_OscConfig+0x778>)
 8001876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800187a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800187c:	f7ff f980 	bl	8000b80 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001884:	f7ff f97c 	bl	8000b80 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e058      	b.n	8001948 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001896:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <HAL_RCC_OscConfig+0x778>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018a2:	e050      	b.n	8001946 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e04f      	b.n	8001948 <HAL_RCC_OscConfig+0x818>
 80018a8:	40021000 	.word	0x40021000
 80018ac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018b0:	4b27      	ldr	r3, [pc, #156]	; (8001950 <HAL_RCC_OscConfig+0x820>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d144      	bne.n	8001946 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018bc:	4b24      	ldr	r3, [pc, #144]	; (8001950 <HAL_RCC_OscConfig+0x820>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a23      	ldr	r2, [pc, #140]	; (8001950 <HAL_RCC_OscConfig+0x820>)
 80018c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018c8:	4b21      	ldr	r3, [pc, #132]	; (8001950 <HAL_RCC_OscConfig+0x820>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	4a20      	ldr	r2, [pc, #128]	; (8001950 <HAL_RCC_OscConfig+0x820>)
 80018ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018d4:	f7ff f954 	bl	8000b80 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018dc:	f7ff f950 	bl	8000b80 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e02c      	b.n	8001948 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <HAL_RCC_OscConfig+0x820>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0x7ac>
 80018fa:	e024      	b.n	8001946 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	2b0c      	cmp	r3, #12
 8001900:	d01f      	beq.n	8001942 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <HAL_RCC_OscConfig+0x820>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a12      	ldr	r2, [pc, #72]	; (8001950 <HAL_RCC_OscConfig+0x820>)
 8001908:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800190c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190e:	f7ff f937 	bl	8000b80 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001916:	f7ff f933 	bl	8000b80 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e00f      	b.n	8001948 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_RCC_OscConfig+0x820>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1f0      	bne.n	8001916 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_RCC_OscConfig+0x820>)
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	4905      	ldr	r1, [pc, #20]	; (8001950 <HAL_RCC_OscConfig+0x820>)
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_RCC_OscConfig+0x824>)
 800193c:	4013      	ands	r3, r2
 800193e:	60cb      	str	r3, [r1, #12]
 8001940:	e001      	b.n	8001946 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3720      	adds	r7, #32
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40021000 	.word	0x40021000
 8001954:	feeefffc 	.word	0xfeeefffc

08001958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e0e7      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800196c:	4b75      	ldr	r3, [pc, #468]	; (8001b44 <HAL_RCC_ClockConfig+0x1ec>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d910      	bls.n	800199c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197a:	4b72      	ldr	r3, [pc, #456]	; (8001b44 <HAL_RCC_ClockConfig+0x1ec>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 0207 	bic.w	r2, r3, #7
 8001982:	4970      	ldr	r1, [pc, #448]	; (8001b44 <HAL_RCC_ClockConfig+0x1ec>)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800198a:	4b6e      	ldr	r3, [pc, #440]	; (8001b44 <HAL_RCC_ClockConfig+0x1ec>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0cf      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d010      	beq.n	80019ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	4b66      	ldr	r3, [pc, #408]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d908      	bls.n	80019ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b8:	4b63      	ldr	r3, [pc, #396]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	4960      	ldr	r1, [pc, #384]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d04c      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d107      	bne.n	80019ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019de:	4b5a      	ldr	r3, [pc, #360]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d121      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e0a6      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d107      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f6:	4b54      	ldr	r3, [pc, #336]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d115      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e09a      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d107      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a0e:	4b4e      	ldr	r3, [pc, #312]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d109      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e08e      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a1e:	4b4a      	ldr	r3, [pc, #296]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e086      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a2e:	4b46      	ldr	r3, [pc, #280]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f023 0203 	bic.w	r2, r3, #3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4943      	ldr	r1, [pc, #268]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a40:	f7ff f89e 	bl	8000b80 <HAL_GetTick>
 8001a44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a46:	e00a      	b.n	8001a5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a48:	f7ff f89a 	bl	8000b80 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e06e      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5e:	4b3a      	ldr	r3, [pc, #232]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 020c 	and.w	r2, r3, #12
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d1eb      	bne.n	8001a48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d010      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	4b31      	ldr	r3, [pc, #196]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d208      	bcs.n	8001a9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a8c:	4b2e      	ldr	r3, [pc, #184]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	492b      	ldr	r1, [pc, #172]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a9e:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <HAL_RCC_ClockConfig+0x1ec>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d210      	bcs.n	8001ace <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aac:	4b25      	ldr	r3, [pc, #148]	; (8001b44 <HAL_RCC_ClockConfig+0x1ec>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f023 0207 	bic.w	r2, r3, #7
 8001ab4:	4923      	ldr	r1, [pc, #140]	; (8001b44 <HAL_RCC_ClockConfig+0x1ec>)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001abc:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <HAL_RCC_ClockConfig+0x1ec>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d001      	beq.n	8001ace <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e036      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d008      	beq.n	8001aec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ada:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	4918      	ldr	r1, [pc, #96]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d009      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001af8:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	4910      	ldr	r1, [pc, #64]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b0c:	f000 f824 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 8001b10:	4602      	mov	r2, r0
 8001b12:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	091b      	lsrs	r3, r3, #4
 8001b18:	f003 030f 	and.w	r3, r3, #15
 8001b1c:	490b      	ldr	r1, [pc, #44]	; (8001b4c <HAL_RCC_ClockConfig+0x1f4>)
 8001b1e:	5ccb      	ldrb	r3, [r1, r3]
 8001b20:	f003 031f 	and.w	r3, r3, #31
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
 8001b28:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <HAL_RCC_ClockConfig+0x1f8>)
 8001b2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <HAL_RCC_ClockConfig+0x1fc>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe ffd5 	bl	8000ae0 <HAL_InitTick>
 8001b36:	4603      	mov	r3, r0
 8001b38:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b3a:	7afb      	ldrb	r3, [r7, #11]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40022000 	.word	0x40022000
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	0800401c 	.word	0x0800401c
 8001b50:	20000000 	.word	0x20000000
 8001b54:	20000004 	.word	0x20000004

08001b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	; 0x24
 8001b5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b66:	4b3e      	ldr	r3, [pc, #248]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b70:	4b3b      	ldr	r3, [pc, #236]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d005      	beq.n	8001b8c <HAL_RCC_GetSysClockFreq+0x34>
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	2b0c      	cmp	r3, #12
 8001b84:	d121      	bne.n	8001bca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d11e      	bne.n	8001bca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b8c:	4b34      	ldr	r3, [pc, #208]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d107      	bne.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b98:	4b31      	ldr	r3, [pc, #196]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b9e:	0a1b      	lsrs	r3, r3, #8
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	e005      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ba8:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	091b      	lsrs	r3, r3, #4
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bb4:	4a2b      	ldr	r2, [pc, #172]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10d      	bne.n	8001be0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bc8:	e00a      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d102      	bne.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bd0:	4b25      	ldr	r3, [pc, #148]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bd2:	61bb      	str	r3, [r7, #24]
 8001bd4:	e004      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d101      	bne.n	8001be0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bdc:	4b23      	ldr	r3, [pc, #140]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x114>)
 8001bde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	2b0c      	cmp	r3, #12
 8001be4:	d134      	bne.n	8001c50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001be6:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d003      	beq.n	8001bfe <HAL_RCC_GetSysClockFreq+0xa6>
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d003      	beq.n	8001c04 <HAL_RCC_GetSysClockFreq+0xac>
 8001bfc:	e005      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c00:	617b      	str	r3, [r7, #20]
      break;
 8001c02:	e005      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c04:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x114>)
 8001c06:	617b      	str	r3, [r7, #20]
      break;
 8001c08:	e002      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	617b      	str	r3, [r7, #20]
      break;
 8001c0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	0a1b      	lsrs	r3, r3, #8
 8001c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	fb03 f202 	mul.w	r2, r3, r2
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c36:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	0e5b      	lsrs	r3, r3, #25
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	3301      	adds	r3, #1
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c50:	69bb      	ldr	r3, [r7, #24]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3724      	adds	r7, #36	; 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40021000 	.word	0x40021000
 8001c64:	08004034 	.word	0x08004034
 8001c68:	00f42400 	.word	0x00f42400
 8001c6c:	007a1200 	.word	0x007a1200

08001c70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000000 	.word	0x20000000

08001c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c8c:	f7ff fff0 	bl	8001c70 <HAL_RCC_GetHCLKFreq>
 8001c90:	4602      	mov	r2, r0
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	0a1b      	lsrs	r3, r3, #8
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	4904      	ldr	r1, [pc, #16]	; (8001cb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ca0:	f003 031f 	and.w	r3, r3, #31
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	0800402c 	.word	0x0800402c

08001cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cb8:	f7ff ffda 	bl	8001c70 <HAL_RCC_GetHCLKFreq>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	0adb      	lsrs	r3, r3, #11
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	4904      	ldr	r1, [pc, #16]	; (8001cdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cca:	5ccb      	ldrb	r3, [r1, r3]
 8001ccc:	f003 031f 	and.w	r3, r3, #31
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	0800402c 	.word	0x0800402c

08001ce0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ce8:	2300      	movs	r3, #0
 8001cea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cec:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cf8:	f7ff f9b6 	bl	8001068 <HAL_PWREx_GetVoltageRange>
 8001cfc:	6178      	str	r0, [r7, #20]
 8001cfe:	e014      	b.n	8001d2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d00:	4b25      	ldr	r3, [pc, #148]	; (8001d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d04:	4a24      	ldr	r2, [pc, #144]	; (8001d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d0c:	4b22      	ldr	r3, [pc, #136]	; (8001d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d18:	f7ff f9a6 	bl	8001068 <HAL_PWREx_GetVoltageRange>
 8001d1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d1e:	4b1e      	ldr	r3, [pc, #120]	; (8001d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d22:	4a1d      	ldr	r2, [pc, #116]	; (8001d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d30:	d10b      	bne.n	8001d4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b80      	cmp	r3, #128	; 0x80
 8001d36:	d919      	bls.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2ba0      	cmp	r3, #160	; 0xa0
 8001d3c:	d902      	bls.n	8001d44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d3e:	2302      	movs	r3, #2
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	e013      	b.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d44:	2301      	movs	r3, #1
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	e010      	b.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b80      	cmp	r3, #128	; 0x80
 8001d4e:	d902      	bls.n	8001d56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d50:	2303      	movs	r3, #3
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	e00a      	b.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b80      	cmp	r3, #128	; 0x80
 8001d5a:	d102      	bne.n	8001d62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	e004      	b.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b70      	cmp	r3, #112	; 0x70
 8001d66:	d101      	bne.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d68:	2301      	movs	r3, #1
 8001d6a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f023 0207 	bic.w	r2, r3, #7
 8001d74:	4909      	ldr	r1, [pc, #36]	; (8001d9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d001      	beq.n	8001d8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40022000 	.word	0x40022000

08001da0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001da8:	2300      	movs	r3, #0
 8001daa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dac:	2300      	movs	r3, #0
 8001dae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d031      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001dc4:	d01a      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001dc6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001dca:	d814      	bhi.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d009      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001dd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001dd4:	d10f      	bne.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001dd6:	4b5d      	ldr	r3, [pc, #372]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	4a5c      	ldr	r2, [pc, #368]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001de2:	e00c      	b.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3304      	adds	r3, #4
 8001de8:	2100      	movs	r1, #0
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 f9ce 	bl	800218c <RCCEx_PLLSAI1_Config>
 8001df0:	4603      	mov	r3, r0
 8001df2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001df4:	e003      	b.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	74fb      	strb	r3, [r7, #19]
      break;
 8001dfa:	e000      	b.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001dfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001dfe:	7cfb      	ldrb	r3, [r7, #19]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d10b      	bne.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e04:	4b51      	ldr	r3, [pc, #324]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e12:	494e      	ldr	r1, [pc, #312]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e1a:	e001      	b.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e1c:	7cfb      	ldrb	r3, [r7, #19]
 8001e1e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 809e 	beq.w	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e32:	4b46      	ldr	r3, [pc, #280]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001e42:	2300      	movs	r3, #0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00d      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e48:	4b40      	ldr	r3, [pc, #256]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4c:	4a3f      	ldr	r2, [pc, #252]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e52:	6593      	str	r3, [r2, #88]	; 0x58
 8001e54:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e60:	2301      	movs	r3, #1
 8001e62:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e64:	4b3a      	ldr	r3, [pc, #232]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a39      	ldr	r2, [pc, #228]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e70:	f7fe fe86 	bl	8000b80 <HAL_GetTick>
 8001e74:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e76:	e009      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e78:	f7fe fe82 	bl	8000b80 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d902      	bls.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	74fb      	strb	r3, [r7, #19]
        break;
 8001e8a:	e005      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e8c:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0ef      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001e98:	7cfb      	ldrb	r3, [r7, #19]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d15a      	bne.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e9e:	4b2b      	ldr	r3, [pc, #172]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ea8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d01e      	beq.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d019      	beq.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001eba:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ec4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ec6:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ecc:	4a1f      	ldr	r2, [pc, #124]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001edc:	4a1b      	ldr	r2, [pc, #108]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ee6:	4a19      	ldr	r2, [pc, #100]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d016      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7fe fe42 	bl	8000b80 <HAL_GetTick>
 8001efc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001efe:	e00b      	b.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f00:	f7fe fe3e 	bl	8000b80 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d902      	bls.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	74fb      	strb	r3, [r7, #19]
            break;
 8001f16:	e006      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f18:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0ec      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001f26:	7cfb      	ldrb	r3, [r7, #19]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10b      	bne.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f2c:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f3a:	4904      	ldr	r1, [pc, #16]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f42:	e009      	b.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f44:	7cfb      	ldrb	r3, [r7, #19]
 8001f46:	74bb      	strb	r3, [r7, #18]
 8001f48:	e006      	b.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001f4a:	bf00      	nop
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f54:	7cfb      	ldrb	r3, [r7, #19]
 8001f56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f58:	7c7b      	ldrb	r3, [r7, #17]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d105      	bne.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f5e:	4b8a      	ldr	r3, [pc, #552]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f62:	4a89      	ldr	r2, [pc, #548]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f68:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00a      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f76:	4b84      	ldr	r3, [pc, #528]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7c:	f023 0203 	bic.w	r2, r3, #3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	4980      	ldr	r1, [pc, #512]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00a      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f98:	4b7b      	ldr	r3, [pc, #492]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9e:	f023 020c 	bic.w	r2, r3, #12
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	4978      	ldr	r1, [pc, #480]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0320 	and.w	r3, r3, #32
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00a      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fba:	4b73      	ldr	r3, [pc, #460]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc8:	496f      	ldr	r1, [pc, #444]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00a      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fdc:	4b6a      	ldr	r3, [pc, #424]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fea:	4967      	ldr	r1, [pc, #412]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00a      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001ffe:	4b62      	ldr	r3, [pc, #392]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002004:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200c:	495e      	ldr	r1, [pc, #376]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800200e:	4313      	orrs	r3, r2
 8002010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00a      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002020:	4b59      	ldr	r3, [pc, #356]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002026:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	4956      	ldr	r1, [pc, #344]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002030:	4313      	orrs	r3, r2
 8002032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00a      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002042:	4b51      	ldr	r3, [pc, #324]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002048:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	494d      	ldr	r1, [pc, #308]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002052:	4313      	orrs	r3, r2
 8002054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d028      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002064:	4b48      	ldr	r3, [pc, #288]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	4945      	ldr	r1, [pc, #276]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002074:	4313      	orrs	r3, r2
 8002076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002082:	d106      	bne.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002084:	4b40      	ldr	r3, [pc, #256]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	4a3f      	ldr	r2, [pc, #252]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800208a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800208e:	60d3      	str	r3, [r2, #12]
 8002090:	e011      	b.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800209a:	d10c      	bne.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3304      	adds	r3, #4
 80020a0:	2101      	movs	r1, #1
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 f872 	bl	800218c <RCCEx_PLLSAI1_Config>
 80020a8:	4603      	mov	r3, r0
 80020aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80020ac:	7cfb      	ldrb	r3, [r7, #19]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80020b2:	7cfb      	ldrb	r3, [r7, #19]
 80020b4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d028      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020c2:	4b31      	ldr	r3, [pc, #196]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d0:	492d      	ldr	r1, [pc, #180]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020e0:	d106      	bne.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020e2:	4b29      	ldr	r3, [pc, #164]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	4a28      	ldr	r2, [pc, #160]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020ec:	60d3      	str	r3, [r2, #12]
 80020ee:	e011      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020f8:	d10c      	bne.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2101      	movs	r1, #1
 8002100:	4618      	mov	r0, r3
 8002102:	f000 f843 	bl	800218c <RCCEx_PLLSAI1_Config>
 8002106:	4603      	mov	r3, r0
 8002108:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800210a:	7cfb      	ldrb	r3, [r7, #19]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002110:	7cfb      	ldrb	r3, [r7, #19]
 8002112:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d01c      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002120:	4b19      	ldr	r3, [pc, #100]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002126:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800212e:	4916      	ldr	r1, [pc, #88]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002130:	4313      	orrs	r3, r2
 8002132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800213a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800213e:	d10c      	bne.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3304      	adds	r3, #4
 8002144:	2102      	movs	r1, #2
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f820 	bl	800218c <RCCEx_PLLSAI1_Config>
 800214c:	4603      	mov	r3, r0
 800214e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002150:	7cfb      	ldrb	r3, [r7, #19]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002156:	7cfb      	ldrb	r3, [r7, #19]
 8002158:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002166:	4b08      	ldr	r3, [pc, #32]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002174:	4904      	ldr	r1, [pc, #16]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800217c:	7cbb      	ldrb	r3, [r7, #18]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40021000 	.word	0x40021000

0800218c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800219a:	4b74      	ldr	r3, [pc, #464]	; (800236c <RCCEx_PLLSAI1_Config+0x1e0>)
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d018      	beq.n	80021d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80021a6:	4b71      	ldr	r3, [pc, #452]	; (800236c <RCCEx_PLLSAI1_Config+0x1e0>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f003 0203 	and.w	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d10d      	bne.n	80021d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
       ||
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d009      	beq.n	80021d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80021be:	4b6b      	ldr	r3, [pc, #428]	; (800236c <RCCEx_PLLSAI1_Config+0x1e0>)
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	091b      	lsrs	r3, r3, #4
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
       ||
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d047      	beq.n	8002262 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	73fb      	strb	r3, [r7, #15]
 80021d6:	e044      	b.n	8002262 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d018      	beq.n	8002212 <RCCEx_PLLSAI1_Config+0x86>
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d825      	bhi.n	8002230 <RCCEx_PLLSAI1_Config+0xa4>
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d002      	beq.n	80021ee <RCCEx_PLLSAI1_Config+0x62>
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d009      	beq.n	8002200 <RCCEx_PLLSAI1_Config+0x74>
 80021ec:	e020      	b.n	8002230 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80021ee:	4b5f      	ldr	r3, [pc, #380]	; (800236c <RCCEx_PLLSAI1_Config+0x1e0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d11d      	bne.n	8002236 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021fe:	e01a      	b.n	8002236 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002200:	4b5a      	ldr	r3, [pc, #360]	; (800236c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002208:	2b00      	cmp	r3, #0
 800220a:	d116      	bne.n	800223a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002210:	e013      	b.n	800223a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002212:	4b56      	ldr	r3, [pc, #344]	; (800236c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10f      	bne.n	800223e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800221e:	4b53      	ldr	r3, [pc, #332]	; (800236c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d109      	bne.n	800223e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800222e:	e006      	b.n	800223e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
      break;
 8002234:	e004      	b.n	8002240 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002236:	bf00      	nop
 8002238:	e002      	b.n	8002240 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800223a:	bf00      	nop
 800223c:	e000      	b.n	8002240 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800223e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10d      	bne.n	8002262 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002246:	4b49      	ldr	r3, [pc, #292]	; (800236c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6819      	ldr	r1, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	3b01      	subs	r3, #1
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	430b      	orrs	r3, r1
 800225c:	4943      	ldr	r1, [pc, #268]	; (800236c <RCCEx_PLLSAI1_Config+0x1e0>)
 800225e:	4313      	orrs	r3, r2
 8002260:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d17c      	bne.n	8002362 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002268:	4b40      	ldr	r3, [pc, #256]	; (800236c <RCCEx_PLLSAI1_Config+0x1e0>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a3f      	ldr	r2, [pc, #252]	; (800236c <RCCEx_PLLSAI1_Config+0x1e0>)
 800226e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002272:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002274:	f7fe fc84 	bl	8000b80 <HAL_GetTick>
 8002278:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800227a:	e009      	b.n	8002290 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800227c:	f7fe fc80 	bl	8000b80 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d902      	bls.n	8002290 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	73fb      	strb	r3, [r7, #15]
        break;
 800228e:	e005      	b.n	800229c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002290:	4b36      	ldr	r3, [pc, #216]	; (800236c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1ef      	bne.n	800227c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d15f      	bne.n	8002362 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d110      	bne.n	80022ca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022a8:	4b30      	ldr	r3, [pc, #192]	; (800236c <RCCEx_PLLSAI1_Config+0x1e0>)
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80022b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6892      	ldr	r2, [r2, #8]
 80022b8:	0211      	lsls	r1, r2, #8
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68d2      	ldr	r2, [r2, #12]
 80022be:	06d2      	lsls	r2, r2, #27
 80022c0:	430a      	orrs	r2, r1
 80022c2:	492a      	ldr	r1, [pc, #168]	; (800236c <RCCEx_PLLSAI1_Config+0x1e0>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	610b      	str	r3, [r1, #16]
 80022c8:	e027      	b.n	800231a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d112      	bne.n	80022f6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022d0:	4b26      	ldr	r3, [pc, #152]	; (800236c <RCCEx_PLLSAI1_Config+0x1e0>)
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80022d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6892      	ldr	r2, [r2, #8]
 80022e0:	0211      	lsls	r1, r2, #8
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6912      	ldr	r2, [r2, #16]
 80022e6:	0852      	lsrs	r2, r2, #1
 80022e8:	3a01      	subs	r2, #1
 80022ea:	0552      	lsls	r2, r2, #21
 80022ec:	430a      	orrs	r2, r1
 80022ee:	491f      	ldr	r1, [pc, #124]	; (800236c <RCCEx_PLLSAI1_Config+0x1e0>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	610b      	str	r3, [r1, #16]
 80022f4:	e011      	b.n	800231a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022f6:	4b1d      	ldr	r3, [pc, #116]	; (800236c <RCCEx_PLLSAI1_Config+0x1e0>)
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80022fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6892      	ldr	r2, [r2, #8]
 8002306:	0211      	lsls	r1, r2, #8
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6952      	ldr	r2, [r2, #20]
 800230c:	0852      	lsrs	r2, r2, #1
 800230e:	3a01      	subs	r2, #1
 8002310:	0652      	lsls	r2, r2, #25
 8002312:	430a      	orrs	r2, r1
 8002314:	4915      	ldr	r1, [pc, #84]	; (800236c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002316:	4313      	orrs	r3, r2
 8002318:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800231a:	4b14      	ldr	r3, [pc, #80]	; (800236c <RCCEx_PLLSAI1_Config+0x1e0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a13      	ldr	r2, [pc, #76]	; (800236c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002320:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002324:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002326:	f7fe fc2b 	bl	8000b80 <HAL_GetTick>
 800232a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800232c:	e009      	b.n	8002342 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800232e:	f7fe fc27 	bl	8000b80 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d902      	bls.n	8002342 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	73fb      	strb	r3, [r7, #15]
          break;
 8002340:	e005      	b.n	800234e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002342:	4b0a      	ldr	r3, [pc, #40]	; (800236c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0ef      	beq.n	800232e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d106      	bne.n	8002362 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002356:	691a      	ldr	r2, [r3, #16]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	4903      	ldr	r1, [pc, #12]	; (800236c <RCCEx_PLLSAI1_Config+0x1e0>)
 800235e:	4313      	orrs	r3, r2
 8002360:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002362:	7bfb      	ldrb	r3, [r7, #15]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40021000 	.word	0x40021000

08002370 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e049      	b.n	8002416 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d106      	bne.n	800239c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7fe fa5c 	bl	8000854 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3304      	adds	r3, #4
 80023ac:	4619      	mov	r1, r3
 80023ae:	4610      	mov	r0, r2
 80023b0:	f000 f954 	bl	800265c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b01      	cmp	r3, #1
 8002432:	d001      	beq.n	8002438 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e03b      	b.n	80024b0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2202      	movs	r2, #2
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0201 	orr.w	r2, r2, #1
 800244e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a19      	ldr	r2, [pc, #100]	; (80024bc <HAL_TIM_Base_Start_IT+0x9c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d009      	beq.n	800246e <HAL_TIM_Base_Start_IT+0x4e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002462:	d004      	beq.n	800246e <HAL_TIM_Base_Start_IT+0x4e>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <HAL_TIM_Base_Start_IT+0xa0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d115      	bne.n	800249a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <HAL_TIM_Base_Start_IT+0xa4>)
 8002476:	4013      	ands	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2b06      	cmp	r3, #6
 800247e:	d015      	beq.n	80024ac <HAL_TIM_Base_Start_IT+0x8c>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002486:	d011      	beq.n	80024ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002498:	e008      	b.n	80024ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 0201 	orr.w	r2, r2, #1
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	e000      	b.n	80024ae <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	40012c00 	.word	0x40012c00
 80024c0:	40014000 	.word	0x40014000
 80024c4:	00010007 	.word	0x00010007

080024c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d101      	bne.n	80024e4 <HAL_TIM_ConfigClockSource+0x1c>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e0b6      	b.n	8002652 <HAL_TIM_ConfigClockSource+0x18a>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2202      	movs	r2, #2
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002502:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800250e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002520:	d03e      	beq.n	80025a0 <HAL_TIM_ConfigClockSource+0xd8>
 8002522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002526:	f200 8087 	bhi.w	8002638 <HAL_TIM_ConfigClockSource+0x170>
 800252a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800252e:	f000 8086 	beq.w	800263e <HAL_TIM_ConfigClockSource+0x176>
 8002532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002536:	d87f      	bhi.n	8002638 <HAL_TIM_ConfigClockSource+0x170>
 8002538:	2b70      	cmp	r3, #112	; 0x70
 800253a:	d01a      	beq.n	8002572 <HAL_TIM_ConfigClockSource+0xaa>
 800253c:	2b70      	cmp	r3, #112	; 0x70
 800253e:	d87b      	bhi.n	8002638 <HAL_TIM_ConfigClockSource+0x170>
 8002540:	2b60      	cmp	r3, #96	; 0x60
 8002542:	d050      	beq.n	80025e6 <HAL_TIM_ConfigClockSource+0x11e>
 8002544:	2b60      	cmp	r3, #96	; 0x60
 8002546:	d877      	bhi.n	8002638 <HAL_TIM_ConfigClockSource+0x170>
 8002548:	2b50      	cmp	r3, #80	; 0x50
 800254a:	d03c      	beq.n	80025c6 <HAL_TIM_ConfigClockSource+0xfe>
 800254c:	2b50      	cmp	r3, #80	; 0x50
 800254e:	d873      	bhi.n	8002638 <HAL_TIM_ConfigClockSource+0x170>
 8002550:	2b40      	cmp	r3, #64	; 0x40
 8002552:	d058      	beq.n	8002606 <HAL_TIM_ConfigClockSource+0x13e>
 8002554:	2b40      	cmp	r3, #64	; 0x40
 8002556:	d86f      	bhi.n	8002638 <HAL_TIM_ConfigClockSource+0x170>
 8002558:	2b30      	cmp	r3, #48	; 0x30
 800255a:	d064      	beq.n	8002626 <HAL_TIM_ConfigClockSource+0x15e>
 800255c:	2b30      	cmp	r3, #48	; 0x30
 800255e:	d86b      	bhi.n	8002638 <HAL_TIM_ConfigClockSource+0x170>
 8002560:	2b20      	cmp	r3, #32
 8002562:	d060      	beq.n	8002626 <HAL_TIM_ConfigClockSource+0x15e>
 8002564:	2b20      	cmp	r3, #32
 8002566:	d867      	bhi.n	8002638 <HAL_TIM_ConfigClockSource+0x170>
 8002568:	2b00      	cmp	r3, #0
 800256a:	d05c      	beq.n	8002626 <HAL_TIM_ConfigClockSource+0x15e>
 800256c:	2b10      	cmp	r3, #16
 800256e:	d05a      	beq.n	8002626 <HAL_TIM_ConfigClockSource+0x15e>
 8002570:	e062      	b.n	8002638 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6818      	ldr	r0, [r3, #0]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	6899      	ldr	r1, [r3, #8]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f000 f949 	bl	8002818 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002594:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	609a      	str	r2, [r3, #8]
      break;
 800259e:	e04f      	b.n	8002640 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6818      	ldr	r0, [r3, #0]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	6899      	ldr	r1, [r3, #8]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f000 f932 	bl	8002818 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025c2:	609a      	str	r2, [r3, #8]
      break;
 80025c4:	e03c      	b.n	8002640 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	6859      	ldr	r1, [r3, #4]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	461a      	mov	r2, r3
 80025d4:	f000 f8a6 	bl	8002724 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2150      	movs	r1, #80	; 0x50
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 f8ff 	bl	80027e2 <TIM_ITRx_SetConfig>
      break;
 80025e4:	e02c      	b.n	8002640 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	6859      	ldr	r1, [r3, #4]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	461a      	mov	r2, r3
 80025f4:	f000 f8c5 	bl	8002782 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2160      	movs	r1, #96	; 0x60
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 f8ef 	bl	80027e2 <TIM_ITRx_SetConfig>
      break;
 8002604:	e01c      	b.n	8002640 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	6859      	ldr	r1, [r3, #4]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	461a      	mov	r2, r3
 8002614:	f000 f886 	bl	8002724 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2140      	movs	r1, #64	; 0x40
 800261e:	4618      	mov	r0, r3
 8002620:	f000 f8df 	bl	80027e2 <TIM_ITRx_SetConfig>
      break;
 8002624:	e00c      	b.n	8002640 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4619      	mov	r1, r3
 8002630:	4610      	mov	r0, r2
 8002632:	f000 f8d6 	bl	80027e2 <TIM_ITRx_SetConfig>
      break;
 8002636:	e003      	b.n	8002640 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
      break;
 800263c:	e000      	b.n	8002640 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800263e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002650:	7bfb      	ldrb	r3, [r7, #15]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a2a      	ldr	r2, [pc, #168]	; (8002718 <TIM_Base_SetConfig+0xbc>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d003      	beq.n	800267c <TIM_Base_SetConfig+0x20>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800267a:	d108      	bne.n	800268e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a21      	ldr	r2, [pc, #132]	; (8002718 <TIM_Base_SetConfig+0xbc>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d00b      	beq.n	80026ae <TIM_Base_SetConfig+0x52>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800269c:	d007      	beq.n	80026ae <TIM_Base_SetConfig+0x52>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a1e      	ldr	r2, [pc, #120]	; (800271c <TIM_Base_SetConfig+0xc0>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d003      	beq.n	80026ae <TIM_Base_SetConfig+0x52>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a1d      	ldr	r2, [pc, #116]	; (8002720 <TIM_Base_SetConfig+0xc4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d108      	bne.n	80026c0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	4313      	orrs	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a0c      	ldr	r2, [pc, #48]	; (8002718 <TIM_Base_SetConfig+0xbc>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d007      	beq.n	80026fc <TIM_Base_SetConfig+0xa0>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a0b      	ldr	r2, [pc, #44]	; (800271c <TIM_Base_SetConfig+0xc0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d003      	beq.n	80026fc <TIM_Base_SetConfig+0xa0>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a0a      	ldr	r2, [pc, #40]	; (8002720 <TIM_Base_SetConfig+0xc4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d103      	bne.n	8002704 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	691a      	ldr	r2, [r3, #16]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	615a      	str	r2, [r3, #20]
}
 800270a:	bf00      	nop
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40012c00 	.word	0x40012c00
 800271c:	40014000 	.word	0x40014000
 8002720:	40014400 	.word	0x40014400

08002724 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	f023 0201 	bic.w	r2, r3, #1
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800274e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f023 030a 	bic.w	r3, r3, #10
 8002760:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	4313      	orrs	r3, r2
 8002768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	621a      	str	r2, [r3, #32]
}
 8002776:	bf00      	nop
 8002778:	371c      	adds	r7, #28
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002782:	b480      	push	{r7}
 8002784:	b087      	sub	sp, #28
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	f023 0210 	bic.w	r2, r3, #16
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	031b      	lsls	r3, r3, #12
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	621a      	str	r2, [r3, #32]
}
 80027d6:	bf00      	nop
 80027d8:	371c      	adds	r7, #28
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b085      	sub	sp, #20
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4313      	orrs	r3, r2
 8002800:	f043 0307 	orr.w	r3, r3, #7
 8002804:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	609a      	str	r2, [r3, #8]
}
 800280c:	bf00      	nop
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002832:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	021a      	lsls	r2, r3, #8
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	431a      	orrs	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4313      	orrs	r3, r2
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	4313      	orrs	r3, r2
 8002844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	609a      	str	r2, [r3, #8]
}
 800284c:	bf00      	nop
 800284e:	371c      	adds	r7, #28
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800286c:	2302      	movs	r3, #2
 800286e:	e04f      	b.n	8002910 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a21      	ldr	r2, [pc, #132]	; (800291c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d108      	bne.n	80028ac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80028a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a14      	ldr	r2, [pc, #80]	; (800291c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d009      	beq.n	80028e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d8:	d004      	beq.n	80028e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a10      	ldr	r2, [pc, #64]	; (8002920 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d10c      	bne.n	80028fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	40012c00 	.word	0x40012c00
 8002920:	40014000 	.word	0x40014000

08002924 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e040      	b.n	80029b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fd ffa2 	bl	8000890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2224      	movs	r2, #36	; 0x24
 8002950:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0201 	bic.w	r2, r2, #1
 8002960:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f88e 	bl	8002a84 <UART_SetConfig>
 8002968:	4603      	mov	r3, r0
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e022      	b.n	80029b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 faae 	bl	8002edc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800298e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800299e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 fb35 	bl	8003020 <UART_CheckIdleState>
 80029b6:	4603      	mov	r3, r0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08a      	sub	sp, #40	; 0x28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	4613      	mov	r3, r2
 80029cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029d2:	2b20      	cmp	r3, #32
 80029d4:	d142      	bne.n	8002a5c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d002      	beq.n	80029e2 <HAL_UART_Receive_IT+0x22>
 80029dc:	88fb      	ldrh	r3, [r7, #6]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e03b      	b.n	8002a5e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_UART_Receive_IT+0x34>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e034      	b.n	8002a5e <HAL_UART_Receive_IT+0x9e>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a18      	ldr	r2, [pc, #96]	; (8002a68 <HAL_UART_Receive_IT+0xa8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d01f      	beq.n	8002a4c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d018      	beq.n	8002a4c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	e853 3f00 	ldrex	r3, [r3]
 8002a26:	613b      	str	r3, [r7, #16]
   return(result);
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	461a      	mov	r2, r3
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	623b      	str	r3, [r7, #32]
 8002a3a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3c:	69f9      	ldr	r1, [r7, #28]
 8002a3e:	6a3a      	ldr	r2, [r7, #32]
 8002a40:	e841 2300 	strex	r3, r2, [r1]
 8002a44:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1e6      	bne.n	8002a1a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a4c:	88fb      	ldrh	r3, [r7, #6]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68b9      	ldr	r1, [r7, #8]
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 fbf2 	bl	800323c <UART_Start_Receive_IT>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	e000      	b.n	8002a5e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002a5c:	2302      	movs	r3, #2
  }
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3728      	adds	r7, #40	; 0x28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40008000 	.word	0x40008000

08002a6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a88:	b08a      	sub	sp, #40	; 0x28
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	4bb4      	ldr	r3, [pc, #720]	; (8002d84 <UART_SetConfig+0x300>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002abc:	430b      	orrs	r3, r1
 8002abe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4aa9      	ldr	r2, [pc, #676]	; (8002d88 <UART_SetConfig+0x304>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d004      	beq.n	8002af0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aec:	4313      	orrs	r3, r2
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b00:	430a      	orrs	r2, r1
 8002b02:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4aa0      	ldr	r2, [pc, #640]	; (8002d8c <UART_SetConfig+0x308>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d126      	bne.n	8002b5c <UART_SetConfig+0xd8>
 8002b0e:	4ba0      	ldr	r3, [pc, #640]	; (8002d90 <UART_SetConfig+0x30c>)
 8002b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d81b      	bhi.n	8002b54 <UART_SetConfig+0xd0>
 8002b1c:	a201      	add	r2, pc, #4	; (adr r2, 8002b24 <UART_SetConfig+0xa0>)
 8002b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b22:	bf00      	nop
 8002b24:	08002b35 	.word	0x08002b35
 8002b28:	08002b45 	.word	0x08002b45
 8002b2c:	08002b3d 	.word	0x08002b3d
 8002b30:	08002b4d 	.word	0x08002b4d
 8002b34:	2301      	movs	r3, #1
 8002b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b3a:	e080      	b.n	8002c3e <UART_SetConfig+0x1ba>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b42:	e07c      	b.n	8002c3e <UART_SetConfig+0x1ba>
 8002b44:	2304      	movs	r3, #4
 8002b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b4a:	e078      	b.n	8002c3e <UART_SetConfig+0x1ba>
 8002b4c:	2308      	movs	r3, #8
 8002b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b52:	e074      	b.n	8002c3e <UART_SetConfig+0x1ba>
 8002b54:	2310      	movs	r3, #16
 8002b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b5a:	e070      	b.n	8002c3e <UART_SetConfig+0x1ba>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a8c      	ldr	r2, [pc, #560]	; (8002d94 <UART_SetConfig+0x310>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d138      	bne.n	8002bd8 <UART_SetConfig+0x154>
 8002b66:	4b8a      	ldr	r3, [pc, #552]	; (8002d90 <UART_SetConfig+0x30c>)
 8002b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6c:	f003 030c 	and.w	r3, r3, #12
 8002b70:	2b0c      	cmp	r3, #12
 8002b72:	d82d      	bhi.n	8002bd0 <UART_SetConfig+0x14c>
 8002b74:	a201      	add	r2, pc, #4	; (adr r2, 8002b7c <UART_SetConfig+0xf8>)
 8002b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7a:	bf00      	nop
 8002b7c:	08002bb1 	.word	0x08002bb1
 8002b80:	08002bd1 	.word	0x08002bd1
 8002b84:	08002bd1 	.word	0x08002bd1
 8002b88:	08002bd1 	.word	0x08002bd1
 8002b8c:	08002bc1 	.word	0x08002bc1
 8002b90:	08002bd1 	.word	0x08002bd1
 8002b94:	08002bd1 	.word	0x08002bd1
 8002b98:	08002bd1 	.word	0x08002bd1
 8002b9c:	08002bb9 	.word	0x08002bb9
 8002ba0:	08002bd1 	.word	0x08002bd1
 8002ba4:	08002bd1 	.word	0x08002bd1
 8002ba8:	08002bd1 	.word	0x08002bd1
 8002bac:	08002bc9 	.word	0x08002bc9
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bb6:	e042      	b.n	8002c3e <UART_SetConfig+0x1ba>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bbe:	e03e      	b.n	8002c3e <UART_SetConfig+0x1ba>
 8002bc0:	2304      	movs	r3, #4
 8002bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bc6:	e03a      	b.n	8002c3e <UART_SetConfig+0x1ba>
 8002bc8:	2308      	movs	r3, #8
 8002bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bce:	e036      	b.n	8002c3e <UART_SetConfig+0x1ba>
 8002bd0:	2310      	movs	r3, #16
 8002bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bd6:	e032      	b.n	8002c3e <UART_SetConfig+0x1ba>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a6a      	ldr	r2, [pc, #424]	; (8002d88 <UART_SetConfig+0x304>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d12a      	bne.n	8002c38 <UART_SetConfig+0x1b4>
 8002be2:	4b6b      	ldr	r3, [pc, #428]	; (8002d90 <UART_SetConfig+0x30c>)
 8002be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002bf0:	d01a      	beq.n	8002c28 <UART_SetConfig+0x1a4>
 8002bf2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002bf6:	d81b      	bhi.n	8002c30 <UART_SetConfig+0x1ac>
 8002bf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bfc:	d00c      	beq.n	8002c18 <UART_SetConfig+0x194>
 8002bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c02:	d815      	bhi.n	8002c30 <UART_SetConfig+0x1ac>
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <UART_SetConfig+0x18c>
 8002c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c0c:	d008      	beq.n	8002c20 <UART_SetConfig+0x19c>
 8002c0e:	e00f      	b.n	8002c30 <UART_SetConfig+0x1ac>
 8002c10:	2300      	movs	r3, #0
 8002c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c16:	e012      	b.n	8002c3e <UART_SetConfig+0x1ba>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c1e:	e00e      	b.n	8002c3e <UART_SetConfig+0x1ba>
 8002c20:	2304      	movs	r3, #4
 8002c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c26:	e00a      	b.n	8002c3e <UART_SetConfig+0x1ba>
 8002c28:	2308      	movs	r3, #8
 8002c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c2e:	e006      	b.n	8002c3e <UART_SetConfig+0x1ba>
 8002c30:	2310      	movs	r3, #16
 8002c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c36:	e002      	b.n	8002c3e <UART_SetConfig+0x1ba>
 8002c38:	2310      	movs	r3, #16
 8002c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a51      	ldr	r2, [pc, #324]	; (8002d88 <UART_SetConfig+0x304>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d17a      	bne.n	8002d3e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d824      	bhi.n	8002c9a <UART_SetConfig+0x216>
 8002c50:	a201      	add	r2, pc, #4	; (adr r2, 8002c58 <UART_SetConfig+0x1d4>)
 8002c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c56:	bf00      	nop
 8002c58:	08002c7d 	.word	0x08002c7d
 8002c5c:	08002c9b 	.word	0x08002c9b
 8002c60:	08002c85 	.word	0x08002c85
 8002c64:	08002c9b 	.word	0x08002c9b
 8002c68:	08002c8b 	.word	0x08002c8b
 8002c6c:	08002c9b 	.word	0x08002c9b
 8002c70:	08002c9b 	.word	0x08002c9b
 8002c74:	08002c9b 	.word	0x08002c9b
 8002c78:	08002c93 	.word	0x08002c93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c7c:	f7ff f804 	bl	8001c88 <HAL_RCC_GetPCLK1Freq>
 8002c80:	61f8      	str	r0, [r7, #28]
        break;
 8002c82:	e010      	b.n	8002ca6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c84:	4b44      	ldr	r3, [pc, #272]	; (8002d98 <UART_SetConfig+0x314>)
 8002c86:	61fb      	str	r3, [r7, #28]
        break;
 8002c88:	e00d      	b.n	8002ca6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c8a:	f7fe ff65 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 8002c8e:	61f8      	str	r0, [r7, #28]
        break;
 8002c90:	e009      	b.n	8002ca6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c96:	61fb      	str	r3, [r7, #28]
        break;
 8002c98:	e005      	b.n	8002ca6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002ca4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 8107 	beq.w	8002ebc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	4413      	add	r3, r2
 8002cb8:	69fa      	ldr	r2, [r7, #28]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d305      	bcc.n	8002cca <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002cc4:	69fa      	ldr	r2, [r7, #28]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d903      	bls.n	8002cd2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002cd0:	e0f4      	b.n	8002ebc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	461c      	mov	r4, r3
 8002cd8:	4615      	mov	r5, r2
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	022b      	lsls	r3, r5, #8
 8002ce4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002ce8:	0222      	lsls	r2, r4, #8
 8002cea:	68f9      	ldr	r1, [r7, #12]
 8002cec:	6849      	ldr	r1, [r1, #4]
 8002cee:	0849      	lsrs	r1, r1, #1
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	4688      	mov	r8, r1
 8002cf4:	4681      	mov	r9, r0
 8002cf6:	eb12 0a08 	adds.w	sl, r2, r8
 8002cfa:	eb43 0b09 	adc.w	fp, r3, r9
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	603b      	str	r3, [r7, #0]
 8002d06:	607a      	str	r2, [r7, #4]
 8002d08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d0c:	4650      	mov	r0, sl
 8002d0e:	4659      	mov	r1, fp
 8002d10:	f7fd fa5c 	bl	80001cc <__aeabi_uldivmod>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4613      	mov	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d22:	d308      	bcc.n	8002d36 <UART_SetConfig+0x2b2>
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d2a:	d204      	bcs.n	8002d36 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	60da      	str	r2, [r3, #12]
 8002d34:	e0c2      	b.n	8002ebc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002d3c:	e0be      	b.n	8002ebc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d46:	d16a      	bne.n	8002e1e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8002d48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d834      	bhi.n	8002dba <UART_SetConfig+0x336>
 8002d50:	a201      	add	r2, pc, #4	; (adr r2, 8002d58 <UART_SetConfig+0x2d4>)
 8002d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d56:	bf00      	nop
 8002d58:	08002d7d 	.word	0x08002d7d
 8002d5c:	08002d9d 	.word	0x08002d9d
 8002d60:	08002da5 	.word	0x08002da5
 8002d64:	08002dbb 	.word	0x08002dbb
 8002d68:	08002dab 	.word	0x08002dab
 8002d6c:	08002dbb 	.word	0x08002dbb
 8002d70:	08002dbb 	.word	0x08002dbb
 8002d74:	08002dbb 	.word	0x08002dbb
 8002d78:	08002db3 	.word	0x08002db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d7c:	f7fe ff84 	bl	8001c88 <HAL_RCC_GetPCLK1Freq>
 8002d80:	61f8      	str	r0, [r7, #28]
        break;
 8002d82:	e020      	b.n	8002dc6 <UART_SetConfig+0x342>
 8002d84:	efff69f3 	.word	0xefff69f3
 8002d88:	40008000 	.word	0x40008000
 8002d8c:	40013800 	.word	0x40013800
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40004400 	.word	0x40004400
 8002d98:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d9c:	f7fe ff8a 	bl	8001cb4 <HAL_RCC_GetPCLK2Freq>
 8002da0:	61f8      	str	r0, [r7, #28]
        break;
 8002da2:	e010      	b.n	8002dc6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002da4:	4b4c      	ldr	r3, [pc, #304]	; (8002ed8 <UART_SetConfig+0x454>)
 8002da6:	61fb      	str	r3, [r7, #28]
        break;
 8002da8:	e00d      	b.n	8002dc6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002daa:	f7fe fed5 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 8002dae:	61f8      	str	r0, [r7, #28]
        break;
 8002db0:	e009      	b.n	8002dc6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002db6:	61fb      	str	r3, [r7, #28]
        break;
 8002db8:	e005      	b.n	8002dc6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002dc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d077      	beq.n	8002ebc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	005a      	lsls	r2, r3, #1
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	085b      	lsrs	r3, r3, #1
 8002dd6:	441a      	add	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	2b0f      	cmp	r3, #15
 8002de6:	d916      	bls.n	8002e16 <UART_SetConfig+0x392>
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dee:	d212      	bcs.n	8002e16 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	f023 030f 	bic.w	r3, r3, #15
 8002df8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	085b      	lsrs	r3, r3, #1
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	8afb      	ldrh	r3, [r7, #22]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	8afa      	ldrh	r2, [r7, #22]
 8002e12:	60da      	str	r2, [r3, #12]
 8002e14:	e052      	b.n	8002ebc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002e1c:	e04e      	b.n	8002ebc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d827      	bhi.n	8002e76 <UART_SetConfig+0x3f2>
 8002e26:	a201      	add	r2, pc, #4	; (adr r2, 8002e2c <UART_SetConfig+0x3a8>)
 8002e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2c:	08002e51 	.word	0x08002e51
 8002e30:	08002e59 	.word	0x08002e59
 8002e34:	08002e61 	.word	0x08002e61
 8002e38:	08002e77 	.word	0x08002e77
 8002e3c:	08002e67 	.word	0x08002e67
 8002e40:	08002e77 	.word	0x08002e77
 8002e44:	08002e77 	.word	0x08002e77
 8002e48:	08002e77 	.word	0x08002e77
 8002e4c:	08002e6f 	.word	0x08002e6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e50:	f7fe ff1a 	bl	8001c88 <HAL_RCC_GetPCLK1Freq>
 8002e54:	61f8      	str	r0, [r7, #28]
        break;
 8002e56:	e014      	b.n	8002e82 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e58:	f7fe ff2c 	bl	8001cb4 <HAL_RCC_GetPCLK2Freq>
 8002e5c:	61f8      	str	r0, [r7, #28]
        break;
 8002e5e:	e010      	b.n	8002e82 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e60:	4b1d      	ldr	r3, [pc, #116]	; (8002ed8 <UART_SetConfig+0x454>)
 8002e62:	61fb      	str	r3, [r7, #28]
        break;
 8002e64:	e00d      	b.n	8002e82 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e66:	f7fe fe77 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 8002e6a:	61f8      	str	r0, [r7, #28]
        break;
 8002e6c:	e009      	b.n	8002e82 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e72:	61fb      	str	r3, [r7, #28]
        break;
 8002e74:	e005      	b.n	8002e82 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002e80:	bf00      	nop
    }

    if (pclk != 0U)
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d019      	beq.n	8002ebc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	085a      	lsrs	r2, r3, #1
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	441a      	add	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	2b0f      	cmp	r3, #15
 8002ea0:	d909      	bls.n	8002eb6 <UART_SetConfig+0x432>
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea8:	d205      	bcs.n	8002eb6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	60da      	str	r2, [r3, #12]
 8002eb4:	e002      	b.n	8002ebc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002ec8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3728      	adds	r7, #40	; 0x28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ed6:	bf00      	nop
 8002ed8:	00f42400 	.word	0x00f42400

08002edc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00a      	beq.n	8002f06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00a      	beq.n	8002f28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00a      	beq.n	8002f4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00a      	beq.n	8002f8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	f003 0320 	and.w	r3, r3, #32
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00a      	beq.n	8002fb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01a      	beq.n	8002ff2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fda:	d10a      	bne.n	8002ff2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	605a      	str	r2, [r3, #4]
  }
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af02      	add	r7, sp, #8
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003030:	f7fd fda6 	bl	8000b80 <HAL_GetTick>
 8003034:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b08      	cmp	r3, #8
 8003042:	d10e      	bne.n	8003062 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003044:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f82d 	bl	80030b2 <UART_WaitOnFlagUntilTimeout>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e023      	b.n	80030aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b04      	cmp	r3, #4
 800306e:	d10e      	bne.n	800308e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003070:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f817 	bl	80030b2 <UART_WaitOnFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e00d      	b.n	80030aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2220      	movs	r2, #32
 8003092:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b09c      	sub	sp, #112	; 0x70
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	4613      	mov	r3, r2
 80030c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030c2:	e0a5      	b.n	8003210 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ca:	f000 80a1 	beq.w	8003210 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ce:	f7fd fd57 	bl	8000b80 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80030da:	429a      	cmp	r2, r3
 80030dc:	d302      	bcc.n	80030e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80030de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d13e      	bne.n	8003162 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ec:	e853 3f00 	ldrex	r3, [r3]
 80030f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80030f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030f8:	667b      	str	r3, [r7, #100]	; 0x64
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	461a      	mov	r2, r3
 8003100:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003102:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003104:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003106:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003108:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800310a:	e841 2300 	strex	r3, r2, [r1]
 800310e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1e6      	bne.n	80030e4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	3308      	adds	r3, #8
 800311c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003120:	e853 3f00 	ldrex	r3, [r3]
 8003124:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003128:	f023 0301 	bic.w	r3, r3, #1
 800312c:	663b      	str	r3, [r7, #96]	; 0x60
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3308      	adds	r3, #8
 8003134:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003136:	64ba      	str	r2, [r7, #72]	; 0x48
 8003138:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800313c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800313e:	e841 2300 	strex	r3, r2, [r1]
 8003142:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1e5      	bne.n	8003116 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2220      	movs	r2, #32
 800314e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e067      	b.n	8003232 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d04f      	beq.n	8003210 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800317a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800317e:	d147      	bne.n	8003210 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003188:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003192:	e853 3f00 	ldrex	r3, [r3]
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800319e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	461a      	mov	r2, r3
 80031a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a8:	637b      	str	r3, [r7, #52]	; 0x34
 80031aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031b0:	e841 2300 	strex	r3, r2, [r1]
 80031b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1e6      	bne.n	800318a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3308      	adds	r3, #8
 80031c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	e853 3f00 	ldrex	r3, [r3]
 80031ca:	613b      	str	r3, [r7, #16]
   return(result);
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	f023 0301 	bic.w	r3, r3, #1
 80031d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	3308      	adds	r3, #8
 80031da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80031dc:	623a      	str	r2, [r7, #32]
 80031de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e0:	69f9      	ldr	r1, [r7, #28]
 80031e2:	6a3a      	ldr	r2, [r7, #32]
 80031e4:	e841 2300 	strex	r3, r2, [r1]
 80031e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1e5      	bne.n	80031bc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2220      	movs	r2, #32
 80031f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2220      	movs	r2, #32
 80031fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e010      	b.n	8003232 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	69da      	ldr	r2, [r3, #28]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	4013      	ands	r3, r2
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	429a      	cmp	r2, r3
 800321e:	bf0c      	ite	eq
 8003220:	2301      	moveq	r3, #1
 8003222:	2300      	movne	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	461a      	mov	r2, r3
 8003228:	79fb      	ldrb	r3, [r7, #7]
 800322a:	429a      	cmp	r2, r3
 800322c:	f43f af4a 	beq.w	80030c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3770      	adds	r7, #112	; 0x70
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800323c:	b480      	push	{r7}
 800323e:	b097      	sub	sp, #92	; 0x5c
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	4613      	mov	r3, r2
 8003248:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	88fa      	ldrh	r2, [r7, #6]
 8003254:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	88fa      	ldrh	r2, [r7, #6]
 800325c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326e:	d10e      	bne.n	800328e <UART_Start_Receive_IT+0x52>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d105      	bne.n	8003284 <UART_Start_Receive_IT+0x48>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800327e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003282:	e02d      	b.n	80032e0 <UART_Start_Receive_IT+0xa4>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	22ff      	movs	r2, #255	; 0xff
 8003288:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800328c:	e028      	b.n	80032e0 <UART_Start_Receive_IT+0xa4>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10d      	bne.n	80032b2 <UART_Start_Receive_IT+0x76>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d104      	bne.n	80032a8 <UART_Start_Receive_IT+0x6c>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	22ff      	movs	r2, #255	; 0xff
 80032a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032a6:	e01b      	b.n	80032e0 <UART_Start_Receive_IT+0xa4>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	227f      	movs	r2, #127	; 0x7f
 80032ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032b0:	e016      	b.n	80032e0 <UART_Start_Receive_IT+0xa4>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032ba:	d10d      	bne.n	80032d8 <UART_Start_Receive_IT+0x9c>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d104      	bne.n	80032ce <UART_Start_Receive_IT+0x92>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	227f      	movs	r2, #127	; 0x7f
 80032c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032cc:	e008      	b.n	80032e0 <UART_Start_Receive_IT+0xa4>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	223f      	movs	r2, #63	; 0x3f
 80032d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032d6:	e003      	b.n	80032e0 <UART_Start_Receive_IT+0xa4>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2222      	movs	r2, #34	; 0x22
 80032ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	3308      	adds	r3, #8
 80032f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032f8:	e853 3f00 	ldrex	r3, [r3]
 80032fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	657b      	str	r3, [r7, #84]	; 0x54
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	3308      	adds	r3, #8
 800330c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800330e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003310:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003312:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003314:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003316:	e841 2300 	strex	r3, r2, [r1]
 800331a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800331c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1e5      	bne.n	80032ee <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800332a:	d107      	bne.n	800333c <UART_Start_Receive_IT+0x100>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d103      	bne.n	800333c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4a24      	ldr	r2, [pc, #144]	; (80033c8 <UART_Start_Receive_IT+0x18c>)
 8003338:	665a      	str	r2, [r3, #100]	; 0x64
 800333a:	e002      	b.n	8003342 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4a23      	ldr	r2, [pc, #140]	; (80033cc <UART_Start_Receive_IT+0x190>)
 8003340:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d019      	beq.n	8003386 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335a:	e853 3f00 	ldrex	r3, [r3]
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	461a      	mov	r2, r3
 800336e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003370:	637b      	str	r3, [r7, #52]	; 0x34
 8003372:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003374:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003378:	e841 2300 	strex	r3, r2, [r1]
 800337c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800337e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1e6      	bne.n	8003352 <UART_Start_Receive_IT+0x116>
 8003384:	e018      	b.n	80033b8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	e853 3f00 	ldrex	r3, [r3]
 8003392:	613b      	str	r3, [r7, #16]
   return(result);
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f043 0320 	orr.w	r3, r3, #32
 800339a:	653b      	str	r3, [r7, #80]	; 0x50
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	461a      	mov	r2, r3
 80033a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033a4:	623b      	str	r3, [r7, #32]
 80033a6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a8:	69f9      	ldr	r1, [r7, #28]
 80033aa:	6a3a      	ldr	r2, [r7, #32]
 80033ac:	e841 2300 	strex	r3, r2, [r1]
 80033b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1e6      	bne.n	8003386 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	375c      	adds	r7, #92	; 0x5c
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	08003531 	.word	0x08003531
 80033cc:	080033d1 	.word	0x080033d1

080033d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b096      	sub	sp, #88	; 0x58
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80033de:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033e6:	2b22      	cmp	r3, #34	; 0x22
 80033e8:	f040 8094 	bne.w	8003514 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80033f2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80033f6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80033fa:	b2d9      	uxtb	r1, r3
 80033fc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003400:	b2da      	uxtb	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003406:	400a      	ands	r2, r1
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800341c:	b29b      	uxth	r3, r3
 800341e:	3b01      	subs	r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d179      	bne.n	8003528 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343c:	e853 3f00 	ldrex	r3, [r3]
 8003440:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003444:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003448:	653b      	str	r3, [r7, #80]	; 0x50
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003452:	647b      	str	r3, [r7, #68]	; 0x44
 8003454:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003456:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003458:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800345a:	e841 2300 	strex	r3, r2, [r1]
 800345e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1e6      	bne.n	8003434 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	3308      	adds	r3, #8
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	e853 3f00 	ldrex	r3, [r3]
 8003474:	623b      	str	r3, [r7, #32]
   return(result);
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	f023 0301 	bic.w	r3, r3, #1
 800347c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	3308      	adds	r3, #8
 8003484:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003486:	633a      	str	r2, [r7, #48]	; 0x30
 8003488:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800348c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800348e:	e841 2300 	strex	r3, r2, [r1]
 8003492:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1e5      	bne.n	8003466 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2220      	movs	r2, #32
 800349e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d12e      	bne.n	800350c <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	e853 3f00 	ldrex	r3, [r3]
 80034c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f023 0310 	bic.w	r3, r3, #16
 80034c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034d2:	61fb      	str	r3, [r7, #28]
 80034d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d6:	69b9      	ldr	r1, [r7, #24]
 80034d8:	69fa      	ldr	r2, [r7, #28]
 80034da:	e841 2300 	strex	r3, r2, [r1]
 80034de:	617b      	str	r3, [r7, #20]
   return(result);
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1e6      	bne.n	80034b4 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	f003 0310 	and.w	r3, r3, #16
 80034f0:	2b10      	cmp	r3, #16
 80034f2:	d103      	bne.n	80034fc <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2210      	movs	r2, #16
 80034fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003502:	4619      	mov	r1, r3
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7ff fab1 	bl	8002a6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800350a:	e00d      	b.n	8003528 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 fad5 	bl	8003abc <HAL_UART_RxCpltCallback>
}
 8003512:	e009      	b.n	8003528 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	8b1b      	ldrh	r3, [r3, #24]
 800351a:	b29a      	uxth	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f042 0208 	orr.w	r2, r2, #8
 8003524:	b292      	uxth	r2, r2
 8003526:	831a      	strh	r2, [r3, #24]
}
 8003528:	bf00      	nop
 800352a:	3758      	adds	r7, #88	; 0x58
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b096      	sub	sp, #88	; 0x58
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800353e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003546:	2b22      	cmp	r3, #34	; 0x22
 8003548:	f040 8094 	bne.w	8003674 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003552:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800355c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003560:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003564:	4013      	ands	r3, r2
 8003566:	b29a      	uxth	r2, r3
 8003568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800356a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003570:	1c9a      	adds	r2, r3, #2
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800357c:	b29b      	uxth	r3, r3
 800357e:	3b01      	subs	r3, #1
 8003580:	b29a      	uxth	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d179      	bne.n	8003688 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359c:	e853 3f00 	ldrex	r3, [r3]
 80035a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	461a      	mov	r2, r3
 80035b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035b2:	643b      	str	r3, [r7, #64]	; 0x40
 80035b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035ba:	e841 2300 	strex	r3, r2, [r1]
 80035be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1e6      	bne.n	8003594 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3308      	adds	r3, #8
 80035cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	e853 3f00 	ldrex	r3, [r3]
 80035d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	f023 0301 	bic.w	r3, r3, #1
 80035dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	3308      	adds	r3, #8
 80035e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ee:	e841 2300 	strex	r3, r2, [r1]
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1e5      	bne.n	80035c6 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2220      	movs	r2, #32
 80035fe:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800360a:	2b01      	cmp	r3, #1
 800360c:	d12e      	bne.n	800366c <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	e853 3f00 	ldrex	r3, [r3]
 8003620:	60bb      	str	r3, [r7, #8]
   return(result);
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f023 0310 	bic.w	r3, r3, #16
 8003628:	647b      	str	r3, [r7, #68]	; 0x44
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003632:	61bb      	str	r3, [r7, #24]
 8003634:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003636:	6979      	ldr	r1, [r7, #20]
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	e841 2300 	strex	r3, r2, [r1]
 800363e:	613b      	str	r3, [r7, #16]
   return(result);
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1e6      	bne.n	8003614 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b10      	cmp	r3, #16
 8003652:	d103      	bne.n	800365c <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2210      	movs	r2, #16
 800365a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003662:	4619      	mov	r1, r3
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff fa01 	bl	8002a6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800366a:	e00d      	b.n	8003688 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 fa25 	bl	8003abc <HAL_UART_RxCpltCallback>
}
 8003672:	e009      	b.n	8003688 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	8b1b      	ldrh	r3, [r3, #24]
 800367a:	b29a      	uxth	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0208 	orr.w	r2, r2, #8
 8003684:	b292      	uxth	r2, r2
 8003686:	831a      	strh	r2, [r3, #24]
}
 8003688:	bf00      	nop
 800368a:	3758      	adds	r7, #88	; 0x58
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <bsp_mb_slave_init>:

/* public variable ============================================*/
extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef htim2;

void bsp_mb_slave_init(void) {
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
	__mb.uart = &huart2;
 8003694:	4b07      	ldr	r3, [pc, #28]	; (80036b4 <bsp_mb_slave_init+0x24>)
 8003696:	4a08      	ldr	r2, [pc, #32]	; (80036b8 <bsp_mb_slave_init+0x28>)
 8003698:	601a      	str	r2, [r3, #0]
	__mb.timer = &htim2;
 800369a:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <bsp_mb_slave_init+0x24>)
 800369c:	4a07      	ldr	r2, [pc, #28]	; (80036bc <bsp_mb_slave_init+0x2c>)
 800369e:	605a      	str	r2, [r3, #4]
	mb_slave_init(&__mb, BSP_MB_SLAVE_ID, BSP_MB_SLAVE_SPEED, BSP_MB_TIMER_CLOCK_SOURCE);
 80036a0:	2350      	movs	r3, #80	; 0x50
 80036a2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80036a6:	2101      	movs	r1, #1
 80036a8:	4802      	ldr	r0, [pc, #8]	; (80036b4 <bsp_mb_slave_init+0x24>)
 80036aa:	f000 f955 	bl	8003958 <mb_slave_init>
}
 80036ae:	bf00      	nop
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20000180 	.word	0x20000180
 80036b8:	200000f8 	.word	0x200000f8
 80036bc:	20000028 	.word	0x20000028

080036c0 <bsp_mb_coil_set>:

uint8_t bsp_mb_id_get(void) {
	return BSP_MB_SLAVE_ID;
}

void bsp_mb_coil_set(uint16_t addr, uint8_t status) {
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	4603      	mov	r3, r0
 80036c8:	460a      	mov	r2, r1
 80036ca:	80fb      	strh	r3, [r7, #6]
 80036cc:	4613      	mov	r3, r2
 80036ce:	717b      	strb	r3, [r7, #5]
	__mb.data.coil.set(&__mb.data.coil, addr, status);
 80036d0:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <bsp_mb_coil_set+0x28>)
 80036d2:	f8d3 3c60 	ldr.w	r3, [r3, #3168]	; 0xc60
 80036d6:	797a      	ldrb	r2, [r7, #5]
 80036d8:	88f9      	ldrh	r1, [r7, #6]
 80036da:	4804      	ldr	r0, [pc, #16]	; (80036ec <bsp_mb_coil_set+0x2c>)
 80036dc:	4798      	blx	r3
}
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	20000180 	.word	0x20000180
 80036ec:	20000dd8 	.word	0x20000dd8

080036f0 <bsp_mb_discrete_input_set>:

uint8_t bsp_mb_coil_get(uint16_t addr) {
	return __mb.data.coil.get(&__mb.data.coil, addr);
}

void bsp_mb_discrete_input_set(uint16_t addr, uint8_t status) {
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	460a      	mov	r2, r1
 80036fa:	80fb      	strh	r3, [r7, #6]
 80036fc:	4613      	mov	r3, r2
 80036fe:	717b      	strb	r3, [r7, #5]
	__mb.data.input.set(&__mb.data.input, addr, status);
 8003700:	4b05      	ldr	r3, [pc, #20]	; (8003718 <bsp_mb_discrete_input_set+0x28>)
 8003702:	f8d3 3c70 	ldr.w	r3, [r3, #3184]	; 0xc70
 8003706:	797a      	ldrb	r2, [r7, #5]
 8003708:	88f9      	ldrh	r1, [r7, #6]
 800370a:	4804      	ldr	r0, [pc, #16]	; (800371c <bsp_mb_discrete_input_set+0x2c>)
 800370c:	4798      	blx	r3
}
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20000180 	.word	0x20000180
 800371c:	20000de8 	.word	0x20000de8

08003720 <bsp_mb_input_reg_set>:

uint8_t bsp_mb_discrete_input_get(uint16_t addr) {
	return __mb.data.input.get(&__mb.data.input, addr);
}

void bsp_mb_input_reg_set(uint16_t addr, uint16_t value) {
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	460a      	mov	r2, r1
 800372a:	80fb      	strh	r3, [r7, #6]
 800372c:	4613      	mov	r3, r2
 800372e:	80bb      	strh	r3, [r7, #4]
	__mb.data.reg_input.set(&__mb.data.reg_input, addr, value);
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <bsp_mb_input_reg_set+0x28>)
 8003732:	f8d3 3c80 	ldr.w	r3, [r3, #3200]	; 0xc80
 8003736:	88ba      	ldrh	r2, [r7, #4]
 8003738:	88f9      	ldrh	r1, [r7, #6]
 800373a:	4804      	ldr	r0, [pc, #16]	; (800374c <bsp_mb_input_reg_set+0x2c>)
 800373c:	4798      	blx	r3
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000180 	.word	0x20000180
 800374c:	20000df8 	.word	0x20000df8

08003750 <bsp_mb_holding_reg_set>:

uint16_t bsp_mb_input_reg_get(uint16_t addr) {
	return __mb.data.reg_input.get(&__mb.data.reg_input, addr);
}

void bsp_mb_holding_reg_set(uint16_t addr, uint16_t value) {
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	460a      	mov	r2, r1
 800375a:	80fb      	strh	r3, [r7, #6]
 800375c:	4613      	mov	r3, r2
 800375e:	80bb      	strh	r3, [r7, #4]
	__mb.data.reg_holding.set(&__mb.data.reg_holding, addr, value);
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <bsp_mb_holding_reg_set+0x28>)
 8003762:	f8d3 3c90 	ldr.w	r3, [r3, #3216]	; 0xc90
 8003766:	88ba      	ldrh	r2, [r7, #4]
 8003768:	88f9      	ldrh	r1, [r7, #6]
 800376a:	4804      	ldr	r0, [pc, #16]	; (800377c <bsp_mb_holding_reg_set+0x2c>)
 800376c:	4798      	blx	r3
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20000180 	.word	0x20000180
 800377c:	20000e08 	.word	0x20000e08

08003780 <__mb_failure>:

#include "mb_assert.h"
#include "mb_stm32_include.h"

void __mb_failure(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003784:	b672      	cpsid	i
}
 8003786:	bf00      	nop
	__disable_irq();
	while(1);
 8003788:	e7fe      	b.n	8003788 <__mb_failure+0x8>
	...

0800378c <mb_buffer_init>:
static mb_pdu_t* _get_data(mb_buffer_t *buf);
static void      _commit_get(mb_buffer_t *buf);
static void      _flush(mb_buffer_t *buf);
static uint8_t   _available(mb_buffer_t *buf);

void mb_buffer_init(mb_buffer_t *buf) {
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <mb_buffer_init+0x12>
 800379a:	f7ff fff1 	bl	8003780 <__mb_failure>
	buf->__available = 0;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	709a      	strb	r2, [r3, #2]
	buf->__tail      = 0;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	705a      	strb	r2, [r3, #1]
	buf->__head      = 0;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	701a      	strb	r2, [r3, #0]

	buf->next        = _next;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a0d      	ldr	r2, [pc, #52]	; (80037e8 <mb_buffer_init+0x5c>)
 80037b4:	f8c3 2a18 	str.w	r2, [r3, #2584]	; 0xa18
	buf->commit_next = _commit_next;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a0c      	ldr	r2, [pc, #48]	; (80037ec <mb_buffer_init+0x60>)
 80037bc:	f8c3 2a1c 	str.w	r2, [r3, #2588]	; 0xa1c
	buf->get_data    = _get_data;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a0b      	ldr	r2, [pc, #44]	; (80037f0 <mb_buffer_init+0x64>)
 80037c4:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20
	buf->commit_get  = _commit_get;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a0a      	ldr	r2, [pc, #40]	; (80037f4 <mb_buffer_init+0x68>)
 80037cc:	f8c3 2a24 	str.w	r2, [r3, #2596]	; 0xa24
	buf->flush       = _flush;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a09      	ldr	r2, [pc, #36]	; (80037f8 <mb_buffer_init+0x6c>)
 80037d4:	f8c3 2a28 	str.w	r2, [r3, #2600]	; 0xa28
	buf->available   = _available;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a08      	ldr	r2, [pc, #32]	; (80037fc <mb_buffer_init+0x70>)
 80037dc:	f8c3 2a2c 	str.w	r2, [r3, #2604]	; 0xa2c
}
 80037e0:	bf00      	nop
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	08003801 	.word	0x08003801
 80037ec:	08003831 	.word	0x08003831
 80037f0:	08003889 	.word	0x08003889
 80037f4:	080038b9 	.word	0x080038b9
 80037f8:	0800390d 	.word	0x0800390d
 80037fc:	08003939 	.word	0x08003939

08003800 <_next>:

static mb_pdu_t* _next(mb_buffer_t *buf) {
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <_next+0x12>
 800380e:	f7ff ffb7 	bl	8003780 <__mb_failure>
	return &buf->__data[buf->__head];
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	4613      	mov	r3, r2
 800381a:	01db      	lsls	r3, r3, #7
 800381c:	4413      	add	r3, r2
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	4413      	add	r3, r2
 8003824:	3304      	adds	r3, #4
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <_commit_next>:

static void _commit_next(mb_buffer_t *buf) {
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <_commit_next+0x12>
 800383e:	f7ff ff9f 	bl	8003780 <__mb_failure>
	if (buf->__available >= MB_BUFFER_SIZE) {
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	789b      	ldrb	r3, [r3, #2]
 8003846:	2b09      	cmp	r3, #9
 8003848:	d817      	bhi.n	800387a <_commit_next+0x4a>
		mb_log("MB buffer overflow\n");
		return;
	} else {
		buf->__head = (buf->__head + 1) % MB_BUFFER_SIZE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <_commit_next+0x54>)
 8003852:	fb83 1302 	smull	r1, r3, r3, r2
 8003856:	1099      	asrs	r1, r3, #2
 8003858:	17d3      	asrs	r3, r2, #31
 800385a:	1ac9      	subs	r1, r1, r3
 800385c:	460b      	mov	r3, r1
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	1ad1      	subs	r1, r2, r3
 8003866:	b2ca      	uxtb	r2, r1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	701a      	strb	r2, [r3, #0]
		buf->__available++;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	789b      	ldrb	r3, [r3, #2]
 8003870:	3301      	adds	r3, #1
 8003872:	b2da      	uxtb	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	709a      	strb	r2, [r3, #2]
 8003878:	e000      	b.n	800387c <_commit_next+0x4c>
		return;
 800387a:	bf00      	nop
	}
}
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	66666667 	.word	0x66666667

08003888 <_get_data>:

static mb_pdu_t* _get_data(mb_buffer_t *buf) {
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <_get_data+0x12>
 8003896:	f7ff ff73 	bl	8003780 <__mb_failure>
	return &buf->__data[buf->__tail];
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	785b      	ldrb	r3, [r3, #1]
 800389e:	461a      	mov	r2, r3
 80038a0:	4613      	mov	r3, r2
 80038a2:	01db      	lsls	r3, r3, #7
 80038a4:	4413      	add	r3, r2
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	4413      	add	r3, r2
 80038ac:	3304      	adds	r3, #4
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
	...

080038b8 <_commit_get>:

static void _commit_get(mb_buffer_t *buf) {
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <_commit_get+0x12>
 80038c6:	f7ff ff5b 	bl	8003780 <__mb_failure>
	if (buf->__available) {
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	789b      	ldrb	r3, [r3, #2]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d016      	beq.n	8003900 <_commit_get+0x48>
		buf->__tail = (buf->__tail + 1) % MB_BUFFER_SIZE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	785b      	ldrb	r3, [r3, #1]
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <_commit_get+0x50>)
 80038da:	fb83 1302 	smull	r1, r3, r3, r2
 80038de:	1099      	asrs	r1, r3, #2
 80038e0:	17d3      	asrs	r3, r2, #31
 80038e2:	1ac9      	subs	r1, r1, r3
 80038e4:	460b      	mov	r3, r1
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	1ad1      	subs	r1, r2, r3
 80038ee:	b2ca      	uxtb	r2, r1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	705a      	strb	r2, [r3, #1]
		buf->__available--;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	789b      	ldrb	r3, [r3, #2]
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	709a      	strb	r2, [r3, #2]
	}
}
 8003900:	bf00      	nop
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	66666667 	.word	0x66666667

0800390c <_flush>:

static void _flush(mb_buffer_t *buf) {
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <_flush+0x12>
 800391a:	f7ff ff31 	bl	8003780 <__mb_failure>
	buf->__tail      = 0;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	705a      	strb	r2, [r3, #1]
	buf->__head      = 0;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	701a      	strb	r2, [r3, #0]
	buf->__available = 0;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	709a      	strb	r2, [r3, #2]
}
 8003930:	bf00      	nop
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <_available>:

static uint8_t _available(mb_buffer_t *buf) {
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <_available+0x12>
 8003946:	f7ff ff1b 	bl	8003780 <__mb_failure>
	
	return buf->__available;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	789b      	ldrb	r3, [r3, #2]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <mb_slave_init>:
static uint8_t fc_write_single_reg(mb_slave_t* mb, mb_pdu_t* pdu);
static uint8_t fc_write_multi_coil(mb_slave_t* mb, mb_pdu_t* pdu);
static uint8_t fc_write_multi_reg(mb_slave_t* mb, mb_pdu_t* pdu);

mb_return_t mb_slave_init(mb_slave_t* mb, uint8_t sl_addr, uint32_t speed, uint32_t timer_clk_mhz)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	607a      	str	r2, [r7, #4]
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	460b      	mov	r3, r1
 8003966:	72fb      	strb	r3, [r7, #11]
	mb_assert(mb);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <mb_slave_init+0x1a>
 800396e:	f7ff ff07 	bl	8003780 <__mb_failure>
	mb_assert(mb->uart);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <mb_slave_init+0x26>
 800397a:	f7ff ff01 	bl	8003780 <__mb_failure>
	mb_assert(mb->timer);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <mb_slave_init+0x32>
 8003986:	f7ff fefb 	bl	8003780 <__mb_failure>
	mb_log("Speed: %d\n", speed);

	// Check address rule:
	// MODBUS address should in range from 1 to 247
	// NOTE: Check section "2.2 MODBUS Addressing rules" on "Modbus_over_serial_line_V1_02.pdf"
	if(sl_addr < 1 || sl_addr > 247)
 800398a:	7afb      	ldrb	r3, [r7, #11]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <mb_slave_init+0x3e>
 8003990:	7afb      	ldrb	r3, [r7, #11]
 8003992:	2bf7      	cmp	r3, #247	; 0xf7
 8003994:	d901      	bls.n	800399a <mb_slave_init+0x42>
	{
		mb_log("MODBUS error: address invalid: %d\n", sl_addr);
		return MB_FAILURE;
 8003996:	2301      	movs	r3, #1
 8003998:	e03e      	b.n	8003a18 <mb_slave_init+0xc0>
	}

	ring_buffer_init(&mb->uart_buf);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	3308      	adds	r3, #8
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 f8c4 	bl	8003b2c <ring_buffer_init>
	mb_buffer_init(&mb->buf);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff feee 	bl	800378c <mb_buffer_init>
	mb_data_init(&mb->data);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f603 4358 	addw	r3, r3, #3160	; 0xc58
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 f9ae 	bl	8003d18 <mb_data_init>
	mb->slave_addr = sl_addr;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	7afa      	ldrb	r2, [r7, #11]
 80039c0:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

	// Timer configure
	__HAL_TIM_CLEAR_IT(mb->timer, TIM_IT_UPDATE);						// Clear IRQ pending
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f06f 0201 	mvn.w	r2, #1
 80039ce:	611a      	str	r2, [r3, #16]
	__HAL_TIM_SET_PRESCALER(mb->timer, (timer_clk_mhz - 1));	// Set timer prescaler
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	3a01      	subs	r2, #1
 80039da:	629a      	str	r2, [r3, #40]	; 0x28
	set_timer_period(mb, speed);
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 f854 	bl	8003a8c <set_timer_period>

	mb->is_init = true;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
	mb_slave = mb;
 80039ec:	4a0c      	ldr	r2, [pc, #48]	; (8003a20 <mb_slave_init+0xc8>)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6013      	str	r3, [r2, #0]

	tx_buf.tail = 0;
 80039f2:	4b0c      	ldr	r3, [pc, #48]	; (8003a24 <mb_slave_init+0xcc>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	805a      	strh	r2, [r3, #2]
	tx_buf.head = 0;
 80039f8:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <mb_slave_init+0xcc>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	801a      	strh	r2, [r3, #0]
	tx_len = 0;
 80039fe:	4b0a      	ldr	r3, [pc, #40]	; (8003a28 <mb_slave_init+0xd0>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	801a      	strh	r2, [r3, #0]

	// Start receive UART
	HAL_UART_Receive_IT(mb->uart, &mb->uart_rx, 1);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6818      	ldr	r0, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8003a0e:	2201      	movs	r2, #1
 8003a10:	4619      	mov	r1, r3
 8003a12:	f7fe ffd5 	bl	80029c0 <HAL_UART_Receive_IT>

	return MB_SUCCESS;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20000e18 	.word	0x20000e18
 8003a24:	20000e20 	.word	0x20000e20
 8003a28:	20000e1c 	.word	0x20000e1c

08003a2c <get_t35>:

	// Commit processed data
	mb->buf.commit_get(&mb->buf);
}

static uint32_t get_t35(uint32_t speed) {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
	mb_assert(speed);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <get_t35+0x12>
 8003a3a:	f7ff fea1 	bl	8003780 <__mb_failure>

	float f_speed = (1000000.0f / ((float) speed / 8.0f));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	ee07 3a90 	vmov	s15, r3
 8003a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a48:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003a4c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003a50:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8003a88 <get_t35+0x5c>
 8003a54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a58:	edc7 7a03 	vstr	s15, [r7, #12]
	f_speed = f_speed * 3.5f;
 8003a5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a60:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8003a64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a68:	edc7 7a03 	vstr	s15, [r7, #12]

	mb_log("Get T35: speed = %u, T35 = %u (us)\n", speed, (uint32_t)f_speed);
	return (uint32_t) (f_speed + 1);
 8003a6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a7c:	ee17 3a90 	vmov	r3, s15
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	49742400 	.word	0x49742400

08003a8c <set_timer_period>:
/**
 * @brief Set timer period of 3.5 char transmit time of UART speed
 * @param speed speed of UART
 */
static void set_timer_period(mb_slave_t* mb ,uint32_t speed)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
	uint32_t t35 = get_t35(speed);
 8003a96:	6838      	ldr	r0, [r7, #0]
 8003a98:	f7ff ffc8 	bl	8003a2c <get_t35>
 8003a9c:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(mb->timer, t35 - 1);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	3a01      	subs	r2, #1
 8003aa8:	62da      	str	r2, [r3, #44]	; 0x2c
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	3a01      	subs	r2, #1
 8003ab2:	60da      	str	r2, [r3, #12]
}
 8003ab4:	bf00      	nop
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
	if(mb_slave && mb_slave->uart == huart)
 8003ac4:	4b18      	ldr	r3, [pc, #96]	; (8003b28 <HAL_UART_RxCpltCallback+0x6c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d028      	beq.n	8003b1e <HAL_UART_RxCpltCallback+0x62>
 8003acc:	4b16      	ldr	r3, [pc, #88]	; (8003b28 <HAL_UART_RxCpltCallback+0x6c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d122      	bne.n	8003b1e <HAL_UART_RxCpltCallback+0x62>
	{
		mb_slave->uart_buf.add(&mb_slave->uart_buf, mb_slave->uart_rx);
 8003ad8:	4b13      	ldr	r3, [pc, #76]	; (8003b28 <HAL_UART_RxCpltCallback+0x6c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003ae0:	4a11      	ldr	r2, [pc, #68]	; (8003b28 <HAL_UART_RxCpltCallback+0x6c>)
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	f102 0008 	add.w	r0, r2, #8
 8003ae8:	4a0f      	ldr	r2, [pc, #60]	; (8003b28 <HAL_UART_RxCpltCallback+0x6c>)
 8003aea:	6812      	ldr	r2, [r2, #0]
 8003aec:	f892 2220 	ldrb.w	r2, [r2, #544]	; 0x220
 8003af0:	4611      	mov	r1, r2
 8003af2:	4798      	blx	r3

		// Restart timer
		__HAL_TIM_SET_COUNTER(mb_slave->timer, 0);
 8003af4:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <HAL_UART_RxCpltCallback+0x6c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2200      	movs	r2, #0
 8003afe:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(mb_slave->timer);
 8003b00:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <HAL_UART_RxCpltCallback+0x6c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fe fc8a 	bl	8002420 <HAL_TIM_Base_Start_IT>
		HAL_UART_Receive_IT(huart, &mb_slave->uart_rx, 1);
 8003b0c:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <HAL_UART_RxCpltCallback+0x6c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8003b14:	2201      	movs	r2, #1
 8003b16:	4619      	mov	r1, r3
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7fe ff51 	bl	80029c0 <HAL_UART_Receive_IT>
	}
}
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	20000e18 	.word	0x20000e18

08003b2c <ring_buffer_init>:
static void     _get(ring_buffer_t *buf, uint8_t *obuf, uint16_t *buf_size);
static void     _flush(ring_buffer_t *buf);
static uint16_t _available(ring_buffer_t *buf);

void ring_buffer_init(ring_buffer_t *buf)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <ring_buffer_init+0x12>
 8003b3a:	f7ff fe21 	bl	8003780 <__mb_failure>
	buf->__tail      = 0;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	801a      	strh	r2, [r3, #0]
	buf->__head      = 0;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	805a      	strh	r2, [r3, #2]
	buf->__available = 0;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
	buf->overflow    = false;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	buf->add       = _add;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a09      	ldr	r2, [pc, #36]	; (8003b84 <ring_buffer_init+0x58>)
 8003b5e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	buf->get_data  = _get;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a08      	ldr	r2, [pc, #32]	; (8003b88 <ring_buffer_init+0x5c>)
 8003b66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	buf->available = _available;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a07      	ldr	r2, [pc, #28]	; (8003b8c <ring_buffer_init+0x60>)
 8003b6e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	buf->flush     = _flush;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a06      	ldr	r2, [pc, #24]	; (8003b90 <ring_buffer_init+0x64>)
 8003b76:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8003b7a:	bf00      	nop
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	08003b95 	.word	0x08003b95
 8003b88:	08003c49 	.word	0x08003c49
 8003b8c:	08003cff 	.word	0x08003cff
 8003b90:	08003c13 	.word	0x08003c13

08003b94 <_add>:

void _add(ring_buffer_t *buf, uint8_t data)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	70fb      	strb	r3, [r7, #3]
	mb_assert(buf);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <_add+0x16>
 8003ba6:	f7ff fdeb 	bl	8003780 <__mb_failure>
	if (buf->overflow)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d12a      	bne.n	8003c0a <_add+0x76>
		return;

	buf->__data[buf->__head] = data;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	885b      	ldrh	r3, [r3, #2]
 8003bb8:	78fa      	ldrb	r2, [r7, #3]
 8003bba:	b291      	uxth	r1, r2
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	4413      	add	r3, r2
 8003bc2:	460a      	mov	r2, r1
 8003bc4:	809a      	strh	r2, [r3, #4]
	buf->__head = (buf->__head + 1) % RING_BUFFER_SIZE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	885b      	ldrh	r3, [r3, #2]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	425a      	negs	r2, r3
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	bf58      	it	pl
 8003bd4:	4253      	negpl	r3, r2
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	805a      	strh	r2, [r3, #2]
	if (buf->__available >= RING_BUFFER_SIZE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8003be2:	2bff      	cmp	r3, #255	; 0xff
 8003be4:	d904      	bls.n	8003bf0 <_add+0x5c>
	{
		buf->overflow = true;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
 8003bee:	e00d      	b.n	8003c0c <_add+0x78>
		mb_log("Ring buffer overflow\n");
	}
	else
	{
		buf->overflow = false;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		buf->__available++;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8003bfe:	3301      	adds	r3, #1
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 8003c08:	e000      	b.n	8003c0c <_add+0x78>
		return;
 8003c0a:	bf00      	nop
	}
}
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <_flush>:

void _flush(ring_buffer_t *buf)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b082      	sub	sp, #8
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <_flush+0x12>
 8003c20:	f7ff fdae 	bl	8003780 <__mb_failure>
	buf->__tail      = 0;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	801a      	strh	r2, [r3, #0]
	buf->__head      = 0;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	805a      	strh	r2, [r3, #2]
	buf->__available = 0;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
	buf->overflow    = false;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
}
 8003c40:	bf00      	nop
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <_get>:

void _get(ring_buffer_t *buf, uint8_t *data, uint16_t *data_size)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
	mb_assert(buf);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <_get+0x16>
 8003c5a:	f7ff fd91 	bl	8003780 <__mb_failure>
	mb_assert(data);
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <_get+0x20>
 8003c64:	f7ff fd8c 	bl	8003780 <__mb_failure>
	mb_assert(*data_size);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	881b      	ldrh	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <_get+0x2c>
 8003c70:	f7ff fd86 	bl	8003780 <__mb_failure>

	if (buf->__available == 0)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d103      	bne.n	8003c86 <_get+0x3e>
	{
		*data_size = 0;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	801a      	strh	r2, [r3, #0]
		return;
 8003c84:	e038      	b.n	8003cf8 <_get+0xb0>
	}

	uint16_t len;
	len          = (buf->__available < *data_size) ? buf->__available : *data_size;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	881a      	ldrh	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8003c90:	4293      	cmp	r3, r2
 8003c92:	bf28      	it	cs
 8003c94:	4613      	movcs	r3, r2
 8003c96:	82bb      	strh	r3, [r7, #20]
	*data_size   = len;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	8aba      	ldrh	r2, [r7, #20]
 8003c9c:	801a      	strh	r2, [r3, #0]

	for (uint16_t i = 0; i < len; i++)
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	82fb      	strh	r3, [r7, #22]
 8003ca2:	e018      	b.n	8003cd6 <_get+0x8e>
	{
		data[i]     = buf->__data[buf->__tail];
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	4413      	add	r3, r2
 8003cae:	8899      	ldrh	r1, [r3, #4]
 8003cb0:	8afb      	ldrh	r3, [r7, #22]
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	b2ca      	uxtb	r2, r1
 8003cb8:	701a      	strb	r2, [r3, #0]
		buf->__tail = (buf->__tail + 1) % RING_BUFFER_SIZE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	425a      	negs	r2, r3
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	bf58      	it	pl
 8003cc8:	4253      	negpl	r3, r2
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < len; i++)
 8003cd0:	8afb      	ldrh	r3, [r7, #22]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	82fb      	strh	r3, [r7, #22]
 8003cd6:	8afa      	ldrh	r2, [r7, #22]
 8003cd8:	8abb      	ldrh	r3, [r7, #20]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d3e2      	bcc.n	8003ca4 <_get+0x5c>
	}
	buf->__available = buf->__available - len;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f8b3 2204 	ldrh.w	r2, [r3, #516]	; 0x204
 8003ce4:	8abb      	ldrh	r3, [r7, #20]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
	buf->overflow    = false;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
}
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <_available>:

uint16_t _available(ring_buffer_t *buf)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
	return buf->__available;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <mb_data_init>:
static uint8_t  input_db[MB_INPUT_NUM/8];
static uint16_t reg_input_db[MB_REG_INPUT_NUM];
static uint16_t reg_holding_db[MB_REG_HOLDING_NUM];

void mb_data_init(mb_data_t* mb_data)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
	mb_assert(mb_data);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <mb_data_init+0x12>
 8003d26:	f7ff fd2b 	bl	8003780 <__mb_failure>

	memset(coil_db       , 0, sizeof(coil_db));
 8003d2a:	2204      	movs	r2, #4
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	4818      	ldr	r0, [pc, #96]	; (8003d90 <mb_data_init+0x78>)
 8003d30:	f000 f960 	bl	8003ff4 <memset>
	memset(input_db      , 0, sizeof(input_db));
 8003d34:	2204      	movs	r2, #4
 8003d36:	2100      	movs	r1, #0
 8003d38:	4816      	ldr	r0, [pc, #88]	; (8003d94 <mb_data_init+0x7c>)
 8003d3a:	f000 f95b 	bl	8003ff4 <memset>
	memset(reg_input_db  , 0, sizeof(reg_input_db));
 8003d3e:	2240      	movs	r2, #64	; 0x40
 8003d40:	2100      	movs	r1, #0
 8003d42:	4815      	ldr	r0, [pc, #84]	; (8003d98 <mb_data_init+0x80>)
 8003d44:	f000 f956 	bl	8003ff4 <memset>
	memset(reg_holding_db, 0, sizeof(reg_holding_db));
 8003d48:	2240      	movs	r2, #64	; 0x40
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	4813      	ldr	r0, [pc, #76]	; (8003d9c <mb_data_init+0x84>)
 8003d4e:	f000 f951 	bl	8003ff4 <memset>

	mb_data_bit_init(&mb_data->coil       , coil_db       , MB_COIL_NUM);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2220      	movs	r2, #32
 8003d56:	490e      	ldr	r1, [pc, #56]	; (8003d90 <mb_data_init+0x78>)
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 f821 	bl	8003da0 <mb_data_bit_init>
	mb_data_bit_init(&mb_data->input      , input_db      , MB_INPUT_NUM);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3310      	adds	r3, #16
 8003d62:	2220      	movs	r2, #32
 8003d64:	490b      	ldr	r1, [pc, #44]	; (8003d94 <mb_data_init+0x7c>)
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 f81a 	bl	8003da0 <mb_data_bit_init>
	mb_data_reg_init(&mb_data->reg_input  , reg_input_db  , MB_REG_INPUT_NUM);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3320      	adds	r3, #32
 8003d70:	2220      	movs	r2, #32
 8003d72:	4909      	ldr	r1, [pc, #36]	; (8003d98 <mb_data_init+0x80>)
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 f8b3 	bl	8003ee0 <mb_data_reg_init>
	mb_data_reg_init(&mb_data->reg_holding, reg_holding_db, MB_REG_HOLDING_NUM);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3330      	adds	r3, #48	; 0x30
 8003d7e:	2220      	movs	r2, #32
 8003d80:	4906      	ldr	r1, [pc, #24]	; (8003d9c <mb_data_init+0x84>)
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 f8ac 	bl	8003ee0 <mb_data_reg_init>
}
 8003d88:	bf00      	nop
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	20000fa4 	.word	0x20000fa4
 8003d94:	20000fa8 	.word	0x20000fa8
 8003d98:	20000fac 	.word	0x20000fac
 8003d9c:	20000fec 	.word	0x20000fec

08003da0 <mb_data_bit_init>:

uint8_t _get_bit(mb_data_bit_t *bit, uint16_t addr);
void _set_bit(mb_data_bit_t *bit, uint16_t addr, uint8_t status);

void mb_data_bit_init(mb_data_bit_t *bit, uint8_t *data, uint16_t n_bit)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	4613      	mov	r3, r2
 8003dac:	80fb      	strh	r3, [r7, #6]
	mb_assert(bit);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <mb_data_bit_init+0x18>
 8003db4:	f7ff fce4 	bl	8003780 <__mb_failure>
	mb_assert(data);
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <mb_data_bit_init+0x22>
 8003dbe:	f7ff fcdf 	bl	8003780 <__mb_failure>
	mb_assert(n_bit);
 8003dc2:	88fb      	ldrh	r3, [r7, #6]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <mb_data_bit_init+0x2c>
 8003dc8:	f7ff fcda 	bl	8003780 <__mb_failure>

	bit->data = data;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	601a      	str	r2, [r3, #0]
	bit->nbit = n_bit;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	88fa      	ldrh	r2, [r7, #6]
 8003dd6:	809a      	strh	r2, [r3, #4]
	bit->get  = _get_bit;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4a04      	ldr	r2, [pc, #16]	; (8003dec <mb_data_bit_init+0x4c>)
 8003ddc:	60da      	str	r2, [r3, #12]
	bit->set  = _set_bit;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4a03      	ldr	r2, [pc, #12]	; (8003df0 <mb_data_bit_init+0x50>)
 8003de2:	609a      	str	r2, [r3, #8]
}
 8003de4:	bf00      	nop
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	08003df5 	.word	0x08003df5
 8003df0:	08003e4d 	.word	0x08003e4d

08003df4 <_get_bit>:

uint8_t _get_bit(mb_data_bit_t *bit, uint16_t addr)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	807b      	strh	r3, [r7, #2]
	mb_assert(bit);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <_get_bit+0x16>
 8003e06:	f7ff fcbb 	bl	8003780 <__mb_failure>
	mb_assert(addr < bit->nbit);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	889b      	ldrh	r3, [r3, #4]
 8003e0e:	887a      	ldrh	r2, [r7, #2]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d301      	bcc.n	8003e18 <_get_bit+0x24>
 8003e14:	f7ff fcb4 	bl	8003780 <__mb_failure>

	uint8_t byte_index = addr / 8;
 8003e18:	887b      	ldrh	r3, [r7, #2]
 8003e1a:	08db      	lsrs	r3, r3, #3
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	73fb      	strb	r3, [r7, #15]
	uint8_t bit_index  = addr % 8;
 8003e20:	887b      	ldrh	r3, [r7, #2]
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	73bb      	strb	r3, [r7, #14]

	return (uint8_t)((bit->data[byte_index] >> bit_index) & 0x01);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
 8003e30:	4413      	add	r3, r2
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	7bbb      	ldrb	r3, [r7, #14]
 8003e38:	fa42 f303 	asr.w	r3, r2, r3
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	b2db      	uxtb	r3, r3
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <_set_bit>:

void _set_bit(mb_data_bit_t *bit, uint16_t addr, uint8_t status)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	460b      	mov	r3, r1
 8003e56:	807b      	strh	r3, [r7, #2]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	707b      	strb	r3, [r7, #1]
	mb_assert(bit);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <_set_bit+0x1a>
 8003e62:	f7ff fc8d 	bl	8003780 <__mb_failure>
	mb_assert(addr < bit->nbit);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	889b      	ldrh	r3, [r3, #4]
 8003e6a:	887a      	ldrh	r2, [r7, #2]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d301      	bcc.n	8003e74 <_set_bit+0x28>
 8003e70:	f7ff fc86 	bl	8003780 <__mb_failure>

	uint8_t byte_index = addr / 8;
 8003e74:	887b      	ldrh	r3, [r7, #2]
 8003e76:	08db      	lsrs	r3, r3, #3
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	73fb      	strb	r3, [r7, #15]
	uint8_t bit_index  = addr % 8;
 8003e7c:	887b      	ldrh	r3, [r7, #2]
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	73bb      	strb	r3, [r7, #14]

	uint8_t val = 1 << bit_index;
 8003e86:	7bbb      	ldrb	r3, [r7, #14]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	737b      	strb	r3, [r7, #13]
	if (status)
 8003e90:	787b      	ldrb	r3, [r7, #1]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00d      	beq.n	8003eb2 <_set_bit+0x66>
		bit->data[byte_index] = (uint8_t)(bit->data[byte_index] | val);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	7bfb      	ldrb	r3, [r7, #15]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	7819      	ldrb	r1, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	7b7a      	ldrb	r2, [r7, #13]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	701a      	strb	r2, [r3, #0]
	else
		bit->data[byte_index] = (uint8_t)(bit->data[byte_index] & (~val));
}
 8003eb0:	e011      	b.n	8003ed6 <_set_bit+0x8a>
		bit->data[byte_index] = (uint8_t)(bit->data[byte_index] & (~val));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
 8003eb8:	4413      	add	r3, r2
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	b25a      	sxtb	r2, r3
 8003ebe:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	b25b      	sxtb	r3, r3
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	b259      	sxtb	r1, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	b2ca      	uxtb	r2, r1
 8003ed4:	701a      	strb	r2, [r3, #0]
}
 8003ed6:	bf00      	nop
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
	...

08003ee0 <mb_data_reg_init>:

static void     _reg_set(mb_data_reg_t* reg, uint16_t addr, uint16_t value);
static uint16_t _reg_get(mb_data_reg_t* reg, uint16_t addr);

void mb_data_reg_init(mb_data_reg_t* reg, uint16_t* data, uint16_t nreg)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	4613      	mov	r3, r2
 8003eec:	80fb      	strh	r3, [r7, #6]
	mb_assert(reg);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <mb_data_reg_init+0x18>
 8003ef4:	f7ff fc44 	bl	8003780 <__mb_failure>
	mb_assert(data);
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <mb_data_reg_init+0x22>
 8003efe:	f7ff fc3f 	bl	8003780 <__mb_failure>
	mb_assert(nreg);
 8003f02:	88fb      	ldrh	r3, [r7, #6]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <mb_data_reg_init+0x2c>
 8003f08:	f7ff fc3a 	bl	8003780 <__mb_failure>

	reg->data = data;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	601a      	str	r2, [r3, #0]
	reg->nreg = nreg;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	88fa      	ldrh	r2, [r7, #6]
 8003f16:	809a      	strh	r2, [r3, #4]
	reg->get  = _reg_get;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4a04      	ldr	r2, [pc, #16]	; (8003f2c <mb_data_reg_init+0x4c>)
 8003f1c:	60da      	str	r2, [r3, #12]
	reg->set  = _reg_set;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4a03      	ldr	r2, [pc, #12]	; (8003f30 <mb_data_reg_init+0x50>)
 8003f22:	609a      	str	r2, [r3, #8]
}
 8003f24:	bf00      	nop
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	08003f73 	.word	0x08003f73
 8003f30:	08003f35 	.word	0x08003f35

08003f34 <_reg_set>:

static void _reg_set(mb_data_reg_t *reg, uint16_t addr, uint16_t value) {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	807b      	strh	r3, [r7, #2]
 8003f40:	4613      	mov	r3, r2
 8003f42:	803b      	strh	r3, [r7, #0]
	mb_assert(reg);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <_reg_set+0x1a>
 8003f4a:	f7ff fc19 	bl	8003780 <__mb_failure>
	mb_assert(addr < reg->nreg);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	889b      	ldrh	r3, [r3, #4]
 8003f52:	887a      	ldrh	r2, [r7, #2]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d301      	bcc.n	8003f5c <_reg_set+0x28>
 8003f58:	f7ff fc12 	bl	8003780 <__mb_failure>
	reg->data[addr] = value;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	887b      	ldrh	r3, [r7, #2]
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	4413      	add	r3, r2
 8003f66:	883a      	ldrh	r2, [r7, #0]
 8003f68:	801a      	strh	r2, [r3, #0]
}
 8003f6a:	bf00      	nop
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <_reg_get>:

static uint16_t _reg_get(mb_data_reg_t *reg, uint16_t addr) {
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	807b      	strh	r3, [r7, #2]
	mb_assert(reg);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <_reg_get+0x16>
 8003f84:	f7ff fbfc 	bl	8003780 <__mb_failure>
	mb_assert(addr < reg->nreg);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	889b      	ldrh	r3, [r3, #4]
 8003f8c:	887a      	ldrh	r2, [r7, #2]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d301      	bcc.n	8003f96 <_reg_get+0x24>
 8003f92:	f7ff fbf5 	bl	8003780 <__mb_failure>
	
	return reg->data[addr];
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	887b      	ldrh	r3, [r7, #2]
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	4413      	add	r3, r2
 8003fa0:	881b      	ldrh	r3, [r3, #0]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <__libc_init_array>:
 8003fac:	b570      	push	{r4, r5, r6, lr}
 8003fae:	4d0d      	ldr	r5, [pc, #52]	; (8003fe4 <__libc_init_array+0x38>)
 8003fb0:	4c0d      	ldr	r4, [pc, #52]	; (8003fe8 <__libc_init_array+0x3c>)
 8003fb2:	1b64      	subs	r4, r4, r5
 8003fb4:	10a4      	asrs	r4, r4, #2
 8003fb6:	2600      	movs	r6, #0
 8003fb8:	42a6      	cmp	r6, r4
 8003fba:	d109      	bne.n	8003fd0 <__libc_init_array+0x24>
 8003fbc:	4d0b      	ldr	r5, [pc, #44]	; (8003fec <__libc_init_array+0x40>)
 8003fbe:	4c0c      	ldr	r4, [pc, #48]	; (8003ff0 <__libc_init_array+0x44>)
 8003fc0:	f000 f820 	bl	8004004 <_init>
 8003fc4:	1b64      	subs	r4, r4, r5
 8003fc6:	10a4      	asrs	r4, r4, #2
 8003fc8:	2600      	movs	r6, #0
 8003fca:	42a6      	cmp	r6, r4
 8003fcc:	d105      	bne.n	8003fda <__libc_init_array+0x2e>
 8003fce:	bd70      	pop	{r4, r5, r6, pc}
 8003fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fd4:	4798      	blx	r3
 8003fd6:	3601      	adds	r6, #1
 8003fd8:	e7ee      	b.n	8003fb8 <__libc_init_array+0xc>
 8003fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fde:	4798      	blx	r3
 8003fe0:	3601      	adds	r6, #1
 8003fe2:	e7f2      	b.n	8003fca <__libc_init_array+0x1e>
 8003fe4:	0800406c 	.word	0x0800406c
 8003fe8:	0800406c 	.word	0x0800406c
 8003fec:	0800406c 	.word	0x0800406c
 8003ff0:	08004070 	.word	0x08004070

08003ff4 <memset>:
 8003ff4:	4402      	add	r2, r0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d100      	bne.n	8003ffe <memset+0xa>
 8003ffc:	4770      	bx	lr
 8003ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8004002:	e7f9      	b.n	8003ff8 <memset+0x4>

08004004 <_init>:
 8004004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004006:	bf00      	nop
 8004008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800400a:	bc08      	pop	{r3}
 800400c:	469e      	mov	lr, r3
 800400e:	4770      	bx	lr

08004010 <_fini>:
 8004010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004012:	bf00      	nop
 8004014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004016:	bc08      	pop	{r3}
 8004018:	469e      	mov	lr, r3
 800401a:	4770      	bx	lr
