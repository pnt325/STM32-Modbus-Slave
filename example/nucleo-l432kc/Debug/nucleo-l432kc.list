
nucleo-l432kc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ba8  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08006d34  08006d34  00016d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f04  08006f04  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006f04  08006f04  00016f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f0c  08006f0c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f0c  08006f0c  00016f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f10  08006f10  00016f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003294  2000000c  08006f20  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200032a0  08006f20  000232a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001763c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037a3  00000000  00000000  00037678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  0003ae20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001240  00000000  00000000  0003c1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000228a1  00000000  00000000  0003d438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000194b6  00000000  00000000  0005fcd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdac1  00000000  00000000  0007918f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00146c50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f84  00000000  00000000  00146ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08006d1c 	.word	0x08006d1c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08006d1c 	.word	0x08006d1c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 030c 	add.w	r3, r7, #12
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	4b1d      	ldr	r3, [pc, #116]	; (800055c <MX_GPIO_Init+0x8c>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	4a1c      	ldr	r2, [pc, #112]	; (800055c <MX_GPIO_Init+0x8c>)
 80004ec:	f043 0304 	orr.w	r3, r3, #4
 80004f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004f2:	4b1a      	ldr	r3, [pc, #104]	; (800055c <MX_GPIO_Init+0x8c>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	f003 0304 	and.w	r3, r3, #4
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fe:	4b17      	ldr	r3, [pc, #92]	; (800055c <MX_GPIO_Init+0x8c>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	4a16      	ldr	r2, [pc, #88]	; (800055c <MX_GPIO_Init+0x8c>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800050a:	4b14      	ldr	r3, [pc, #80]	; (800055c <MX_GPIO_Init+0x8c>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <MX_GPIO_Init+0x8c>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	4a10      	ldr	r2, [pc, #64]	; (800055c <MX_GPIO_Init+0x8c>)
 800051c:	f043 0302 	orr.w	r3, r3, #2
 8000520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <MX_GPIO_Init+0x8c>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	f003 0302 	and.w	r3, r3, #2
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	2108      	movs	r1, #8
 8000532:	480b      	ldr	r0, [pc, #44]	; (8000560 <MX_GPIO_Init+0x90>)
 8000534:	f000 febe 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000538:	2308      	movs	r3, #8
 800053a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053c:	2301      	movs	r3, #1
 800053e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000544:	2300      	movs	r3, #0
 8000546:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	4619      	mov	r1, r3
 800054e:	4804      	ldr	r0, [pc, #16]	; (8000560 <MX_GPIO_Init+0x90>)
 8000550:	f000 fd46 	bl	8000fe0 <HAL_GPIO_Init>

}
 8000554:	bf00      	nop
 8000556:	3720      	adds	r7, #32
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40021000 	.word	0x40021000
 8000560:	48000400 	.word	0x48000400

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000568:	f000 fb35 	bl	8000bd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056c:	f000 f80f 	bl	800058e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000570:	f7ff ffae 	bl	80004d0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000574:	f000 f936 	bl	80007e4 <MX_TIM2_Init>
  MX_TIM7_Init();
 8000578:	f000 f982 	bl	8000880 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 800057c:	f000 fa22 	bl	80009c4 <MX_USART1_UART_Init>
  MX_LPUART1_UART_Init();
 8000580:	f000 f9f4 	bl	800096c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
	modbus_slave_example_init();
 8000584:	f000 f859 	bl	800063a <modbus_slave_example_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		modbus_slave_example_run();
 8000588:	f000 f89d 	bl	80006c6 <modbus_slave_example_run>
 800058c:	e7fc      	b.n	8000588 <main+0x24>

0800058e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	b096      	sub	sp, #88	; 0x58
 8000592:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	2244      	movs	r2, #68	; 0x44
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f006 fbb5 	bl	8006d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a2:	463b      	mov	r3, r7
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005b4:	f000 fec4 	bl	8001340 <HAL_PWREx_ControlVoltageScaling>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005be:	f000 f837 	bl	8000630 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c2:	2302      	movs	r3, #2
 80005c4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005cc:	2310      	movs	r3, #16
 80005ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d0:	2302      	movs	r3, #2
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d4:	2302      	movs	r3, #2
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005d8:	2301      	movs	r3, #1
 80005da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005dc:	230a      	movs	r3, #10
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005e0:	2307      	movs	r3, #7
 80005e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 fefb 	bl	80013ec <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005fc:	f000 f818 	bl	8000630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	230f      	movs	r3, #15
 8000602:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000604:	2303      	movs	r3, #3
 8000606:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000614:	463b      	mov	r3, r7
 8000616:	2104      	movs	r1, #4
 8000618:	4618      	mov	r0, r3
 800061a:	f001 fafb 	bl	8001c14 <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000624:	f000 f804 	bl	8000630 <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	3758      	adds	r7, #88	; 0x58
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000634:	b672      	cpsid	i
}
 8000636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000638:	e7fe      	b.n	8000638 <Error_Handler+0x8>

0800063a <modbus_slave_example_init>:
 */

#include "../../lib/bsp_mb_slave.h"

void modbus_slave_example_init(void)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	af00      	add	r7, sp, #0
	bsp_mb_slave_init();
 800063e:	f004 f8d5 	bl	80047ec <bsp_mb_slave_init>

	// Update coil status
	bsp_mb_coil_set(0, 1);
 8000642:	2101      	movs	r1, #1
 8000644:	2000      	movs	r0, #0
 8000646:	f004 f915 	bl	8004874 <bsp_mb_coil_set>
	bsp_mb_coil_set(1, 0);
 800064a:	2100      	movs	r1, #0
 800064c:	2001      	movs	r0, #1
 800064e:	f004 f911 	bl	8004874 <bsp_mb_coil_set>
	bsp_mb_coil_set(2, 1);
 8000652:	2101      	movs	r1, #1
 8000654:	2002      	movs	r0, #2
 8000656:	f004 f90d 	bl	8004874 <bsp_mb_coil_set>
	bsp_mb_coil_set(3, 0);
 800065a:	2100      	movs	r1, #0
 800065c:	2003      	movs	r0, #3
 800065e:	f004 f909 	bl	8004874 <bsp_mb_coil_set>

	// Update input register
	bsp_mb_discrete_input_set(0, 0);
 8000662:	2100      	movs	r1, #0
 8000664:	2000      	movs	r0, #0
 8000666:	f004 f91b 	bl	80048a0 <bsp_mb_discrete_input_set>
	bsp_mb_discrete_input_set(1, 1);
 800066a:	2101      	movs	r1, #1
 800066c:	2001      	movs	r0, #1
 800066e:	f004 f917 	bl	80048a0 <bsp_mb_discrete_input_set>
	bsp_mb_discrete_input_set(2, 0);
 8000672:	2100      	movs	r1, #0
 8000674:	2002      	movs	r0, #2
 8000676:	f004 f913 	bl	80048a0 <bsp_mb_discrete_input_set>
	bsp_mb_discrete_input_set(3, 1);
 800067a:	2101      	movs	r1, #1
 800067c:	2003      	movs	r0, #3
 800067e:	f004 f90f 	bl	80048a0 <bsp_mb_discrete_input_set>

	// Update input register
	bsp_mb_input_reg_set(0, 1);
 8000682:	2101      	movs	r1, #1
 8000684:	2000      	movs	r0, #0
 8000686:	f004 f921 	bl	80048cc <bsp_mb_input_reg_set>
	bsp_mb_input_reg_set(1, 2);
 800068a:	2102      	movs	r1, #2
 800068c:	2001      	movs	r0, #1
 800068e:	f004 f91d 	bl	80048cc <bsp_mb_input_reg_set>
	bsp_mb_input_reg_set(2, 3);
 8000692:	2103      	movs	r1, #3
 8000694:	2002      	movs	r0, #2
 8000696:	f004 f919 	bl	80048cc <bsp_mb_input_reg_set>
	bsp_mb_input_reg_set(3, 4);
 800069a:	2104      	movs	r1, #4
 800069c:	2003      	movs	r0, #3
 800069e:	f004 f915 	bl	80048cc <bsp_mb_input_reg_set>

	// Update holding register
	bsp_mb_holding_reg_set(0, 5);
 80006a2:	2105      	movs	r1, #5
 80006a4:	2000      	movs	r0, #0
 80006a6:	f004 f927 	bl	80048f8 <bsp_mb_holding_reg_set>
	bsp_mb_holding_reg_set(1, 6);
 80006aa:	2106      	movs	r1, #6
 80006ac:	2001      	movs	r0, #1
 80006ae:	f004 f923 	bl	80048f8 <bsp_mb_holding_reg_set>
	bsp_mb_holding_reg_set(2, 7);
 80006b2:	2107      	movs	r1, #7
 80006b4:	2002      	movs	r0, #2
 80006b6:	f004 f91f 	bl	80048f8 <bsp_mb_holding_reg_set>
	bsp_mb_holding_reg_set(3, 8);
 80006ba:	2108      	movs	r1, #8
 80006bc:	2003      	movs	r0, #3
 80006be:	f004 f91b 	bl	80048f8 <bsp_mb_holding_reg_set>
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <modbus_slave_example_run>:

void modbus_slave_example_run(void)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	af00      	add	r7, sp, #0
	bsp_mb_slave_handle();
 80006ca:	f004 f8c7 	bl	800485c <bsp_mb_slave_handle>
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <HAL_MspInit+0x44>)
 80006dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006de:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <HAL_MspInit+0x44>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6613      	str	r3, [r2, #96]	; 0x60
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <HAL_MspInit+0x44>)
 80006e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_MspInit+0x44>)
 80006f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f6:	4a08      	ldr	r2, [pc, #32]	; (8000718 <HAL_MspInit+0x44>)
 80006f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fc:	6593      	str	r3, [r2, #88]	; 0x58
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_MspInit+0x44>)
 8000700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000

0800071c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <NMI_Handler+0x4>

08000722 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000726:	e7fe      	b.n	8000726 <HardFault_Handler+0x4>

08000728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800072c:	e7fe      	b.n	800072c <MemManage_Handler+0x4>

0800072e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <BusFault_Handler+0x4>

08000734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <UsageFault_Handler+0x4>

0800073a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr

08000748 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr

08000756 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000768:	f000 fa8a 	bl	8000c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}

08000770 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000774:	4802      	ldr	r0, [pc, #8]	; (8000780 <TIM2_IRQHandler+0x10>)
 8000776:	f002 f834 	bl	80027e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000028 	.word	0x20000028

08000784 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000788:	4802      	ldr	r0, [pc, #8]	; (8000794 <USART1_IRQHandler+0x10>)
 800078a:	f002 fd97 	bl	80032bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000144 	.word	0x20000144

08000798 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800079c:	4802      	ldr	r0, [pc, #8]	; (80007a8 <TIM7_IRQHandler+0x10>)
 800079e:	f002 f820 	bl	80027e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000074 	.word	0x20000074

080007ac <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80007b0:	4802      	ldr	r0, [pc, #8]	; (80007bc <LPUART1_IRQHandler+0x10>)
 80007b2:	f002 fd83 	bl	80032bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200000c0 	.word	0x200000c0

080007c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <SystemInit+0x20>)
 80007c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ca:	4a05      	ldr	r2, [pc, #20]	; (80007e0 <SystemInit+0x20>)
 80007cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ea:	f107 0310 	add.w	r3, r7, #16
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000802:	4b1e      	ldr	r3, [pc, #120]	; (800087c <MX_TIM2_Init+0x98>)
 8000804:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000808:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80;
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_TIM2_Init+0x98>)
 800080c:	2250      	movs	r2, #80	; 0x50
 800080e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000810:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_TIM2_Init+0x98>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_TIM2_Init+0x98>)
 8000818:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800081c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081e:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_TIM2_Init+0x98>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_TIM2_Init+0x98>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800082a:	4814      	ldr	r0, [pc, #80]	; (800087c <MX_TIM2_Init+0x98>)
 800082c:	f001 fefe 	bl	800262c <HAL_TIM_Base_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000836:	f7ff fefb 	bl	8000630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	4619      	mov	r1, r3
 8000846:	480d      	ldr	r0, [pc, #52]	; (800087c <MX_TIM2_Init+0x98>)
 8000848:	f002 f8ea 	bl	8002a20 <HAL_TIM_ConfigClockSource>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000852:	f7ff feed 	bl	8000630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	4619      	mov	r1, r3
 8000862:	4806      	ldr	r0, [pc, #24]	; (800087c <MX_TIM2_Init+0x98>)
 8000864:	f002 facc 	bl	8002e00 <HAL_TIMEx_MasterConfigSynchronization>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800086e:	f7ff fedf 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	3720      	adds	r7, #32
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000028 	.word	0x20000028

08000880 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_TIM7_Init+0x64>)
 8000892:	4a15      	ldr	r2, [pc, #84]	; (80008e8 <MX_TIM7_Init+0x68>)
 8000894:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 80;
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_TIM7_Init+0x64>)
 8000898:	2250      	movs	r2, #80	; 0x50
 800089a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_TIM7_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 30;
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <MX_TIM7_Init+0x64>)
 80008a4:	221e      	movs	r2, #30
 80008a6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_TIM7_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80008ae:	480d      	ldr	r0, [pc, #52]	; (80008e4 <MX_TIM7_Init+0x64>)
 80008b0:	f001 febc 	bl	800262c <HAL_TIM_Base_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80008ba:	f7ff feb9 	bl	8000630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	4806      	ldr	r0, [pc, #24]	; (80008e4 <MX_TIM7_Init+0x64>)
 80008cc:	f002 fa98 	bl	8002e00 <HAL_TIMEx_MasterConfigSynchronization>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80008d6:	f7ff feab 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000074 	.word	0x20000074
 80008e8:	40001400 	.word	0x40001400

080008ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008fc:	d114      	bne.n	8000928 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008fe:	4b19      	ldr	r3, [pc, #100]	; (8000964 <HAL_TIM_Base_MspInit+0x78>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000902:	4a18      	ldr	r2, [pc, #96]	; (8000964 <HAL_TIM_Base_MspInit+0x78>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6593      	str	r3, [r2, #88]	; 0x58
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <HAL_TIM_Base_MspInit+0x78>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	201c      	movs	r0, #28
 800091c:	f000 faab 	bl	8000e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000920:	201c      	movs	r0, #28
 8000922:	f000 fac4 	bl	8000eae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000926:	e018      	b.n	800095a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <HAL_TIM_Base_MspInit+0x7c>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d113      	bne.n	800095a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <HAL_TIM_Base_MspInit+0x78>)
 8000934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <HAL_TIM_Base_MspInit+0x78>)
 8000938:	f043 0320 	orr.w	r3, r3, #32
 800093c:	6593      	str	r3, [r2, #88]	; 0x58
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <HAL_TIM_Base_MspInit+0x78>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	f003 0320 	and.w	r3, r3, #32
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2100      	movs	r1, #0
 800094e:	2037      	movs	r0, #55	; 0x37
 8000950:	f000 fa91 	bl	8000e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000954:	2037      	movs	r0, #55	; 0x37
 8000956:	f000 faaa 	bl	8000eae <HAL_NVIC_EnableIRQ>
}
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000
 8000968:	40001400 	.word	0x40001400

0800096c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_LPUART1_UART_Init+0x50>)
 8000972:	4a13      	ldr	r2, [pc, #76]	; (80009c0 <MX_LPUART1_UART_Init+0x54>)
 8000974:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_LPUART1_UART_Init+0x50>)
 8000978:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800097c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_LPUART1_UART_Init+0x50>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <MX_LPUART1_UART_Init+0x50>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_LPUART1_UART_Init+0x50>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <MX_LPUART1_UART_Init+0x50>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_LPUART1_UART_Init+0x50>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <MX_LPUART1_UART_Init+0x50>)
 800099e:	2200      	movs	r2, #0
 80009a0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_LPUART1_UART_Init+0x50>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_LPUART1_UART_Init+0x50>)
 80009aa:	f002 faad 	bl	8002f08 <HAL_UART_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80009b4:	f7ff fe3c 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200000c0 	.word	0x200000c0
 80009c0:	40008000 	.word	0x40008000

080009c4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_USART1_UART_Init+0x58>)
 80009ca:	4a15      	ldr	r2, [pc, #84]	; (8000a20 <MX_USART1_UART_Init+0x5c>)
 80009cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_USART1_UART_Init+0x58>)
 80009d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_USART1_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_USART1_UART_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_USART1_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_USART1_UART_Init+0x58>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_USART1_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_USART1_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_USART1_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_USART1_UART_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_USART1_UART_Init+0x58>)
 8000a08:	f002 fa7e 	bl	8002f08 <HAL_UART_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a12:	f7ff fe0d 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000144 	.word	0x20000144
 8000a20:	40013800 	.word	0x40013800

08000a24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b0a0      	sub	sp, #128	; 0x80
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a3c:	f107 0318 	add.w	r3, r7, #24
 8000a40:	2254      	movs	r2, #84	; 0x54
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f006 f961 	bl	8006d0c <memset>
  if(uartHandle->Instance==LPUART1)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a4a      	ldr	r2, [pc, #296]	; (8000b78 <HAL_UART_MspInit+0x154>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d13f      	bne.n	8000ad4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a54:	2320      	movs	r3, #32
 8000a56:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a5c:	f107 0318 	add.w	r3, r7, #24
 8000a60:	4618      	mov	r0, r3
 8000a62:	f001 fafb 	bl	800205c <HAL_RCCEx_PeriphCLKConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a6c:	f7ff fde0 	bl	8000630 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a70:	4b42      	ldr	r3, [pc, #264]	; (8000b7c <HAL_UART_MspInit+0x158>)
 8000a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a74:	4a41      	ldr	r2, [pc, #260]	; (8000b7c <HAL_UART_MspInit+0x158>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000a7c:	4b3f      	ldr	r3, [pc, #252]	; (8000b7c <HAL_UART_MspInit+0x158>)
 8000a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	617b      	str	r3, [r7, #20]
 8000a86:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	4b3c      	ldr	r3, [pc, #240]	; (8000b7c <HAL_UART_MspInit+0x158>)
 8000a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8c:	4a3b      	ldr	r2, [pc, #236]	; (8000b7c <HAL_UART_MspInit+0x158>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a94:	4b39      	ldr	r3, [pc, #228]	; (8000b7c <HAL_UART_MspInit+0x158>)
 8000a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aa0:	230c      	movs	r3, #12
 8000aa2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000abe:	f000 fa8f 	bl	8000fe0 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2046      	movs	r0, #70	; 0x46
 8000ac8:	f000 f9d5 	bl	8000e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000acc:	2046      	movs	r0, #70	; 0x46
 8000ace:	f000 f9ee 	bl	8000eae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ad2:	e04c      	b.n	8000b6e <HAL_UART_MspInit+0x14a>
  else if(uartHandle->Instance==USART1)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a29      	ldr	r2, [pc, #164]	; (8000b80 <HAL_UART_MspInit+0x15c>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d147      	bne.n	8000b6e <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae6:	f107 0318 	add.w	r3, r7, #24
 8000aea:	4618      	mov	r0, r3
 8000aec:	f001 fab6 	bl	800205c <HAL_RCCEx_PeriphCLKConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8000af6:	f7ff fd9b 	bl	8000630 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000afa:	4b20      	ldr	r3, [pc, #128]	; (8000b7c <HAL_UART_MspInit+0x158>)
 8000afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afe:	4a1f      	ldr	r2, [pc, #124]	; (8000b7c <HAL_UART_MspInit+0x158>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b04:	6613      	str	r3, [r2, #96]	; 0x60
 8000b06:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <HAL_UART_MspInit+0x158>)
 8000b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <HAL_UART_MspInit+0x158>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	4a19      	ldr	r2, [pc, #100]	; (8000b7c <HAL_UART_MspInit+0x158>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1e:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <HAL_UART_MspInit+0x158>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b3c:	2307      	movs	r3, #7
 8000b3e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b40:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b44:	4619      	mov	r1, r3
 8000b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4a:	f000 fa49 	bl	8000fe0 <HAL_GPIO_Init>
    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB6);
 8000b4e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000b52:	f000 fbc7 	bl	80012e4 <HAL_I2CEx_EnableFastModePlus>
    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 8000b56:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b5a:	f000 fbc3 	bl	80012e4 <HAL_I2CEx_EnableFastModePlus>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2100      	movs	r1, #0
 8000b62:	2025      	movs	r0, #37	; 0x25
 8000b64:	f000 f987 	bl	8000e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b68:	2025      	movs	r0, #37	; 0x25
 8000b6a:	f000 f9a0 	bl	8000eae <HAL_NVIC_EnableIRQ>
}
 8000b6e:	bf00      	nop
 8000b70:	3780      	adds	r7, #128	; 0x80
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40008000 	.word	0x40008000
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	40013800 	.word	0x40013800

08000b84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bbc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b88:	f7ff fe1a 	bl	80007c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b8c:	480c      	ldr	r0, [pc, #48]	; (8000bc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8e:	490d      	ldr	r1, [pc, #52]	; (8000bc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b90:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <LoopForever+0xe>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba4:	4c0a      	ldr	r4, [pc, #40]	; (8000bd0 <LoopForever+0x16>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bb2:	f006 f879 	bl	8006ca8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bb6:	f7ff fcd5 	bl	8000564 <main>

08000bba <LoopForever>:

LoopForever:
    b LoopForever
 8000bba:	e7fe      	b.n	8000bba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bbc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bc8:	08006f14 	.word	0x08006f14
  ldr r2, =_sbss
 8000bcc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bd0:	200032a0 	.word	0x200032a0

08000bd4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC1_IRQHandler>

08000bd6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be0:	2003      	movs	r0, #3
 8000be2:	f000 f93d 	bl	8000e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000be6:	2000      	movs	r0, #0
 8000be8:	f000 f80e 	bl	8000c08 <HAL_InitTick>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d002      	beq.n	8000bf8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	71fb      	strb	r3, [r7, #7]
 8000bf6:	e001      	b.n	8000bfc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bf8:	f7ff fd6c 	bl	80006d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c10:	2300      	movs	r3, #0
 8000c12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_InitTick+0x6c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d023      	beq.n	8000c64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <HAL_InitTick+0x70>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <HAL_InitTick+0x6c>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f949 	bl	8000eca <HAL_SYSTICK_Config>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d10f      	bne.n	8000c5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b0f      	cmp	r3, #15
 8000c42:	d809      	bhi.n	8000c58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c44:	2200      	movs	r2, #0
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f000 f913 	bl	8000e76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c50:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <HAL_InitTick+0x74>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6013      	str	r3, [r2, #0]
 8000c56:	e007      	b.n	8000c68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e004      	b.n	8000c68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	73fb      	strb	r3, [r7, #15]
 8000c62:	e001      	b.n	8000c68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000008 	.word	0x20000008
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000004 	.word	0x20000004

08000c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_IncTick+0x20>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	200001c8 	.word	0x200001c8

08000ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <HAL_GetTick+0x14>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	200001c8 	.word	0x200001c8

08000cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf2:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	60d3      	str	r3, [r2, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <__NVIC_GetPriorityGrouping+0x18>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	f003 0307 	and.w	r3, r3, #7
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	db0b      	blt.n	8000d4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	f003 021f 	and.w	r2, r3, #31
 8000d3c:	4907      	ldr	r1, [pc, #28]	; (8000d5c <__NVIC_EnableIRQ+0x38>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	095b      	lsrs	r3, r3, #5
 8000d44:	2001      	movs	r0, #1
 8000d46:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000e100 	.word	0xe000e100

08000d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	db0a      	blt.n	8000d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	490c      	ldr	r1, [pc, #48]	; (8000dac <__NVIC_SetPriority+0x4c>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d88:	e00a      	b.n	8000da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	; (8000db0 <__NVIC_SetPriority+0x50>)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	3b04      	subs	r3, #4
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	761a      	strb	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f1c3 0307 	rsb	r3, r3, #7
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	bf28      	it	cs
 8000dd2:	2304      	movcs	r3, #4
 8000dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d902      	bls.n	8000de4 <NVIC_EncodePriority+0x30>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3b03      	subs	r3, #3
 8000de2:	e000      	b.n	8000de6 <NVIC_EncodePriority+0x32>
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	43d9      	mvns	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	4313      	orrs	r3, r2
         );
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3724      	adds	r7, #36	; 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e2c:	d301      	bcc.n	8000e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00f      	b.n	8000e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <SysTick_Config+0x40>)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3a:	210f      	movs	r1, #15
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f7ff ff8e 	bl	8000d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <SysTick_Config+0x40>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <SysTick_Config+0x40>)
 8000e4c:	2207      	movs	r2, #7
 8000e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	e000e010 	.word	0xe000e010

08000e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff ff29 	bl	8000cc0 <__NVIC_SetPriorityGrouping>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b086      	sub	sp, #24
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
 8000e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e88:	f7ff ff3e 	bl	8000d08 <__NVIC_GetPriorityGrouping>
 8000e8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	68b9      	ldr	r1, [r7, #8]
 8000e92:	6978      	ldr	r0, [r7, #20]
 8000e94:	f7ff ff8e 	bl	8000db4 <NVIC_EncodePriority>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff5d 	bl	8000d60 <__NVIC_SetPriority>
}
 8000ea6:	bf00      	nop
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff31 	bl	8000d24 <__NVIC_EnableIRQ>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ffa2 	bl	8000e1c <SysTick_Config>
 8000ed8:	4603      	mov	r3, r0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b085      	sub	sp, #20
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d008      	beq.n	8000f0c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2204      	movs	r2, #4
 8000efe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e022      	b.n	8000f52 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f022 020e 	bic.w	r2, r2, #14
 8000f1a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 0201 	bic.w	r2, r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f30:	f003 021c 	and.w	r2, r3, #28
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	2101      	movs	r1, #1
 8000f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2201      	movs	r2, #1
 8000f44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b084      	sub	sp, #16
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d005      	beq.n	8000f82 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2204      	movs	r2, #4
 8000f7a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	e029      	b.n	8000fd6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f022 020e 	bic.w	r2, r2, #14
 8000f90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f022 0201 	bic.w	r2, r2, #1
 8000fa0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	f003 021c 	and.w	r2, r3, #28
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	2101      	movs	r1, #1
 8000fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	4798      	blx	r3
    }
  }
  return status;
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b087      	sub	sp, #28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fee:	e148      	b.n	8001282 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 813a 	beq.w	800127c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b01      	cmp	r3, #1
 8001012:	d005      	beq.n	8001020 <HAL_GPIO_Init+0x40>
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d130      	bne.n	8001082 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68da      	ldr	r2, [r3, #12]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001056:	2201      	movs	r2, #1
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	091b      	lsrs	r3, r3, #4
 800106c:	f003 0201 	and.w	r2, r3, #1
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	2b03      	cmp	r3, #3
 800108c:	d017      	beq.n	80010be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d123      	bne.n	8001112 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	08da      	lsrs	r2, r3, #3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3208      	adds	r2, #8
 80010d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	220f      	movs	r2, #15
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	691a      	ldr	r2, [r3, #16]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	f003 0307 	and.w	r3, r3, #7
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	08da      	lsrs	r2, r3, #3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3208      	adds	r2, #8
 800110c:	6939      	ldr	r1, [r7, #16]
 800110e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	2203      	movs	r2, #3
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0203 	and.w	r2, r3, #3
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 8094 	beq.w	800127c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001154:	4b52      	ldr	r3, [pc, #328]	; (80012a0 <HAL_GPIO_Init+0x2c0>)
 8001156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001158:	4a51      	ldr	r2, [pc, #324]	; (80012a0 <HAL_GPIO_Init+0x2c0>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	6613      	str	r3, [r2, #96]	; 0x60
 8001160:	4b4f      	ldr	r3, [pc, #316]	; (80012a0 <HAL_GPIO_Init+0x2c0>)
 8001162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800116c:	4a4d      	ldr	r2, [pc, #308]	; (80012a4 <HAL_GPIO_Init+0x2c4>)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	089b      	lsrs	r3, r3, #2
 8001172:	3302      	adds	r3, #2
 8001174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	220f      	movs	r2, #15
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001196:	d00d      	beq.n	80011b4 <HAL_GPIO_Init+0x1d4>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a43      	ldr	r2, [pc, #268]	; (80012a8 <HAL_GPIO_Init+0x2c8>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d007      	beq.n	80011b0 <HAL_GPIO_Init+0x1d0>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a42      	ldr	r2, [pc, #264]	; (80012ac <HAL_GPIO_Init+0x2cc>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d101      	bne.n	80011ac <HAL_GPIO_Init+0x1cc>
 80011a8:	2302      	movs	r3, #2
 80011aa:	e004      	b.n	80011b6 <HAL_GPIO_Init+0x1d6>
 80011ac:	2307      	movs	r3, #7
 80011ae:	e002      	b.n	80011b6 <HAL_GPIO_Init+0x1d6>
 80011b0:	2301      	movs	r3, #1
 80011b2:	e000      	b.n	80011b6 <HAL_GPIO_Init+0x1d6>
 80011b4:	2300      	movs	r3, #0
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	f002 0203 	and.w	r2, r2, #3
 80011bc:	0092      	lsls	r2, r2, #2
 80011be:	4093      	lsls	r3, r2
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011c6:	4937      	ldr	r1, [pc, #220]	; (80012a4 <HAL_GPIO_Init+0x2c4>)
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	089b      	lsrs	r3, r3, #2
 80011cc:	3302      	adds	r3, #2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011d4:	4b36      	ldr	r3, [pc, #216]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	43db      	mvns	r3, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011f8:	4a2d      	ldr	r2, [pc, #180]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	43db      	mvns	r3, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001222:	4a23      	ldr	r2, [pc, #140]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001228:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	43db      	mvns	r3, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800124c:	4a18      	ldr	r2, [pc, #96]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	43db      	mvns	r3, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001276:	4a0e      	ldr	r2, [pc, #56]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	3301      	adds	r3, #1
 8001280:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	fa22 f303 	lsr.w	r3, r2, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	f47f aeaf 	bne.w	8000ff0 <HAL_GPIO_Init+0x10>
  }
}
 8001292:	bf00      	nop
 8001294:	bf00      	nop
 8001296:	371c      	adds	r7, #28
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40010000 	.word	0x40010000
 80012a8:	48000400 	.word	0x48000400
 80012ac:	48000800 	.word	0x48000800
 80012b0:	40010400 	.word	0x40010400

080012b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]
 80012c0:	4613      	mov	r3, r2
 80012c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c4:	787b      	ldrb	r3, [r7, #1]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012d0:	e002      	b.n	80012d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012d2:	887a      	ldrh	r2, [r7, #2]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ec:	4b0b      	ldr	r3, [pc, #44]	; (800131c <HAL_I2CEx_EnableFastModePlus+0x38>)
 80012ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f0:	4a0a      	ldr	r2, [pc, #40]	; (800131c <HAL_I2CEx_EnableFastModePlus+0x38>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	6613      	str	r3, [r2, #96]	; 0x60
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <HAL_I2CEx_EnableFastModePlus+0x38>)
 80012fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	4905      	ldr	r1, [pc, #20]	; (8001320 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4313      	orrs	r3, r2
 800130e:	604b      	str	r3, [r1, #4]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	40021000 	.word	0x40021000
 8001320:	40010000 	.word	0x40010000

08001324 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <HAL_PWREx_GetVoltageRange+0x18>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40007000 	.word	0x40007000

08001340 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800134e:	d130      	bne.n	80013b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001350:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800135c:	d038      	beq.n	80013d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800135e:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001366:	4a1e      	ldr	r2, [pc, #120]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001368:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800136c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800136e:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2232      	movs	r2, #50	; 0x32
 8001374:	fb02 f303 	mul.w	r3, r2, r3
 8001378:	4a1b      	ldr	r2, [pc, #108]	; (80013e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	0c9b      	lsrs	r3, r3, #18
 8001380:	3301      	adds	r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001384:	e002      	b.n	800138c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	3b01      	subs	r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001398:	d102      	bne.n	80013a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1f2      	bne.n	8001386 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ac:	d110      	bne.n	80013d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e00f      	b.n	80013d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013be:	d007      	beq.n	80013d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013c8:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40007000 	.word	0x40007000
 80013e4:	20000000 	.word	0x20000000
 80013e8:	431bde83 	.word	0x431bde83

080013ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d102      	bne.n	8001400 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	f000 bc02 	b.w	8001c04 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001400:	4b96      	ldr	r3, [pc, #600]	; (800165c <HAL_RCC_OscConfig+0x270>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 030c 	and.w	r3, r3, #12
 8001408:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800140a:	4b94      	ldr	r3, [pc, #592]	; (800165c <HAL_RCC_OscConfig+0x270>)
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0310 	and.w	r3, r3, #16
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 80e4 	beq.w	80015ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d007      	beq.n	8001438 <HAL_RCC_OscConfig+0x4c>
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	2b0c      	cmp	r3, #12
 800142c:	f040 808b 	bne.w	8001546 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	2b01      	cmp	r3, #1
 8001434:	f040 8087 	bne.w	8001546 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001438:	4b88      	ldr	r3, [pc, #544]	; (800165c <HAL_RCC_OscConfig+0x270>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d005      	beq.n	8001450 <HAL_RCC_OscConfig+0x64>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e3d9      	b.n	8001c04 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a1a      	ldr	r2, [r3, #32]
 8001454:	4b81      	ldr	r3, [pc, #516]	; (800165c <HAL_RCC_OscConfig+0x270>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	2b00      	cmp	r3, #0
 800145e:	d004      	beq.n	800146a <HAL_RCC_OscConfig+0x7e>
 8001460:	4b7e      	ldr	r3, [pc, #504]	; (800165c <HAL_RCC_OscConfig+0x270>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001468:	e005      	b.n	8001476 <HAL_RCC_OscConfig+0x8a>
 800146a:	4b7c      	ldr	r3, [pc, #496]	; (800165c <HAL_RCC_OscConfig+0x270>)
 800146c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001470:	091b      	lsrs	r3, r3, #4
 8001472:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001476:	4293      	cmp	r3, r2
 8001478:	d223      	bcs.n	80014c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	4618      	mov	r0, r3
 8001480:	f000 fd8c 	bl	8001f9c <RCC_SetFlashLatencyFromMSIRange>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e3ba      	b.n	8001c04 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800148e:	4b73      	ldr	r3, [pc, #460]	; (800165c <HAL_RCC_OscConfig+0x270>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a72      	ldr	r2, [pc, #456]	; (800165c <HAL_RCC_OscConfig+0x270>)
 8001494:	f043 0308 	orr.w	r3, r3, #8
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	4b70      	ldr	r3, [pc, #448]	; (800165c <HAL_RCC_OscConfig+0x270>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	496d      	ldr	r1, [pc, #436]	; (800165c <HAL_RCC_OscConfig+0x270>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ac:	4b6b      	ldr	r3, [pc, #428]	; (800165c <HAL_RCC_OscConfig+0x270>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	021b      	lsls	r3, r3, #8
 80014ba:	4968      	ldr	r1, [pc, #416]	; (800165c <HAL_RCC_OscConfig+0x270>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	604b      	str	r3, [r1, #4]
 80014c0:	e025      	b.n	800150e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014c2:	4b66      	ldr	r3, [pc, #408]	; (800165c <HAL_RCC_OscConfig+0x270>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a65      	ldr	r2, [pc, #404]	; (800165c <HAL_RCC_OscConfig+0x270>)
 80014c8:	f043 0308 	orr.w	r3, r3, #8
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	4b63      	ldr	r3, [pc, #396]	; (800165c <HAL_RCC_OscConfig+0x270>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	4960      	ldr	r1, [pc, #384]	; (800165c <HAL_RCC_OscConfig+0x270>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014e0:	4b5e      	ldr	r3, [pc, #376]	; (800165c <HAL_RCC_OscConfig+0x270>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	495b      	ldr	r1, [pc, #364]	; (800165c <HAL_RCC_OscConfig+0x270>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d109      	bne.n	800150e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 fd4c 	bl	8001f9c <RCC_SetFlashLatencyFromMSIRange>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e37a      	b.n	8001c04 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800150e:	f000 fc81 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8001512:	4602      	mov	r2, r0
 8001514:	4b51      	ldr	r3, [pc, #324]	; (800165c <HAL_RCC_OscConfig+0x270>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	091b      	lsrs	r3, r3, #4
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	4950      	ldr	r1, [pc, #320]	; (8001660 <HAL_RCC_OscConfig+0x274>)
 8001520:	5ccb      	ldrb	r3, [r1, r3]
 8001522:	f003 031f 	and.w	r3, r3, #31
 8001526:	fa22 f303 	lsr.w	r3, r2, r3
 800152a:	4a4e      	ldr	r2, [pc, #312]	; (8001664 <HAL_RCC_OscConfig+0x278>)
 800152c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800152e:	4b4e      	ldr	r3, [pc, #312]	; (8001668 <HAL_RCC_OscConfig+0x27c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fb68 	bl	8000c08 <HAL_InitTick>
 8001538:	4603      	mov	r3, r0
 800153a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d052      	beq.n	80015e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	e35e      	b.n	8001c04 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d032      	beq.n	80015b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800154e:	4b43      	ldr	r3, [pc, #268]	; (800165c <HAL_RCC_OscConfig+0x270>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a42      	ldr	r2, [pc, #264]	; (800165c <HAL_RCC_OscConfig+0x270>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800155a:	f7ff fba5 	bl	8000ca8 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001562:	f7ff fba1 	bl	8000ca8 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e347      	b.n	8001c04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001574:	4b39      	ldr	r3, [pc, #228]	; (800165c <HAL_RCC_OscConfig+0x270>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001580:	4b36      	ldr	r3, [pc, #216]	; (800165c <HAL_RCC_OscConfig+0x270>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a35      	ldr	r2, [pc, #212]	; (800165c <HAL_RCC_OscConfig+0x270>)
 8001586:	f043 0308 	orr.w	r3, r3, #8
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	4b33      	ldr	r3, [pc, #204]	; (800165c <HAL_RCC_OscConfig+0x270>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	4930      	ldr	r1, [pc, #192]	; (800165c <HAL_RCC_OscConfig+0x270>)
 800159a:	4313      	orrs	r3, r2
 800159c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800159e:	4b2f      	ldr	r3, [pc, #188]	; (800165c <HAL_RCC_OscConfig+0x270>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	492b      	ldr	r1, [pc, #172]	; (800165c <HAL_RCC_OscConfig+0x270>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	604b      	str	r3, [r1, #4]
 80015b2:	e01a      	b.n	80015ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015b4:	4b29      	ldr	r3, [pc, #164]	; (800165c <HAL_RCC_OscConfig+0x270>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a28      	ldr	r2, [pc, #160]	; (800165c <HAL_RCC_OscConfig+0x270>)
 80015ba:	f023 0301 	bic.w	r3, r3, #1
 80015be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015c0:	f7ff fb72 	bl	8000ca8 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015c8:	f7ff fb6e 	bl	8000ca8 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e314      	b.n	8001c04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015da:	4b20      	ldr	r3, [pc, #128]	; (800165c <HAL_RCC_OscConfig+0x270>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x1dc>
 80015e6:	e000      	b.n	80015ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d073      	beq.n	80016de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d005      	beq.n	8001608 <HAL_RCC_OscConfig+0x21c>
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	2b0c      	cmp	r3, #12
 8001600:	d10e      	bne.n	8001620 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	2b03      	cmp	r3, #3
 8001606:	d10b      	bne.n	8001620 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001608:	4b14      	ldr	r3, [pc, #80]	; (800165c <HAL_RCC_OscConfig+0x270>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d063      	beq.n	80016dc <HAL_RCC_OscConfig+0x2f0>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d15f      	bne.n	80016dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e2f1      	b.n	8001c04 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001628:	d106      	bne.n	8001638 <HAL_RCC_OscConfig+0x24c>
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <HAL_RCC_OscConfig+0x270>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <HAL_RCC_OscConfig+0x270>)
 8001630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e025      	b.n	8001684 <HAL_RCC_OscConfig+0x298>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001640:	d114      	bne.n	800166c <HAL_RCC_OscConfig+0x280>
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_RCC_OscConfig+0x270>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <HAL_RCC_OscConfig+0x270>)
 8001648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	4b03      	ldr	r3, [pc, #12]	; (800165c <HAL_RCC_OscConfig+0x270>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a02      	ldr	r2, [pc, #8]	; (800165c <HAL_RCC_OscConfig+0x270>)
 8001654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	e013      	b.n	8001684 <HAL_RCC_OscConfig+0x298>
 800165c:	40021000 	.word	0x40021000
 8001660:	08006e90 	.word	0x08006e90
 8001664:	20000000 	.word	0x20000000
 8001668:	20000004 	.word	0x20000004
 800166c:	4ba0      	ldr	r3, [pc, #640]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a9f      	ldr	r2, [pc, #636]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	4b9d      	ldr	r3, [pc, #628]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a9c      	ldr	r2, [pc, #624]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 800167e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d013      	beq.n	80016b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168c:	f7ff fb0c 	bl	8000ca8 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001694:	f7ff fb08 	bl	8000ca8 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	; 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e2ae      	b.n	8001c04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016a6:	4b92      	ldr	r3, [pc, #584]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0x2a8>
 80016b2:	e014      	b.n	80016de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b4:	f7ff faf8 	bl	8000ca8 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016bc:	f7ff faf4 	bl	8000ca8 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b64      	cmp	r3, #100	; 0x64
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e29a      	b.n	8001c04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ce:	4b88      	ldr	r3, [pc, #544]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0x2d0>
 80016da:	e000      	b.n	80016de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d060      	beq.n	80017ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d005      	beq.n	80016fc <HAL_RCC_OscConfig+0x310>
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	2b0c      	cmp	r3, #12
 80016f4:	d119      	bne.n	800172a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d116      	bne.n	800172a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016fc:	4b7c      	ldr	r3, [pc, #496]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001704:	2b00      	cmp	r3, #0
 8001706:	d005      	beq.n	8001714 <HAL_RCC_OscConfig+0x328>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e277      	b.n	8001c04 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001714:	4b76      	ldr	r3, [pc, #472]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	061b      	lsls	r3, r3, #24
 8001722:	4973      	ldr	r1, [pc, #460]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001728:	e040      	b.n	80017ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d023      	beq.n	800177a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001732:	4b6f      	ldr	r3, [pc, #444]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a6e      	ldr	r2, [pc, #440]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173e:	f7ff fab3 	bl	8000ca8 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001746:	f7ff faaf 	bl	8000ca8 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e255      	b.n	8001c04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001758:	4b65      	ldr	r3, [pc, #404]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f0      	beq.n	8001746 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001764:	4b62      	ldr	r3, [pc, #392]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	061b      	lsls	r3, r3, #24
 8001772:	495f      	ldr	r1, [pc, #380]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
 8001778:	e018      	b.n	80017ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800177a:	4b5d      	ldr	r3, [pc, #372]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a5c      	ldr	r2, [pc, #368]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001786:	f7ff fa8f 	bl	8000ca8 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178e:	f7ff fa8b 	bl	8000ca8 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e231      	b.n	8001c04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017a0:	4b53      	ldr	r3, [pc, #332]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1f0      	bne.n	800178e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d03c      	beq.n	8001832 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d01c      	beq.n	80017fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c0:	4b4b      	ldr	r3, [pc, #300]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 80017c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c6:	4a4a      	ldr	r2, [pc, #296]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d0:	f7ff fa6a 	bl	8000ca8 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d8:	f7ff fa66 	bl	8000ca8 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e20c      	b.n	8001c04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ea:	4b41      	ldr	r3, [pc, #260]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 80017ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0ef      	beq.n	80017d8 <HAL_RCC_OscConfig+0x3ec>
 80017f8:	e01b      	b.n	8001832 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017fa:	4b3d      	ldr	r3, [pc, #244]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 80017fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001800:	4a3b      	ldr	r2, [pc, #236]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001802:	f023 0301 	bic.w	r3, r3, #1
 8001806:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180a:	f7ff fa4d 	bl	8000ca8 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001812:	f7ff fa49 	bl	8000ca8 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e1ef      	b.n	8001c04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001824:	4b32      	ldr	r3, [pc, #200]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1ef      	bne.n	8001812 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 80a6 	beq.w	800198c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001840:	2300      	movs	r3, #0
 8001842:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001844:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d10d      	bne.n	800186c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001850:	4b27      	ldr	r3, [pc, #156]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001854:	4a26      	ldr	r2, [pc, #152]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185a:	6593      	str	r3, [r2, #88]	; 0x58
 800185c:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 800185e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001868:	2301      	movs	r3, #1
 800186a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800186c:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <HAL_RCC_OscConfig+0x508>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001874:	2b00      	cmp	r3, #0
 8001876:	d118      	bne.n	80018aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001878:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <HAL_RCC_OscConfig+0x508>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a1d      	ldr	r2, [pc, #116]	; (80018f4 <HAL_RCC_OscConfig+0x508>)
 800187e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001882:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001884:	f7ff fa10 	bl	8000ca8 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800188c:	f7ff fa0c 	bl	8000ca8 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e1b2      	b.n	8001c04 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800189e:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <HAL_RCC_OscConfig+0x508>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d108      	bne.n	80018c4 <HAL_RCC_OscConfig+0x4d8>
 80018b2:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 80018b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b8:	4a0d      	ldr	r2, [pc, #52]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018c2:	e029      	b.n	8001918 <HAL_RCC_OscConfig+0x52c>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b05      	cmp	r3, #5
 80018ca:	d115      	bne.n	80018f8 <HAL_RCC_OscConfig+0x50c>
 80018cc:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 80018ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d2:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018dc:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 80018de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e2:	4a03      	ldr	r2, [pc, #12]	; (80018f0 <HAL_RCC_OscConfig+0x504>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018ec:	e014      	b.n	8001918 <HAL_RCC_OscConfig+0x52c>
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40007000 	.word	0x40007000
 80018f8:	4b9a      	ldr	r3, [pc, #616]	; (8001b64 <HAL_RCC_OscConfig+0x778>)
 80018fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fe:	4a99      	ldr	r2, [pc, #612]	; (8001b64 <HAL_RCC_OscConfig+0x778>)
 8001900:	f023 0301 	bic.w	r3, r3, #1
 8001904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001908:	4b96      	ldr	r3, [pc, #600]	; (8001b64 <HAL_RCC_OscConfig+0x778>)
 800190a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190e:	4a95      	ldr	r2, [pc, #596]	; (8001b64 <HAL_RCC_OscConfig+0x778>)
 8001910:	f023 0304 	bic.w	r3, r3, #4
 8001914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d016      	beq.n	800194e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001920:	f7ff f9c2 	bl	8000ca8 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001926:	e00a      	b.n	800193e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001928:	f7ff f9be 	bl	8000ca8 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	f241 3288 	movw	r2, #5000	; 0x1388
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e162      	b.n	8001c04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800193e:	4b89      	ldr	r3, [pc, #548]	; (8001b64 <HAL_RCC_OscConfig+0x778>)
 8001940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0ed      	beq.n	8001928 <HAL_RCC_OscConfig+0x53c>
 800194c:	e015      	b.n	800197a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194e:	f7ff f9ab 	bl	8000ca8 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001954:	e00a      	b.n	800196c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001956:	f7ff f9a7 	bl	8000ca8 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	f241 3288 	movw	r2, #5000	; 0x1388
 8001964:	4293      	cmp	r3, r2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e14b      	b.n	8001c04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800196c:	4b7d      	ldr	r3, [pc, #500]	; (8001b64 <HAL_RCC_OscConfig+0x778>)
 800196e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1ed      	bne.n	8001956 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800197a:	7ffb      	ldrb	r3, [r7, #31]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d105      	bne.n	800198c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001980:	4b78      	ldr	r3, [pc, #480]	; (8001b64 <HAL_RCC_OscConfig+0x778>)
 8001982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001984:	4a77      	ldr	r2, [pc, #476]	; (8001b64 <HAL_RCC_OscConfig+0x778>)
 8001986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800198a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0320 	and.w	r3, r3, #32
 8001994:	2b00      	cmp	r3, #0
 8001996:	d03c      	beq.n	8001a12 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	2b00      	cmp	r3, #0
 800199e:	d01c      	beq.n	80019da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019a0:	4b70      	ldr	r3, [pc, #448]	; (8001b64 <HAL_RCC_OscConfig+0x778>)
 80019a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019a6:	4a6f      	ldr	r2, [pc, #444]	; (8001b64 <HAL_RCC_OscConfig+0x778>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b0:	f7ff f97a 	bl	8000ca8 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019b8:	f7ff f976 	bl	8000ca8 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e11c      	b.n	8001c04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019ca:	4b66      	ldr	r3, [pc, #408]	; (8001b64 <HAL_RCC_OscConfig+0x778>)
 80019cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0ef      	beq.n	80019b8 <HAL_RCC_OscConfig+0x5cc>
 80019d8:	e01b      	b.n	8001a12 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019da:	4b62      	ldr	r3, [pc, #392]	; (8001b64 <HAL_RCC_OscConfig+0x778>)
 80019dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019e0:	4a60      	ldr	r2, [pc, #384]	; (8001b64 <HAL_RCC_OscConfig+0x778>)
 80019e2:	f023 0301 	bic.w	r3, r3, #1
 80019e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ea:	f7ff f95d 	bl	8000ca8 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019f2:	f7ff f959 	bl	8000ca8 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e0ff      	b.n	8001c04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a04:	4b57      	ldr	r3, [pc, #348]	; (8001b64 <HAL_RCC_OscConfig+0x778>)
 8001a06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1ef      	bne.n	80019f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 80f3 	beq.w	8001c02 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	f040 80c9 	bne.w	8001bb8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a26:	4b4f      	ldr	r3, [pc, #316]	; (8001b64 <HAL_RCC_OscConfig+0x778>)
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	f003 0203 	and.w	r2, r3, #3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d12c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a44:	3b01      	subs	r3, #1
 8001a46:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d123      	bne.n	8001a94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a56:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d11b      	bne.n	8001a94 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a66:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d113      	bne.n	8001a94 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a76:	085b      	lsrs	r3, r3, #1
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d109      	bne.n	8001a94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	085b      	lsrs	r3, r3, #1
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d06b      	beq.n	8001b6c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	2b0c      	cmp	r3, #12
 8001a98:	d062      	beq.n	8001b60 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a9a:	4b32      	ldr	r3, [pc, #200]	; (8001b64 <HAL_RCC_OscConfig+0x778>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e0ac      	b.n	8001c04 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001aaa:	4b2e      	ldr	r3, [pc, #184]	; (8001b64 <HAL_RCC_OscConfig+0x778>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a2d      	ldr	r2, [pc, #180]	; (8001b64 <HAL_RCC_OscConfig+0x778>)
 8001ab0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ab4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ab6:	f7ff f8f7 	bl	8000ca8 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001abe:	f7ff f8f3 	bl	8000ca8 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e099      	b.n	8001c04 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad0:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <HAL_RCC_OscConfig+0x778>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f0      	bne.n	8001abe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001adc:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <HAL_RCC_OscConfig+0x778>)
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <HAL_RCC_OscConfig+0x77c>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001aec:	3a01      	subs	r2, #1
 8001aee:	0112      	lsls	r2, r2, #4
 8001af0:	4311      	orrs	r1, r2
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001af6:	0212      	lsls	r2, r2, #8
 8001af8:	4311      	orrs	r1, r2
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001afe:	0852      	lsrs	r2, r2, #1
 8001b00:	3a01      	subs	r2, #1
 8001b02:	0552      	lsls	r2, r2, #21
 8001b04:	4311      	orrs	r1, r2
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b0a:	0852      	lsrs	r2, r2, #1
 8001b0c:	3a01      	subs	r2, #1
 8001b0e:	0652      	lsls	r2, r2, #25
 8001b10:	4311      	orrs	r1, r2
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b16:	06d2      	lsls	r2, r2, #27
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	4912      	ldr	r1, [pc, #72]	; (8001b64 <HAL_RCC_OscConfig+0x778>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b20:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <HAL_RCC_OscConfig+0x778>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0f      	ldr	r2, [pc, #60]	; (8001b64 <HAL_RCC_OscConfig+0x778>)
 8001b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b2c:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <HAL_RCC_OscConfig+0x778>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	4a0c      	ldr	r2, [pc, #48]	; (8001b64 <HAL_RCC_OscConfig+0x778>)
 8001b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b38:	f7ff f8b6 	bl	8000ca8 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b40:	f7ff f8b2 	bl	8000ca8 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e058      	b.n	8001c04 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b52:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <HAL_RCC_OscConfig+0x778>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b5e:	e050      	b.n	8001c02 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e04f      	b.n	8001c04 <HAL_RCC_OscConfig+0x818>
 8001b64:	40021000 	.word	0x40021000
 8001b68:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6c:	4b27      	ldr	r3, [pc, #156]	; (8001c0c <HAL_RCC_OscConfig+0x820>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d144      	bne.n	8001c02 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b78:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <HAL_RCC_OscConfig+0x820>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a23      	ldr	r2, [pc, #140]	; (8001c0c <HAL_RCC_OscConfig+0x820>)
 8001b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b84:	4b21      	ldr	r3, [pc, #132]	; (8001c0c <HAL_RCC_OscConfig+0x820>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	4a20      	ldr	r2, [pc, #128]	; (8001c0c <HAL_RCC_OscConfig+0x820>)
 8001b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b90:	f7ff f88a 	bl	8000ca8 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b98:	f7ff f886 	bl	8000ca8 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e02c      	b.n	8001c04 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001baa:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <HAL_RCC_OscConfig+0x820>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0x7ac>
 8001bb6:	e024      	b.n	8001c02 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	2b0c      	cmp	r3, #12
 8001bbc:	d01f      	beq.n	8001bfe <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bbe:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <HAL_RCC_OscConfig+0x820>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a12      	ldr	r2, [pc, #72]	; (8001c0c <HAL_RCC_OscConfig+0x820>)
 8001bc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bca:	f7ff f86d 	bl	8000ca8 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd2:	f7ff f869 	bl	8000ca8 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e00f      	b.n	8001c04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <HAL_RCC_OscConfig+0x820>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f0      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_RCC_OscConfig+0x820>)
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	4905      	ldr	r1, [pc, #20]	; (8001c0c <HAL_RCC_OscConfig+0x820>)
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <HAL_RCC_OscConfig+0x824>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60cb      	str	r3, [r1, #12]
 8001bfc:	e001      	b.n	8001c02 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3720      	adds	r7, #32
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	feeefffc 	.word	0xfeeefffc

08001c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0e7      	b.n	8001df8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c28:	4b75      	ldr	r3, [pc, #468]	; (8001e00 <HAL_RCC_ClockConfig+0x1ec>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d910      	bls.n	8001c58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c36:	4b72      	ldr	r3, [pc, #456]	; (8001e00 <HAL_RCC_ClockConfig+0x1ec>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 0207 	bic.w	r2, r3, #7
 8001c3e:	4970      	ldr	r1, [pc, #448]	; (8001e00 <HAL_RCC_ClockConfig+0x1ec>)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c46:	4b6e      	ldr	r3, [pc, #440]	; (8001e00 <HAL_RCC_ClockConfig+0x1ec>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d001      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e0cf      	b.n	8001df8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d010      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	4b66      	ldr	r3, [pc, #408]	; (8001e04 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d908      	bls.n	8001c86 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c74:	4b63      	ldr	r3, [pc, #396]	; (8001e04 <HAL_RCC_ClockConfig+0x1f0>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	4960      	ldr	r1, [pc, #384]	; (8001e04 <HAL_RCC_ClockConfig+0x1f0>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d04c      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	d107      	bne.n	8001caa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9a:	4b5a      	ldr	r3, [pc, #360]	; (8001e04 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d121      	bne.n	8001cea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e0a6      	b.n	8001df8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d107      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cb2:	4b54      	ldr	r3, [pc, #336]	; (8001e04 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d115      	bne.n	8001cea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e09a      	b.n	8001df8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d107      	bne.n	8001cda <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cca:	4b4e      	ldr	r3, [pc, #312]	; (8001e04 <HAL_RCC_ClockConfig+0x1f0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d109      	bne.n	8001cea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e08e      	b.n	8001df8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cda:	4b4a      	ldr	r3, [pc, #296]	; (8001e04 <HAL_RCC_ClockConfig+0x1f0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e086      	b.n	8001df8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cea:	4b46      	ldr	r3, [pc, #280]	; (8001e04 <HAL_RCC_ClockConfig+0x1f0>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f023 0203 	bic.w	r2, r3, #3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4943      	ldr	r1, [pc, #268]	; (8001e04 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cfc:	f7fe ffd4 	bl	8000ca8 <HAL_GetTick>
 8001d00:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	e00a      	b.n	8001d1a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d04:	f7fe ffd0 	bl	8000ca8 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e06e      	b.n	8001df8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1a:	4b3a      	ldr	r3, [pc, #232]	; (8001e04 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 020c 	and.w	r2, r3, #12
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d1eb      	bne.n	8001d04 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d010      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	4b31      	ldr	r3, [pc, #196]	; (8001e04 <HAL_RCC_ClockConfig+0x1f0>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d208      	bcs.n	8001d5a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d48:	4b2e      	ldr	r3, [pc, #184]	; (8001e04 <HAL_RCC_ClockConfig+0x1f0>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	492b      	ldr	r1, [pc, #172]	; (8001e04 <HAL_RCC_ClockConfig+0x1f0>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d5a:	4b29      	ldr	r3, [pc, #164]	; (8001e00 <HAL_RCC_ClockConfig+0x1ec>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d210      	bcs.n	8001d8a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d68:	4b25      	ldr	r3, [pc, #148]	; (8001e00 <HAL_RCC_ClockConfig+0x1ec>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f023 0207 	bic.w	r2, r3, #7
 8001d70:	4923      	ldr	r1, [pc, #140]	; (8001e00 <HAL_RCC_ClockConfig+0x1ec>)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d78:	4b21      	ldr	r3, [pc, #132]	; (8001e00 <HAL_RCC_ClockConfig+0x1ec>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d001      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e036      	b.n	8001df8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d008      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d96:	4b1b      	ldr	r3, [pc, #108]	; (8001e04 <HAL_RCC_ClockConfig+0x1f0>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	4918      	ldr	r1, [pc, #96]	; (8001e04 <HAL_RCC_ClockConfig+0x1f0>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d009      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001db4:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <HAL_RCC_ClockConfig+0x1f0>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4910      	ldr	r1, [pc, #64]	; (8001e04 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dc8:	f000 f824 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	091b      	lsrs	r3, r3, #4
 8001dd4:	f003 030f 	and.w	r3, r3, #15
 8001dd8:	490b      	ldr	r1, [pc, #44]	; (8001e08 <HAL_RCC_ClockConfig+0x1f4>)
 8001dda:	5ccb      	ldrb	r3, [r1, r3]
 8001ddc:	f003 031f 	and.w	r3, r3, #31
 8001de0:	fa22 f303 	lsr.w	r3, r2, r3
 8001de4:	4a09      	ldr	r2, [pc, #36]	; (8001e0c <HAL_RCC_ClockConfig+0x1f8>)
 8001de6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <HAL_RCC_ClockConfig+0x1fc>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe ff0b 	bl	8000c08 <HAL_InitTick>
 8001df2:	4603      	mov	r3, r0
 8001df4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001df6:	7afb      	ldrb	r3, [r7, #11]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40022000 	.word	0x40022000
 8001e04:	40021000 	.word	0x40021000
 8001e08:	08006e90 	.word	0x08006e90
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	20000004 	.word	0x20000004

08001e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b089      	sub	sp, #36	; 0x24
 8001e18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e22:	4b3e      	ldr	r3, [pc, #248]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 030c 	and.w	r3, r3, #12
 8001e2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e2c:	4b3b      	ldr	r3, [pc, #236]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0x34>
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	2b0c      	cmp	r3, #12
 8001e40:	d121      	bne.n	8001e86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d11e      	bne.n	8001e86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e48:	4b34      	ldr	r3, [pc, #208]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d107      	bne.n	8001e64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e54:	4b31      	ldr	r3, [pc, #196]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e5a:	0a1b      	lsrs	r3, r3, #8
 8001e5c:	f003 030f 	and.w	r3, r3, #15
 8001e60:	61fb      	str	r3, [r7, #28]
 8001e62:	e005      	b.n	8001e70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e64:	4b2d      	ldr	r3, [pc, #180]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e70:	4a2b      	ldr	r2, [pc, #172]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10d      	bne.n	8001e9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e84:	e00a      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d102      	bne.n	8001e92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e8c:	4b25      	ldr	r3, [pc, #148]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e8e:	61bb      	str	r3, [r7, #24]
 8001e90:	e004      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e98:	4b23      	ldr	r3, [pc, #140]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	2b0c      	cmp	r3, #12
 8001ea0:	d134      	bne.n	8001f0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ea2:	4b1e      	ldr	r3, [pc, #120]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d003      	beq.n	8001eba <HAL_RCC_GetSysClockFreq+0xa6>
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d003      	beq.n	8001ec0 <HAL_RCC_GetSysClockFreq+0xac>
 8001eb8:	e005      	b.n	8001ec6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001eba:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ebc:	617b      	str	r3, [r7, #20]
      break;
 8001ebe:	e005      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ec0:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ec2:	617b      	str	r3, [r7, #20]
      break;
 8001ec4:	e002      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	617b      	str	r3, [r7, #20]
      break;
 8001eca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ecc:	4b13      	ldr	r3, [pc, #76]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001eda:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	0a1b      	lsrs	r3, r3, #8
 8001ee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	fb03 f202 	mul.w	r2, r3, r2
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	0e5b      	lsrs	r3, r3, #25
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	3301      	adds	r3, #1
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f0c:	69bb      	ldr	r3, [r7, #24]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3724      	adds	r7, #36	; 0x24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	08006ea8 	.word	0x08006ea8
 8001f24:	00f42400 	.word	0x00f42400
 8001f28:	016e3600 	.word	0x016e3600

08001f2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f32:	681b      	ldr	r3, [r3, #0]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20000000 	.word	0x20000000

08001f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f48:	f7ff fff0 	bl	8001f2c <HAL_RCC_GetHCLKFreq>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	0a1b      	lsrs	r3, r3, #8
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	4904      	ldr	r1, [pc, #16]	; (8001f6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f5a:	5ccb      	ldrb	r3, [r1, r3]
 8001f5c:	f003 031f 	and.w	r3, r3, #31
 8001f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	08006ea0 	.word	0x08006ea0

08001f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f74:	f7ff ffda 	bl	8001f2c <HAL_RCC_GetHCLKFreq>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	0adb      	lsrs	r3, r3, #11
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	4904      	ldr	r1, [pc, #16]	; (8001f98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f86:	5ccb      	ldrb	r3, [r1, r3]
 8001f88:	f003 031f 	and.w	r3, r3, #31
 8001f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40021000 	.word	0x40021000
 8001f98:	08006ea0 	.word	0x08006ea0

08001f9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fa8:	4b2a      	ldr	r3, [pc, #168]	; (8002054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fb4:	f7ff f9b6 	bl	8001324 <HAL_PWREx_GetVoltageRange>
 8001fb8:	6178      	str	r0, [r7, #20]
 8001fba:	e014      	b.n	8001fe6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fbc:	4b25      	ldr	r3, [pc, #148]	; (8002054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc0:	4a24      	ldr	r2, [pc, #144]	; (8002054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	6593      	str	r3, [r2, #88]	; 0x58
 8001fc8:	4b22      	ldr	r3, [pc, #136]	; (8002054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fd4:	f7ff f9a6 	bl	8001324 <HAL_PWREx_GetVoltageRange>
 8001fd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fda:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fde:	4a1d      	ldr	r2, [pc, #116]	; (8002054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fec:	d10b      	bne.n	8002006 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b80      	cmp	r3, #128	; 0x80
 8001ff2:	d919      	bls.n	8002028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2ba0      	cmp	r3, #160	; 0xa0
 8001ff8:	d902      	bls.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	e013      	b.n	8002028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002000:	2301      	movs	r3, #1
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	e010      	b.n	8002028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b80      	cmp	r3, #128	; 0x80
 800200a:	d902      	bls.n	8002012 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800200c:	2303      	movs	r3, #3
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	e00a      	b.n	8002028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b80      	cmp	r3, #128	; 0x80
 8002016:	d102      	bne.n	800201e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002018:	2302      	movs	r3, #2
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	e004      	b.n	8002028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b70      	cmp	r3, #112	; 0x70
 8002022:	d101      	bne.n	8002028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002024:	2301      	movs	r3, #1
 8002026:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f023 0207 	bic.w	r2, r3, #7
 8002030:	4909      	ldr	r1, [pc, #36]	; (8002058 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002038:	4b07      	ldr	r3, [pc, #28]	; (8002058 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	429a      	cmp	r2, r3
 8002044:	d001      	beq.n	800204a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40021000 	.word	0x40021000
 8002058:	40022000 	.word	0x40022000

0800205c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002064:	2300      	movs	r3, #0
 8002066:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002068:	2300      	movs	r3, #0
 800206a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002074:	2b00      	cmp	r3, #0
 8002076:	d031      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002080:	d01a      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002082:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002086:	d814      	bhi.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002088:	2b00      	cmp	r3, #0
 800208a:	d009      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800208c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002090:	d10f      	bne.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002092:	4b5d      	ldr	r3, [pc, #372]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	4a5c      	ldr	r2, [pc, #368]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800209e:	e00c      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3304      	adds	r3, #4
 80020a4:	2100      	movs	r1, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 f9ce 	bl	8002448 <RCCEx_PLLSAI1_Config>
 80020ac:	4603      	mov	r3, r0
 80020ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020b0:	e003      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	74fb      	strb	r3, [r7, #19]
      break;
 80020b6:	e000      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80020b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020ba:	7cfb      	ldrb	r3, [r7, #19]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10b      	bne.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020c0:	4b51      	ldr	r3, [pc, #324]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ce:	494e      	ldr	r1, [pc, #312]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020d6:	e001      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020d8:	7cfb      	ldrb	r3, [r7, #19]
 80020da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 809e 	beq.w	8002226 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020ee:	4b46      	ldr	r3, [pc, #280]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80020fe:	2300      	movs	r3, #0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00d      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002104:	4b40      	ldr	r3, [pc, #256]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002108:	4a3f      	ldr	r2, [pc, #252]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800210a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800210e:	6593      	str	r3, [r2, #88]	; 0x58
 8002110:	4b3d      	ldr	r3, [pc, #244]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211c:	2301      	movs	r3, #1
 800211e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002120:	4b3a      	ldr	r3, [pc, #232]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a39      	ldr	r2, [pc, #228]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800212c:	f7fe fdbc 	bl	8000ca8 <HAL_GetTick>
 8002130:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002132:	e009      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002134:	f7fe fdb8 	bl	8000ca8 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d902      	bls.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	74fb      	strb	r3, [r7, #19]
        break;
 8002146:	e005      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002148:	4b30      	ldr	r3, [pc, #192]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0ef      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d15a      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800215a:	4b2b      	ldr	r3, [pc, #172]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800215c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002160:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002164:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01e      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	429a      	cmp	r2, r3
 8002174:	d019      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002176:	4b24      	ldr	r3, [pc, #144]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002180:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002182:	4b21      	ldr	r3, [pc, #132]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002188:	4a1f      	ldr	r2, [pc, #124]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800218a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002192:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002198:	4a1b      	ldr	r2, [pc, #108]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800219a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021a2:	4a19      	ldr	r2, [pc, #100]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d016      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7fe fd78 	bl	8000ca8 <HAL_GetTick>
 80021b8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ba:	e00b      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021bc:	f7fe fd74 	bl	8000ca8 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d902      	bls.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	74fb      	strb	r3, [r7, #19]
            break;
 80021d2:	e006      	b.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0ec      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80021e2:	7cfb      	ldrb	r3, [r7, #19]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10b      	bne.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021e8:	4b07      	ldr	r3, [pc, #28]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f6:	4904      	ldr	r1, [pc, #16]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021fe:	e009      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002200:	7cfb      	ldrb	r3, [r7, #19]
 8002202:	74bb      	strb	r3, [r7, #18]
 8002204:	e006      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000
 800220c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002210:	7cfb      	ldrb	r3, [r7, #19]
 8002212:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002214:	7c7b      	ldrb	r3, [r7, #17]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d105      	bne.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800221a:	4b8a      	ldr	r3, [pc, #552]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800221c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221e:	4a89      	ldr	r2, [pc, #548]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002224:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002232:	4b84      	ldr	r3, [pc, #528]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002238:	f023 0203 	bic.w	r2, r3, #3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	4980      	ldr	r1, [pc, #512]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002254:	4b7b      	ldr	r3, [pc, #492]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225a:	f023 020c 	bic.w	r2, r3, #12
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	4978      	ldr	r1, [pc, #480]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0320 	and.w	r3, r3, #32
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00a      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002276:	4b73      	ldr	r3, [pc, #460]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002284:	496f      	ldr	r1, [pc, #444]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002286:	4313      	orrs	r3, r2
 8002288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00a      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002298:	4b6a      	ldr	r3, [pc, #424]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a6:	4967      	ldr	r1, [pc, #412]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022ba:	4b62      	ldr	r3, [pc, #392]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c8:	495e      	ldr	r1, [pc, #376]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00a      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022dc:	4b59      	ldr	r3, [pc, #356]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ea:	4956      	ldr	r1, [pc, #344]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022fe:	4b51      	ldr	r3, [pc, #324]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002304:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	494d      	ldr	r1, [pc, #308]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d028      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002320:	4b48      	ldr	r3, [pc, #288]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002326:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	4945      	ldr	r1, [pc, #276]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800233e:	d106      	bne.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002340:	4b40      	ldr	r3, [pc, #256]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4a3f      	ldr	r2, [pc, #252]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002346:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800234a:	60d3      	str	r3, [r2, #12]
 800234c:	e011      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002356:	d10c      	bne.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3304      	adds	r3, #4
 800235c:	2101      	movs	r1, #1
 800235e:	4618      	mov	r0, r3
 8002360:	f000 f872 	bl	8002448 <RCCEx_PLLSAI1_Config>
 8002364:	4603      	mov	r3, r0
 8002366:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002368:	7cfb      	ldrb	r3, [r7, #19]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800236e:	7cfb      	ldrb	r3, [r7, #19]
 8002370:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d028      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800237e:	4b31      	ldr	r3, [pc, #196]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002384:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238c:	492d      	ldr	r1, [pc, #180]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002398:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800239c:	d106      	bne.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800239e:	4b29      	ldr	r3, [pc, #164]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	4a28      	ldr	r2, [pc, #160]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023a8:	60d3      	str	r3, [r2, #12]
 80023aa:	e011      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3304      	adds	r3, #4
 80023ba:	2101      	movs	r1, #1
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 f843 	bl	8002448 <RCCEx_PLLSAI1_Config>
 80023c2:	4603      	mov	r3, r0
 80023c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023c6:	7cfb      	ldrb	r3, [r7, #19]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80023cc:	7cfb      	ldrb	r3, [r7, #19]
 80023ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d01c      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023dc:	4b19      	ldr	r3, [pc, #100]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ea:	4916      	ldr	r1, [pc, #88]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023fa:	d10c      	bne.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3304      	adds	r3, #4
 8002400:	2102      	movs	r1, #2
 8002402:	4618      	mov	r0, r3
 8002404:	f000 f820 	bl	8002448 <RCCEx_PLLSAI1_Config>
 8002408:	4603      	mov	r3, r0
 800240a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800240c:	7cfb      	ldrb	r3, [r7, #19]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002412:	7cfb      	ldrb	r3, [r7, #19]
 8002414:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00a      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002422:	4b08      	ldr	r3, [pc, #32]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002428:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002430:	4904      	ldr	r1, [pc, #16]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002432:	4313      	orrs	r3, r2
 8002434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002438:	7cbb      	ldrb	r3, [r7, #18]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000

08002448 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002456:	4b74      	ldr	r3, [pc, #464]	; (8002628 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d018      	beq.n	8002494 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002462:	4b71      	ldr	r3, [pc, #452]	; (8002628 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f003 0203 	and.w	r2, r3, #3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d10d      	bne.n	800248e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
       ||
 8002476:	2b00      	cmp	r3, #0
 8002478:	d009      	beq.n	800248e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800247a:	4b6b      	ldr	r3, [pc, #428]	; (8002628 <RCCEx_PLLSAI1_Config+0x1e0>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	091b      	lsrs	r3, r3, #4
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
       ||
 800248a:	429a      	cmp	r2, r3
 800248c:	d047      	beq.n	800251e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
 8002492:	e044      	b.n	800251e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b03      	cmp	r3, #3
 800249a:	d018      	beq.n	80024ce <RCCEx_PLLSAI1_Config+0x86>
 800249c:	2b03      	cmp	r3, #3
 800249e:	d825      	bhi.n	80024ec <RCCEx_PLLSAI1_Config+0xa4>
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d002      	beq.n	80024aa <RCCEx_PLLSAI1_Config+0x62>
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d009      	beq.n	80024bc <RCCEx_PLLSAI1_Config+0x74>
 80024a8:	e020      	b.n	80024ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024aa:	4b5f      	ldr	r3, [pc, #380]	; (8002628 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d11d      	bne.n	80024f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ba:	e01a      	b.n	80024f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024bc:	4b5a      	ldr	r3, [pc, #360]	; (8002628 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d116      	bne.n	80024f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024cc:	e013      	b.n	80024f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024ce:	4b56      	ldr	r3, [pc, #344]	; (8002628 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10f      	bne.n	80024fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024da:	4b53      	ldr	r3, [pc, #332]	; (8002628 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d109      	bne.n	80024fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024ea:	e006      	b.n	80024fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
      break;
 80024f0:	e004      	b.n	80024fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024f2:	bf00      	nop
 80024f4:	e002      	b.n	80024fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024f6:	bf00      	nop
 80024f8:	e000      	b.n	80024fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10d      	bne.n	800251e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002502:	4b49      	ldr	r3, [pc, #292]	; (8002628 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6819      	ldr	r1, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	3b01      	subs	r3, #1
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	430b      	orrs	r3, r1
 8002518:	4943      	ldr	r1, [pc, #268]	; (8002628 <RCCEx_PLLSAI1_Config+0x1e0>)
 800251a:	4313      	orrs	r3, r2
 800251c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d17c      	bne.n	800261e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002524:	4b40      	ldr	r3, [pc, #256]	; (8002628 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a3f      	ldr	r2, [pc, #252]	; (8002628 <RCCEx_PLLSAI1_Config+0x1e0>)
 800252a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800252e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002530:	f7fe fbba 	bl	8000ca8 <HAL_GetTick>
 8002534:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002536:	e009      	b.n	800254c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002538:	f7fe fbb6 	bl	8000ca8 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d902      	bls.n	800254c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	73fb      	strb	r3, [r7, #15]
        break;
 800254a:	e005      	b.n	8002558 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800254c:	4b36      	ldr	r3, [pc, #216]	; (8002628 <RCCEx_PLLSAI1_Config+0x1e0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1ef      	bne.n	8002538 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d15f      	bne.n	800261e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d110      	bne.n	8002586 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002564:	4b30      	ldr	r3, [pc, #192]	; (8002628 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800256c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6892      	ldr	r2, [r2, #8]
 8002574:	0211      	lsls	r1, r2, #8
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68d2      	ldr	r2, [r2, #12]
 800257a:	06d2      	lsls	r2, r2, #27
 800257c:	430a      	orrs	r2, r1
 800257e:	492a      	ldr	r1, [pc, #168]	; (8002628 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002580:	4313      	orrs	r3, r2
 8002582:	610b      	str	r3, [r1, #16]
 8002584:	e027      	b.n	80025d6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d112      	bne.n	80025b2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800258c:	4b26      	ldr	r3, [pc, #152]	; (8002628 <RCCEx_PLLSAI1_Config+0x1e0>)
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002594:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6892      	ldr	r2, [r2, #8]
 800259c:	0211      	lsls	r1, r2, #8
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6912      	ldr	r2, [r2, #16]
 80025a2:	0852      	lsrs	r2, r2, #1
 80025a4:	3a01      	subs	r2, #1
 80025a6:	0552      	lsls	r2, r2, #21
 80025a8:	430a      	orrs	r2, r1
 80025aa:	491f      	ldr	r1, [pc, #124]	; (8002628 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	610b      	str	r3, [r1, #16]
 80025b0:	e011      	b.n	80025d6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025b2:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80025ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6892      	ldr	r2, [r2, #8]
 80025c2:	0211      	lsls	r1, r2, #8
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6952      	ldr	r2, [r2, #20]
 80025c8:	0852      	lsrs	r2, r2, #1
 80025ca:	3a01      	subs	r2, #1
 80025cc:	0652      	lsls	r2, r2, #25
 80025ce:	430a      	orrs	r2, r1
 80025d0:	4915      	ldr	r1, [pc, #84]	; (8002628 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025d6:	4b14      	ldr	r3, [pc, #80]	; (8002628 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a13      	ldr	r2, [pc, #76]	; (8002628 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e2:	f7fe fb61 	bl	8000ca8 <HAL_GetTick>
 80025e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025e8:	e009      	b.n	80025fe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025ea:	f7fe fb5d 	bl	8000ca8 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d902      	bls.n	80025fe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	73fb      	strb	r3, [r7, #15]
          break;
 80025fc:	e005      	b.n	800260a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025fe:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0ef      	beq.n	80025ea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d106      	bne.n	800261e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	4903      	ldr	r1, [pc, #12]	; (8002628 <RCCEx_PLLSAI1_Config+0x1e0>)
 800261a:	4313      	orrs	r3, r2
 800261c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800261e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40021000 	.word	0x40021000

0800262c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e049      	b.n	80026d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7fe f94a 	bl	80008ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3304      	adds	r3, #4
 8002668:	4619      	mov	r1, r3
 800266a:	4610      	mov	r0, r2
 800266c:	f000 faca 	bl	8002c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d001      	beq.n	80026f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e03b      	b.n	800276c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a19      	ldr	r2, [pc, #100]	; (8002778 <HAL_TIM_Base_Start_IT+0x9c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d009      	beq.n	800272a <HAL_TIM_Base_Start_IT+0x4e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800271e:	d004      	beq.n	800272a <HAL_TIM_Base_Start_IT+0x4e>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a15      	ldr	r2, [pc, #84]	; (800277c <HAL_TIM_Base_Start_IT+0xa0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d115      	bne.n	8002756 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	4b13      	ldr	r3, [pc, #76]	; (8002780 <HAL_TIM_Base_Start_IT+0xa4>)
 8002732:	4013      	ands	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b06      	cmp	r3, #6
 800273a:	d015      	beq.n	8002768 <HAL_TIM_Base_Start_IT+0x8c>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002742:	d011      	beq.n	8002768 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002754:	e008      	b.n	8002768 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f042 0201 	orr.w	r2, r2, #1
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	e000      	b.n	800276a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002768:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	40012c00 	.word	0x40012c00
 800277c:	40014000 	.word	0x40014000
 8002780:	00010007 	.word	0x00010007

08002784 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0201 	bic.w	r2, r2, #1
 800279a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6a1a      	ldr	r2, [r3, #32]
 80027a2:	f241 1311 	movw	r3, #4369	; 0x1111
 80027a6:	4013      	ands	r3, r2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10f      	bne.n	80027cc <HAL_TIM_Base_Stop_IT+0x48>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6a1a      	ldr	r2, [r3, #32]
 80027b2:	f240 4344 	movw	r3, #1092	; 0x444
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d107      	bne.n	80027cc <HAL_TIM_Base_Stop_IT+0x48>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0201 	bic.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d122      	bne.n	800283e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b02      	cmp	r3, #2
 8002804:	d11b      	bne.n	800283e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f06f 0202 	mvn.w	r2, #2
 800280e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f9ce 	bl	8002bc6 <HAL_TIM_IC_CaptureCallback>
 800282a:	e005      	b.n	8002838 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f9c0 	bl	8002bb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f9d1 	bl	8002bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b04      	cmp	r3, #4
 800284a:	d122      	bne.n	8002892 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b04      	cmp	r3, #4
 8002858:	d11b      	bne.n	8002892 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f06f 0204 	mvn.w	r2, #4
 8002862:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f9a4 	bl	8002bc6 <HAL_TIM_IC_CaptureCallback>
 800287e:	e005      	b.n	800288c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f996 	bl	8002bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f9a7 	bl	8002bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b08      	cmp	r3, #8
 800289e:	d122      	bne.n	80028e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d11b      	bne.n	80028e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f06f 0208 	mvn.w	r2, #8
 80028b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2204      	movs	r2, #4
 80028bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f97a 	bl	8002bc6 <HAL_TIM_IC_CaptureCallback>
 80028d2:	e005      	b.n	80028e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f96c 	bl	8002bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f97d 	bl	8002bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b10      	cmp	r3, #16
 80028f2:	d122      	bne.n	800293a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b10      	cmp	r3, #16
 8002900:	d11b      	bne.n	800293a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f06f 0210 	mvn.w	r2, #16
 800290a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2208      	movs	r2, #8
 8002910:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f950 	bl	8002bc6 <HAL_TIM_IC_CaptureCallback>
 8002926:	e005      	b.n	8002934 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f942 	bl	8002bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f953 	bl	8002bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b01      	cmp	r3, #1
 8002946:	d10e      	bne.n	8002966 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b01      	cmp	r3, #1
 8002954:	d107      	bne.n	8002966 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f06f 0201 	mvn.w	r2, #1
 800295e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f001 ffdf 	bl	8004924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002970:	2b80      	cmp	r3, #128	; 0x80
 8002972:	d10e      	bne.n	8002992 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297e:	2b80      	cmp	r3, #128	; 0x80
 8002980:	d107      	bne.n	8002992 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800298a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 faa7 	bl	8002ee0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029a0:	d10e      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ac:	2b80      	cmp	r3, #128	; 0x80
 80029ae:	d107      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80029b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 fa9a 	bl	8002ef4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ca:	2b40      	cmp	r3, #64	; 0x40
 80029cc:	d10e      	bne.n	80029ec <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d8:	2b40      	cmp	r3, #64	; 0x40
 80029da:	d107      	bne.n	80029ec <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f901 	bl	8002bee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f003 0320 	and.w	r3, r3, #32
 80029f6:	2b20      	cmp	r3, #32
 80029f8:	d10e      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0320 	and.w	r3, r3, #32
 8002a04:	2b20      	cmp	r3, #32
 8002a06:	d107      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f06f 0220 	mvn.w	r2, #32
 8002a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 fa5a 	bl	8002ecc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a18:	bf00      	nop
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_TIM_ConfigClockSource+0x1c>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e0b6      	b.n	8002baa <HAL_TIM_ConfigClockSource+0x18a>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a78:	d03e      	beq.n	8002af8 <HAL_TIM_ConfigClockSource+0xd8>
 8002a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a7e:	f200 8087 	bhi.w	8002b90 <HAL_TIM_ConfigClockSource+0x170>
 8002a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a86:	f000 8086 	beq.w	8002b96 <HAL_TIM_ConfigClockSource+0x176>
 8002a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a8e:	d87f      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x170>
 8002a90:	2b70      	cmp	r3, #112	; 0x70
 8002a92:	d01a      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0xaa>
 8002a94:	2b70      	cmp	r3, #112	; 0x70
 8002a96:	d87b      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x170>
 8002a98:	2b60      	cmp	r3, #96	; 0x60
 8002a9a:	d050      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0x11e>
 8002a9c:	2b60      	cmp	r3, #96	; 0x60
 8002a9e:	d877      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x170>
 8002aa0:	2b50      	cmp	r3, #80	; 0x50
 8002aa2:	d03c      	beq.n	8002b1e <HAL_TIM_ConfigClockSource+0xfe>
 8002aa4:	2b50      	cmp	r3, #80	; 0x50
 8002aa6:	d873      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x170>
 8002aa8:	2b40      	cmp	r3, #64	; 0x40
 8002aaa:	d058      	beq.n	8002b5e <HAL_TIM_ConfigClockSource+0x13e>
 8002aac:	2b40      	cmp	r3, #64	; 0x40
 8002aae:	d86f      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x170>
 8002ab0:	2b30      	cmp	r3, #48	; 0x30
 8002ab2:	d064      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0x15e>
 8002ab4:	2b30      	cmp	r3, #48	; 0x30
 8002ab6:	d86b      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x170>
 8002ab8:	2b20      	cmp	r3, #32
 8002aba:	d060      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0x15e>
 8002abc:	2b20      	cmp	r3, #32
 8002abe:	d867      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x170>
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d05c      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0x15e>
 8002ac4:	2b10      	cmp	r3, #16
 8002ac6:	d05a      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0x15e>
 8002ac8:	e062      	b.n	8002b90 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	6899      	ldr	r1, [r3, #8]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f000 f971 	bl	8002dc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002aec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	609a      	str	r2, [r3, #8]
      break;
 8002af6:	e04f      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6818      	ldr	r0, [r3, #0]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	6899      	ldr	r1, [r3, #8]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f000 f95a 	bl	8002dc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b1a:	609a      	str	r2, [r3, #8]
      break;
 8002b1c:	e03c      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	6859      	ldr	r1, [r3, #4]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f000 f8ce 	bl	8002ccc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2150      	movs	r1, #80	; 0x50
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 f927 	bl	8002d8a <TIM_ITRx_SetConfig>
      break;
 8002b3c:	e02c      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	6859      	ldr	r1, [r3, #4]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	f000 f8ed 	bl	8002d2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2160      	movs	r1, #96	; 0x60
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 f917 	bl	8002d8a <TIM_ITRx_SetConfig>
      break;
 8002b5c:	e01c      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	6859      	ldr	r1, [r3, #4]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	f000 f8ae 	bl	8002ccc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2140      	movs	r1, #64	; 0x40
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 f907 	bl	8002d8a <TIM_ITRx_SetConfig>
      break;
 8002b7c:	e00c      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4619      	mov	r1, r3
 8002b88:	4610      	mov	r0, r2
 8002b8a:	f000 f8fe 	bl	8002d8a <TIM_ITRx_SetConfig>
      break;
 8002b8e:	e003      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
      break;
 8002b94:	e000      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002b96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
	...

08002c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a2a      	ldr	r2, [pc, #168]	; (8002cc0 <TIM_Base_SetConfig+0xbc>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d003      	beq.n	8002c24 <TIM_Base_SetConfig+0x20>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c22:	d108      	bne.n	8002c36 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a21      	ldr	r2, [pc, #132]	; (8002cc0 <TIM_Base_SetConfig+0xbc>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d00b      	beq.n	8002c56 <TIM_Base_SetConfig+0x52>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c44:	d007      	beq.n	8002c56 <TIM_Base_SetConfig+0x52>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a1e      	ldr	r2, [pc, #120]	; (8002cc4 <TIM_Base_SetConfig+0xc0>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d003      	beq.n	8002c56 <TIM_Base_SetConfig+0x52>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a1d      	ldr	r2, [pc, #116]	; (8002cc8 <TIM_Base_SetConfig+0xc4>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d108      	bne.n	8002c68 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a0c      	ldr	r2, [pc, #48]	; (8002cc0 <TIM_Base_SetConfig+0xbc>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d007      	beq.n	8002ca4 <TIM_Base_SetConfig+0xa0>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a0b      	ldr	r2, [pc, #44]	; (8002cc4 <TIM_Base_SetConfig+0xc0>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d003      	beq.n	8002ca4 <TIM_Base_SetConfig+0xa0>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <TIM_Base_SetConfig+0xc4>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d103      	bne.n	8002cac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	615a      	str	r2, [r3, #20]
}
 8002cb2:	bf00      	nop
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40012c00 	.word	0x40012c00
 8002cc4:	40014000 	.word	0x40014000
 8002cc8:	40014400 	.word	0x40014400

08002ccc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	f023 0201 	bic.w	r2, r3, #1
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f023 030a 	bic.w	r3, r3, #10
 8002d08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	621a      	str	r2, [r3, #32]
}
 8002d1e:	bf00      	nop
 8002d20:	371c      	adds	r7, #28
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b087      	sub	sp, #28
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	f023 0210 	bic.w	r2, r3, #16
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	031b      	lsls	r3, r3, #12
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	621a      	str	r2, [r3, #32]
}
 8002d7e:	bf00      	nop
 8002d80:	371c      	adds	r7, #28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b085      	sub	sp, #20
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f043 0307 	orr.w	r3, r3, #7
 8002dac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	609a      	str	r2, [r3, #8]
}
 8002db4:	bf00      	nop
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	021a      	lsls	r2, r3, #8
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	431a      	orrs	r2, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	609a      	str	r2, [r3, #8]
}
 8002df4:	bf00      	nop
 8002df6:	371c      	adds	r7, #28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e04f      	b.n	8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a21      	ldr	r2, [pc, #132]	; (8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d108      	bne.n	8002e54 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002e48:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a14      	ldr	r2, [pc, #80]	; (8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d009      	beq.n	8002e8c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e80:	d004      	beq.n	8002e8c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a10      	ldr	r2, [pc, #64]	; (8002ec8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d10c      	bne.n	8002ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	40012c00 	.word	0x40012c00
 8002ec8:	40014000 	.word	0x40014000

08002ecc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e040      	b.n	8002f9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fd fd7a 	bl	8000a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2224      	movs	r2, #36	; 0x24
 8002f34:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0201 	bic.w	r2, r2, #1
 8002f44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fcba 	bl	80038c0 <UART_SetConfig>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e022      	b.n	8002f9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 feda 	bl	8003d18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 ff61 	bl	8003e5c <UART_CheckIdleState>
 8002f9a:	4603      	mov	r3, r0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b08b      	sub	sp, #44	; 0x2c
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fb6:	2b20      	cmp	r3, #32
 8002fb8:	d156      	bne.n	8003068 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d002      	beq.n	8002fc6 <HAL_UART_Transmit_IT+0x22>
 8002fc0:	88fb      	ldrh	r3, [r7, #6]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e04f      	b.n	800306a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_UART_Transmit_IT+0x34>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e048      	b.n	800306a <HAL_UART_Transmit_IT+0xc6>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	88fa      	ldrh	r2, [r7, #6]
 8002fea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	88fa      	ldrh	r2, [r7, #6]
 8002ff2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2221      	movs	r2, #33	; 0x21
 8003008:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003012:	d107      	bne.n	8003024 <HAL_UART_Transmit_IT+0x80>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d103      	bne.n	8003024 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4a16      	ldr	r2, [pc, #88]	; (8003078 <HAL_UART_Transmit_IT+0xd4>)
 8003020:	669a      	str	r2, [r3, #104]	; 0x68
 8003022:	e002      	b.n	800302a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4a15      	ldr	r2, [pc, #84]	; (800307c <HAL_UART_Transmit_IT+0xd8>)
 8003028:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	e853 3f00 	ldrex	r3, [r3]
 800303e:	613b      	str	r3, [r7, #16]
   return(result);
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	461a      	mov	r2, r3
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	623b      	str	r3, [r7, #32]
 8003052:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003054:	69f9      	ldr	r1, [r7, #28]
 8003056:	6a3a      	ldr	r2, [r7, #32]
 8003058:	e841 2300 	strex	r3, r2, [r1]
 800305c:	61bb      	str	r3, [r7, #24]
   return(result);
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1e6      	bne.n	8003032 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003064:	2300      	movs	r3, #0
 8003066:	e000      	b.n	800306a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003068:	2302      	movs	r3, #2
  }
}
 800306a:	4618      	mov	r0, r3
 800306c:	372c      	adds	r7, #44	; 0x2c
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	08004403 	.word	0x08004403
 800307c:	0800434b 	.word	0x0800434b

08003080 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08a      	sub	sp, #40	; 0x28
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	4613      	mov	r3, r2
 800308c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003092:	2b20      	cmp	r3, #32
 8003094:	d142      	bne.n	800311c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <HAL_UART_Receive_IT+0x22>
 800309c:	88fb      	ldrh	r3, [r7, #6]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e03b      	b.n	800311e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_UART_Receive_IT+0x34>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e034      	b.n	800311e <HAL_UART_Receive_IT+0x9e>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a18      	ldr	r2, [pc, #96]	; (8003128 <HAL_UART_Receive_IT+0xa8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d01f      	beq.n	800310c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d018      	beq.n	800310c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	e853 3f00 	ldrex	r3, [r3]
 80030e6:	613b      	str	r3, [r7, #16]
   return(result);
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	461a      	mov	r2, r3
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	623b      	str	r3, [r7, #32]
 80030fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fc:	69f9      	ldr	r1, [r7, #28]
 80030fe:	6a3a      	ldr	r2, [r7, #32]
 8003100:	e841 2300 	strex	r3, r2, [r1]
 8003104:	61bb      	str	r3, [r7, #24]
   return(result);
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1e6      	bne.n	80030da <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800310c:	88fb      	ldrh	r3, [r7, #6]
 800310e:	461a      	mov	r2, r3
 8003110:	68b9      	ldr	r1, [r7, #8]
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 ffb0 	bl	8004078 <UART_Start_Receive_IT>
 8003118:	4603      	mov	r3, r0
 800311a:	e000      	b.n	800311e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800311c:	2302      	movs	r3, #2
  }
}
 800311e:	4618      	mov	r0, r3
 8003120:	3728      	adds	r7, #40	; 0x28
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40008000 	.word	0x40008000

0800312c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b09a      	sub	sp, #104	; 0x68
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800313c:	e853 3f00 	ldrex	r3, [r3]
 8003140:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003144:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003148:	667b      	str	r3, [r7, #100]	; 0x64
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003152:	657b      	str	r3, [r7, #84]	; 0x54
 8003154:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003156:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003158:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800315a:	e841 2300 	strex	r3, r2, [r1]
 800315e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1e6      	bne.n	8003134 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	3308      	adds	r3, #8
 800316c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003170:	e853 3f00 	ldrex	r3, [r3]
 8003174:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003178:	f023 0301 	bic.w	r3, r3, #1
 800317c:	663b      	str	r3, [r7, #96]	; 0x60
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3308      	adds	r3, #8
 8003184:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003186:	643a      	str	r2, [r7, #64]	; 0x40
 8003188:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800318c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800318e:	e841 2300 	strex	r3, r2, [r1]
 8003192:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1e5      	bne.n	8003166 <HAL_UART_AbortReceive_IT+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d118      	bne.n	80031d4 <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	e853 3f00 	ldrex	r3, [r3]
 80031ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f023 0310 	bic.w	r3, r3, #16
 80031b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	461a      	mov	r2, r3
 80031be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031c2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031c8:	e841 2300 	strex	r3, r2, [r1]
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1e6      	bne.n	80031a2 <HAL_UART_AbortReceive_IT+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031de:	2b40      	cmp	r3, #64	; 0x40
 80031e0:	d150      	bne.n	8003284 <HAL_UART_AbortReceive_IT+0x158>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	3308      	adds	r3, #8
 80031e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	e853 3f00 	ldrex	r3, [r3]
 80031f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	3308      	adds	r3, #8
 8003200:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003202:	61ba      	str	r2, [r7, #24]
 8003204:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003206:	6979      	ldr	r1, [r7, #20]
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	e841 2300 	strex	r3, r2, [r1]
 800320e:	613b      	str	r3, [r7, #16]
   return(result);
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1e5      	bne.n	80031e2 <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321a:	2b00      	cmp	r3, #0
 800321c:	d013      	beq.n	8003246 <HAL_UART_AbortReceive_IT+0x11a>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003222:	4a25      	ldr	r2, [pc, #148]	; (80032b8 <HAL_UART_AbortReceive_IT+0x18c>)
 8003224:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	4618      	mov	r0, r3
 800322c:	f7fd fe97 	bl	8000f5e <HAL_DMA_Abort_IT>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d03a      	beq.n	80032ac <HAL_UART_AbortReceive_IT+0x180>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003240:	4610      	mov	r0, r2
 8003242:	4798      	blx	r3
 8003244:	e032      	b.n	80032ac <HAL_UART_AbortReceive_IT+0x180>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	220f      	movs	r2, #15
 800325a:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	8b1b      	ldrh	r3, [r3, #24]
 8003262:	b29a      	uxth	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f042 0208 	orr.w	r2, r2, #8
 800326c:	b292      	uxth	r2, r2
 800326e:	831a      	strh	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2220      	movs	r2, #32
 8003274:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 fb09 	bl	8003894 <HAL_UART_AbortReceiveCpltCallback>
 8003282:	e013      	b.n	80032ac <HAL_UART_AbortReceive_IT+0x180>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	220f      	movs	r2, #15
 8003298:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2220      	movs	r2, #32
 800329e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 faf4 	bl	8003894 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3768      	adds	r7, #104	; 0x68
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	080042ff 	.word	0x080042ff

080032bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b0ba      	sub	sp, #232	; 0xe8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80032e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80032e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80032ea:	4013      	ands	r3, r2
 80032ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80032f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d115      	bne.n	8003324 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80032f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032fc:	f003 0320 	and.w	r3, r3, #32
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00f      	beq.n	8003324 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003308:	f003 0320 	and.w	r3, r3, #32
 800330c:	2b00      	cmp	r3, #0
 800330e:	d009      	beq.n	8003324 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 82a6 	beq.w	8003866 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	4798      	blx	r3
      }
      return;
 8003322:	e2a0      	b.n	8003866 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003324:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 8117 	beq.w	800355c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800332e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d106      	bne.n	8003348 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800333a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800333e:	4b85      	ldr	r3, [pc, #532]	; (8003554 <HAL_UART_IRQHandler+0x298>)
 8003340:	4013      	ands	r3, r2
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 810a 	beq.w	800355c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d011      	beq.n	8003378 <HAL_UART_IRQHandler+0xbc>
 8003354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00b      	beq.n	8003378 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2201      	movs	r2, #1
 8003366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800336e:	f043 0201 	orr.w	r2, r3, #1
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d011      	beq.n	80033a8 <HAL_UART_IRQHandler+0xec>
 8003384:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00b      	beq.n	80033a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2202      	movs	r2, #2
 8003396:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800339e:	f043 0204 	orr.w	r2, r3, #4
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d011      	beq.n	80033d8 <HAL_UART_IRQHandler+0x11c>
 80033b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00b      	beq.n	80033d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2204      	movs	r2, #4
 80033c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033ce:	f043 0202 	orr.w	r2, r3, #2
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80033d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d017      	beq.n	8003414 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e8:	f003 0320 	and.w	r3, r3, #32
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d105      	bne.n	80033fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80033f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00b      	beq.n	8003414 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2208      	movs	r2, #8
 8003402:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800340a:	f043 0208 	orr.w	r2, r3, #8
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800341c:	2b00      	cmp	r3, #0
 800341e:	d012      	beq.n	8003446 <HAL_UART_IRQHandler+0x18a>
 8003420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003424:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00c      	beq.n	8003446 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003434:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800343c:	f043 0220 	orr.w	r2, r3, #32
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 820c 	beq.w	800386a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003456:	f003 0320 	and.w	r3, r3, #32
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00d      	beq.n	800347a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800345e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b00      	cmp	r3, #0
 8003468:	d007      	beq.n	800347a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003480:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	2b40      	cmp	r3, #64	; 0x40
 8003490:	d005      	beq.n	800349e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003492:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003496:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800349a:	2b00      	cmp	r3, #0
 800349c:	d04f      	beq.n	800353e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 feb4 	bl	800420c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ae:	2b40      	cmp	r3, #64	; 0x40
 80034b0:	d141      	bne.n	8003536 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	3308      	adds	r3, #8
 80034b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034c0:	e853 3f00 	ldrex	r3, [r3]
 80034c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80034c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	3308      	adds	r3, #8
 80034da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80034de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80034e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80034ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80034ee:	e841 2300 	strex	r3, r2, [r1]
 80034f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80034f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1d9      	bne.n	80034b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003502:	2b00      	cmp	r3, #0
 8003504:	d013      	beq.n	800352e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	4a13      	ldr	r2, [pc, #76]	; (8003558 <HAL_UART_IRQHandler+0x29c>)
 800350c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003512:	4618      	mov	r0, r3
 8003514:	f7fd fd23 	bl	8000f5e <HAL_DMA_Abort_IT>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d017      	beq.n	800354e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003528:	4610      	mov	r0, r2
 800352a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800352c:	e00f      	b.n	800354e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f9a6 	bl	8003880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003534:	e00b      	b.n	800354e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f9a2 	bl	8003880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800353c:	e007      	b.n	800354e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f99e 	bl	8003880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800354c:	e18d      	b.n	800386a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800354e:	bf00      	nop
    return;
 8003550:	e18b      	b.n	800386a <HAL_UART_IRQHandler+0x5ae>
 8003552:	bf00      	nop
 8003554:	04000120 	.word	0x04000120
 8003558:	080042d3 	.word	0x080042d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003560:	2b01      	cmp	r3, #1
 8003562:	f040 8146 	bne.w	80037f2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800356a:	f003 0310 	and.w	r3, r3, #16
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 813f 	beq.w	80037f2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 8138 	beq.w	80037f2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2210      	movs	r2, #16
 8003588:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003594:	2b40      	cmp	r3, #64	; 0x40
 8003596:	f040 80b4 	bne.w	8003702 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 815f 	beq.w	800386e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80035b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035ba:	429a      	cmp	r2, r3
 80035bc:	f080 8157 	bcs.w	800386e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f040 8085 	bne.w	80036e6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035e8:	e853 3f00 	ldrex	r3, [r3]
 80035ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80035f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	461a      	mov	r2, r3
 8003602:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003606:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800360a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003612:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003616:	e841 2300 	strex	r3, r2, [r1]
 800361a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800361e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1da      	bne.n	80035dc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	3308      	adds	r3, #8
 800362c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003630:	e853 3f00 	ldrex	r3, [r3]
 8003634:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003636:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003638:	f023 0301 	bic.w	r3, r3, #1
 800363c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3308      	adds	r3, #8
 8003646:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800364a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800364e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003650:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003652:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003656:	e841 2300 	strex	r3, r2, [r1]
 800365a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800365c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1e1      	bne.n	8003626 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3308      	adds	r3, #8
 8003668:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800366c:	e853 3f00 	ldrex	r3, [r3]
 8003670:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003672:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003678:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3308      	adds	r3, #8
 8003682:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003686:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003688:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800368c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800368e:	e841 2300 	strex	r3, r2, [r1]
 8003692:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1e3      	bne.n	8003662 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2220      	movs	r2, #32
 800369e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ae:	e853 3f00 	ldrex	r3, [r3]
 80036b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80036b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036b6:	f023 0310 	bic.w	r3, r3, #16
 80036ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80036ca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036d0:	e841 2300 	strex	r3, r2, [r1]
 80036d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80036d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1e4      	bne.n	80036a6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7fd fbfe 	bl	8000ee2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	4619      	mov	r1, r3
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f8d4 	bl	80038a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003700:	e0b5      	b.n	800386e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800370e:	b29b      	uxth	r3, r3
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 80a7 	beq.w	8003872 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003724:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 80a2 	beq.w	8003872 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003736:	e853 3f00 	ldrex	r3, [r3]
 800373a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800373c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800373e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003742:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003750:	647b      	str	r3, [r7, #68]	; 0x44
 8003752:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003754:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003756:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003758:	e841 2300 	strex	r3, r2, [r1]
 800375c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800375e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1e4      	bne.n	800372e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3308      	adds	r3, #8
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	e853 3f00 	ldrex	r3, [r3]
 8003772:	623b      	str	r3, [r7, #32]
   return(result);
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	f023 0301 	bic.w	r3, r3, #1
 800377a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3308      	adds	r3, #8
 8003784:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003788:	633a      	str	r2, [r7, #48]	; 0x30
 800378a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800378e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003790:	e841 2300 	strex	r3, r2, [r1]
 8003794:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1e3      	bne.n	8003764 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2220      	movs	r2, #32
 80037a0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	e853 3f00 	ldrex	r3, [r3]
 80037ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f023 0310 	bic.w	r3, r3, #16
 80037c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037d0:	61fb      	str	r3, [r7, #28]
 80037d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d4:	69b9      	ldr	r1, [r7, #24]
 80037d6:	69fa      	ldr	r2, [r7, #28]
 80037d8:	e841 2300 	strex	r3, r2, [r1]
 80037dc:	617b      	str	r3, [r7, #20]
   return(result);
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1e4      	bne.n	80037ae <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037e8:	4619      	mov	r1, r3
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f85c 	bl	80038a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80037f0:	e03f      	b.n	8003872 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80037f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00e      	beq.n	800381c <HAL_UART_IRQHandler+0x560>
 80037fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d008      	beq.n	800381c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003812:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 ffde 	bl	80047d6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800381a:	e02d      	b.n	8003878 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800381c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00e      	beq.n	8003846 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800382c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003838:	2b00      	cmp	r3, #0
 800383a:	d01c      	beq.n	8003876 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	4798      	blx	r3
    }
    return;
 8003844:	e017      	b.n	8003876 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800384a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d012      	beq.n	8003878 <HAL_UART_IRQHandler+0x5bc>
 8003852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00c      	beq.n	8003878 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fe2f 	bl	80044c2 <UART_EndTransmit_IT>
    return;
 8003864:	e008      	b.n	8003878 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003866:	bf00      	nop
 8003868:	e006      	b.n	8003878 <HAL_UART_IRQHandler+0x5bc>
    return;
 800386a:	bf00      	nop
 800386c:	e004      	b.n	8003878 <HAL_UART_IRQHandler+0x5bc>
      return;
 800386e:	bf00      	nop
 8003870:	e002      	b.n	8003878 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003872:	bf00      	nop
 8003874:	e000      	b.n	8003878 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003876:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003878:	37e8      	adds	r7, #232	; 0xe8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop

08003880 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c4:	b08a      	sub	sp, #40	; 0x28
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	431a      	orrs	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	431a      	orrs	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	4bb4      	ldr	r3, [pc, #720]	; (8003bc0 <UART_SetConfig+0x300>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	6812      	ldr	r2, [r2, #0]
 80038f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038f8:	430b      	orrs	r3, r1
 80038fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4aa9      	ldr	r2, [pc, #676]	; (8003bc4 <UART_SetConfig+0x304>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d004      	beq.n	800392c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003928:	4313      	orrs	r3, r2
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393c:	430a      	orrs	r2, r1
 800393e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4aa0      	ldr	r2, [pc, #640]	; (8003bc8 <UART_SetConfig+0x308>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d126      	bne.n	8003998 <UART_SetConfig+0xd8>
 800394a:	4ba0      	ldr	r3, [pc, #640]	; (8003bcc <UART_SetConfig+0x30c>)
 800394c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	2b03      	cmp	r3, #3
 8003956:	d81b      	bhi.n	8003990 <UART_SetConfig+0xd0>
 8003958:	a201      	add	r2, pc, #4	; (adr r2, 8003960 <UART_SetConfig+0xa0>)
 800395a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395e:	bf00      	nop
 8003960:	08003971 	.word	0x08003971
 8003964:	08003981 	.word	0x08003981
 8003968:	08003979 	.word	0x08003979
 800396c:	08003989 	.word	0x08003989
 8003970:	2301      	movs	r3, #1
 8003972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003976:	e080      	b.n	8003a7a <UART_SetConfig+0x1ba>
 8003978:	2302      	movs	r3, #2
 800397a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800397e:	e07c      	b.n	8003a7a <UART_SetConfig+0x1ba>
 8003980:	2304      	movs	r3, #4
 8003982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003986:	e078      	b.n	8003a7a <UART_SetConfig+0x1ba>
 8003988:	2308      	movs	r3, #8
 800398a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800398e:	e074      	b.n	8003a7a <UART_SetConfig+0x1ba>
 8003990:	2310      	movs	r3, #16
 8003992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003996:	e070      	b.n	8003a7a <UART_SetConfig+0x1ba>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a8c      	ldr	r2, [pc, #560]	; (8003bd0 <UART_SetConfig+0x310>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d138      	bne.n	8003a14 <UART_SetConfig+0x154>
 80039a2:	4b8a      	ldr	r3, [pc, #552]	; (8003bcc <UART_SetConfig+0x30c>)
 80039a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a8:	f003 030c 	and.w	r3, r3, #12
 80039ac:	2b0c      	cmp	r3, #12
 80039ae:	d82d      	bhi.n	8003a0c <UART_SetConfig+0x14c>
 80039b0:	a201      	add	r2, pc, #4	; (adr r2, 80039b8 <UART_SetConfig+0xf8>)
 80039b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b6:	bf00      	nop
 80039b8:	080039ed 	.word	0x080039ed
 80039bc:	08003a0d 	.word	0x08003a0d
 80039c0:	08003a0d 	.word	0x08003a0d
 80039c4:	08003a0d 	.word	0x08003a0d
 80039c8:	080039fd 	.word	0x080039fd
 80039cc:	08003a0d 	.word	0x08003a0d
 80039d0:	08003a0d 	.word	0x08003a0d
 80039d4:	08003a0d 	.word	0x08003a0d
 80039d8:	080039f5 	.word	0x080039f5
 80039dc:	08003a0d 	.word	0x08003a0d
 80039e0:	08003a0d 	.word	0x08003a0d
 80039e4:	08003a0d 	.word	0x08003a0d
 80039e8:	08003a05 	.word	0x08003a05
 80039ec:	2300      	movs	r3, #0
 80039ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039f2:	e042      	b.n	8003a7a <UART_SetConfig+0x1ba>
 80039f4:	2302      	movs	r3, #2
 80039f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039fa:	e03e      	b.n	8003a7a <UART_SetConfig+0x1ba>
 80039fc:	2304      	movs	r3, #4
 80039fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a02:	e03a      	b.n	8003a7a <UART_SetConfig+0x1ba>
 8003a04:	2308      	movs	r3, #8
 8003a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a0a:	e036      	b.n	8003a7a <UART_SetConfig+0x1ba>
 8003a0c:	2310      	movs	r3, #16
 8003a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a12:	e032      	b.n	8003a7a <UART_SetConfig+0x1ba>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a6a      	ldr	r2, [pc, #424]	; (8003bc4 <UART_SetConfig+0x304>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d12a      	bne.n	8003a74 <UART_SetConfig+0x1b4>
 8003a1e:	4b6b      	ldr	r3, [pc, #428]	; (8003bcc <UART_SetConfig+0x30c>)
 8003a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a2c:	d01a      	beq.n	8003a64 <UART_SetConfig+0x1a4>
 8003a2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a32:	d81b      	bhi.n	8003a6c <UART_SetConfig+0x1ac>
 8003a34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a38:	d00c      	beq.n	8003a54 <UART_SetConfig+0x194>
 8003a3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a3e:	d815      	bhi.n	8003a6c <UART_SetConfig+0x1ac>
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <UART_SetConfig+0x18c>
 8003a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a48:	d008      	beq.n	8003a5c <UART_SetConfig+0x19c>
 8003a4a:	e00f      	b.n	8003a6c <UART_SetConfig+0x1ac>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a52:	e012      	b.n	8003a7a <UART_SetConfig+0x1ba>
 8003a54:	2302      	movs	r3, #2
 8003a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a5a:	e00e      	b.n	8003a7a <UART_SetConfig+0x1ba>
 8003a5c:	2304      	movs	r3, #4
 8003a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a62:	e00a      	b.n	8003a7a <UART_SetConfig+0x1ba>
 8003a64:	2308      	movs	r3, #8
 8003a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a6a:	e006      	b.n	8003a7a <UART_SetConfig+0x1ba>
 8003a6c:	2310      	movs	r3, #16
 8003a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a72:	e002      	b.n	8003a7a <UART_SetConfig+0x1ba>
 8003a74:	2310      	movs	r3, #16
 8003a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a51      	ldr	r2, [pc, #324]	; (8003bc4 <UART_SetConfig+0x304>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d17a      	bne.n	8003b7a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d824      	bhi.n	8003ad6 <UART_SetConfig+0x216>
 8003a8c:	a201      	add	r2, pc, #4	; (adr r2, 8003a94 <UART_SetConfig+0x1d4>)
 8003a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a92:	bf00      	nop
 8003a94:	08003ab9 	.word	0x08003ab9
 8003a98:	08003ad7 	.word	0x08003ad7
 8003a9c:	08003ac1 	.word	0x08003ac1
 8003aa0:	08003ad7 	.word	0x08003ad7
 8003aa4:	08003ac7 	.word	0x08003ac7
 8003aa8:	08003ad7 	.word	0x08003ad7
 8003aac:	08003ad7 	.word	0x08003ad7
 8003ab0:	08003ad7 	.word	0x08003ad7
 8003ab4:	08003acf 	.word	0x08003acf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ab8:	f7fe fa44 	bl	8001f44 <HAL_RCC_GetPCLK1Freq>
 8003abc:	61f8      	str	r0, [r7, #28]
        break;
 8003abe:	e010      	b.n	8003ae2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ac0:	4b44      	ldr	r3, [pc, #272]	; (8003bd4 <UART_SetConfig+0x314>)
 8003ac2:	61fb      	str	r3, [r7, #28]
        break;
 8003ac4:	e00d      	b.n	8003ae2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ac6:	f7fe f9a5 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8003aca:	61f8      	str	r0, [r7, #28]
        break;
 8003acc:	e009      	b.n	8003ae2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ad2:	61fb      	str	r3, [r7, #28]
        break;
 8003ad4:	e005      	b.n	8003ae2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ae0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 8107 	beq.w	8003cf8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	4413      	add	r3, r2
 8003af4:	69fa      	ldr	r2, [r7, #28]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d305      	bcc.n	8003b06 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b00:	69fa      	ldr	r2, [r7, #28]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d903      	bls.n	8003b0e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b0c:	e0f4      	b.n	8003cf8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	2200      	movs	r2, #0
 8003b12:	461c      	mov	r4, r3
 8003b14:	4615      	mov	r5, r2
 8003b16:	f04f 0200 	mov.w	r2, #0
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	022b      	lsls	r3, r5, #8
 8003b20:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003b24:	0222      	lsls	r2, r4, #8
 8003b26:	68f9      	ldr	r1, [r7, #12]
 8003b28:	6849      	ldr	r1, [r1, #4]
 8003b2a:	0849      	lsrs	r1, r1, #1
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	4688      	mov	r8, r1
 8003b30:	4681      	mov	r9, r0
 8003b32:	eb12 0a08 	adds.w	sl, r2, r8
 8003b36:	eb43 0b09 	adc.w	fp, r3, r9
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	603b      	str	r3, [r7, #0]
 8003b42:	607a      	str	r2, [r7, #4]
 8003b44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b48:	4650      	mov	r0, sl
 8003b4a:	4659      	mov	r1, fp
 8003b4c:	f7fc fb3e 	bl	80001cc <__aeabi_uldivmod>
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	4613      	mov	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b5e:	d308      	bcc.n	8003b72 <UART_SetConfig+0x2b2>
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b66:	d204      	bcs.n	8003b72 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	60da      	str	r2, [r3, #12]
 8003b70:	e0c2      	b.n	8003cf8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b78:	e0be      	b.n	8003cf8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b82:	d16a      	bne.n	8003c5a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003b84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d834      	bhi.n	8003bf6 <UART_SetConfig+0x336>
 8003b8c:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <UART_SetConfig+0x2d4>)
 8003b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b92:	bf00      	nop
 8003b94:	08003bb9 	.word	0x08003bb9
 8003b98:	08003bd9 	.word	0x08003bd9
 8003b9c:	08003be1 	.word	0x08003be1
 8003ba0:	08003bf7 	.word	0x08003bf7
 8003ba4:	08003be7 	.word	0x08003be7
 8003ba8:	08003bf7 	.word	0x08003bf7
 8003bac:	08003bf7 	.word	0x08003bf7
 8003bb0:	08003bf7 	.word	0x08003bf7
 8003bb4:	08003bef 	.word	0x08003bef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bb8:	f7fe f9c4 	bl	8001f44 <HAL_RCC_GetPCLK1Freq>
 8003bbc:	61f8      	str	r0, [r7, #28]
        break;
 8003bbe:	e020      	b.n	8003c02 <UART_SetConfig+0x342>
 8003bc0:	efff69f3 	.word	0xefff69f3
 8003bc4:	40008000 	.word	0x40008000
 8003bc8:	40013800 	.word	0x40013800
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	40004400 	.word	0x40004400
 8003bd4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bd8:	f7fe f9ca 	bl	8001f70 <HAL_RCC_GetPCLK2Freq>
 8003bdc:	61f8      	str	r0, [r7, #28]
        break;
 8003bde:	e010      	b.n	8003c02 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003be0:	4b4c      	ldr	r3, [pc, #304]	; (8003d14 <UART_SetConfig+0x454>)
 8003be2:	61fb      	str	r3, [r7, #28]
        break;
 8003be4:	e00d      	b.n	8003c02 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003be6:	f7fe f915 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8003bea:	61f8      	str	r0, [r7, #28]
        break;
 8003bec:	e009      	b.n	8003c02 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bf2:	61fb      	str	r3, [r7, #28]
        break;
 8003bf4:	e005      	b.n	8003c02 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d077      	beq.n	8003cf8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	005a      	lsls	r2, r3, #1
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	085b      	lsrs	r3, r3, #1
 8003c12:	441a      	add	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	2b0f      	cmp	r3, #15
 8003c22:	d916      	bls.n	8003c52 <UART_SetConfig+0x392>
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c2a:	d212      	bcs.n	8003c52 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	f023 030f 	bic.w	r3, r3, #15
 8003c34:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	085b      	lsrs	r3, r3, #1
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	8afb      	ldrh	r3, [r7, #22]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	8afa      	ldrh	r2, [r7, #22]
 8003c4e:	60da      	str	r2, [r3, #12]
 8003c50:	e052      	b.n	8003cf8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c58:	e04e      	b.n	8003cf8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d827      	bhi.n	8003cb2 <UART_SetConfig+0x3f2>
 8003c62:	a201      	add	r2, pc, #4	; (adr r2, 8003c68 <UART_SetConfig+0x3a8>)
 8003c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c68:	08003c8d 	.word	0x08003c8d
 8003c6c:	08003c95 	.word	0x08003c95
 8003c70:	08003c9d 	.word	0x08003c9d
 8003c74:	08003cb3 	.word	0x08003cb3
 8003c78:	08003ca3 	.word	0x08003ca3
 8003c7c:	08003cb3 	.word	0x08003cb3
 8003c80:	08003cb3 	.word	0x08003cb3
 8003c84:	08003cb3 	.word	0x08003cb3
 8003c88:	08003cab 	.word	0x08003cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c8c:	f7fe f95a 	bl	8001f44 <HAL_RCC_GetPCLK1Freq>
 8003c90:	61f8      	str	r0, [r7, #28]
        break;
 8003c92:	e014      	b.n	8003cbe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c94:	f7fe f96c 	bl	8001f70 <HAL_RCC_GetPCLK2Freq>
 8003c98:	61f8      	str	r0, [r7, #28]
        break;
 8003c9a:	e010      	b.n	8003cbe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c9c:	4b1d      	ldr	r3, [pc, #116]	; (8003d14 <UART_SetConfig+0x454>)
 8003c9e:	61fb      	str	r3, [r7, #28]
        break;
 8003ca0:	e00d      	b.n	8003cbe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ca2:	f7fe f8b7 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8003ca6:	61f8      	str	r0, [r7, #28]
        break;
 8003ca8:	e009      	b.n	8003cbe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cae:	61fb      	str	r3, [r7, #28]
        break;
 8003cb0:	e005      	b.n	8003cbe <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cbc:	bf00      	nop
    }

    if (pclk != 0U)
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d019      	beq.n	8003cf8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	085a      	lsrs	r2, r3, #1
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	441a      	add	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	2b0f      	cmp	r3, #15
 8003cdc:	d909      	bls.n	8003cf2 <UART_SetConfig+0x432>
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce4:	d205      	bcs.n	8003cf2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	60da      	str	r2, [r3, #12]
 8003cf0:	e002      	b.n	8003cf8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3728      	adds	r7, #40	; 0x28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d12:	bf00      	nop
 8003d14:	00f42400 	.word	0x00f42400

08003d18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	f003 0308 	and.w	r3, r3, #8
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	f003 0310 	and.w	r3, r3, #16
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d01a      	beq.n	8003e2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e16:	d10a      	bne.n	8003e2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	605a      	str	r2, [r3, #4]
  }
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af02      	add	r7, sp, #8
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e6c:	f7fc ff1c 	bl	8000ca8 <HAL_GetTick>
 8003e70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d10e      	bne.n	8003e9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f82d 	bl	8003eee <UART_WaitOnFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e023      	b.n	8003ee6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d10e      	bne.n	8003eca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f817 	bl	8003eee <UART_WaitOnFlagUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e00d      	b.n	8003ee6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b09c      	sub	sp, #112	; 0x70
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	60f8      	str	r0, [r7, #12]
 8003ef6:	60b9      	str	r1, [r7, #8]
 8003ef8:	603b      	str	r3, [r7, #0]
 8003efa:	4613      	mov	r3, r2
 8003efc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003efe:	e0a5      	b.n	800404c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f06:	f000 80a1 	beq.w	800404c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f0a:	f7fc fecd 	bl	8000ca8 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d302      	bcc.n	8003f20 <UART_WaitOnFlagUntilTimeout+0x32>
 8003f1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d13e      	bne.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f34:	667b      	str	r3, [r7, #100]	; 0x64
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f40:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f46:	e841 2300 	strex	r3, r2, [r1]
 8003f4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e6      	bne.n	8003f20 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3308      	adds	r3, #8
 8003f58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f5c:	e853 3f00 	ldrex	r3, [r3]
 8003f60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f64:	f023 0301 	bic.w	r3, r3, #1
 8003f68:	663b      	str	r3, [r7, #96]	; 0x60
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3308      	adds	r3, #8
 8003f70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f72:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f7a:	e841 2300 	strex	r3, r2, [r1]
 8003f7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1e5      	bne.n	8003f52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e067      	b.n	800406e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d04f      	beq.n	800404c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fba:	d147      	bne.n	800404c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fc4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8003fe6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fec:	e841 2300 	strex	r3, r2, [r1]
 8003ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1e6      	bne.n	8003fc6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3308      	adds	r3, #8
 8003ffe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	e853 3f00 	ldrex	r3, [r3]
 8004006:	613b      	str	r3, [r7, #16]
   return(result);
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f023 0301 	bic.w	r3, r3, #1
 800400e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3308      	adds	r3, #8
 8004016:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004018:	623a      	str	r2, [r7, #32]
 800401a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401c:	69f9      	ldr	r1, [r7, #28]
 800401e:	6a3a      	ldr	r2, [r7, #32]
 8004020:	e841 2300 	strex	r3, r2, [r1]
 8004024:	61bb      	str	r3, [r7, #24]
   return(result);
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e5      	bne.n	8003ff8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2220      	movs	r2, #32
 8004036:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2220      	movs	r2, #32
 800403c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e010      	b.n	800406e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	69da      	ldr	r2, [r3, #28]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	4013      	ands	r3, r2
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	429a      	cmp	r2, r3
 800405a:	bf0c      	ite	eq
 800405c:	2301      	moveq	r3, #1
 800405e:	2300      	movne	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	461a      	mov	r2, r3
 8004064:	79fb      	ldrb	r3, [r7, #7]
 8004066:	429a      	cmp	r2, r3
 8004068:	f43f af4a 	beq.w	8003f00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3770      	adds	r7, #112	; 0x70
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
	...

08004078 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004078:	b480      	push	{r7}
 800407a:	b097      	sub	sp, #92	; 0x5c
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	4613      	mov	r3, r2
 8004084:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	88fa      	ldrh	r2, [r7, #6]
 8004090:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	88fa      	ldrh	r2, [r7, #6]
 8004098:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040aa:	d10e      	bne.n	80040ca <UART_Start_Receive_IT+0x52>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d105      	bne.n	80040c0 <UART_Start_Receive_IT+0x48>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80040ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040be:	e02d      	b.n	800411c <UART_Start_Receive_IT+0xa4>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	22ff      	movs	r2, #255	; 0xff
 80040c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040c8:	e028      	b.n	800411c <UART_Start_Receive_IT+0xa4>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10d      	bne.n	80040ee <UART_Start_Receive_IT+0x76>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d104      	bne.n	80040e4 <UART_Start_Receive_IT+0x6c>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	22ff      	movs	r2, #255	; 0xff
 80040de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040e2:	e01b      	b.n	800411c <UART_Start_Receive_IT+0xa4>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	227f      	movs	r2, #127	; 0x7f
 80040e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040ec:	e016      	b.n	800411c <UART_Start_Receive_IT+0xa4>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040f6:	d10d      	bne.n	8004114 <UART_Start_Receive_IT+0x9c>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d104      	bne.n	800410a <UART_Start_Receive_IT+0x92>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	227f      	movs	r2, #127	; 0x7f
 8004104:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004108:	e008      	b.n	800411c <UART_Start_Receive_IT+0xa4>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	223f      	movs	r2, #63	; 0x3f
 800410e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004112:	e003      	b.n	800411c <UART_Start_Receive_IT+0xa4>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2222      	movs	r2, #34	; 0x22
 8004128:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3308      	adds	r3, #8
 8004130:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004134:	e853 3f00 	ldrex	r3, [r3]
 8004138:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800413a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	657b      	str	r3, [r7, #84]	; 0x54
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	3308      	adds	r3, #8
 8004148:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800414a:	64ba      	str	r2, [r7, #72]	; 0x48
 800414c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004150:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004152:	e841 2300 	strex	r3, r2, [r1]
 8004156:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1e5      	bne.n	800412a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004166:	d107      	bne.n	8004178 <UART_Start_Receive_IT+0x100>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d103      	bne.n	8004178 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4a24      	ldr	r2, [pc, #144]	; (8004204 <UART_Start_Receive_IT+0x18c>)
 8004174:	665a      	str	r2, [r3, #100]	; 0x64
 8004176:	e002      	b.n	800417e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4a23      	ldr	r2, [pc, #140]	; (8004208 <UART_Start_Receive_IT+0x190>)
 800417c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d019      	beq.n	80041c2 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004196:	e853 3f00 	ldrex	r3, [r3]
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80041a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ac:	637b      	str	r3, [r7, #52]	; 0x34
 80041ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041b4:	e841 2300 	strex	r3, r2, [r1]
 80041b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1e6      	bne.n	800418e <UART_Start_Receive_IT+0x116>
 80041c0:	e018      	b.n	80041f4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	e853 3f00 	ldrex	r3, [r3]
 80041ce:	613b      	str	r3, [r7, #16]
   return(result);
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f043 0320 	orr.w	r3, r3, #32
 80041d6:	653b      	str	r3, [r7, #80]	; 0x50
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	461a      	mov	r2, r3
 80041de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041e0:	623b      	str	r3, [r7, #32]
 80041e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e4:	69f9      	ldr	r1, [r7, #28]
 80041e6:	6a3a      	ldr	r2, [r7, #32]
 80041e8:	e841 2300 	strex	r3, r2, [r1]
 80041ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1e6      	bne.n	80041c2 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	375c      	adds	r7, #92	; 0x5c
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	08004677 	.word	0x08004677
 8004208:	08004517 	.word	0x08004517

0800420c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800420c:	b480      	push	{r7}
 800420e:	b095      	sub	sp, #84	; 0x54
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800421c:	e853 3f00 	ldrex	r3, [r3]
 8004220:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004224:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004228:	64fb      	str	r3, [r7, #76]	; 0x4c
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004232:	643b      	str	r3, [r7, #64]	; 0x40
 8004234:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004236:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004238:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800423a:	e841 2300 	strex	r3, r2, [r1]
 800423e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1e6      	bne.n	8004214 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	3308      	adds	r3, #8
 800424c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	e853 3f00 	ldrex	r3, [r3]
 8004254:	61fb      	str	r3, [r7, #28]
   return(result);
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	f023 0301 	bic.w	r3, r3, #1
 800425c:	64bb      	str	r3, [r7, #72]	; 0x48
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	3308      	adds	r3, #8
 8004264:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004266:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004268:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800426c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800426e:	e841 2300 	strex	r3, r2, [r1]
 8004272:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1e5      	bne.n	8004246 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800427e:	2b01      	cmp	r3, #1
 8004280:	d118      	bne.n	80042b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	e853 3f00 	ldrex	r3, [r3]
 800428e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f023 0310 	bic.w	r3, r3, #16
 8004296:	647b      	str	r3, [r7, #68]	; 0x44
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042a0:	61bb      	str	r3, [r7, #24]
 80042a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a4:	6979      	ldr	r1, [r7, #20]
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	e841 2300 	strex	r3, r2, [r1]
 80042ac:	613b      	str	r3, [r7, #16]
   return(result);
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1e6      	bne.n	8004282 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2220      	movs	r2, #32
 80042b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80042c6:	bf00      	nop
 80042c8:	3754      	adds	r7, #84	; 0x54
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b084      	sub	sp, #16
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f7ff fac5 	bl	8003880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042f6:	bf00      	nop
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b084      	sub	sp, #16
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430a:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	220f      	movs	r2, #15
 800431a:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	8b1b      	ldrh	r3, [r3, #24]
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f042 0208 	orr.w	r2, r2, #8
 800432c:	b292      	uxth	r2, r2
 800432e:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2220      	movs	r2, #32
 8004334:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f7ff faa9 	bl	8003894 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004342:	bf00      	nop
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800434a:	b480      	push	{r7}
 800434c:	b08f      	sub	sp, #60	; 0x3c
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004356:	2b21      	cmp	r3, #33	; 0x21
 8004358:	d14d      	bne.n	80043f6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004360:	b29b      	uxth	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d132      	bne.n	80043cc <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	e853 3f00 	ldrex	r3, [r3]
 8004372:	61fb      	str	r3, [r7, #28]
   return(result);
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800437a:	637b      	str	r3, [r7, #52]	; 0x34
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	461a      	mov	r2, r3
 8004382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004386:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800438a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800438c:	e841 2300 	strex	r3, r2, [r1]
 8004390:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1e6      	bne.n	8004366 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	e853 3f00 	ldrex	r3, [r3]
 80043a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043ac:	633b      	str	r3, [r7, #48]	; 0x30
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b6:	61bb      	str	r3, [r7, #24]
 80043b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ba:	6979      	ldr	r1, [r7, #20]
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	e841 2300 	strex	r3, r2, [r1]
 80043c2:	613b      	str	r3, [r7, #16]
   return(result);
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1e6      	bne.n	8004398 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80043ca:	e014      	b.n	80043f6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d0:	781a      	ldrb	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	b292      	uxth	r2, r2
 80043d8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043de:	1c5a      	adds	r2, r3, #1
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80043f6:	bf00      	nop
 80043f8:	373c      	adds	r7, #60	; 0x3c
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004402:	b480      	push	{r7}
 8004404:	b091      	sub	sp, #68	; 0x44
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800440e:	2b21      	cmp	r3, #33	; 0x21
 8004410:	d151      	bne.n	80044b6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d132      	bne.n	8004484 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	e853 3f00 	ldrex	r3, [r3]
 800442a:	623b      	str	r3, [r7, #32]
   return(result);
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004432:	63bb      	str	r3, [r7, #56]	; 0x38
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	461a      	mov	r2, r3
 800443a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443c:	633b      	str	r3, [r7, #48]	; 0x30
 800443e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004440:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004444:	e841 2300 	strex	r3, r2, [r1]
 8004448:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800444a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1e6      	bne.n	800441e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	e853 3f00 	ldrex	r3, [r3]
 800445c:	60fb      	str	r3, [r7, #12]
   return(result);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004464:	637b      	str	r3, [r7, #52]	; 0x34
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	461a      	mov	r2, r3
 800446c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800446e:	61fb      	str	r3, [r7, #28]
 8004470:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004472:	69b9      	ldr	r1, [r7, #24]
 8004474:	69fa      	ldr	r2, [r7, #28]
 8004476:	e841 2300 	strex	r3, r2, [r1]
 800447a:	617b      	str	r3, [r7, #20]
   return(result);
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1e6      	bne.n	8004450 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004482:	e018      	b.n	80044b6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004488:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800448a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800448c:	881a      	ldrh	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004496:	b292      	uxth	r2, r2
 8004498:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449e:	1c9a      	adds	r2, r3, #2
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80044b6:	bf00      	nop
 80044b8:	3744      	adds	r7, #68	; 0x44
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b088      	sub	sp, #32
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	e853 3f00 	ldrex	r3, [r3]
 80044d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044de:	61fb      	str	r3, [r7, #28]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	461a      	mov	r2, r3
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	61bb      	str	r3, [r7, #24]
 80044ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ec:	6979      	ldr	r1, [r7, #20]
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	e841 2300 	strex	r3, r2, [r1]
 80044f4:	613b      	str	r3, [r7, #16]
   return(result);
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1e6      	bne.n	80044ca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2220      	movs	r2, #32
 8004500:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 fa47 	bl	800499c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800450e:	bf00      	nop
 8004510:	3720      	adds	r7, #32
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b096      	sub	sp, #88	; 0x58
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004524:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800452c:	2b22      	cmp	r3, #34	; 0x22
 800452e:	f040 8094 	bne.w	800465a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004538:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800453c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004540:	b2d9      	uxtb	r1, r3
 8004542:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004546:	b2da      	uxtb	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454c:	400a      	ands	r2, r1
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004556:	1c5a      	adds	r2, r3, #1
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004562:	b29b      	uxth	r3, r3
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004574:	b29b      	uxth	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d179      	bne.n	800466e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004582:	e853 3f00 	ldrex	r3, [r3]
 8004586:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800458a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800458e:	653b      	str	r3, [r7, #80]	; 0x50
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	461a      	mov	r2, r3
 8004596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004598:	647b      	str	r3, [r7, #68]	; 0x44
 800459a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800459e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045a0:	e841 2300 	strex	r3, r2, [r1]
 80045a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1e6      	bne.n	800457a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3308      	adds	r3, #8
 80045b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	e853 3f00 	ldrex	r3, [r3]
 80045ba:	623b      	str	r3, [r7, #32]
   return(result);
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	f023 0301 	bic.w	r3, r3, #1
 80045c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3308      	adds	r3, #8
 80045ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045cc:	633a      	str	r2, [r7, #48]	; 0x30
 80045ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045d4:	e841 2300 	strex	r3, r2, [r1]
 80045d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e5      	bne.n	80045ac <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2220      	movs	r2, #32
 80045e4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d12e      	bne.n	8004652 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	e853 3f00 	ldrex	r3, [r3]
 8004606:	60fb      	str	r3, [r7, #12]
   return(result);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 0310 	bic.w	r3, r3, #16
 800460e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	461a      	mov	r2, r3
 8004616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004618:	61fb      	str	r3, [r7, #28]
 800461a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461c:	69b9      	ldr	r1, [r7, #24]
 800461e:	69fa      	ldr	r2, [r7, #28]
 8004620:	e841 2300 	strex	r3, r2, [r1]
 8004624:	617b      	str	r3, [r7, #20]
   return(result);
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1e6      	bne.n	80045fa <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	f003 0310 	and.w	r3, r3, #16
 8004636:	2b10      	cmp	r3, #16
 8004638:	d103      	bne.n	8004642 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2210      	movs	r2, #16
 8004640:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004648:	4619      	mov	r1, r3
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7ff f92c 	bl	80038a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004650:	e00d      	b.n	800466e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f984 	bl	8004960 <HAL_UART_RxCpltCallback>
}
 8004658:	e009      	b.n	800466e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	8b1b      	ldrh	r3, [r3, #24]
 8004660:	b29a      	uxth	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0208 	orr.w	r2, r2, #8
 800466a:	b292      	uxth	r2, r2
 800466c:	831a      	strh	r2, [r3, #24]
}
 800466e:	bf00      	nop
 8004670:	3758      	adds	r7, #88	; 0x58
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b096      	sub	sp, #88	; 0x58
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004684:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800468c:	2b22      	cmp	r3, #34	; 0x22
 800468e:	f040 8094 	bne.w	80047ba <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004698:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80046a2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80046a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80046aa:	4013      	ands	r3, r2
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b6:	1c9a      	adds	r2, r3, #2
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d179      	bne.n	80047ce <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e2:	e853 3f00 	ldrex	r3, [r3]
 80046e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046f8:	643b      	str	r3, [r7, #64]	; 0x40
 80046fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004700:	e841 2300 	strex	r3, r2, [r1]
 8004704:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1e6      	bne.n	80046da <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3308      	adds	r3, #8
 8004712:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	e853 3f00 	ldrex	r3, [r3]
 800471a:	61fb      	str	r3, [r7, #28]
   return(result);
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	f023 0301 	bic.w	r3, r3, #1
 8004722:	64bb      	str	r3, [r7, #72]	; 0x48
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	3308      	adds	r3, #8
 800472a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800472c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800472e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004730:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004734:	e841 2300 	strex	r3, r2, [r1]
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1e5      	bne.n	800470c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004750:	2b01      	cmp	r3, #1
 8004752:	d12e      	bne.n	80047b2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	e853 3f00 	ldrex	r3, [r3]
 8004766:	60bb      	str	r3, [r7, #8]
   return(result);
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f023 0310 	bic.w	r3, r3, #16
 800476e:	647b      	str	r3, [r7, #68]	; 0x44
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	461a      	mov	r2, r3
 8004776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004778:	61bb      	str	r3, [r7, #24]
 800477a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477c:	6979      	ldr	r1, [r7, #20]
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	e841 2300 	strex	r3, r2, [r1]
 8004784:	613b      	str	r3, [r7, #16]
   return(result);
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1e6      	bne.n	800475a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	f003 0310 	and.w	r3, r3, #16
 8004796:	2b10      	cmp	r3, #16
 8004798:	d103      	bne.n	80047a2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2210      	movs	r2, #16
 80047a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047a8:	4619      	mov	r1, r3
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7ff f87c 	bl	80038a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047b0:	e00d      	b.n	80047ce <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f8d4 	bl	8004960 <HAL_UART_RxCpltCallback>
}
 80047b8:	e009      	b.n	80047ce <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	8b1b      	ldrh	r3, [r3, #24]
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0208 	orr.w	r2, r2, #8
 80047ca:	b292      	uxth	r2, r2
 80047cc:	831a      	strh	r2, [r3, #24]
}
 80047ce:	bf00      	nop
 80047d0:	3758      	adds	r7, #88	; 0x58
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
	...

080047ec <bsp_mb_slave_init>:
extern UART_HandleTypeDef uart_instance_main;
extern UART_HandleTypeDef uart_instance_hmi;
extern TIM_HandleTypeDef timer_instance_main;
extern TIM_HandleTypeDef timer_instance_hmi;

void bsp_mb_slave_init(void) {
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af02      	add	r7, sp, #8
	__slave[BSP_MODBUS_SLAVE_MAIN].uart  = &uart_instance_main;
 80047f2:	4b13      	ldr	r3, [pc, #76]	; (8004840 <bsp_mb_slave_init+0x54>)
 80047f4:	4a13      	ldr	r2, [pc, #76]	; (8004844 <bsp_mb_slave_init+0x58>)
 80047f6:	601a      	str	r2, [r3, #0]
	__slave[BSP_MODBUS_SLAVE_HMI].uart   = &uart_instance_hmi;
 80047f8:	4b11      	ldr	r3, [pc, #68]	; (8004840 <bsp_mb_slave_init+0x54>)
 80047fa:	4a13      	ldr	r2, [pc, #76]	; (8004848 <bsp_mb_slave_init+0x5c>)
 80047fc:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
	__slave[BSP_MODBUS_SLAVE_MAIN].timer = &timer_instance_main;
 8004800:	4b0f      	ldr	r3, [pc, #60]	; (8004840 <bsp_mb_slave_init+0x54>)
 8004802:	4a12      	ldr	r2, [pc, #72]	; (800484c <bsp_mb_slave_init+0x60>)
 8004804:	605a      	str	r2, [r3, #4]
	__slave[BSP_MODBUS_SLAVE_HMI].timer  = &timer_instance_hmi;
 8004806:	4b0e      	ldr	r3, [pc, #56]	; (8004840 <bsp_mb_slave_init+0x54>)
 8004808:	4a11      	ldr	r2, [pc, #68]	; (8004850 <bsp_mb_slave_init+0x64>)
 800480a:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60

	mb_data_init(&__mb_data);
 800480e:	4811      	ldr	r0, [pc, #68]	; (8004854 <bsp_mb_slave_init+0x68>)
 8004810:	f001 fb8c 	bl	8005f2c <mb_data_init>

	mb_slave_init(&__slave[BSP_MODBUS_SLAVE_MAIN], &__mb_data, BSP_MB_SLAVE_ID, BSP_MB_SLAVE_SPEED, BSP_MB_TIMER_CLOCK_SOURCE);
 8004814:	2350      	movs	r3, #80	; 0x50
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800481c:	2201      	movs	r2, #1
 800481e:	490d      	ldr	r1, [pc, #52]	; (8004854 <bsp_mb_slave_init+0x68>)
 8004820:	4807      	ldr	r0, [pc, #28]	; (8004840 <bsp_mb_slave_init+0x54>)
 8004822:	f000 fa0f 	bl	8004c44 <mb_slave_init>
	mb_slave_init(&__slave[BSP_MODBUS_SLAVE_HMI], &__mb_data, BSP_MB_SLAVE_ID, BSP_MB_SLAVE_SPEED, BSP_MB_TIMER_CLOCK_SOURCE);
 8004826:	2350      	movs	r3, #80	; 0x50
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800482e:	2201      	movs	r2, #1
 8004830:	4908      	ldr	r1, [pc, #32]	; (8004854 <bsp_mb_slave_init+0x68>)
 8004832:	4809      	ldr	r0, [pc, #36]	; (8004858 <bsp_mb_slave_init+0x6c>)
 8004834:	f000 fa06 	bl	8004c44 <mb_slave_init>
}
 8004838:	bf00      	nop
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	20000210 	.word	0x20000210
 8004844:	20000144 	.word	0x20000144
 8004848:	200000c0 	.word	0x200000c0
 800484c:	20000028 	.word	0x20000028
 8004850:	20000074 	.word	0x20000074
 8004854:	200001cc 	.word	0x200001cc
 8004858:	20000e6c 	.word	0x20000e6c

0800485c <bsp_mb_slave_handle>:

void bsp_mb_slave_handle(void) {
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
	mb_slave_handle(&__slave[BSP_MODBUS_SLAVE_MAIN]);
 8004860:	4803      	ldr	r0, [pc, #12]	; (8004870 <bsp_mb_slave_handle+0x14>)
 8004862:	f000 fa79 	bl	8004d58 <mb_slave_handle>
	mb_slave_handle(&__slave[BSP_MODBUS_SLAVE_MAIN]);
 8004866:	4802      	ldr	r0, [pc, #8]	; (8004870 <bsp_mb_slave_handle+0x14>)
 8004868:	f000 fa76 	bl	8004d58 <mb_slave_handle>
}
 800486c:	bf00      	nop
 800486e:	bd80      	pop	{r7, pc}
 8004870:	20000210 	.word	0x20000210

08004874 <bsp_mb_coil_set>:

uint8_t bsp_mb_id_get(void) {
	return BSP_MB_SLAVE_ID;
}

void bsp_mb_coil_set(uint16_t addr, uint8_t status) {
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	4603      	mov	r3, r0
 800487c:	460a      	mov	r2, r1
 800487e:	80fb      	strh	r3, [r7, #6]
 8004880:	4613      	mov	r3, r2
 8004882:	717b      	strb	r3, [r7, #5]
	__mb_data.coil.set(&__mb_data.coil, addr, status);
 8004884:	4b04      	ldr	r3, [pc, #16]	; (8004898 <bsp_mb_coil_set+0x24>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	797a      	ldrb	r2, [r7, #5]
 800488a:	88f9      	ldrh	r1, [r7, #6]
 800488c:	4803      	ldr	r0, [pc, #12]	; (800489c <bsp_mb_coil_set+0x28>)
 800488e:	4798      	blx	r3
}
 8004890:	bf00      	nop
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	200001cc 	.word	0x200001cc
 800489c:	200001d0 	.word	0x200001d0

080048a0 <bsp_mb_discrete_input_set>:

uint8_t bsp_mb_coil_get(uint16_t addr) {
	return __mb_data.coil.get(&__mb_data.coil, addr);
}

void bsp_mb_discrete_input_set(uint16_t addr, uint8_t status) {
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	4603      	mov	r3, r0
 80048a8:	460a      	mov	r2, r1
 80048aa:	80fb      	strh	r3, [r7, #6]
 80048ac:	4613      	mov	r3, r2
 80048ae:	717b      	strb	r3, [r7, #5]
	__mb_data.input.set(&__mb_data.input, addr, status);
 80048b0:	4b04      	ldr	r3, [pc, #16]	; (80048c4 <bsp_mb_discrete_input_set+0x24>)
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	797a      	ldrb	r2, [r7, #5]
 80048b6:	88f9      	ldrh	r1, [r7, #6]
 80048b8:	4803      	ldr	r0, [pc, #12]	; (80048c8 <bsp_mb_discrete_input_set+0x28>)
 80048ba:	4798      	blx	r3
}
 80048bc:	bf00      	nop
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	200001cc 	.word	0x200001cc
 80048c8:	200001e0 	.word	0x200001e0

080048cc <bsp_mb_input_reg_set>:

uint8_t bsp_mb_discrete_input_get(uint16_t addr) {
	return __mb_data.input.get(&__mb_data.input, addr);
}

void bsp_mb_input_reg_set(uint16_t addr, uint16_t value) {
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4603      	mov	r3, r0
 80048d4:	460a      	mov	r2, r1
 80048d6:	80fb      	strh	r3, [r7, #6]
 80048d8:	4613      	mov	r3, r2
 80048da:	80bb      	strh	r3, [r7, #4]
	__mb_data.reg_input.set(&__mb_data.reg_input, addr, value);
 80048dc:	4b04      	ldr	r3, [pc, #16]	; (80048f0 <bsp_mb_input_reg_set+0x24>)
 80048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e0:	88ba      	ldrh	r2, [r7, #4]
 80048e2:	88f9      	ldrh	r1, [r7, #6]
 80048e4:	4803      	ldr	r0, [pc, #12]	; (80048f4 <bsp_mb_input_reg_set+0x28>)
 80048e6:	4798      	blx	r3
}
 80048e8:	bf00      	nop
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	200001cc 	.word	0x200001cc
 80048f4:	200001f0 	.word	0x200001f0

080048f8 <bsp_mb_holding_reg_set>:

uint16_t bsp_mb_input_reg_get(uint16_t addr) {
	return __mb_data.reg_input.get(&__mb_data.reg_input, addr);
}

void bsp_mb_holding_reg_set(uint16_t addr, uint16_t value) {
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	4603      	mov	r3, r0
 8004900:	460a      	mov	r2, r1
 8004902:	80fb      	strh	r3, [r7, #6]
 8004904:	4613      	mov	r3, r2
 8004906:	80bb      	strh	r3, [r7, #4]
	__mb_data.reg_holding.set(&__mb_data.reg_holding, addr, value);
 8004908:	4b04      	ldr	r3, [pc, #16]	; (800491c <bsp_mb_holding_reg_set+0x24>)
 800490a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490c:	88ba      	ldrh	r2, [r7, #4]
 800490e:	88f9      	ldrh	r1, [r7, #6]
 8004910:	4803      	ldr	r0, [pc, #12]	; (8004920 <bsp_mb_holding_reg_set+0x28>)
 8004912:	4798      	blx	r3
}
 8004914:	bf00      	nop
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	200001cc 	.word	0x200001cc
 8004920:	20000200 	.word	0x20000200

08004924 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
	if(htim == __slave[BSP_MODBUS_SLAVE_MAIN].timer)
 800492c:	4b0a      	ldr	r3, [pc, #40]	; (8004958 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	429a      	cmp	r2, r3
 8004934:	d103      	bne.n	800493e <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		_mb_slave_timer_irq(&__slave[BSP_MODBUS_SLAVE_MAIN]);
 8004936:	4808      	ldr	r0, [pc, #32]	; (8004958 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8004938:	f000 fb5e 	bl	8004ff8 <_mb_slave_timer_irq>
		return;
 800493c:	e009      	b.n	8004952 <HAL_TIM_PeriodElapsedCallback+0x2e>
	}

	if(htim == __slave[BSP_MODBUS_SLAVE_HMI].timer)
 800493e:	4b06      	ldr	r3, [pc, #24]	; (8004958 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8004940:	f8d3 3c60 	ldr.w	r3, [r3, #3168]	; 0xc60
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	429a      	cmp	r2, r3
 8004948:	d103      	bne.n	8004952 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		_mb_slave_timer_irq(&__slave[BSP_MODBUS_SLAVE_HMI]);
 800494a:	4804      	ldr	r0, [pc, #16]	; (800495c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800494c:	f000 fb54 	bl	8004ff8 <_mb_slave_timer_irq>
		return;
 8004950:	bf00      	nop
	}
}
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	20000210 	.word	0x20000210
 800495c:	20000e6c 	.word	0x20000e6c

08004960 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
	if(huart == __slave[BSP_MODBUS_SLAVE_MAIN].uart)
 8004968:	4b0a      	ldr	r3, [pc, #40]	; (8004994 <HAL_UART_RxCpltCallback+0x34>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	429a      	cmp	r2, r3
 8004970:	d103      	bne.n	800497a <HAL_UART_RxCpltCallback+0x1a>
	{
		_mb_slave_rx_irq(&__slave[BSP_MODBUS_SLAVE_MAIN]);
 8004972:	4808      	ldr	r0, [pc, #32]	; (8004994 <HAL_UART_RxCpltCallback+0x34>)
 8004974:	f000 fb1a 	bl	8004fac <_mb_slave_rx_irq>
		return;
 8004978:	e009      	b.n	800498e <HAL_UART_RxCpltCallback+0x2e>
	}

	if(huart == __slave[BSP_MODBUS_SLAVE_HMI].uart)
 800497a:	4b06      	ldr	r3, [pc, #24]	; (8004994 <HAL_UART_RxCpltCallback+0x34>)
 800497c:	f8d3 3c5c 	ldr.w	r3, [r3, #3164]	; 0xc5c
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	429a      	cmp	r2, r3
 8004984:	d103      	bne.n	800498e <HAL_UART_RxCpltCallback+0x2e>
	{
		_mb_slave_rx_irq(&__slave[BSP_MODBUS_SLAVE_HMI]);
 8004986:	4804      	ldr	r0, [pc, #16]	; (8004998 <HAL_UART_RxCpltCallback+0x38>)
 8004988:	f000 fb10 	bl	8004fac <_mb_slave_rx_irq>
		return;
 800498c:	bf00      	nop
	}
}
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	20000210 	.word	0x20000210
 8004998:	20000e6c 	.word	0x20000e6c

0800499c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
	if(huart == __slave[BSP_MODBUS_SLAVE_MAIN].uart)
 80049a4:	4b0a      	ldr	r3, [pc, #40]	; (80049d0 <HAL_UART_TxCpltCallback+0x34>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d103      	bne.n	80049b6 <HAL_UART_TxCpltCallback+0x1a>
	{
		_mb_slave_tx_irq(&__slave[BSP_MODBUS_SLAVE_MAIN]);
 80049ae:	4808      	ldr	r0, [pc, #32]	; (80049d0 <HAL_UART_TxCpltCallback+0x34>)
 80049b0:	f000 fad0 	bl	8004f54 <_mb_slave_tx_irq>
		return;
 80049b4:	e009      	b.n	80049ca <HAL_UART_TxCpltCallback+0x2e>
	}

	if(huart == __slave[BSP_MODBUS_SLAVE_HMI].uart)
 80049b6:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <HAL_UART_TxCpltCallback+0x34>)
 80049b8:	f8d3 3c5c 	ldr.w	r3, [r3, #3164]	; 0xc5c
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d103      	bne.n	80049ca <HAL_UART_TxCpltCallback+0x2e>
	{
		_mb_slave_tx_irq(&__slave[BSP_MODBUS_SLAVE_HMI]);
 80049c2:	4804      	ldr	r0, [pc, #16]	; (80049d4 <HAL_UART_TxCpltCallback+0x38>)
 80049c4:	f000 fac6 	bl	8004f54 <_mb_slave_tx_irq>
		return;
 80049c8:	bf00      	nop
	}
}
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	20000210 	.word	0x20000210
 80049d4:	20000e6c 	.word	0x20000e6c

080049d8 <__mb_failure>:

#include "mb_assert.h"
#include "mb_stm32_include.h"

void __mb_failure(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80049dc:	b672      	cpsid	i
}
 80049de:	bf00      	nop
	__disable_irq();
	while(1);
 80049e0:	e7fe      	b.n	80049e0 <__mb_failure+0x8>
	...

080049e4 <mb_buffer_init>:
static mb_pdu_t* _get_data(mb_buffer_t *buf);
static void      _commit_get(mb_buffer_t *buf);
static void      _flush(mb_buffer_t *buf);
static uint8_t   _available(mb_buffer_t *buf);

void mb_buffer_init(mb_buffer_t *buf) {
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <mb_buffer_init+0x12>
 80049f2:	f7ff fff1 	bl	80049d8 <__mb_failure>
	buf->__available = 0;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	709a      	strb	r2, [r3, #2]
	buf->__tail      = 0;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	705a      	strb	r2, [r3, #1]
	buf->__head      = 0;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	701a      	strb	r2, [r3, #0]

	buf->next        = _next;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a0d      	ldr	r2, [pc, #52]	; (8004a40 <mb_buffer_init+0x5c>)
 8004a0c:	f8c3 2a18 	str.w	r2, [r3, #2584]	; 0xa18
	buf->commit_next = _commit_next;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a0c      	ldr	r2, [pc, #48]	; (8004a44 <mb_buffer_init+0x60>)
 8004a14:	f8c3 2a1c 	str.w	r2, [r3, #2588]	; 0xa1c
	buf->get_data    = _get_data;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a0b      	ldr	r2, [pc, #44]	; (8004a48 <mb_buffer_init+0x64>)
 8004a1c:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20
	buf->commit_get  = _commit_get;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a0a      	ldr	r2, [pc, #40]	; (8004a4c <mb_buffer_init+0x68>)
 8004a24:	f8c3 2a24 	str.w	r2, [r3, #2596]	; 0xa24
	buf->flush       = _flush;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a09      	ldr	r2, [pc, #36]	; (8004a50 <mb_buffer_init+0x6c>)
 8004a2c:	f8c3 2a28 	str.w	r2, [r3, #2600]	; 0xa28
	buf->available   = _available;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a08      	ldr	r2, [pc, #32]	; (8004a54 <mb_buffer_init+0x70>)
 8004a34:	f8c3 2a2c 	str.w	r2, [r3, #2604]	; 0xa2c
}
 8004a38:	bf00      	nop
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	08004a59 	.word	0x08004a59
 8004a44:	08004a89 	.word	0x08004a89
 8004a48:	08004ae9 	.word	0x08004ae9
 8004a4c:	08004b19 	.word	0x08004b19
 8004a50:	08004b6d 	.word	0x08004b6d
 8004a54:	08004b99 	.word	0x08004b99

08004a58 <_next>:

static mb_pdu_t* _next(mb_buffer_t *buf) {
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <_next+0x12>
 8004a66:	f7ff ffb7 	bl	80049d8 <__mb_failure>
	return &buf->__data[buf->__head];
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	4613      	mov	r3, r2
 8004a72:	01db      	lsls	r3, r3, #7
 8004a74:	4413      	add	r3, r2
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	3304      	adds	r3, #4
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <_commit_next>:

static void _commit_next(mb_buffer_t *buf) {
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <_commit_next+0x12>
 8004a96:	f7ff ff9f 	bl	80049d8 <__mb_failure>
	if (buf->__available >= MB_BUFFER_SIZE) {
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	789b      	ldrb	r3, [r3, #2]
 8004a9e:	2b09      	cmp	r3, #9
 8004aa0:	d904      	bls.n	8004aac <_commit_next+0x24>
		mb_log("MB buffer overflow\n");
 8004aa2:	490f      	ldr	r1, [pc, #60]	; (8004ae0 <_commit_next+0x58>)
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	f002 f8e7 	bl	8006c78 <SEGGER_RTT_printf>
		return;
 8004aaa:	e016      	b.n	8004ada <_commit_next+0x52>
	} else {
		buf->__head = (buf->__head + 1) % MB_BUFFER_SIZE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	4b0c      	ldr	r3, [pc, #48]	; (8004ae4 <_commit_next+0x5c>)
 8004ab4:	fb83 1302 	smull	r1, r3, r3, r2
 8004ab8:	1099      	asrs	r1, r3, #2
 8004aba:	17d3      	asrs	r3, r2, #31
 8004abc:	1ac9      	subs	r1, r1, r3
 8004abe:	460b      	mov	r3, r1
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	440b      	add	r3, r1
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	1ad1      	subs	r1, r2, r3
 8004ac8:	b2ca      	uxtb	r2, r1
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	701a      	strb	r2, [r3, #0]
		buf->__available++;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	789b      	ldrb	r3, [r3, #2]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	709a      	strb	r2, [r3, #2]
	}
}
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	08006d34 	.word	0x08006d34
 8004ae4:	66666667 	.word	0x66666667

08004ae8 <_get_data>:

static mb_pdu_t* _get_data(mb_buffer_t *buf) {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <_get_data+0x12>
 8004af6:	f7ff ff6f 	bl	80049d8 <__mb_failure>
	return &buf->__data[buf->__tail];
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	785b      	ldrb	r3, [r3, #1]
 8004afe:	461a      	mov	r2, r3
 8004b00:	4613      	mov	r3, r2
 8004b02:	01db      	lsls	r3, r3, #7
 8004b04:	4413      	add	r3, r2
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3304      	adds	r3, #4
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
	...

08004b18 <_commit_get>:

static void _commit_get(mb_buffer_t *buf) {
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <_commit_get+0x12>
 8004b26:	f7ff ff57 	bl	80049d8 <__mb_failure>
	if (buf->__available) {
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	789b      	ldrb	r3, [r3, #2]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d016      	beq.n	8004b60 <_commit_get+0x48>
		buf->__tail = (buf->__tail + 1) % MB_BUFFER_SIZE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	785b      	ldrb	r3, [r3, #1]
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <_commit_get+0x50>)
 8004b3a:	fb83 1302 	smull	r1, r3, r3, r2
 8004b3e:	1099      	asrs	r1, r3, #2
 8004b40:	17d3      	asrs	r3, r2, #31
 8004b42:	1ac9      	subs	r1, r1, r3
 8004b44:	460b      	mov	r3, r1
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	440b      	add	r3, r1
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	1ad1      	subs	r1, r2, r3
 8004b4e:	b2ca      	uxtb	r2, r1
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	705a      	strb	r2, [r3, #1]
		buf->__available--;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	789b      	ldrb	r3, [r3, #2]
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	709a      	strb	r2, [r3, #2]
	}
}
 8004b60:	bf00      	nop
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	66666667 	.word	0x66666667

08004b6c <_flush>:

static void _flush(mb_buffer_t *buf) {
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <_flush+0x12>
 8004b7a:	f7ff ff2d 	bl	80049d8 <__mb_failure>
	buf->__tail      = 0;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	705a      	strb	r2, [r3, #1]
	buf->__head      = 0;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	701a      	strb	r2, [r3, #0]
	buf->__available = 0;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	709a      	strb	r2, [r3, #2]
}
 8004b90:	bf00      	nop
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <_available>:

static uint8_t _available(mb_buffer_t *buf) {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <_available+0x12>
 8004ba6:	f7ff ff17 	bl	80049d8 <__mb_failure>
	
	return buf->__available;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	789b      	ldrb	r3, [r3, #2]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <mb_crc_calc>:
 */

#include "mb_crc.h"

uint16_t mb_crc_calc(uint8_t* data, uint16_t len)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b087      	sub	sp, #28
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	807b      	strh	r3, [r7, #2]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8004bc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bc6:	617b      	str	r3, [r7, #20]
    for (uint16_t i = 0; i < len; i++)
 8004bc8:	2300      	movs	r3, #0
 8004bca:	827b      	strh	r3, [r7, #18]
 8004bcc:	e023      	b.n	8004c16 <mb_crc_calc+0x60>
    {
        temp = temp ^ data[i];
 8004bce:	8a7b      	ldrh	r3, [r7, #18]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	4053      	eors	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 1; j <= 8; j++)
 8004bde:	2301      	movs	r3, #1
 8004be0:	747b      	strb	r3, [r7, #17]
 8004be2:	e012      	b.n	8004c0a <mb_crc_calc+0x54>
        {
            flag = temp & 0x0001;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	085b      	lsrs	r3, r3, #1
 8004bf0:	617b      	str	r3, [r7, #20]
            if (flag)
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d005      	beq.n	8004c04 <mb_crc_calc+0x4e>
                temp ^= 0xA001;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 8004bfe:	f083 0301 	eor.w	r3, r3, #1
 8004c02:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 1; j <= 8; j++)
 8004c04:	7c7b      	ldrb	r3, [r7, #17]
 8004c06:	3301      	adds	r3, #1
 8004c08:	747b      	strb	r3, [r7, #17]
 8004c0a:	7c7b      	ldrb	r3, [r7, #17]
 8004c0c:	2b08      	cmp	r3, #8
 8004c0e:	d9e9      	bls.n	8004be4 <mb_crc_calc+0x2e>
    for (uint16_t i = 0; i < len; i++)
 8004c10:	8a7b      	ldrh	r3, [r7, #18]
 8004c12:	3301      	adds	r3, #1
 8004c14:	827b      	strh	r3, [r7, #18]
 8004c16:	8a7a      	ldrh	r2, [r7, #18]
 8004c18:	887b      	ldrh	r3, [r7, #2]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d3d7      	bcc.n	8004bce <mb_crc_calc+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	0a1b      	lsrs	r3, r3, #8
 8004c22:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	021b      	lsls	r3, r3, #8
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	617b      	str	r3, [r7, #20]

    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	b29b      	uxth	r3, r3
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	371c      	adds	r7, #28
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <mb_slave_init>:
static uint8_t fc_write_single_reg(mb_slave_t* mb, mb_pdu_t* pdu);
static uint8_t fc_write_multi_coil(mb_slave_t* mb, mb_pdu_t* pdu);
static uint8_t fc_write_multi_reg(mb_slave_t* mb, mb_pdu_t* pdu);

mb_return_t mb_slave_init(mb_slave_t* mb, mb_data_t* data, uint8_t sl_addr, uint32_t speed, uint32_t timer_clk_mhz)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af02      	add	r7, sp, #8
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	603b      	str	r3, [r7, #0]
 8004c50:	4613      	mov	r3, r2
 8004c52:	71fb      	strb	r3, [r7, #7]
	mb_assert(mb);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <mb_slave_init+0x1a>
 8004c5a:	f7ff febd 	bl	80049d8 <__mb_failure>
	mb_assert(mb->uart);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <mb_slave_init+0x26>
 8004c66:	f7ff feb7 	bl	80049d8 <__mb_failure>
	mb_assert(mb->timer);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <mb_slave_init+0x32>
 8004c72:	f7ff feb1 	bl	80049d8 <__mb_failure>
	mb_assert(mb_data_is_init(mb->data));
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f001 f9a3 	bl	8005fc8 <mb_data_is_init>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d101      	bne.n	8004c8c <mb_slave_init+0x48>
 8004c88:	f7ff fea6 	bl	80049d8 <__mb_failure>

	mb_log_init();
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	2300      	movs	r3, #0
 8004c92:	2200      	movs	r2, #0
 8004c94:	2100      	movs	r1, #0
 8004c96:	2000      	movs	r0, #0
 8004c98:	f001 fc3e 	bl	8006518 <SEGGER_RTT_ConfigUpBuffer>
	mb_log("MODBUS init\n");
 8004c9c:	492a      	ldr	r1, [pc, #168]	; (8004d48 <mb_slave_init+0x104>)
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	f001 ffea 	bl	8006c78 <SEGGER_RTT_printf>
	mb_log("Speed: %d\n", speed);
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	4929      	ldr	r1, [pc, #164]	; (8004d4c <mb_slave_init+0x108>)
 8004ca8:	2000      	movs	r0, #0
 8004caa:	f001 ffe5 	bl	8006c78 <SEGGER_RTT_printf>

	// Check address rule:
	// MODBUS address should in range from 1 to 247
	// NOTE: Check section "2.2 MODBUS Addressing rules" on "Modbus_over_serial_line_V1_02.pdf"
	if(sl_addr < 1 || sl_addr > 247)
 8004cae:	79fb      	ldrb	r3, [r7, #7]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <mb_slave_init+0x76>
 8004cb4:	79fb      	ldrb	r3, [r7, #7]
 8004cb6:	2bf7      	cmp	r3, #247	; 0xf7
 8004cb8:	d907      	bls.n	8004cca <mb_slave_init+0x86>
	{
		mb_log("MODBUS error: address invalid: %d\n", sl_addr);
 8004cba:	79fb      	ldrb	r3, [r7, #7]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	4924      	ldr	r1, [pc, #144]	; (8004d50 <mb_slave_init+0x10c>)
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	f001 ffd9 	bl	8006c78 <SEGGER_RTT_printf>
		return MB_FAILURE;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e039      	b.n	8004d3e <mb_slave_init+0xfa>
	}

	ring_buffer_init(&mb->uart_buf);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	3308      	adds	r3, #8
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f001 f82e 	bl	8005d30 <ring_buffer_init>
	mb_buffer_init(&mb->buf);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff fe82 	bl	80049e4 <mb_buffer_init>

	// Set instance
	mb->data = data;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	f8c3 2c58 	str.w	r2, [r3, #3160]	; 0xc58
	mb->slave_addr = sl_addr;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	79fa      	ldrb	r2, [r7, #7]
 8004cec:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

	// Timer configure
	__HAL_TIM_CLEAR_IT(mb->timer, TIM_IT_UPDATE);						// Clear IRQ pending
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f06f 0201 	mvn.w	r2, #1
 8004cfa:	611a      	str	r2, [r3, #16]
	__HAL_TIM_SET_PRESCALER(mb->timer, (timer_clk_mhz - 1));	// Set timer prescaler
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	3a01      	subs	r2, #1
 8004d06:	629a      	str	r2, [r3, #40]	; 0x28
	set_timer_period(mb, speed);
 8004d08:	6839      	ldr	r1, [r7, #0]
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 f9fa 	bl	8005104 <set_timer_period>

	mb->is_init = true;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55

	tx_buf.tail   = 0;
 8004d18:	4b0e      	ldr	r3, [pc, #56]	; (8004d54 <mb_slave_init+0x110>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	80da      	strh	r2, [r3, #6]
	tx_buf.head   = 0;
 8004d1e:	4b0d      	ldr	r3, [pc, #52]	; (8004d54 <mb_slave_init+0x110>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	809a      	strh	r2, [r3, #4]
	tx_buf.tx_len = 0;
 8004d24:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <mb_slave_init+0x110>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	805a      	strh	r2, [r3, #2]

	// Start receive UART
	HAL_UART_Receive_IT(mb->uart, &mb->uart_rx, 1);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6818      	ldr	r0, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8004d34:	2201      	movs	r2, #1
 8004d36:	4619      	mov	r1, r3
 8004d38:	f7fe f9a2 	bl	8003080 <HAL_UART_Receive_IT>

	return MB_SUCCESS;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	08006d48 	.word	0x08006d48
 8004d4c:	08006d58 	.word	0x08006d58
 8004d50:	08006d64 	.word	0x08006d64
 8004d54:	20001ac8 	.word	0x20001ac8

08004d58 <mb_slave_handle>:
	}

	return MB_SUCCESS;
}

void mb_slave_handle(mb_slave_t *mb) {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
	mb_assert(mb);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <mb_slave_handle+0x12>
 8004d66:	f7ff fe37 	bl	80049d8 <__mb_failure>

	// Reject handle if MODBUS is not initialize
	if(mb->is_init == false){
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 8004d70:	f083 0301 	eor.w	r3, r3, #1
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f040 80d6 	bne.w	8004f28 <mb_slave_handle+0x1d0>
		return;
	}

	// Handle received data
	if (mb->buf.available(&mb->buf) == 0) {
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	f502 7209 	add.w	r2, r2, #548	; 0x224
 8004d88:	4610      	mov	r0, r2
 8004d8a:	4798      	blx	r3
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f000 80cc 	beq.w	8004f2c <mb_slave_handle+0x1d4>
		return;
	}

	// Check frame PDU data size
	mb_pdu_t* pdu = mb->buf.get_data(&mb->buf);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8d3 3c44 	ldr.w	r3, [r3, #3140]	; 0xc44
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	f502 7209 	add.w	r2, r2, #548	; 0x224
 8004da0:	4610      	mov	r0, r2
 8004da2:	4798      	blx	r3
 8004da4:	6138      	str	r0, [r7, #16]
	if(pdu->len < 8){
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	2b07      	cmp	r3, #7
 8004dac:	d80f      	bhi.n	8004dce <mb_slave_handle+0x76>
		mb_log("MODBUS error: bad frame, len = %d", pdu->len);
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	4960      	ldr	r1, [pc, #384]	; (8004f38 <mb_slave_handle+0x1e0>)
 8004db6:	2000      	movs	r0, #0
 8004db8:	f001 ff5e 	bl	8006c78 <SEGGER_RTT_printf>
		mb->buf.commit_get(&mb->buf);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8d3 3c48 	ldr.w	r3, [r3, #3144]	; 0xc48
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	f502 7209 	add.w	r2, r2, #548	; 0x224
 8004dc8:	4610      	mov	r0, r2
 8004dca:	4798      	blx	r3
		return;
 8004dcc:	e0b1      	b.n	8004f32 <mb_slave_handle+0x1da>
	}

	// Slave ID
	if(pdu->data[MB_PDU_ID] != mb->slave_addr){
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	789a      	ldrb	r2, [r3, #2]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	f040 80a9 	bne.w	8004f30 <mb_slave_handle+0x1d8>
		return;
	}

#ifdef MB_LOG
	mb_log("Request: ");
 8004dde:	4957      	ldr	r1, [pc, #348]	; (8004f3c <mb_slave_handle+0x1e4>)
 8004de0:	2000      	movs	r0, #0
 8004de2:	f001 ff49 	bl	8006c78 <SEGGER_RTT_printf>
	for(uint8_t i = 0; i < pdu->len; i++)
 8004de6:	2300      	movs	r3, #0
 8004de8:	75fb      	strb	r3, [r7, #23]
 8004dea:	e00b      	b.n	8004e04 <mb_slave_handle+0xac>
	{
		mb_log("%02x ", pdu->data[i]);
 8004dec:	7dfb      	ldrb	r3, [r7, #23]
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4413      	add	r3, r2
 8004df2:	789b      	ldrb	r3, [r3, #2]
 8004df4:	461a      	mov	r2, r3
 8004df6:	4952      	ldr	r1, [pc, #328]	; (8004f40 <mb_slave_handle+0x1e8>)
 8004df8:	2000      	movs	r0, #0
 8004dfa:	f001 ff3d 	bl	8006c78 <SEGGER_RTT_printf>
	for(uint8_t i = 0; i < pdu->len; i++)
 8004dfe:	7dfb      	ldrb	r3, [r7, #23]
 8004e00:	3301      	adds	r3, #1
 8004e02:	75fb      	strb	r3, [r7, #23]
 8004e04:	7dfb      	ldrb	r3, [r7, #23]
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d3ed      	bcc.n	8004dec <mb_slave_handle+0x94>
	}
	mb_log("\n");
 8004e10:	494c      	ldr	r1, [pc, #304]	; (8004f44 <mb_slave_handle+0x1ec>)
 8004e12:	2000      	movs	r0, #0
 8004e14:	f001 ff30 	bl	8006c78 <SEGGER_RTT_printf>
	mb_log("Func code: %d\n", pdu->data[MB_PDU_FUNC]);
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	78db      	ldrb	r3, [r3, #3]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	494a      	ldr	r1, [pc, #296]	; (8004f48 <mb_slave_handle+0x1f0>)
 8004e20:	2000      	movs	r0, #0
 8004e22:	f001 ff29 	bl	8006c78 <SEGGER_RTT_printf>
	mb_log("Address  : %d\n", (uint16_t)((uint16_t)pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO]));
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	791b      	ldrb	r3, [r3, #4]
 8004e2a:	021b      	lsls	r3, r3, #8
 8004e2c:	b21a      	sxth	r2, r3
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	795b      	ldrb	r3, [r3, #5]
 8004e32:	b21b      	sxth	r3, r3
 8004e34:	4313      	orrs	r3, r2
 8004e36:	b21b      	sxth	r3, r3
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	4943      	ldr	r1, [pc, #268]	; (8004f4c <mb_slave_handle+0x1f4>)
 8004e3e:	2000      	movs	r0, #0
 8004e40:	f001 ff1a 	bl	8006c78 <SEGGER_RTT_printf>
#endif

	// Verify CRC
	uint16_t crc = (pdu->data[pdu->len - 2] << 8) | pdu->data[pdu->len - 1];
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	3b02      	subs	r3, #2
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	789b      	ldrb	r3, [r3, #2]
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	b21a      	sxth	r2, r3
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	6939      	ldr	r1, [r7, #16]
 8004e5c:	440b      	add	r3, r1
 8004e5e:	789b      	ldrb	r3, [r3, #2]
 8004e60:	b21b      	sxth	r3, r3
 8004e62:	4313      	orrs	r3, r2
 8004e64:	b21b      	sxth	r3, r3
 8004e66:	81fb      	strh	r3, [r7, #14]
	if(crc != mb_crc_calc(pdu->data, pdu->len - 2))
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	1c9a      	adds	r2, r3, #2
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	3b02      	subs	r3, #2
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	4619      	mov	r1, r3
 8004e76:	4610      	mov	r0, r2
 8004e78:	f7ff fe9d 	bl	8004bb6 <mb_crc_calc>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	461a      	mov	r2, r3
 8004e80:	89fb      	ldrh	r3, [r7, #14]
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d004      	beq.n	8004e90 <mb_slave_handle+0x138>
	{
		mb_log("MODBUS error: CRC invalid\n");
 8004e86:	4932      	ldr	r1, [pc, #200]	; (8004f50 <mb_slave_handle+0x1f8>)
 8004e88:	2000      	movs	r0, #0
 8004e8a:	f001 fef5 	bl	8006c78 <SEGGER_RTT_printf>
		return;
 8004e8e:	e050      	b.n	8004f32 <mb_slave_handle+0x1da>
	}

	// Handle request
	uint8_t err_code = valid_request(mb, pdu);
 8004e90:	6939      	ldr	r1, [r7, #16]
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f94e 	bl	8005134 <valid_request>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	737b      	strb	r3, [r7, #13]
	if (err_code) {
 8004e9c:	7b7b      	ldrb	r3, [r7, #13]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d006      	beq.n	8004eb0 <mb_slave_handle+0x158>
		build_exc(mb, pdu, err_code);
 8004ea2:	7b7b      	ldrb	r3, [r7, #13]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	6939      	ldr	r1, [r7, #16]
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 fb3b 	bl	8005524 <build_exc>
 8004eae:	e00e      	b.n	8004ece <mb_slave_handle+0x176>
	} else {
		err_code = execute_func(mb, pdu);
 8004eb0:	6939      	ldr	r1, [r7, #16]
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 fad2 	bl	800545c <execute_func>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	737b      	strb	r3, [r7, #13]
		if (err_code)
 8004ebc:	7b7b      	ldrb	r3, [r7, #13]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d005      	beq.n	8004ece <mb_slave_handle+0x176>
			build_exc(mb, pdu, err_code);
 8004ec2:	7b7b      	ldrb	r3, [r7, #13]
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	6939      	ldr	r1, [r7, #16]
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 fb2b 	bl	8005524 <build_exc>
	}

	// Response data
	crc = mb_crc_calc(pdu->data, pdu->len - 2);
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1c9a      	adds	r2, r3, #2
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	3b02      	subs	r3, #2
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	4619      	mov	r1, r3
 8004edc:	4610      	mov	r0, r2
 8004ede:	f7ff fe6a 	bl	8004bb6 <mb_crc_calc>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	81fb      	strh	r3, [r7, #14]
	pdu->data[pdu->len - 2] = (uint8_t) (crc >> 8);
 8004ee6:	89fb      	ldrh	r3, [r7, #14]
 8004ee8:	0a1b      	lsrs	r3, r3, #8
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	3b02      	subs	r3, #2
 8004ef2:	b2d1      	uxtb	r1, r2
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	460a      	mov	r2, r1
 8004efa:	709a      	strb	r2, [r3, #2]
	pdu->data[pdu->len - 1] = (uint8_t) (crc & 0x00FF);
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	3b01      	subs	r3, #1
 8004f02:	89fa      	ldrh	r2, [r7, #14]
 8004f04:	b2d1      	uxtb	r1, r2
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	4413      	add	r3, r2
 8004f0a:	460a      	mov	r2, r1
 8004f0c:	709a      	strb	r2, [r3, #2]
	set_tx(mb, pdu);
 8004f0e:	6939      	ldr	r1, [r7, #16]
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 fb27 	bl	8005564 <set_tx>

	// Commit processed data
	mb->buf.commit_get(&mb->buf);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 3c48 	ldr.w	r3, [r3, #3144]	; 0xc48
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	f502 7209 	add.w	r2, r2, #548	; 0x224
 8004f22:	4610      	mov	r0, r2
 8004f24:	4798      	blx	r3
 8004f26:	e004      	b.n	8004f32 <mb_slave_handle+0x1da>
		return;
 8004f28:	bf00      	nop
 8004f2a:	e002      	b.n	8004f32 <mb_slave_handle+0x1da>
		return;
 8004f2c:	bf00      	nop
 8004f2e:	e000      	b.n	8004f32 <mb_slave_handle+0x1da>
		return;
 8004f30:	bf00      	nop
}
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	08006d98 	.word	0x08006d98
 8004f3c:	08006dbc 	.word	0x08006dbc
 8004f40:	08006dc8 	.word	0x08006dc8
 8004f44:	08006dd0 	.word	0x08006dd0
 8004f48:	08006dd4 	.word	0x08006dd4
 8004f4c:	08006de4 	.word	0x08006de4
 8004f50:	08006df4 	.word	0x08006df4

08004f54 <_mb_slave_tx_irq>:

void _mb_slave_tx_irq(mb_slave_t* mb)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
	mb_assert(mb);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <_mb_slave_tx_irq+0x12>
 8004f62:	f7ff fd39 	bl	80049d8 <__mb_failure>
	tx_buf.tail  = (tx_buf.tail + tx_buf.tx_len) % UART_TX_BUF_SIZE;
 8004f66:	4b0f      	ldr	r3, [pc, #60]	; (8004fa4 <_mb_slave_tx_irq+0x50>)
 8004f68:	88db      	ldrh	r3, [r3, #6]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <_mb_slave_tx_irq+0x50>)
 8004f6e:	885b      	ldrh	r3, [r3, #2]
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	441a      	add	r2, r3
 8004f74:	4b0c      	ldr	r3, [pc, #48]	; (8004fa8 <_mb_slave_tx_irq+0x54>)
 8004f76:	fb83 1302 	smull	r1, r3, r3, r2
 8004f7a:	1199      	asrs	r1, r3, #6
 8004f7c:	17d3      	asrs	r3, r2, #31
 8004f7e:	1ac9      	subs	r1, r1, r3
 8004f80:	460b      	mov	r3, r1
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	440b      	add	r3, r1
 8004f86:	01db      	lsls	r3, r3, #7
 8004f88:	1ad1      	subs	r1, r2, r3
 8004f8a:	b28a      	uxth	r2, r1
 8004f8c:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <_mb_slave_tx_irq+0x50>)
 8004f8e:	80da      	strh	r2, [r3, #6]
	tx_buf.on_tx = false;
 8004f90:	4b04      	ldr	r3, [pc, #16]	; (8004fa4 <_mb_slave_tx_irq+0x50>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	701a      	strb	r2, [r3, #0]
	start_transmit(mb);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 fb4c 	bl	8005634 <start_transmit>
}
 8004f9c:	bf00      	nop
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	20001ac8 	.word	0x20001ac8
 8004fa8:	2aaaaaab 	.word	0x2aaaaaab

08004fac <_mb_slave_rx_irq>:

void _mb_slave_rx_irq(mb_slave_t* mb)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
	mb->uart_buf.add(&mb->uart_buf, mb->uart_rx);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	f102 0008 	add.w	r0, r2, #8
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	f892 2220 	ldrb.w	r2, [r2, #544]	; 0x220
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	4798      	blx	r3

	// Restart timer
	__HAL_TIM_SET_COUNTER(mb->timer, 0);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(mb->timer);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7fd fb7f 	bl	80026dc <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(mb->uart, &mb->uart_rx, 1);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6818      	ldr	r0, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8004fe8:	2201      	movs	r2, #1
 8004fea:	4619      	mov	r1, r3
 8004fec:	f7fe f848 	bl	8003080 <HAL_UART_Receive_IT>
}
 8004ff0:	bf00      	nop
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <_mb_slave_timer_irq>:

void _mb_slave_timer_irq(mb_slave_t* mb)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
	// Stop receive UART
	HAL_UART_AbortReceive_IT(mb->uart);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4618      	mov	r0, r3
 8005006:	f7fe f891 	bl	800312c <HAL_UART_AbortReceive_IT>
	HAL_TIM_Base_Stop_IT(mb->timer);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	4618      	mov	r0, r3
 8005010:	f7fd fbb8 	bl	8002784 <HAL_TIM_Base_Stop_IT>

	// Copy data from buffer to MODBUS packet
	if(mb->uart_buf.overflow)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 320e 	ldrb.w	r3, [r3, #526]	; 0x20e
 800501a:	2b00      	cmp	r3, #0
 800501c:	d007      	beq.n	800502e <_mb_slave_timer_irq+0x36>
	{
		mb->uart_buf.flush(&mb->uart_buf);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	3208      	adds	r2, #8
 8005028:	4610      	mov	r0, r2
 800502a:	4798      	blx	r3
 800502c:	e01e      	b.n	800506c <_mb_slave_timer_irq+0x74>
	}
	else
	{
		mb_pdu_t *pdu = mb->buf.next(&mb->buf);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8d3 3c3c 	ldr.w	r3, [r3, #3132]	; 0xc3c
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	f502 7209 	add.w	r2, r2, #548	; 0x224
 800503a:	4610      	mov	r0, r2
 800503c:	4798      	blx	r3
 800503e:	60f8      	str	r0, [r7, #12]
		pdu->len = MB_PDU_SIZE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005046:	801a      	strh	r2, [r3, #0]
		mb->uart_buf.get_data(&mb->uart_buf, pdu->data, &pdu->len);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	f102 0008 	add.w	r0, r2, #8
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	1c91      	adds	r1, r2, #2
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	4798      	blx	r3
		mb->buf.commit_next(&mb->buf);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 3c40 	ldr.w	r3, [r3, #3136]	; 0xc40
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	f502 7209 	add.w	r2, r2, #548	; 0x224
 8005068:	4610      	mov	r0, r2
 800506a:	4798      	blx	r3
	}

	// Start receive UART
	HAL_UART_Receive_IT(mb->uart, &mb->uart_rx, 1);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6818      	ldr	r0, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8005076:	2201      	movs	r2, #1
 8005078:	4619      	mov	r1, r3
 800507a:	f7fe f801 	bl	8003080 <HAL_UART_Receive_IT>
}
 800507e:	bf00      	nop
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
	...

08005088 <get_t35>:

static uint32_t get_t35(uint32_t speed) {
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
	mb_assert(speed);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <get_t35+0x12>
 8005096:	f7ff fc9f 	bl	80049d8 <__mb_failure>

	float f_speed = (1000000.0f / ((float) speed / 8.0f));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	ee07 3a90 	vmov	s15, r3
 80050a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a4:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80050a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80050ac:	eddf 6a13 	vldr	s13, [pc, #76]	; 80050fc <get_t35+0x74>
 80050b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050b4:	edc7 7a03 	vstr	s15, [r7, #12]
	f_speed = f_speed * 3.5f;
 80050b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80050bc:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 80050c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050c4:	edc7 7a03 	vstr	s15, [r7, #12]

	mb_log("Get T35: speed = %u, T35 = %u (us)\n", speed, (uint32_t)f_speed);
 80050c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80050cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050d0:	ee17 3a90 	vmov	r3, s15
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	490a      	ldr	r1, [pc, #40]	; (8005100 <get_t35+0x78>)
 80050d8:	2000      	movs	r0, #0
 80050da:	f001 fdcd 	bl	8006c78 <SEGGER_RTT_printf>
	return (uint32_t) (f_speed + 1);
 80050de:	edd7 7a03 	vldr	s15, [r7, #12]
 80050e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80050ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050ee:	ee17 3a90 	vmov	r3, s15
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	49742400 	.word	0x49742400
 8005100:	08006e10 	.word	0x08006e10

08005104 <set_timer_period>:
/**
 * @brief Set timer period of 3.5 char transmit time of UART speed
 * @param speed speed of UART
 */
static void set_timer_period(mb_slave_t* mb ,uint32_t speed)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
	uint32_t t35 = get_t35(speed);
 800510e:	6838      	ldr	r0, [r7, #0]
 8005110:	f7ff ffba 	bl	8005088 <get_t35>
 8005114:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(mb->timer, t35 - 1);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	3a01      	subs	r2, #1
 8005120:	62da      	str	r2, [r3, #44]	; 0x2c
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	3a01      	subs	r2, #1
 800512a:	60da      	str	r2, [r3, #12]
}
 800512c:	bf00      	nop
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <valid_request>:

static uint8_t valid_request(mb_slave_t* mb,mb_pdu_t* pdu)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for(i = 0; i < sizeof(mb_support_fc);i++)
 800513e:	2300      	movs	r3, #0
 8005140:	73fb      	strb	r3, [r7, #15]
 8005142:	e009      	b.n	8005158 <valid_request+0x24>
	{
		if(pdu->data[MB_PDU_FUNC] == mb_support_fc[i])
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	78da      	ldrb	r2, [r3, #3]
 8005148:	7bfb      	ldrb	r3, [r7, #15]
 800514a:	4996      	ldr	r1, [pc, #600]	; (80053a4 <valid_request+0x270>)
 800514c:	5ccb      	ldrb	r3, [r1, r3]
 800514e:	429a      	cmp	r2, r3
 8005150:	d006      	beq.n	8005160 <valid_request+0x2c>
	for(i = 0; i < sizeof(mb_support_fc);i++)
 8005152:	7bfb      	ldrb	r3, [r7, #15]
 8005154:	3301      	adds	r3, #1
 8005156:	73fb      	strb	r3, [r7, #15]
 8005158:	7bfb      	ldrb	r3, [r7, #15]
 800515a:	2b07      	cmp	r3, #7
 800515c:	d9f2      	bls.n	8005144 <valid_request+0x10>
 800515e:	e000      	b.n	8005162 <valid_request+0x2e>
		break;
 8005160:	bf00      	nop
	}

	// Function code not support
	if (i >= sizeof(mb_support_fc)) {
 8005162:	7bfb      	ldrb	r3, [r7, #15]
 8005164:	2b07      	cmp	r3, #7
 8005166:	d905      	bls.n	8005174 <valid_request+0x40>
		mb_log("MB function not support\n");
 8005168:	498f      	ldr	r1, [pc, #572]	; (80053a8 <valid_request+0x274>)
 800516a:	2000      	movs	r0, #0
 800516c:	f001 fd84 	bl	8006c78 <SEGGER_RTT_printf>
		return MB_EXC_FUNC;
 8005170:	2301      	movs	r3, #1
 8005172:	e16e      	b.n	8005452 <valid_request+0x31e>
	}

	uint16_t addr;	// start address
	uint16_t nreg;	// number of reg

	addr = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	791b      	ldrb	r3, [r3, #4]
 8005178:	021b      	lsls	r3, r3, #8
 800517a:	b21a      	sxth	r2, r3
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	795b      	ldrb	r3, [r3, #5]
 8005180:	b21b      	sxth	r3, r3
 8005182:	4313      	orrs	r3, r2
 8005184:	b21b      	sxth	r3, r3
 8005186:	81bb      	strh	r3, [r7, #12]
	nreg = pdu->data[MB_PDU_QTY_HI] << 8 | pdu->data[MB_PDU_QTY_LO];
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	799b      	ldrb	r3, [r3, #6]
 800518c:	021b      	lsls	r3, r3, #8
 800518e:	b21a      	sxth	r2, r3
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	79db      	ldrb	r3, [r3, #7]
 8005194:	b21b      	sxth	r3, r3
 8005196:	4313      	orrs	r3, r2
 8005198:	b21b      	sxth	r3, r3
 800519a:	817b      	strh	r3, [r7, #10]

	switch(pdu->data[MB_PDU_FUNC])
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	78db      	ldrb	r3, [r3, #3]
 80051a0:	3b01      	subs	r3, #1
 80051a2:	2b0f      	cmp	r3, #15
 80051a4:	f200 8154 	bhi.w	8005450 <valid_request+0x31c>
 80051a8:	a201      	add	r2, pc, #4	; (adr r2, 80051b0 <valid_request+0x7c>)
 80051aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ae:	bf00      	nop
 80051b0:	080051f1 	.word	0x080051f1
 80051b4:	0800522f 	.word	0x0800522f
 80051b8:	080052c7 	.word	0x080052c7
 80051bc:	0800526d 	.word	0x0800526d
 80051c0:	08005381 	.word	0x08005381
 80051c4:	08005421 	.word	0x08005421
 80051c8:	08005451 	.word	0x08005451
 80051cc:	08005451 	.word	0x08005451
 80051d0:	08005451 	.word	0x08005451
 80051d4:	08005451 	.word	0x08005451
 80051d8:	08005451 	.word	0x08005451
 80051dc:	08005451 	.word	0x08005451
 80051e0:	08005451 	.word	0x08005451
 80051e4:	08005451 	.word	0x08005451
 80051e8:	08005321 	.word	0x08005321
 80051ec:	080053ad 	.word	0x080053ad
	{
	case MB_FC_READ_COIL:
		if (!((nreg >= 1) && (nreg <= mb->data->coil.nbit)))
 80051f0:	897b      	ldrh	r3, [r7, #10]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d006      	beq.n	8005204 <valid_request+0xd0>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 80051fc:	891b      	ldrh	r3, [r3, #8]
 80051fe:	897a      	ldrh	r2, [r7, #10]
 8005200:	429a      	cmp	r2, r3
 8005202:	d901      	bls.n	8005208 <valid_request+0xd4>
			return MB_EXC_ADDR_RANGE;
 8005204:	2302      	movs	r3, #2
 8005206:	e124      	b.n	8005452 <valid_request+0x31e>
		if(!((addr < mb->data->coil.nbit) && ((addr + nreg) <= mb->data->coil.nbit)))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 800520e:	891b      	ldrh	r3, [r3, #8]
 8005210:	89ba      	ldrh	r2, [r7, #12]
 8005212:	429a      	cmp	r2, r3
 8005214:	d209      	bcs.n	800522a <valid_request+0xf6>
 8005216:	89ba      	ldrh	r2, [r7, #12]
 8005218:	897b      	ldrh	r3, [r7, #10]
 800521a:	4413      	add	r3, r2
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 8005222:	8912      	ldrh	r2, [r2, #8]
 8005224:	4293      	cmp	r3, r2
 8005226:	f340 8104 	ble.w	8005432 <valid_request+0x2fe>
			return MB_EXC_REG_QTY;
 800522a:	2303      	movs	r3, #3
 800522c:	e111      	b.n	8005452 <valid_request+0x31e>
		break;
	case MB_FC_READ_DISCRETE_INPUT:
		if (!((nreg >= 1) && (nreg <= mb->data->input.nbit)))
 800522e:	897b      	ldrh	r3, [r7, #10]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d006      	beq.n	8005242 <valid_request+0x10e>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 800523a:	8b1b      	ldrh	r3, [r3, #24]
 800523c:	897a      	ldrh	r2, [r7, #10]
 800523e:	429a      	cmp	r2, r3
 8005240:	d901      	bls.n	8005246 <valid_request+0x112>
			return MB_EXC_ADDR_RANGE;
 8005242:	2302      	movs	r3, #2
 8005244:	e105      	b.n	8005452 <valid_request+0x31e>
		if(!((addr < mb->data->input.nbit) && ((addr + nreg) <= mb->data->input.nbit)))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 800524c:	8b1b      	ldrh	r3, [r3, #24]
 800524e:	89ba      	ldrh	r2, [r7, #12]
 8005250:	429a      	cmp	r2, r3
 8005252:	d209      	bcs.n	8005268 <valid_request+0x134>
 8005254:	89ba      	ldrh	r2, [r7, #12]
 8005256:	897b      	ldrh	r3, [r7, #10]
 8005258:	4413      	add	r3, r2
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 8005260:	8b12      	ldrh	r2, [r2, #24]
 8005262:	4293      	cmp	r3, r2
 8005264:	f340 80e7 	ble.w	8005436 <valid_request+0x302>
			return MB_EXC_REG_QTY;
 8005268:	2303      	movs	r3, #3
 800526a:	e0f2      	b.n	8005452 <valid_request+0x31e>
		break;
	case MB_FC_READ_INPUT_REG:
		if (mb->data->reg_input.nreg > 0x7D) {
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005274:	2b7d      	cmp	r3, #125	; 0x7d
 8005276:	d907      	bls.n	8005288 <valid_request+0x154>
			if (!(nreg >= 1 && nreg <= 0x7D))
 8005278:	897b      	ldrh	r3, [r7, #10]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d002      	beq.n	8005284 <valid_request+0x150>
 800527e:	897b      	ldrh	r3, [r7, #10]
 8005280:	2b7d      	cmp	r3, #125	; 0x7d
 8005282:	d90d      	bls.n	80052a0 <valid_request+0x16c>
				return MB_EXC_ADDR_RANGE;
 8005284:	2302      	movs	r3, #2
 8005286:	e0e4      	b.n	8005452 <valid_request+0x31e>
		} else {
			if (!(nreg >= 1 && nreg <= mb->data->reg_input.nreg))
 8005288:	897b      	ldrh	r3, [r7, #10]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d006      	beq.n	800529c <valid_request+0x168>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005296:	897a      	ldrh	r2, [r7, #10]
 8005298:	429a      	cmp	r2, r3
 800529a:	d901      	bls.n	80052a0 <valid_request+0x16c>
				return MB_EXC_ADDR_RANGE;
 800529c:	2302      	movs	r3, #2
 800529e:	e0d8      	b.n	8005452 <valid_request+0x31e>
		}
		if(!((addr < mb->data->reg_input.nreg) && ((addr + nreg ) <= mb->data->reg_input.nreg)))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 80052a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a8:	89ba      	ldrh	r2, [r7, #12]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d209      	bcs.n	80052c2 <valid_request+0x18e>
 80052ae:	89ba      	ldrh	r2, [r7, #12]
 80052b0:	897b      	ldrh	r3, [r7, #10]
 80052b2:	4413      	add	r3, r2
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 80052ba:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80052bc:	4293      	cmp	r3, r2
 80052be:	f340 80bc 	ble.w	800543a <valid_request+0x306>
			return MB_EXC_REG_QTY;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e0c5      	b.n	8005452 <valid_request+0x31e>
		break;
	case MB_FC_READ_HOLDING_REG:
		if (mb->data->reg_holding.nreg > 0x7D) {
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 80052cc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80052ce:	2b7d      	cmp	r3, #125	; 0x7d
 80052d0:	d907      	bls.n	80052e2 <valid_request+0x1ae>
			if (!(nreg >= 1 && nreg <= 0x7D))
 80052d2:	897b      	ldrh	r3, [r7, #10]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <valid_request+0x1aa>
 80052d8:	897b      	ldrh	r3, [r7, #10]
 80052da:	2b7d      	cmp	r3, #125	; 0x7d
 80052dc:	d90d      	bls.n	80052fa <valid_request+0x1c6>
				return MB_EXC_ADDR_RANGE;
 80052de:	2302      	movs	r3, #2
 80052e0:	e0b7      	b.n	8005452 <valid_request+0x31e>
		} else {
			if (!((nreg >= 1) && (nreg <= mb->data->reg_holding.nreg)))
 80052e2:	897b      	ldrh	r3, [r7, #10]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d006      	beq.n	80052f6 <valid_request+0x1c2>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 80052ee:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80052f0:	897a      	ldrh	r2, [r7, #10]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d901      	bls.n	80052fa <valid_request+0x1c6>
				return MB_EXC_ADDR_RANGE;
 80052f6:	2302      	movs	r3, #2
 80052f8:	e0ab      	b.n	8005452 <valid_request+0x31e>
		}
		if(!((addr < mb->data->reg_holding.nreg) && ((addr + nreg ) <= mb->data->reg_holding.nreg)))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005300:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005302:	89ba      	ldrh	r2, [r7, #12]
 8005304:	429a      	cmp	r2, r3
 8005306:	d209      	bcs.n	800531c <valid_request+0x1e8>
 8005308:	89ba      	ldrh	r2, [r7, #12]
 800530a:	897b      	ldrh	r3, [r7, #10]
 800530c:	4413      	add	r3, r2
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 8005314:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8005316:	4293      	cmp	r3, r2
 8005318:	f340 8091 	ble.w	800543e <valid_request+0x30a>
			return MB_EXC_REG_QTY;
 800531c:	2303      	movs	r3, #3
 800531e:	e098      	b.n	8005452 <valid_request+0x31e>
		break;
	case MB_FC_WRITE_MULTI_COIL:
	{
		// Get number of byte
		uint8_t nbyte = nreg / 8;
 8005320:	897b      	ldrh	r3, [r7, #10]
 8005322:	08db      	lsrs	r3, r3, #3
 8005324:	b29b      	uxth	r3, r3
 8005326:	73bb      	strb	r3, [r7, #14]
		if(nreg % 8)
 8005328:	897b      	ldrh	r3, [r7, #10]
 800532a:	f003 0307 	and.w	r3, r3, #7
 800532e:	b29b      	uxth	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <valid_request+0x206>
			nbyte += 1;
 8005334:	7bbb      	ldrb	r3, [r7, #14]
 8005336:	3301      	adds	r3, #1
 8005338:	73bb      	strb	r3, [r7, #14]

		if(!((nreg >= 1) && (nreg <= mb->data->coil.nbit) && (nbyte == pdu->data[MB_PDU_CNT])))
 800533a:	897b      	ldrh	r3, [r7, #10]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00b      	beq.n	8005358 <valid_request+0x224>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005346:	891b      	ldrh	r3, [r3, #8]
 8005348:	897a      	ldrh	r2, [r7, #10]
 800534a:	429a      	cmp	r2, r3
 800534c:	d804      	bhi.n	8005358 <valid_request+0x224>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	7a1b      	ldrb	r3, [r3, #8]
 8005352:	7bba      	ldrb	r2, [r7, #14]
 8005354:	429a      	cmp	r2, r3
 8005356:	d001      	beq.n	800535c <valid_request+0x228>
			return MB_EXC_REG_QTY;
 8005358:	2303      	movs	r3, #3
 800535a:	e07a      	b.n	8005452 <valid_request+0x31e>
		if(!((addr < mb->data->coil.nbit) && ((addr + nreg) <= mb->data->coil.nbit)))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005362:	891b      	ldrh	r3, [r3, #8]
 8005364:	89ba      	ldrh	r2, [r7, #12]
 8005366:	429a      	cmp	r2, r3
 8005368:	d208      	bcs.n	800537c <valid_request+0x248>
 800536a:	89ba      	ldrh	r2, [r7, #12]
 800536c:	897b      	ldrh	r3, [r7, #10]
 800536e:	4413      	add	r3, r2
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 8005376:	8912      	ldrh	r2, [r2, #8]
 8005378:	4293      	cmp	r3, r2
 800537a:	dd62      	ble.n	8005442 <valid_request+0x30e>
			return MB_EXC_ADDR_RANGE;
 800537c:	2302      	movs	r3, #2
 800537e:	e068      	b.n	8005452 <valid_request+0x31e>
		break;
	}
	case MB_FC_WRITE_SINGLE_COIL:
		if(!((nreg == 0x0000) || (nreg == 0xFF00)))
 8005380:	897b      	ldrh	r3, [r7, #10]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d005      	beq.n	8005392 <valid_request+0x25e>
 8005386:	897b      	ldrh	r3, [r7, #10]
 8005388:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800538c:	d001      	beq.n	8005392 <valid_request+0x25e>
			return MB_EXC_REG_QTY;
 800538e:	2303      	movs	r3, #3
 8005390:	e05f      	b.n	8005452 <valid_request+0x31e>
		if(!(addr < mb->data->coil.nbit))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005398:	891b      	ldrh	r3, [r3, #8]
 800539a:	89ba      	ldrh	r2, [r7, #12]
 800539c:	429a      	cmp	r2, r3
 800539e:	d352      	bcc.n	8005446 <valid_request+0x312>
			return MB_EXC_ADDR_RANGE;
 80053a0:	2302      	movs	r3, #2
 80053a2:	e056      	b.n	8005452 <valid_request+0x31e>
 80053a4:	08006ed8 	.word	0x08006ed8
 80053a8:	08006e34 	.word	0x08006e34
		break;
	case MB_FC_WRITE_MULTI_REG:
		if(mb->data->reg_holding.nreg < 0x7B) {
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 80053b2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80053b4:	2b7a      	cmp	r3, #122	; 0x7a
 80053b6:	d812      	bhi.n	80053de <valid_request+0x2aa>
			if (!((nreg >= 1) && (nreg <= mb->data->reg_holding.nreg) && (pdu->data[MB_PDU_CNT] == nreg * 2)))
 80053b8:	897b      	ldrh	r3, [r7, #10]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00d      	beq.n	80053da <valid_request+0x2a6>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 80053c4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80053c6:	897a      	ldrh	r2, [r7, #10]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d806      	bhi.n	80053da <valid_request+0x2a6>
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	7a1b      	ldrb	r3, [r3, #8]
 80053d0:	461a      	mov	r2, r3
 80053d2:	897b      	ldrh	r3, [r7, #10]
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d010      	beq.n	80053fc <valid_request+0x2c8>
				return MB_EXC_REG_QTY;
 80053da:	2303      	movs	r3, #3
 80053dc:	e039      	b.n	8005452 <valid_request+0x31e>
		} else {
			if (!((nreg >= 1) && (nreg <= 0x7B) && (pdu->data[MB_PDU_CNT] == nreg * 2)))
 80053de:	897b      	ldrh	r3, [r7, #10]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d009      	beq.n	80053f8 <valid_request+0x2c4>
 80053e4:	897b      	ldrh	r3, [r7, #10]
 80053e6:	2b7b      	cmp	r3, #123	; 0x7b
 80053e8:	d806      	bhi.n	80053f8 <valid_request+0x2c4>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	7a1b      	ldrb	r3, [r3, #8]
 80053ee:	461a      	mov	r2, r3
 80053f0:	897b      	ldrh	r3, [r7, #10]
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d001      	beq.n	80053fc <valid_request+0x2c8>
				return MB_EXC_REG_QTY;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e02a      	b.n	8005452 <valid_request+0x31e>
		}
		if(!((addr < mb->data->reg_holding.nreg) && ((addr + nreg) <= mb->data->reg_holding.nreg)))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005402:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005404:	89ba      	ldrh	r2, [r7, #12]
 8005406:	429a      	cmp	r2, r3
 8005408:	d208      	bcs.n	800541c <valid_request+0x2e8>
 800540a:	89ba      	ldrh	r2, [r7, #12]
 800540c:	897b      	ldrh	r3, [r7, #10]
 800540e:	4413      	add	r3, r2
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 8005416:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8005418:	4293      	cmp	r3, r2
 800541a:	dd16      	ble.n	800544a <valid_request+0x316>
			return MB_EXC_ADDR_RANGE;
 800541c:	2302      	movs	r3, #2
 800541e:	e018      	b.n	8005452 <valid_request+0x31e>
		break;
	case MB_FC_WRITE_SINGLE_REG:
		if(!(addr <= mb->data->reg_holding.nreg))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005426:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005428:	89ba      	ldrh	r2, [r7, #12]
 800542a:	429a      	cmp	r2, r3
 800542c:	d90f      	bls.n	800544e <valid_request+0x31a>
			return MB_EXC_ADDR_RANGE;
 800542e:	2302      	movs	r3, #2
 8005430:	e00f      	b.n	8005452 <valid_request+0x31e>
		break;
 8005432:	bf00      	nop
 8005434:	e00c      	b.n	8005450 <valid_request+0x31c>
		break;
 8005436:	bf00      	nop
 8005438:	e00a      	b.n	8005450 <valid_request+0x31c>
		break;
 800543a:	bf00      	nop
 800543c:	e008      	b.n	8005450 <valid_request+0x31c>
		break;
 800543e:	bf00      	nop
 8005440:	e006      	b.n	8005450 <valid_request+0x31c>
		break;
 8005442:	bf00      	nop
 8005444:	e004      	b.n	8005450 <valid_request+0x31c>
		break;
 8005446:	bf00      	nop
 8005448:	e002      	b.n	8005450 <valid_request+0x31c>
		break;
 800544a:	bf00      	nop
 800544c:	e000      	b.n	8005450 <valid_request+0x31c>
		break;
 800544e:	bf00      	nop
	}

	return 0;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop

0800545c <execute_func>:

static uint8_t execute_func(mb_slave_t* mb, mb_pdu_t* pdu)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
	switch (pdu->data[MB_PDU_FUNC]) {
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	78db      	ldrb	r3, [r3, #3]
 800546a:	3b01      	subs	r3, #1
 800546c:	2b0f      	cmp	r3, #15
 800546e:	d853      	bhi.n	8005518 <execute_func+0xbc>
 8005470:	a201      	add	r2, pc, #4	; (adr r2, 8005478 <execute_func+0x1c>)
 8005472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005476:	bf00      	nop
 8005478:	080054b9 	.word	0x080054b9
 800547c:	080054c5 	.word	0x080054c5
 8005480:	080054d1 	.word	0x080054d1
 8005484:	080054dd 	.word	0x080054dd
 8005488:	080054e9 	.word	0x080054e9
 800548c:	080054f5 	.word	0x080054f5
 8005490:	08005519 	.word	0x08005519
 8005494:	08005519 	.word	0x08005519
 8005498:	08005519 	.word	0x08005519
 800549c:	08005519 	.word	0x08005519
 80054a0:	08005519 	.word	0x08005519
 80054a4:	08005519 	.word	0x08005519
 80054a8:	08005519 	.word	0x08005519
 80054ac:	08005519 	.word	0x08005519
 80054b0:	08005501 	.word	0x08005501
 80054b4:	0800550d 	.word	0x0800550d
	case MB_FC_READ_COIL:
		return fc_read_coil(mb, pdu);
 80054b8:	6839      	ldr	r1, [r7, #0]
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f8f2 	bl	80056a4 <fc_read_coil>
 80054c0:	4603      	mov	r3, r0
 80054c2:	e02b      	b.n	800551c <execute_func+0xc0>
	case MB_FC_READ_DISCRETE_INPUT:
		return fc_read_input(mb, pdu);
 80054c4:	6839      	ldr	r1, [r7, #0]
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f978 	bl	80057bc <fc_read_input>
 80054cc:	4603      	mov	r3, r0
 80054ce:	e025      	b.n	800551c <execute_func+0xc0>
	case MB_FC_READ_HOLDING_REG:
		return fc_read_reg_hodling(mb, pdu);
 80054d0:	6839      	ldr	r1, [r7, #0]
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 fa6d 	bl	80059b2 <fc_read_reg_hodling>
 80054d8:	4603      	mov	r3, r0
 80054da:	e01f      	b.n	800551c <execute_func+0xc0>
	case MB_FC_READ_INPUT_REG:
		return fc_read_reg_input(mb, pdu);
 80054dc:	6839      	ldr	r1, [r7, #0]
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f9f9 	bl	80058d6 <fc_read_reg_input>
 80054e4:	4603      	mov	r3, r0
 80054e6:	e019      	b.n	800551c <execute_func+0xc0>
	case MB_FC_WRITE_SINGLE_COIL:
		return fc_write_single_coil(mb, pdu);
 80054e8:	6839      	ldr	r1, [r7, #0]
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 facf 	bl	8005a8e <fc_write_single_coil>
 80054f0:	4603      	mov	r3, r0
 80054f2:	e013      	b.n	800551c <execute_func+0xc0>
	case MB_FC_WRITE_SINGLE_REG:
		return fc_write_single_reg(mb, pdu);
 80054f4:	6839      	ldr	r1, [r7, #0]
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fb07 	bl	8005b0a <fc_write_single_reg>
 80054fc:	4603      	mov	r3, r0
 80054fe:	e00d      	b.n	800551c <execute_func+0xc0>
	case MB_FC_WRITE_MULTI_COIL:
		return fc_write_multi_coil(mb, pdu);
 8005500:	6839      	ldr	r1, [r7, #0]
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fb31 	bl	8005b6a <fc_write_multi_coil>
 8005508:	4603      	mov	r3, r0
 800550a:	e007      	b.n	800551c <execute_func+0xc0>
	case MB_FC_WRITE_MULTI_REG:
		return fc_write_multi_reg(mb, pdu);
 800550c:	6839      	ldr	r1, [r7, #0]
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fb9e 	bl	8005c50 <fc_write_multi_reg>
 8005514:	4603      	mov	r3, r0
 8005516:	e001      	b.n	800551c <execute_func+0xc0>
	default:
		break;
 8005518:	bf00      	nop
	}
	return 0;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <build_exc>:

static void build_exc(mb_slave_t* mb, mb_pdu_t* pdu, uint8_t code)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	4613      	mov	r3, r2
 8005530:	71fb      	strb	r3, [r7, #7]
	 * | 1  | 1  |   1      |  2  |
	 * +----+----+----------+-----+
	 * len = 5
	 */

	pdu->data[MB_PDU_FUNC] = pdu->data[MB_PDU_FUNC] + 0x80;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	78db      	ldrb	r3, [r3, #3]
 8005536:	3b80      	subs	r3, #128	; 0x80
 8005538:	b2da      	uxtb	r2, r3
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	70da      	strb	r2, [r3, #3]
	pdu->data[2] = code;
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	79fa      	ldrb	r2, [r7, #7]
 8005542:	711a      	strb	r2, [r3, #4]
	pdu->len = 5;
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2205      	movs	r2, #5
 8005548:	801a      	strh	r2, [r3, #0]

	mb_log("EXC code: %d\n", pdu->data[MB_PDU_FUNC]);
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	78db      	ldrb	r3, [r3, #3]
 800554e:	461a      	mov	r2, r3
 8005550:	4903      	ldr	r1, [pc, #12]	; (8005560 <build_exc+0x3c>)
 8005552:	2000      	movs	r0, #0
 8005554:	f001 fb90 	bl	8006c78 <SEGGER_RTT_printf>
}
 8005558:	bf00      	nop
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	08006e50 	.word	0x08006e50

08005564 <set_tx>:

static void set_tx(mb_slave_t* mb, mb_pdu_t* pdu)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
#ifdef MB_LOG
	mb_log("Response: ");
 800556e:	492c      	ldr	r1, [pc, #176]	; (8005620 <set_tx+0xbc>)
 8005570:	2000      	movs	r0, #0
 8005572:	f001 fb81 	bl	8006c78 <SEGGER_RTT_printf>
	for(uint16_t i = 0; i < pdu->len; i++)
 8005576:	2300      	movs	r3, #0
 8005578:	81fb      	strh	r3, [r7, #14]
 800557a:	e00b      	b.n	8005594 <set_tx+0x30>
	{
		mb_log("%02x ", pdu->data[i]);
 800557c:	89fb      	ldrh	r3, [r7, #14]
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	4413      	add	r3, r2
 8005582:	789b      	ldrb	r3, [r3, #2]
 8005584:	461a      	mov	r2, r3
 8005586:	4927      	ldr	r1, [pc, #156]	; (8005624 <set_tx+0xc0>)
 8005588:	2000      	movs	r0, #0
 800558a:	f001 fb75 	bl	8006c78 <SEGGER_RTT_printf>
	for(uint16_t i = 0; i < pdu->len; i++)
 800558e:	89fb      	ldrh	r3, [r7, #14]
 8005590:	3301      	adds	r3, #1
 8005592:	81fb      	strh	r3, [r7, #14]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	89fa      	ldrh	r2, [r7, #14]
 800559a:	429a      	cmp	r2, r3
 800559c:	d3ee      	bcc.n	800557c <set_tx+0x18>
	}
	mb_log("\n");
 800559e:	4922      	ldr	r1, [pc, #136]	; (8005628 <set_tx+0xc4>)
 80055a0:	2000      	movs	r0, #0
 80055a2:	f001 fb69 	bl	8006c78 <SEGGER_RTT_printf>
#endif

	// Copy data to tx buffer
	for (uint16_t i = 0; i < pdu->len; i++) {
 80055a6:	2300      	movs	r3, #0
 80055a8:	81bb      	strh	r3, [r7, #12]
 80055aa:	e025      	b.n	80055f8 <set_tx+0x94>
		tx_buf.data[tx_buf.head] = pdu->data[i];
 80055ac:	89bb      	ldrh	r3, [r7, #12]
 80055ae:	4a1f      	ldr	r2, [pc, #124]	; (800562c <set_tx+0xc8>)
 80055b0:	8892      	ldrh	r2, [r2, #4]
 80055b2:	4611      	mov	r1, r2
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	4413      	add	r3, r2
 80055b8:	789a      	ldrb	r2, [r3, #2]
 80055ba:	4b1c      	ldr	r3, [pc, #112]	; (800562c <set_tx+0xc8>)
 80055bc:	440b      	add	r3, r1
 80055be:	721a      	strb	r2, [r3, #8]
		tx_buf.head = (tx_buf.head + 1) % UART_TX_BUF_SIZE;
 80055c0:	4b1a      	ldr	r3, [pc, #104]	; (800562c <set_tx+0xc8>)
 80055c2:	889b      	ldrh	r3, [r3, #4]
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	4b1a      	ldr	r3, [pc, #104]	; (8005630 <set_tx+0xcc>)
 80055c8:	fb83 1302 	smull	r1, r3, r3, r2
 80055cc:	1199      	asrs	r1, r3, #6
 80055ce:	17d3      	asrs	r3, r2, #31
 80055d0:	1ac9      	subs	r1, r1, r3
 80055d2:	460b      	mov	r3, r1
 80055d4:	005b      	lsls	r3, r3, #1
 80055d6:	440b      	add	r3, r1
 80055d8:	01db      	lsls	r3, r3, #7
 80055da:	1ad1      	subs	r1, r2, r3
 80055dc:	b28a      	uxth	r2, r1
 80055de:	4b13      	ldr	r3, [pc, #76]	; (800562c <set_tx+0xc8>)
 80055e0:	809a      	strh	r2, [r3, #4]
		mb_assert(tx_buf.head != tx_buf.tail);
 80055e2:	4b12      	ldr	r3, [pc, #72]	; (800562c <set_tx+0xc8>)
 80055e4:	889a      	ldrh	r2, [r3, #4]
 80055e6:	4b11      	ldr	r3, [pc, #68]	; (800562c <set_tx+0xc8>)
 80055e8:	88db      	ldrh	r3, [r3, #6]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d101      	bne.n	80055f2 <set_tx+0x8e>
 80055ee:	f7ff f9f3 	bl	80049d8 <__mb_failure>
	for (uint16_t i = 0; i < pdu->len; i++) {
 80055f2:	89bb      	ldrh	r3, [r7, #12]
 80055f4:	3301      	adds	r3, #1
 80055f6:	81bb      	strh	r3, [r7, #12]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	881b      	ldrh	r3, [r3, #0]
 80055fc:	89ba      	ldrh	r2, [r7, #12]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d3d4      	bcc.n	80055ac <set_tx+0x48>
	}

	if (!tx_buf.on_tx) {
 8005602:	4b0a      	ldr	r3, [pc, #40]	; (800562c <set_tx+0xc8>)
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	b2db      	uxtb	r3, r3
 8005608:	f083 0301 	eor.w	r3, r3, #1
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d002      	beq.n	8005618 <set_tx+0xb4>
		start_transmit(mb);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f80e 	bl	8005634 <start_transmit>
	}
}
 8005618:	bf00      	nop
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	08006e60 	.word	0x08006e60
 8005624:	08006dc8 	.word	0x08006dc8
 8005628:	08006dd0 	.word	0x08006dd0
 800562c:	20001ac8 	.word	0x20001ac8
 8005630:	2aaaaaab 	.word	0x2aaaaaab

08005634 <start_transmit>:

static void start_transmit(mb_slave_t* mb) {
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
	if (tx_buf.tail == tx_buf.head)
 800563c:	4b18      	ldr	r3, [pc, #96]	; (80056a0 <start_transmit+0x6c>)
 800563e:	88da      	ldrh	r2, [r3, #6]
 8005640:	4b17      	ldr	r3, [pc, #92]	; (80056a0 <start_transmit+0x6c>)
 8005642:	889b      	ldrh	r3, [r3, #4]
 8005644:	429a      	cmp	r2, r3
 8005646:	d026      	beq.n	8005696 <start_transmit+0x62>
		return;

	if (tx_buf.tail < tx_buf.head) {
 8005648:	4b15      	ldr	r3, [pc, #84]	; (80056a0 <start_transmit+0x6c>)
 800564a:	88da      	ldrh	r2, [r3, #6]
 800564c:	4b14      	ldr	r3, [pc, #80]	; (80056a0 <start_transmit+0x6c>)
 800564e:	889b      	ldrh	r3, [r3, #4]
 8005650:	429a      	cmp	r2, r3
 8005652:	d208      	bcs.n	8005666 <start_transmit+0x32>
		tx_buf.tx_len = tx_buf.head - tx_buf.tail;
 8005654:	4b12      	ldr	r3, [pc, #72]	; (80056a0 <start_transmit+0x6c>)
 8005656:	889a      	ldrh	r2, [r3, #4]
 8005658:	4b11      	ldr	r3, [pc, #68]	; (80056a0 <start_transmit+0x6c>)
 800565a:	88db      	ldrh	r3, [r3, #6]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	b29a      	uxth	r2, r3
 8005660:	4b0f      	ldr	r3, [pc, #60]	; (80056a0 <start_transmit+0x6c>)
 8005662:	805a      	strh	r2, [r3, #2]
 8005664:	e006      	b.n	8005674 <start_transmit+0x40>
	} else {
		tx_buf.tx_len = UART_TX_BUF_SIZE - tx_buf.tail;
 8005666:	4b0e      	ldr	r3, [pc, #56]	; (80056a0 <start_transmit+0x6c>)
 8005668:	88db      	ldrh	r3, [r3, #6]
 800566a:	f5c3 73c0 	rsb	r3, r3, #384	; 0x180
 800566e:	b29a      	uxth	r2, r3
 8005670:	4b0b      	ldr	r3, [pc, #44]	; (80056a0 <start_transmit+0x6c>)
 8005672:	805a      	strh	r2, [r3, #2]
	}

	tx_buf.on_tx = true;
 8005674:	4b0a      	ldr	r3, [pc, #40]	; (80056a0 <start_transmit+0x6c>)
 8005676:	2201      	movs	r2, #1
 8005678:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(mb->uart, &tx_buf.data[tx_buf.tail], tx_buf.tx_len);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6818      	ldr	r0, [r3, #0]
 800567e:	4b08      	ldr	r3, [pc, #32]	; (80056a0 <start_transmit+0x6c>)
 8005680:	88db      	ldrh	r3, [r3, #6]
 8005682:	3308      	adds	r3, #8
 8005684:	4a06      	ldr	r2, [pc, #24]	; (80056a0 <start_transmit+0x6c>)
 8005686:	4413      	add	r3, r2
 8005688:	4a05      	ldr	r2, [pc, #20]	; (80056a0 <start_transmit+0x6c>)
 800568a:	8852      	ldrh	r2, [r2, #2]
 800568c:	b292      	uxth	r2, r2
 800568e:	4619      	mov	r1, r3
 8005690:	f7fd fc88 	bl	8002fa4 <HAL_UART_Transmit_IT>
 8005694:	e000      	b.n	8005698 <start_transmit+0x64>
		return;
 8005696:	bf00      	nop
}
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	20001ac8 	.word	0x20001ac8

080056a4 <fc_read_coil>:

static uint8_t fc_read_coil(mb_slave_t* mb, mb_pdu_t* pdu)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2  |  2  |
	 * +----+----+------+-----+-----+
	 * len = 8
	 */

	if(pdu->len < 8)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	2b07      	cmp	r3, #7
 80056b4:	d801      	bhi.n	80056ba <fc_read_coil+0x16>
		return MB_EXC_EXECUTE;
 80056b6:	2304      	movs	r3, #4
 80056b8:	e07c      	b.n	80057b4 <fc_read_coil+0x110>

	uint16_t addr = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	791b      	ldrb	r3, [r3, #4]
 80056be:	021b      	lsls	r3, r3, #8
 80056c0:	b21a      	sxth	r2, r3
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	795b      	ldrb	r3, [r3, #5]
 80056c6:	b21b      	sxth	r3, r3
 80056c8:	4313      	orrs	r3, r2
 80056ca:	b21b      	sxth	r3, r3
 80056cc:	82bb      	strh	r3, [r7, #20]
	uint16_t qty  = pdu->data[MB_PDU_QTY_HI] << 8 | pdu->data[MB_PDU_QTY_LO];
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	799b      	ldrb	r3, [r3, #6]
 80056d2:	021b      	lsls	r3, r3, #8
 80056d4:	b21a      	sxth	r2, r3
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	79db      	ldrb	r3, [r3, #7]
 80056da:	b21b      	sxth	r3, r3
 80056dc:	4313      	orrs	r3, r2
 80056de:	b21b      	sxth	r3, r3
 80056e0:	827b      	strh	r3, [r7, #18]
	 * +----+----+-----+------+-----+
	 * | 1  |  1 |  1  |  n   |  2  |
	 * +----+----+-----+------+-----+
	 */

	pdu->data[2] = qty / 8;
 80056e2:	8a7b      	ldrh	r3, [r7, #18]
 80056e4:	08db      	lsrs	r3, r3, #3
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	b2da      	uxtb	r2, r3
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	711a      	strb	r2, [r3, #4]
	if(qty % 8)
 80056ee:	8a7b      	ldrh	r3, [r7, #18]
 80056f0:	f003 0307 	and.w	r3, r3, #7
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d005      	beq.n	8005706 <fc_read_coil+0x62>
		pdu->data[2] += 1;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	791b      	ldrb	r3, [r3, #4]
 80056fe:	3301      	adds	r3, #1
 8005700:	b2da      	uxtb	r2, r3
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	711a      	strb	r2, [r3, #4]

	uint8_t* data = &pdu->data[3];
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	3305      	adds	r3, #5
 800570a:	60fb      	str	r3, [r7, #12]
	memset(data, 0x00, pdu->data[2]);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	791b      	ldrb	r3, [r3, #4]
 8005710:	461a      	mov	r2, r3
 8005712:	2100      	movs	r1, #0
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f001 faf9 	bl	8006d0c <memset>

	for(uint16_t i = 0; i < qty; i++)
 800571a:	2300      	movs	r3, #0
 800571c:	82fb      	strh	r3, [r7, #22]
 800571e:	e03d      	b.n	800579c <fc_read_coil+0xf8>
	{
		uint8_t ibyte = i / 8;
 8005720:	8afb      	ldrh	r3, [r7, #22]
 8005722:	08db      	lsrs	r3, r3, #3
 8005724:	b29b      	uxth	r3, r3
 8005726:	72fb      	strb	r3, [r7, #11]
		uint8_t ibit  = i % 8;
 8005728:	8afb      	ldrh	r3, [r7, #22]
 800572a:	b2db      	uxtb	r3, r3
 800572c:	f003 0307 	and.w	r3, r3, #7
 8005730:	72bb      	strb	r3, [r7, #10]
		uint8_t val   = 1 << ibit;
 8005732:	7abb      	ldrb	r3, [r7, #10]
 8005734:	2201      	movs	r2, #1
 8005736:	fa02 f303 	lsl.w	r3, r2, r3
 800573a:	727b      	strb	r3, [r7, #9]

		if(mb->data->coil.get(&mb->data->coil, addr + i))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 800574a:	1d10      	adds	r0, r2, #4
 800574c:	8ab9      	ldrh	r1, [r7, #20]
 800574e:	8afa      	ldrh	r2, [r7, #22]
 8005750:	440a      	add	r2, r1
 8005752:	b292      	uxth	r2, r2
 8005754:	4611      	mov	r1, r2
 8005756:	4798      	blx	r3
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00b      	beq.n	8005776 <fc_read_coil+0xd2>
			data[ibyte] = data[ibyte] | val;
 800575e:	7afb      	ldrb	r3, [r7, #11]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4413      	add	r3, r2
 8005764:	7819      	ldrb	r1, [r3, #0]
 8005766:	7afb      	ldrb	r3, [r7, #11]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	4413      	add	r3, r2
 800576c:	7a7a      	ldrb	r2, [r7, #9]
 800576e:	430a      	orrs	r2, r1
 8005770:	b2d2      	uxtb	r2, r2
 8005772:	701a      	strb	r2, [r3, #0]
 8005774:	e00f      	b.n	8005796 <fc_read_coil+0xf2>
		else
			data[ibyte] = data[ibyte] & (~val);
 8005776:	7afb      	ldrb	r3, [r7, #11]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	4413      	add	r3, r2
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	b25a      	sxtb	r2, r3
 8005780:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8005784:	43db      	mvns	r3, r3
 8005786:	b25b      	sxtb	r3, r3
 8005788:	4013      	ands	r3, r2
 800578a:	b259      	sxtb	r1, r3
 800578c:	7afb      	ldrb	r3, [r7, #11]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4413      	add	r3, r2
 8005792:	b2ca      	uxtb	r2, r1
 8005794:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < qty; i++)
 8005796:	8afb      	ldrh	r3, [r7, #22]
 8005798:	3301      	adds	r3, #1
 800579a:	82fb      	strh	r3, [r7, #22]
 800579c:	8afa      	ldrh	r2, [r7, #22]
 800579e:	8a7b      	ldrh	r3, [r7, #18]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d3bd      	bcc.n	8005720 <fc_read_coil+0x7c>
	}

	pdu->len = pdu->data[2] + 5;	// include CRC
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	791b      	ldrb	r3, [r3, #4]
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	3305      	adds	r3, #5
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	801a      	strh	r2, [r3, #0]
	return 0;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3718      	adds	r7, #24
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <fc_read_input>:

static uint8_t fc_read_input(mb_slave_t* mb, mb_pdu_t* pdu)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2  |  2  |
	 * +----+----+------+-----+-----+
	 * len = 8
	 */

	if(pdu->len < 8)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	881b      	ldrh	r3, [r3, #0]
 80057ca:	2b07      	cmp	r3, #7
 80057cc:	d801      	bhi.n	80057d2 <fc_read_input+0x16>
		return MB_EXC_EXECUTE;
 80057ce:	2304      	movs	r3, #4
 80057d0:	e07d      	b.n	80058ce <fc_read_input+0x112>

	uint16_t addr = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	791b      	ldrb	r3, [r3, #4]
 80057d6:	021b      	lsls	r3, r3, #8
 80057d8:	b21a      	sxth	r2, r3
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	795b      	ldrb	r3, [r3, #5]
 80057de:	b21b      	sxth	r3, r3
 80057e0:	4313      	orrs	r3, r2
 80057e2:	b21b      	sxth	r3, r3
 80057e4:	82bb      	strh	r3, [r7, #20]
	uint16_t qty  = pdu->data[MB_PDU_QTY_HI] << 8 | pdu->data[MB_PDU_QTY_LO];
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	799b      	ldrb	r3, [r3, #6]
 80057ea:	021b      	lsls	r3, r3, #8
 80057ec:	b21a      	sxth	r2, r3
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	79db      	ldrb	r3, [r3, #7]
 80057f2:	b21b      	sxth	r3, r3
 80057f4:	4313      	orrs	r3, r2
 80057f6:	b21b      	sxth	r3, r3
 80057f8:	827b      	strh	r3, [r7, #18]
	 * +----+----+-----+------+-----+
	 * | 1  |  1 |  1  |  n   |  2  |
	 * +----+----+-----+------+-----+
	 */

	pdu->data[2] = qty / 8;
 80057fa:	8a7b      	ldrh	r3, [r7, #18]
 80057fc:	08db      	lsrs	r3, r3, #3
 80057fe:	b29b      	uxth	r3, r3
 8005800:	b2da      	uxtb	r2, r3
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	711a      	strb	r2, [r3, #4]
	if(qty % 8)
 8005806:	8a7b      	ldrh	r3, [r7, #18]
 8005808:	f003 0307 	and.w	r3, r3, #7
 800580c:	b29b      	uxth	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d005      	beq.n	800581e <fc_read_input+0x62>
		pdu->data[2] += 1;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	791b      	ldrb	r3, [r3, #4]
 8005816:	3301      	adds	r3, #1
 8005818:	b2da      	uxtb	r2, r3
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	711a      	strb	r2, [r3, #4]

	uint8_t* data = &pdu->data[3];
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	3305      	adds	r3, #5
 8005822:	60fb      	str	r3, [r7, #12]
	memset(data, 0x00, pdu->data[2]);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	791b      	ldrb	r3, [r3, #4]
 8005828:	461a      	mov	r2, r3
 800582a:	2100      	movs	r1, #0
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f001 fa6d 	bl	8006d0c <memset>

	for(uint16_t i = 0; i < qty; i++)
 8005832:	2300      	movs	r3, #0
 8005834:	82fb      	strh	r3, [r7, #22]
 8005836:	e03e      	b.n	80058b6 <fc_read_input+0xfa>
	{
		uint8_t ibyte = i / 8;
 8005838:	8afb      	ldrh	r3, [r7, #22]
 800583a:	08db      	lsrs	r3, r3, #3
 800583c:	b29b      	uxth	r3, r3
 800583e:	72fb      	strb	r3, [r7, #11]
		uint8_t ibit  = i % 8;
 8005840:	8afb      	ldrh	r3, [r7, #22]
 8005842:	b2db      	uxtb	r3, r3
 8005844:	f003 0307 	and.w	r3, r3, #7
 8005848:	72bb      	strb	r3, [r7, #10]
		uint8_t val   = 1 << ibit;
 800584a:	7abb      	ldrb	r3, [r7, #10]
 800584c:	2201      	movs	r2, #1
 800584e:	fa02 f303 	lsl.w	r3, r2, r3
 8005852:	727b      	strb	r3, [r7, #9]

		if(mb->data->coil.get(&mb->data->input, addr + i))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 8005862:	f102 0014 	add.w	r0, r2, #20
 8005866:	8ab9      	ldrh	r1, [r7, #20]
 8005868:	8afa      	ldrh	r2, [r7, #22]
 800586a:	440a      	add	r2, r1
 800586c:	b292      	uxth	r2, r2
 800586e:	4611      	mov	r1, r2
 8005870:	4798      	blx	r3
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00b      	beq.n	8005890 <fc_read_input+0xd4>
			data[ibyte] = data[ibyte] | val;
 8005878:	7afb      	ldrb	r3, [r7, #11]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	4413      	add	r3, r2
 800587e:	7819      	ldrb	r1, [r3, #0]
 8005880:	7afb      	ldrb	r3, [r7, #11]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	4413      	add	r3, r2
 8005886:	7a7a      	ldrb	r2, [r7, #9]
 8005888:	430a      	orrs	r2, r1
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	701a      	strb	r2, [r3, #0]
 800588e:	e00f      	b.n	80058b0 <fc_read_input+0xf4>
		else
			data[ibyte] = data[ibyte] & (~val);
 8005890:	7afb      	ldrb	r3, [r7, #11]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	4413      	add	r3, r2
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	b25a      	sxtb	r2, r3
 800589a:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800589e:	43db      	mvns	r3, r3
 80058a0:	b25b      	sxtb	r3, r3
 80058a2:	4013      	ands	r3, r2
 80058a4:	b259      	sxtb	r1, r3
 80058a6:	7afb      	ldrb	r3, [r7, #11]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	4413      	add	r3, r2
 80058ac:	b2ca      	uxtb	r2, r1
 80058ae:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < qty; i++)
 80058b0:	8afb      	ldrh	r3, [r7, #22]
 80058b2:	3301      	adds	r3, #1
 80058b4:	82fb      	strh	r3, [r7, #22]
 80058b6:	8afa      	ldrh	r2, [r7, #22]
 80058b8:	8a7b      	ldrh	r3, [r7, #18]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d3bc      	bcc.n	8005838 <fc_read_input+0x7c>
	}

	pdu->len = pdu->data[2] + 5;	// include CRC
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	791b      	ldrb	r3, [r3, #4]
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	3305      	adds	r3, #5
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	801a      	strh	r2, [r3, #0]
	return 0;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3718      	adds	r7, #24
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <fc_read_reg_input>:

static uint8_t fc_read_reg_input(mb_slave_t* mb, mb_pdu_t* pdu)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b086      	sub	sp, #24
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2  |  2  |
	 * +----+----+------+-----+-----+
	 * len = 8
	 */

	if(pdu->len < 8)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	2b07      	cmp	r3, #7
 80058e6:	d801      	bhi.n	80058ec <fc_read_reg_input+0x16>
		return MB_EXC_EXECUTE;
 80058e8:	2304      	movs	r3, #4
 80058ea:	e05e      	b.n	80059aa <fc_read_reg_input+0xd4>

	uint16_t addr = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	791b      	ldrb	r3, [r3, #4]
 80058f0:	021b      	lsls	r3, r3, #8
 80058f2:	b21a      	sxth	r2, r3
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	795b      	ldrb	r3, [r3, #5]
 80058f8:	b21b      	sxth	r3, r3
 80058fa:	4313      	orrs	r3, r2
 80058fc:	b21b      	sxth	r3, r3
 80058fe:	827b      	strh	r3, [r7, #18]
	uint16_t qty  = pdu->data[MB_PDU_QTY_HI] << 8 | pdu->data[MB_PDU_QTY_LO];
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	799b      	ldrb	r3, [r3, #6]
 8005904:	021b      	lsls	r3, r3, #8
 8005906:	b21a      	sxth	r2, r3
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	79db      	ldrb	r3, [r3, #7]
 800590c:	b21b      	sxth	r3, r3
 800590e:	4313      	orrs	r3, r2
 8005910:	b21b      	sxth	r3, r3
 8005912:	823b      	strh	r3, [r7, #16]
	 * +----+----+-----+------+-----+
	 * | 1  |  1 |  1  |  n   |  2  |
	 * +----+----+-----+------+-----+
	 */

	pdu->data[2] = qty * 2;
 8005914:	8a3b      	ldrh	r3, [r7, #16]
 8005916:	b2db      	uxtb	r3, r3
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	b2da      	uxtb	r2, r3
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	711a      	strb	r2, [r3, #4]
	uint8_t* data = &pdu->data[3];
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	3305      	adds	r3, #5
 8005924:	60fb      	str	r3, [r7, #12]
	memset(data, 0x00, pdu->data[2]);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	791b      	ldrb	r3, [r3, #4]
 800592a:	461a      	mov	r2, r3
 800592c:	2100      	movs	r1, #0
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f001 f9ec 	bl	8006d0c <memset>

	uint16_t data_index = 0;
 8005934:	2300      	movs	r3, #0
 8005936:	82fb      	strh	r3, [r7, #22]
	for(uint8_t i = 0; i < qty; i++)
 8005938:	2300      	movs	r3, #0
 800593a:	757b      	strb	r3, [r7, #21]
 800593c:	e028      	b.n	8005990 <fc_read_reg_input+0xba>
	{
		uint16_t value     = mb->data->reg_input.get(&mb->data->reg_input, addr + i);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 800594c:	f102 0024 	add.w	r0, r2, #36	; 0x24
 8005950:	7d7a      	ldrb	r2, [r7, #21]
 8005952:	b291      	uxth	r1, r2
 8005954:	8a7a      	ldrh	r2, [r7, #18]
 8005956:	440a      	add	r2, r1
 8005958:	b292      	uxth	r2, r2
 800595a:	4611      	mov	r1, r2
 800595c:	4798      	blx	r3
 800595e:	4603      	mov	r3, r0
 8005960:	817b      	strh	r3, [r7, #10]
		data[data_index++] = value >> 8;
 8005962:	897b      	ldrh	r3, [r7, #10]
 8005964:	0a1b      	lsrs	r3, r3, #8
 8005966:	b29a      	uxth	r2, r3
 8005968:	8afb      	ldrh	r3, [r7, #22]
 800596a:	1c59      	adds	r1, r3, #1
 800596c:	82f9      	strh	r1, [r7, #22]
 800596e:	4619      	mov	r1, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	440b      	add	r3, r1
 8005974:	b2d2      	uxtb	r2, r2
 8005976:	701a      	strb	r2, [r3, #0]
		data[data_index++] = (uint8_t)value;
 8005978:	8afb      	ldrh	r3, [r7, #22]
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	82fa      	strh	r2, [r7, #22]
 800597e:	461a      	mov	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4413      	add	r3, r2
 8005984:	897a      	ldrh	r2, [r7, #10]
 8005986:	b2d2      	uxtb	r2, r2
 8005988:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < qty; i++)
 800598a:	7d7b      	ldrb	r3, [r7, #21]
 800598c:	3301      	adds	r3, #1
 800598e:	757b      	strb	r3, [r7, #21]
 8005990:	7d7b      	ldrb	r3, [r7, #21]
 8005992:	b29b      	uxth	r3, r3
 8005994:	8a3a      	ldrh	r2, [r7, #16]
 8005996:	429a      	cmp	r2, r3
 8005998:	d8d1      	bhi.n	800593e <fc_read_reg_input+0x68>
	}

	pdu->len = pdu->data[2] + 5;	// include CRC
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	791b      	ldrb	r3, [r3, #4]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	3305      	adds	r3, #5
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	801a      	strh	r2, [r3, #0]
	return 0;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3718      	adds	r7, #24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <fc_read_reg_hodling>:

static uint8_t fc_read_reg_hodling(mb_slave_t* mb, mb_pdu_t* pdu)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b086      	sub	sp, #24
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2  |  2  |
	 * +----+----+------+-----+-----+
	 * len = 8
	 */

	if(pdu->len < 8)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	2b07      	cmp	r3, #7
 80059c2:	d801      	bhi.n	80059c8 <fc_read_reg_hodling+0x16>
		return MB_EXC_EXECUTE;
 80059c4:	2304      	movs	r3, #4
 80059c6:	e05e      	b.n	8005a86 <fc_read_reg_hodling+0xd4>

	uint16_t addr = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	791b      	ldrb	r3, [r3, #4]
 80059cc:	021b      	lsls	r3, r3, #8
 80059ce:	b21a      	sxth	r2, r3
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	795b      	ldrb	r3, [r3, #5]
 80059d4:	b21b      	sxth	r3, r3
 80059d6:	4313      	orrs	r3, r2
 80059d8:	b21b      	sxth	r3, r3
 80059da:	827b      	strh	r3, [r7, #18]
	uint16_t qty  = pdu->data[MB_PDU_QTY_HI] << 8 | pdu->data[MB_PDU_QTY_LO];
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	799b      	ldrb	r3, [r3, #6]
 80059e0:	021b      	lsls	r3, r3, #8
 80059e2:	b21a      	sxth	r2, r3
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	79db      	ldrb	r3, [r3, #7]
 80059e8:	b21b      	sxth	r3, r3
 80059ea:	4313      	orrs	r3, r2
 80059ec:	b21b      	sxth	r3, r3
 80059ee:	823b      	strh	r3, [r7, #16]
	 * +----+----+-----+------+-----+
	 * | 1  |  1 |  1  |  n   |  2  |
	 * +----+----+-----+------+-----+
	 */

	uint16_t idata = 0;
 80059f0:	2300      	movs	r3, #0
 80059f2:	82fb      	strh	r3, [r7, #22]
	uint8_t* data  = &pdu->data[3];
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	3305      	adds	r3, #5
 80059f8:	60fb      	str	r3, [r7, #12]

	pdu->data[2] = qty * 2;
 80059fa:	8a3b      	ldrh	r3, [r7, #16]
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	005b      	lsls	r3, r3, #1
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	711a      	strb	r2, [r3, #4]
	memset(data, 0x00, pdu->data[2]);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	791b      	ldrb	r3, [r3, #4]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f001 f97c 	bl	8006d0c <memset>

	for(uint8_t i = 0; i < qty; i++)
 8005a14:	2300      	movs	r3, #0
 8005a16:	757b      	strb	r3, [r7, #21]
 8005a18:	e028      	b.n	8005a6c <fc_read_reg_hodling+0xba>
	{
		uint16_t value = mb->data->reg_holding.get(&mb->data->reg_holding, addr + i);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 8005a28:	f102 0034 	add.w	r0, r2, #52	; 0x34
 8005a2c:	7d7a      	ldrb	r2, [r7, #21]
 8005a2e:	b291      	uxth	r1, r2
 8005a30:	8a7a      	ldrh	r2, [r7, #18]
 8005a32:	440a      	add	r2, r1
 8005a34:	b292      	uxth	r2, r2
 8005a36:	4611      	mov	r1, r2
 8005a38:	4798      	blx	r3
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	817b      	strh	r3, [r7, #10]
		data[idata++] = (uint8_t)(value >> 8);
 8005a3e:	897b      	ldrh	r3, [r7, #10]
 8005a40:	0a1b      	lsrs	r3, r3, #8
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	8afb      	ldrh	r3, [r7, #22]
 8005a46:	1c59      	adds	r1, r3, #1
 8005a48:	82f9      	strh	r1, [r7, #22]
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	440b      	add	r3, r1
 8005a50:	b2d2      	uxtb	r2, r2
 8005a52:	701a      	strb	r2, [r3, #0]
		data[idata++] = (uint8_t)(value);
 8005a54:	8afb      	ldrh	r3, [r7, #22]
 8005a56:	1c5a      	adds	r2, r3, #1
 8005a58:	82fa      	strh	r2, [r7, #22]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4413      	add	r3, r2
 8005a60:	897a      	ldrh	r2, [r7, #10]
 8005a62:	b2d2      	uxtb	r2, r2
 8005a64:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < qty; i++)
 8005a66:	7d7b      	ldrb	r3, [r7, #21]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	757b      	strb	r3, [r7, #21]
 8005a6c:	7d7b      	ldrb	r3, [r7, #21]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	8a3a      	ldrh	r2, [r7, #16]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d8d1      	bhi.n	8005a1a <fc_read_reg_hodling+0x68>
	}

	pdu->len = pdu->data[2] + 5;	// include CRC
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	791b      	ldrb	r3, [r3, #4]
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	3305      	adds	r3, #5
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	801a      	strh	r2, [r3, #0]
	return 0;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3718      	adds	r7, #24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <fc_write_single_coil>:

static uint8_t fc_write_single_coil(mb_slave_t* mb, mb_pdu_t* pdu)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b084      	sub	sp, #16
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
 8005a96:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2    |  2  |
	 * +----+----+------+-------+-----+
	 * len = 8
	 */

	if(pdu->len < 8)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	2b07      	cmp	r3, #7
 8005a9e:	d801      	bhi.n	8005aa4 <fc_write_single_coil+0x16>
		return MB_EXC_EXECUTE;
 8005aa0:	2304      	movs	r3, #4
 8005aa2:	e02e      	b.n	8005b02 <fc_write_single_coil+0x74>

	uint16_t addr  = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	791b      	ldrb	r3, [r3, #4]
 8005aa8:	021b      	lsls	r3, r3, #8
 8005aaa:	b21a      	sxth	r2, r3
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	795b      	ldrb	r3, [r3, #5]
 8005ab0:	b21b      	sxth	r3, r3
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	b21b      	sxth	r3, r3
 8005ab6:	81fb      	strh	r3, [r7, #14]
	uint16_t value = pdu->data[MB_PDU_QTY_HI]  << 8 | pdu->data[MB_PDU_QTY_LO];
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	799b      	ldrb	r3, [r3, #6]
 8005abc:	021b      	lsls	r3, r3, #8
 8005abe:	b21a      	sxth	r2, r3
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	79db      	ldrb	r3, [r3, #7]
 8005ac4:	b21b      	sxth	r3, r3
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	b21b      	sxth	r3, r3
 8005aca:	81bb      	strh	r3, [r7, #12]
	 * | 1  | 1  |   2  |  2    |  2  |
	 * +----+----+------+-------+-----+
	 * len = 8
	 */

	if (value == 0x00000)
 8005acc:	89bb      	ldrh	r3, [r7, #12]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10b      	bne.n	8005aea <fc_write_single_coil+0x5c>
		mb->data->coil.set(&mb->data->coil, addr, 0);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 8005ae0:	1d10      	adds	r0, r2, #4
 8005ae2:	89f9      	ldrh	r1, [r7, #14]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	4798      	blx	r3
 8005ae8:	e00a      	b.n	8005b00 <fc_write_single_coil+0x72>
	else
		mb->data->coil.set(&mb->data->coil, addr, 1);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 8005af8:	1d10      	adds	r0, r2, #4
 8005afa:	89f9      	ldrh	r1, [r7, #14]
 8005afc:	2201      	movs	r2, #1
 8005afe:	4798      	blx	r3

	return 0;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <fc_write_single_reg>:

static uint8_t fc_write_single_reg(mb_slave_t* mb, mb_pdu_t* pdu)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b084      	sub	sp, #16
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2    |  2  |
	 * +----+----+------+-------+-----+
	 * len = 8
	 */

	if(pdu->len < 8)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	881b      	ldrh	r3, [r3, #0]
 8005b18:	2b07      	cmp	r3, #7
 8005b1a:	d801      	bhi.n	8005b20 <fc_write_single_reg+0x16>
		return MB_EXC_EXECUTE;
 8005b1c:	2304      	movs	r3, #4
 8005b1e:	e020      	b.n	8005b62 <fc_write_single_reg+0x58>

	uint16_t addr  = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	791b      	ldrb	r3, [r3, #4]
 8005b24:	021b      	lsls	r3, r3, #8
 8005b26:	b21a      	sxth	r2, r3
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	795b      	ldrb	r3, [r3, #5]
 8005b2c:	b21b      	sxth	r3, r3
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	b21b      	sxth	r3, r3
 8005b32:	81fb      	strh	r3, [r7, #14]
	uint16_t value = pdu->data[MB_PDU_QTY_HI]  << 8 | pdu->data[MB_PDU_QTY_LO];
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	799b      	ldrb	r3, [r3, #6]
 8005b38:	021b      	lsls	r3, r3, #8
 8005b3a:	b21a      	sxth	r2, r3
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	79db      	ldrb	r3, [r3, #7]
 8005b40:	b21b      	sxth	r3, r3
 8005b42:	4313      	orrs	r3, r2
 8005b44:	b21b      	sxth	r3, r3
 8005b46:	81bb      	strh	r3, [r7, #12]
	 * | 1  | 1  |   2  |  2    |  2  |
	 * +----+----+------+-------+-----+
	 * len = 8
	 */

	mb->data->reg_holding.set(&mb->data->reg_holding, addr, value);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 8005b56:	f102 0034 	add.w	r0, r2, #52	; 0x34
 8005b5a:	89ba      	ldrh	r2, [r7, #12]
 8005b5c:	89f9      	ldrh	r1, [r7, #14]
 8005b5e:	4798      	blx	r3

	return 0;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <fc_write_multi_coil>:

static uint8_t fc_write_multi_coil(mb_slave_t* mb, mb_pdu_t* pdu)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b086      	sub	sp, #24
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
 8005b72:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2  |  1  |   N  |  2  |
	 * +----+----+------+-----+-----+------+-----+
	 * len_min = 10
	 */

	if(pdu->len < 10)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	2b09      	cmp	r3, #9
 8005b7a:	d801      	bhi.n	8005b80 <fc_write_multi_coil+0x16>
		return MB_EXC_EXECUTE;
 8005b7c:	2304      	movs	r3, #4
 8005b7e:	e063      	b.n	8005c48 <fc_write_multi_coil+0xde>

	uint16_t addr  = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	791b      	ldrb	r3, [r3, #4]
 8005b84:	021b      	lsls	r3, r3, #8
 8005b86:	b21a      	sxth	r2, r3
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	795b      	ldrb	r3, [r3, #5]
 8005b8c:	b21b      	sxth	r3, r3
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	b21b      	sxth	r3, r3
 8005b92:	82bb      	strh	r3, [r7, #20]
	uint16_t qty   = pdu->data[MB_PDU_QTY_HI]  << 8 | pdu->data[MB_PDU_QTY_LO];
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	799b      	ldrb	r3, [r3, #6]
 8005b98:	021b      	lsls	r3, r3, #8
 8005b9a:	b21a      	sxth	r2, r3
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	79db      	ldrb	r3, [r3, #7]
 8005ba0:	b21b      	sxth	r3, r3
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	b21b      	sxth	r3, r3
 8005ba6:	827b      	strh	r3, [r7, #18]
	uint8_t  b_cnt = pdu->data[MB_PDU_CNT];
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	7a1b      	ldrb	r3, [r3, #8]
 8005bac:	747b      	strb	r3, [r7, #17]

	uint8_t _cnt = qty / 8;
 8005bae:	8a7b      	ldrh	r3, [r7, #18]
 8005bb0:	08db      	lsrs	r3, r3, #3
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	75fb      	strb	r3, [r7, #23]
	if(qty % 8)
 8005bb6:	8a7b      	ldrh	r3, [r7, #18]
 8005bb8:	f003 0307 	and.w	r3, r3, #7
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <fc_write_multi_coil+0x5e>
		_cnt += 1;
 8005bc2:	7dfb      	ldrb	r3, [r7, #23]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	75fb      	strb	r3, [r7, #23]

	if (((b_cnt + 9) != pdu->len) || (_cnt != b_cnt))
 8005bc8:	7c7b      	ldrb	r3, [r7, #17]
 8005bca:	3309      	adds	r3, #9
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	8812      	ldrh	r2, [r2, #0]
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d103      	bne.n	8005bdc <fc_write_multi_coil+0x72>
 8005bd4:	7dfa      	ldrb	r2, [r7, #23]
 8005bd6:	7c7b      	ldrb	r3, [r7, #17]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d001      	beq.n	8005be0 <fc_write_multi_coil+0x76>
		return MB_EXC_EXECUTE;
 8005bdc:	2304      	movs	r3, #4
 8005bde:	e033      	b.n	8005c48 <fc_write_multi_coil+0xde>

	uint8_t* data = &pdu->data[7];
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	3309      	adds	r3, #9
 8005be4:	60fb      	str	r3, [r7, #12]
	for(uint8_t i  = 0; i < qty; i++)
 8005be6:	2300      	movs	r3, #0
 8005be8:	75bb      	strb	r3, [r7, #22]
 8005bea:	e024      	b.n	8005c36 <fc_write_multi_coil+0xcc>
	{
		uint8_t ibyte = i / 8;
 8005bec:	7dbb      	ldrb	r3, [r7, #22]
 8005bee:	08db      	lsrs	r3, r3, #3
 8005bf0:	72fb      	strb	r3, [r7, #11]
		uint8_t ibit  = i % 8;
 8005bf2:	7dbb      	ldrb	r3, [r7, #22]
 8005bf4:	f003 0307 	and.w	r3, r3, #7
 8005bf8:	72bb      	strb	r3, [r7, #10]

		uint8_t status = (data[ibyte] >> ibit) & 0x01;
 8005bfa:	7afb      	ldrb	r3, [r7, #11]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	461a      	mov	r2, r3
 8005c04:	7abb      	ldrb	r3, [r7, #10]
 8005c06:	fa42 f303 	asr.w	r3, r2, r3
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	727b      	strb	r3, [r7, #9]
		mb->data->coil.set(&mb->data->coil, addr + i, status);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 8005c20:	1d10      	adds	r0, r2, #4
 8005c22:	7dba      	ldrb	r2, [r7, #22]
 8005c24:	b291      	uxth	r1, r2
 8005c26:	8aba      	ldrh	r2, [r7, #20]
 8005c28:	440a      	add	r2, r1
 8005c2a:	b291      	uxth	r1, r2
 8005c2c:	7a7a      	ldrb	r2, [r7, #9]
 8005c2e:	4798      	blx	r3
	for(uint8_t i  = 0; i < qty; i++)
 8005c30:	7dbb      	ldrb	r3, [r7, #22]
 8005c32:	3301      	adds	r3, #1
 8005c34:	75bb      	strb	r3, [r7, #22]
 8005c36:	7dbb      	ldrb	r3, [r7, #22]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	8a7a      	ldrh	r2, [r7, #18]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d8d5      	bhi.n	8005bec <fc_write_multi_coil+0x82>
	 * | 1  | 1  |   2  |  2  |  2  |
	 * +----+----+------+-----+-----+
	 * len_min = 8
	 */

	pdu->len = 8;	// include CRC
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	2208      	movs	r2, #8
 8005c44:	801a      	strh	r2, [r3, #0]

	return 0;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3718      	adds	r7, #24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <fc_write_multi_reg>:

static uint8_t fc_write_multi_reg(mb_slave_t* mb, mb_pdu_t* pdu)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2  |  1  |   N  |  2  |
	 * +----+----+------+-----+-----+------+-----+
	 * len_min = 11
	 */

	if(pdu->len < 11)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	881b      	ldrh	r3, [r3, #0]
 8005c5e:	2b0a      	cmp	r3, #10
 8005c60:	d801      	bhi.n	8005c66 <fc_write_multi_reg+0x16>
		return MB_EXC_EXECUTE;
 8005c62:	2304      	movs	r3, #4
 8005c64:	e05f      	b.n	8005d26 <fc_write_multi_reg+0xd6>

	uint16_t addr  = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	791b      	ldrb	r3, [r3, #4]
 8005c6a:	021b      	lsls	r3, r3, #8
 8005c6c:	b21a      	sxth	r2, r3
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	795b      	ldrb	r3, [r3, #5]
 8005c72:	b21b      	sxth	r3, r3
 8005c74:	4313      	orrs	r3, r2
 8005c76:	b21b      	sxth	r3, r3
 8005c78:	837b      	strh	r3, [r7, #26]
	uint16_t qty   = pdu->data[MB_PDU_QTY_HI]  << 8 | pdu->data[MB_PDU_QTY_LO];
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	799b      	ldrb	r3, [r3, #6]
 8005c7e:	021b      	lsls	r3, r3, #8
 8005c80:	b21a      	sxth	r2, r3
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	79db      	ldrb	r3, [r3, #7]
 8005c86:	b21b      	sxth	r3, r3
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	b21b      	sxth	r3, r3
 8005c8c:	833b      	strh	r3, [r7, #24]
	uint8_t  b_cnt = pdu->data[MB_PDU_CNT];
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	7a1b      	ldrb	r3, [r3, #8]
 8005c92:	75fb      	strb	r3, [r7, #23]

	if ((qty*2 != b_cnt) || ((b_cnt + 9) != pdu->len))
 8005c94:	8b3b      	ldrh	r3, [r7, #24]
 8005c96:	005a      	lsls	r2, r3, #1
 8005c98:	7dfb      	ldrb	r3, [r7, #23]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d105      	bne.n	8005caa <fc_write_multi_reg+0x5a>
 8005c9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ca0:	3309      	adds	r3, #9
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	8812      	ldrh	r2, [r2, #0]
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d001      	beq.n	8005cae <fc_write_multi_reg+0x5e>
		return MB_EXC_EXECUTE;
 8005caa:	2304      	movs	r3, #4
 8005cac:	e03b      	b.n	8005d26 <fc_write_multi_reg+0xd6>

	uint8_t* data = &pdu->data[7];
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	3309      	adds	r3, #9
 8005cb2:	613b      	str	r3, [r7, #16]
	uint16_t data_index = 0;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	83fb      	strh	r3, [r7, #30]
	for(uint8_t i = 0; i < qty; i++)
 8005cb8:	2300      	movs	r3, #0
 8005cba:	777b      	strb	r3, [r7, #29]
 8005cbc:	e02a      	b.n	8005d14 <fc_write_multi_reg+0xc4>
	{
		uint8_t hi = data[data_index++];
 8005cbe:	8bfb      	ldrh	r3, [r7, #30]
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	83fa      	strh	r2, [r7, #30]
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	4413      	add	r3, r2
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	73fb      	strb	r3, [r7, #15]
		uint8_t lo = data[data_index++];
 8005cce:	8bfb      	ldrh	r3, [r7, #30]
 8005cd0:	1c5a      	adds	r2, r3, #1
 8005cd2:	83fa      	strh	r2, [r7, #30]
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	4413      	add	r3, r2
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	73bb      	strb	r3, [r7, #14]
		uint16_t value = hi << 8 | lo;
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
 8005ce0:	021b      	lsls	r3, r3, #8
 8005ce2:	b21a      	sxth	r2, r3
 8005ce4:	7bbb      	ldrb	r3, [r7, #14]
 8005ce6:	b21b      	sxth	r3, r3
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	b21b      	sxth	r3, r3
 8005cec:	81bb      	strh	r3, [r7, #12]
		mb->data->reg_holding.set(&mb->data->reg_holding, addr + i, value);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 8005cfc:	f102 0034 	add.w	r0, r2, #52	; 0x34
 8005d00:	7f7a      	ldrb	r2, [r7, #29]
 8005d02:	b291      	uxth	r1, r2
 8005d04:	8b7a      	ldrh	r2, [r7, #26]
 8005d06:	440a      	add	r2, r1
 8005d08:	b291      	uxth	r1, r2
 8005d0a:	89ba      	ldrh	r2, [r7, #12]
 8005d0c:	4798      	blx	r3
	for(uint8_t i = 0; i < qty; i++)
 8005d0e:	7f7b      	ldrb	r3, [r7, #29]
 8005d10:	3301      	adds	r3, #1
 8005d12:	777b      	strb	r3, [r7, #29]
 8005d14:	7f7b      	ldrb	r3, [r7, #29]
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	8b3a      	ldrh	r2, [r7, #24]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d8cf      	bhi.n	8005cbe <fc_write_multi_reg+0x6e>
	 * | 1  | 1  |   2  |  2  |  2  |
	 * +----+----+------+-----+-----+
	 * len_min = 8
	 */

	pdu->len = 8;	// include CRC
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2208      	movs	r2, #8
 8005d22:	801a      	strh	r2, [r3, #0]

	return 0;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3720      	adds	r7, #32
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
	...

08005d30 <ring_buffer_init>:
static void     _get(ring_buffer_t *buf, uint8_t *obuf, uint16_t *buf_size);
static void     _flush(ring_buffer_t *buf);
static uint16_t _available(ring_buffer_t *buf);

void ring_buffer_init(ring_buffer_t *buf)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <ring_buffer_init+0x12>
 8005d3e:	f7fe fe4b 	bl	80049d8 <__mb_failure>
	buf->__tail      = 0;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	801a      	strh	r2, [r3, #0]
	buf->__head      = 0;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	805a      	strh	r2, [r3, #2]
	buf->__available = 0;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
	buf->overflow    = false;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	buf->add       = _add;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a09      	ldr	r2, [pc, #36]	; (8005d88 <ring_buffer_init+0x58>)
 8005d62:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	buf->get_data  = _get;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a08      	ldr	r2, [pc, #32]	; (8005d8c <ring_buffer_init+0x5c>)
 8005d6a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	buf->available = _available;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a07      	ldr	r2, [pc, #28]	; (8005d90 <ring_buffer_init+0x60>)
 8005d72:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	buf->flush     = _flush;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a06      	ldr	r2, [pc, #24]	; (8005d94 <ring_buffer_init+0x64>)
 8005d7a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8005d7e:	bf00      	nop
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	08005d99 	.word	0x08005d99
 8005d8c:	08005e5b 	.word	0x08005e5b
 8005d90:	08005f11 	.word	0x08005f11
 8005d94:	08005e25 	.word	0x08005e25

08005d98 <_add>:

void _add(ring_buffer_t *buf, uint8_t data)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	70fb      	strb	r3, [r7, #3]
	mb_assert(buf);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <_add+0x16>
 8005daa:	f7fe fe15 	bl	80049d8 <__mb_failure>
	if (buf->overflow)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d12e      	bne.n	8005e16 <_add+0x7e>
		return;

	buf->__data[buf->__head] = data;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	885b      	ldrh	r3, [r3, #2]
 8005dbc:	78fa      	ldrb	r2, [r7, #3]
 8005dbe:	b291      	uxth	r1, r2
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	005b      	lsls	r3, r3, #1
 8005dc4:	4413      	add	r3, r2
 8005dc6:	460a      	mov	r2, r1
 8005dc8:	809a      	strh	r2, [r3, #4]
	buf->__head = (buf->__head + 1) % RING_BUFFER_SIZE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	885b      	ldrh	r3, [r3, #2]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	425a      	negs	r2, r3
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	b2d2      	uxtb	r2, r2
 8005dd6:	bf58      	it	pl
 8005dd8:	4253      	negpl	r3, r2
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	805a      	strh	r2, [r3, #2]
	if (buf->__available >= RING_BUFFER_SIZE)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8005de6:	2bff      	cmp	r3, #255	; 0xff
 8005de8:	d908      	bls.n	8005dfc <_add+0x64>
	{
		buf->overflow = true;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		mb_log("Ring buffer overflow\n");
 8005df2:	490b      	ldr	r1, [pc, #44]	; (8005e20 <_add+0x88>)
 8005df4:	2000      	movs	r0, #0
 8005df6:	f000 ff3f 	bl	8006c78 <SEGGER_RTT_printf>
 8005dfa:	e00d      	b.n	8005e18 <_add+0x80>
	}
	else
	{
		buf->overflow = false;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		buf->__available++;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 8005e14:	e000      	b.n	8005e18 <_add+0x80>
		return;
 8005e16:	bf00      	nop
	}
}
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	08006e6c 	.word	0x08006e6c

08005e24 <_flush>:

void _flush(ring_buffer_t *buf)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <_flush+0x12>
 8005e32:	f7fe fdd1 	bl	80049d8 <__mb_failure>
	buf->__tail      = 0;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	801a      	strh	r2, [r3, #0]
	buf->__head      = 0;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	805a      	strh	r2, [r3, #2]
	buf->__available = 0;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
	buf->overflow    = false;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
}
 8005e52:	bf00      	nop
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <_get>:

void _get(ring_buffer_t *buf, uint8_t *data, uint16_t *data_size)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b086      	sub	sp, #24
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	60b9      	str	r1, [r7, #8]
 8005e64:	607a      	str	r2, [r7, #4]
	mb_assert(buf);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <_get+0x16>
 8005e6c:	f7fe fdb4 	bl	80049d8 <__mb_failure>
	mb_assert(data);
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <_get+0x20>
 8005e76:	f7fe fdaf 	bl	80049d8 <__mb_failure>
	mb_assert(*data_size);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	881b      	ldrh	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <_get+0x2c>
 8005e82:	f7fe fda9 	bl	80049d8 <__mb_failure>

	if (buf->__available == 0)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d103      	bne.n	8005e98 <_get+0x3e>
	{
		*data_size = 0;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	801a      	strh	r2, [r3, #0]
		return;
 8005e96:	e038      	b.n	8005f0a <_get+0xb0>
	}

	uint16_t len;
	len          = (buf->__available < *data_size) ? buf->__available : *data_size;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	881a      	ldrh	r2, [r3, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	bf28      	it	cs
 8005ea6:	4613      	movcs	r3, r2
 8005ea8:	82bb      	strh	r3, [r7, #20]
	*data_size   = len;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	8aba      	ldrh	r2, [r7, #20]
 8005eae:	801a      	strh	r2, [r3, #0]

	for (uint16_t i = 0; i < len; i++)
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	82fb      	strh	r3, [r7, #22]
 8005eb4:	e018      	b.n	8005ee8 <_get+0x8e>
	{
		data[i]     = buf->__data[buf->__tail];
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	4413      	add	r3, r2
 8005ec0:	8899      	ldrh	r1, [r3, #4]
 8005ec2:	8afb      	ldrh	r3, [r7, #22]
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	b2ca      	uxtb	r2, r1
 8005eca:	701a      	strb	r2, [r3, #0]
		buf->__tail = (buf->__tail + 1) % RING_BUFFER_SIZE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	881b      	ldrh	r3, [r3, #0]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	425a      	negs	r2, r3
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	bf58      	it	pl
 8005eda:	4253      	negpl	r3, r2
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < len; i++)
 8005ee2:	8afb      	ldrh	r3, [r7, #22]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	82fb      	strh	r3, [r7, #22]
 8005ee8:	8afa      	ldrh	r2, [r7, #22]
 8005eea:	8abb      	ldrh	r3, [r7, #20]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d3e2      	bcc.n	8005eb6 <_get+0x5c>
	}
	buf->__available = buf->__available - len;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f8b3 2204 	ldrh.w	r2, [r3, #516]	; 0x204
 8005ef6:	8abb      	ldrh	r3, [r7, #20]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
	buf->overflow    = false;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
}
 8005f0a:	3718      	adds	r7, #24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <_available>:

uint16_t _available(ring_buffer_t *buf)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
	return buf->__available;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
	...

08005f2c <mb_data_init>:
static uint8_t  input_db[MB_INPUT_NUM/8];
static uint16_t reg_input_db[MB_REG_INPUT_NUM];
static uint16_t reg_holding_db[MB_REG_HOLDING_NUM];

void mb_data_init(mb_data_t* mb_data)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
	mb_assert(mb_data);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <mb_data_init+0x12>
 8005f3a:	f7fe fd4d 	bl	80049d8 <__mb_failure>

	memset(coil_db       , 0, sizeof(coil_db));
 8005f3e:	22fa      	movs	r2, #250	; 0xfa
 8005f40:	2100      	movs	r1, #0
 8005f42:	481d      	ldr	r0, [pc, #116]	; (8005fb8 <mb_data_init+0x8c>)
 8005f44:	f000 fee2 	bl	8006d0c <memset>
	memset(input_db      , 0, sizeof(input_db));
 8005f48:	22fa      	movs	r2, #250	; 0xfa
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	481b      	ldr	r0, [pc, #108]	; (8005fbc <mb_data_init+0x90>)
 8005f4e:	f000 fedd 	bl	8006d0c <memset>
	memset(reg_input_db  , 0, sizeof(reg_input_db));
 8005f52:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005f56:	2100      	movs	r1, #0
 8005f58:	4819      	ldr	r0, [pc, #100]	; (8005fc0 <mb_data_init+0x94>)
 8005f5a:	f000 fed7 	bl	8006d0c <memset>
	memset(reg_holding_db, 0, sizeof(reg_holding_db));
 8005f5e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005f62:	2100      	movs	r1, #0
 8005f64:	4817      	ldr	r0, [pc, #92]	; (8005fc4 <mb_data_init+0x98>)
 8005f66:	f000 fed1 	bl	8006d0c <memset>

	mb_data_bit_init(&mb_data->coil       , coil_db       , MB_COIL_NUM);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005f72:	4911      	ldr	r1, [pc, #68]	; (8005fb8 <mb_data_init+0x8c>)
 8005f74:	4618      	mov	r0, r3
 8005f76:	f000 f833 	bl	8005fe0 <mb_data_bit_init>
	mb_data_bit_init(&mb_data->input      , input_db      , MB_INPUT_NUM);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	3314      	adds	r3, #20
 8005f7e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005f82:	490e      	ldr	r1, [pc, #56]	; (8005fbc <mb_data_init+0x90>)
 8005f84:	4618      	mov	r0, r3
 8005f86:	f000 f82b 	bl	8005fe0 <mb_data_bit_init>
	mb_data_reg_init(&mb_data->reg_input  , reg_input_db  , MB_REG_INPUT_NUM);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	3324      	adds	r3, #36	; 0x24
 8005f8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f92:	490b      	ldr	r1, [pc, #44]	; (8005fc0 <mb_data_init+0x94>)
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 f8c3 	bl	8006120 <mb_data_reg_init>
	mb_data_reg_init(&mb_data->reg_holding, reg_holding_db, MB_REG_HOLDING_NUM);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	3334      	adds	r3, #52	; 0x34
 8005f9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005fa2:	4908      	ldr	r1, [pc, #32]	; (8005fc4 <mb_data_init+0x98>)
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 f8bb 	bl	8006120 <mb_data_reg_init>

	mb_data->_is_init = true;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	701a      	strb	r2, [r3, #0]
}
 8005fb0:	bf00      	nop
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	20001c50 	.word	0x20001c50
 8005fbc:	20001d4c 	.word	0x20001d4c
 8005fc0:	20001e48 	.word	0x20001e48
 8005fc4:	20002618 	.word	0x20002618

08005fc8 <mb_data_is_init>:

bool mb_data_is_init(mb_data_t* mb_data)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
	return mb_data->_is_init;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <mb_data_bit_init>:

uint8_t _get_bit(mb_data_bit_t *bit, uint16_t addr);
void _set_bit(mb_data_bit_t *bit, uint16_t addr, uint8_t status);

void mb_data_bit_init(mb_data_bit_t *bit, uint8_t *data, uint16_t n_bit)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	4613      	mov	r3, r2
 8005fec:	80fb      	strh	r3, [r7, #6]
	mb_assert(bit);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <mb_data_bit_init+0x18>
 8005ff4:	f7fe fcf0 	bl	80049d8 <__mb_failure>
	mb_assert(data);
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <mb_data_bit_init+0x22>
 8005ffe:	f7fe fceb 	bl	80049d8 <__mb_failure>
	mb_assert(n_bit);
 8006002:	88fb      	ldrh	r3, [r7, #6]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <mb_data_bit_init+0x2c>
 8006008:	f7fe fce6 	bl	80049d8 <__mb_failure>

	bit->data = data;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	601a      	str	r2, [r3, #0]
	bit->nbit = n_bit;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	88fa      	ldrh	r2, [r7, #6]
 8006016:	809a      	strh	r2, [r3, #4]
	bit->get  = _get_bit;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	4a04      	ldr	r2, [pc, #16]	; (800602c <mb_data_bit_init+0x4c>)
 800601c:	60da      	str	r2, [r3, #12]
	bit->set  = _set_bit;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	4a03      	ldr	r2, [pc, #12]	; (8006030 <mb_data_bit_init+0x50>)
 8006022:	609a      	str	r2, [r3, #8]
}
 8006024:	bf00      	nop
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	08006035 	.word	0x08006035
 8006030:	0800608d 	.word	0x0800608d

08006034 <_get_bit>:

uint8_t _get_bit(mb_data_bit_t *bit, uint16_t addr)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	460b      	mov	r3, r1
 800603e:	807b      	strh	r3, [r7, #2]
	mb_assert(bit);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <_get_bit+0x16>
 8006046:	f7fe fcc7 	bl	80049d8 <__mb_failure>
	mb_assert(addr < bit->nbit);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	889b      	ldrh	r3, [r3, #4]
 800604e:	887a      	ldrh	r2, [r7, #2]
 8006050:	429a      	cmp	r2, r3
 8006052:	d301      	bcc.n	8006058 <_get_bit+0x24>
 8006054:	f7fe fcc0 	bl	80049d8 <__mb_failure>

	uint8_t byte_index = addr / 8;
 8006058:	887b      	ldrh	r3, [r7, #2]
 800605a:	08db      	lsrs	r3, r3, #3
 800605c:	b29b      	uxth	r3, r3
 800605e:	73fb      	strb	r3, [r7, #15]
	uint8_t bit_index  = addr % 8;
 8006060:	887b      	ldrh	r3, [r7, #2]
 8006062:	b2db      	uxtb	r3, r3
 8006064:	f003 0307 	and.w	r3, r3, #7
 8006068:	73bb      	strb	r3, [r7, #14]

	return (uint8_t)((bit->data[byte_index] >> bit_index) & 0x01);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	7bfb      	ldrb	r3, [r7, #15]
 8006070:	4413      	add	r3, r2
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	461a      	mov	r2, r3
 8006076:	7bbb      	ldrb	r3, [r7, #14]
 8006078:	fa42 f303 	asr.w	r3, r2, r3
 800607c:	b2db      	uxtb	r3, r3
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	b2db      	uxtb	r3, r3
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <_set_bit>:

void _set_bit(mb_data_bit_t *bit, uint16_t addr, uint8_t status)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	460b      	mov	r3, r1
 8006096:	807b      	strh	r3, [r7, #2]
 8006098:	4613      	mov	r3, r2
 800609a:	707b      	strb	r3, [r7, #1]
	mb_assert(bit);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <_set_bit+0x1a>
 80060a2:	f7fe fc99 	bl	80049d8 <__mb_failure>
	mb_assert(addr < bit->nbit);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	889b      	ldrh	r3, [r3, #4]
 80060aa:	887a      	ldrh	r2, [r7, #2]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d301      	bcc.n	80060b4 <_set_bit+0x28>
 80060b0:	f7fe fc92 	bl	80049d8 <__mb_failure>

	uint8_t byte_index = addr / 8;
 80060b4:	887b      	ldrh	r3, [r7, #2]
 80060b6:	08db      	lsrs	r3, r3, #3
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	73fb      	strb	r3, [r7, #15]
	uint8_t bit_index  = addr % 8;
 80060bc:	887b      	ldrh	r3, [r7, #2]
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	f003 0307 	and.w	r3, r3, #7
 80060c4:	73bb      	strb	r3, [r7, #14]

	uint8_t val = 1 << bit_index;
 80060c6:	7bbb      	ldrb	r3, [r7, #14]
 80060c8:	2201      	movs	r2, #1
 80060ca:	fa02 f303 	lsl.w	r3, r2, r3
 80060ce:	737b      	strb	r3, [r7, #13]
	if (status)
 80060d0:	787b      	ldrb	r3, [r7, #1]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00d      	beq.n	80060f2 <_set_bit+0x66>
		bit->data[byte_index] = (uint8_t)(bit->data[byte_index] | val);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	7bfb      	ldrb	r3, [r7, #15]
 80060dc:	4413      	add	r3, r2
 80060de:	7819      	ldrb	r1, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
 80060e6:	4413      	add	r3, r2
 80060e8:	7b7a      	ldrb	r2, [r7, #13]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	b2d2      	uxtb	r2, r2
 80060ee:	701a      	strb	r2, [r3, #0]
	else
		bit->data[byte_index] = (uint8_t)(bit->data[byte_index] & (~val));
}
 80060f0:	e011      	b.n	8006116 <_set_bit+0x8a>
		bit->data[byte_index] = (uint8_t)(bit->data[byte_index] & (~val));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	7bfb      	ldrb	r3, [r7, #15]
 80060f8:	4413      	add	r3, r2
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	b25a      	sxtb	r2, r3
 80060fe:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006102:	43db      	mvns	r3, r3
 8006104:	b25b      	sxtb	r3, r3
 8006106:	4013      	ands	r3, r2
 8006108:	b259      	sxtb	r1, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	7bfb      	ldrb	r3, [r7, #15]
 8006110:	4413      	add	r3, r2
 8006112:	b2ca      	uxtb	r2, r1
 8006114:	701a      	strb	r2, [r3, #0]
}
 8006116:	bf00      	nop
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
	...

08006120 <mb_data_reg_init>:

static void     _reg_set(mb_data_reg_t* reg, uint16_t addr, uint16_t value);
static uint16_t _reg_get(mb_data_reg_t* reg, uint16_t addr);

void mb_data_reg_init(mb_data_reg_t* reg, uint16_t* data, uint16_t nreg)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	4613      	mov	r3, r2
 800612c:	80fb      	strh	r3, [r7, #6]
	mb_assert(reg);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <mb_data_reg_init+0x18>
 8006134:	f7fe fc50 	bl	80049d8 <__mb_failure>
	mb_assert(data);
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <mb_data_reg_init+0x22>
 800613e:	f7fe fc4b 	bl	80049d8 <__mb_failure>
	mb_assert(nreg);
 8006142:	88fb      	ldrh	r3, [r7, #6]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <mb_data_reg_init+0x2c>
 8006148:	f7fe fc46 	bl	80049d8 <__mb_failure>

	reg->data = data;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	601a      	str	r2, [r3, #0]
	reg->nreg = nreg;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	88fa      	ldrh	r2, [r7, #6]
 8006156:	809a      	strh	r2, [r3, #4]
	reg->get  = _reg_get;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4a04      	ldr	r2, [pc, #16]	; (800616c <mb_data_reg_init+0x4c>)
 800615c:	60da      	str	r2, [r3, #12]
	reg->set  = _reg_set;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4a03      	ldr	r2, [pc, #12]	; (8006170 <mb_data_reg_init+0x50>)
 8006162:	609a      	str	r2, [r3, #8]
}
 8006164:	bf00      	nop
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	080061b3 	.word	0x080061b3
 8006170:	08006175 	.word	0x08006175

08006174 <_reg_set>:

static void _reg_set(mb_data_reg_t *reg, uint16_t addr, uint16_t value) {
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	460b      	mov	r3, r1
 800617e:	807b      	strh	r3, [r7, #2]
 8006180:	4613      	mov	r3, r2
 8006182:	803b      	strh	r3, [r7, #0]
	mb_assert(reg);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <_reg_set+0x1a>
 800618a:	f7fe fc25 	bl	80049d8 <__mb_failure>
	mb_assert(addr < reg->nreg);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	889b      	ldrh	r3, [r3, #4]
 8006192:	887a      	ldrh	r2, [r7, #2]
 8006194:	429a      	cmp	r2, r3
 8006196:	d301      	bcc.n	800619c <_reg_set+0x28>
 8006198:	f7fe fc1e 	bl	80049d8 <__mb_failure>
	reg->data[addr] = value;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	887b      	ldrh	r3, [r7, #2]
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	4413      	add	r3, r2
 80061a6:	883a      	ldrh	r2, [r7, #0]
 80061a8:	801a      	strh	r2, [r3, #0]
}
 80061aa:	bf00      	nop
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <_reg_get>:

static uint16_t _reg_get(mb_data_reg_t *reg, uint16_t addr) {
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b082      	sub	sp, #8
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	460b      	mov	r3, r1
 80061bc:	807b      	strh	r3, [r7, #2]
	mb_assert(reg);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d101      	bne.n	80061c8 <_reg_get+0x16>
 80061c4:	f7fe fc08 	bl	80049d8 <__mb_failure>
	mb_assert(addr < reg->nreg);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	889b      	ldrh	r3, [r3, #4]
 80061cc:	887a      	ldrh	r2, [r7, #2]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d301      	bcc.n	80061d6 <_reg_get+0x24>
 80061d2:	f7fe fc01 	bl	80049d8 <__mb_failure>
	
	return reg->data[addr];
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	887b      	ldrh	r3, [r7, #2]
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	4413      	add	r3, r2
 80061e0:	881b      	ldrh	r3, [r3, #0]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3708      	adds	r7, #8
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
	...

080061ec <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80061f2:	4b25      	ldr	r3, [pc, #148]	; (8006288 <_DoInit+0x9c>)
 80061f4:	603b      	str	r3, [r7, #0]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2203      	movs	r2, #3
 80061fa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	2203      	movs	r2, #3
 8006200:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	4a21      	ldr	r2, [pc, #132]	; (800628c <_DoInit+0xa0>)
 8006206:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	4a21      	ldr	r2, [pc, #132]	; (8006290 <_DoInit+0xa4>)
 800620c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006214:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2200      	movs	r2, #0
 800621a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	2200      	movs	r2, #0
 8006220:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2200      	movs	r2, #0
 8006226:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	4a18      	ldr	r2, [pc, #96]	; (800628c <_DoInit+0xa0>)
 800622c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	4a18      	ldr	r2, [pc, #96]	; (8006294 <_DoInit+0xa8>)
 8006232:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	2210      	movs	r2, #16
 8006238:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2200      	movs	r2, #0
 800623e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	2200      	movs	r2, #0
 8006244:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2200      	movs	r2, #0
 800624a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800624c:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8006250:	2300      	movs	r3, #0
 8006252:	607b      	str	r3, [r7, #4]
 8006254:	e00c      	b.n	8006270 <_DoInit+0x84>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f1c3 030f 	rsb	r3, r3, #15
 800625c:	4a0e      	ldr	r2, [pc, #56]	; (8006298 <_DoInit+0xac>)
 800625e:	5cd1      	ldrb	r1, [r2, r3]
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4413      	add	r3, r2
 8006266:	460a      	mov	r2, r1
 8006268:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	3301      	adds	r3, #1
 800626e:	607b      	str	r3, [r7, #4]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b0f      	cmp	r3, #15
 8006274:	d9ef      	bls.n	8006256 <_DoInit+0x6a>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8006276:	f3bf 8f5f 	dmb	sy
}
 800627a:	bf00      	nop
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	20002de8 	.word	0x20002de8
 800628c:	08006e84 	.word	0x08006e84
 8006290:	20002e90 	.word	0x20002e90
 8006294:	20003290 	.word	0x20003290
 8006298:	08006ee0 	.word	0x08006ee0

0800629c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800629c:	b580      	push	{r7, lr}
 800629e:	b08a      	sub	sp, #40	; 0x28
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80062a8:	2300      	movs	r3, #0
 80062aa:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80062b8:	69ba      	ldr	r2, [r7, #24]
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d905      	bls.n	80062cc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	3b01      	subs	r3, #1
 80062c8:	627b      	str	r3, [r7, #36]	; 0x24
 80062ca:	e007      	b.n	80062dc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	69b9      	ldr	r1, [r7, #24]
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	1acb      	subs	r3, r1, r3
 80062d6:	4413      	add	r3, r2
 80062d8:	3b01      	subs	r3, #1
 80062da:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e6:	4293      	cmp	r3, r2
 80062e8:	bf28      	it	cs
 80062ea:	4613      	movcs	r3, r2
 80062ec:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80062ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4293      	cmp	r3, r2
 80062f4:	bf28      	it	cs
 80062f6:	4613      	movcs	r3, r2
 80062f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	4413      	add	r3, r2
 8006302:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8006304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006306:	68b9      	ldr	r1, [r7, #8]
 8006308:	6978      	ldr	r0, [r7, #20]
 800630a:	f000 fcf1 	bl	8006cf0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800630e:	6a3a      	ldr	r2, [r7, #32]
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	4413      	add	r3, r2
 8006314:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	4413      	add	r3, r2
 800631c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8006326:	69fa      	ldr	r2, [r7, #28]
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	4413      	add	r3, r2
 800632c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	69fa      	ldr	r2, [r7, #28]
 8006334:	429a      	cmp	r2, r3
 8006336:	d101      	bne.n	800633c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8006338:	2300      	movs	r3, #0
 800633a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800633c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	69fa      	ldr	r2, [r7, #28]
 8006344:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1b2      	bne.n	80062b2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800634c:	6a3b      	ldr	r3, [r7, #32]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3728      	adds	r7, #40	; 0x28
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8006356:	b580      	push	{r7, lr}
 8006358:	b088      	sub	sp, #32
 800635a:	af00      	add	r7, sp, #0
 800635c:	60f8      	str	r0, [r7, #12]
 800635e:	60b9      	str	r1, [r7, #8]
 8006360:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	429a      	cmp	r2, r3
 8006378:	d911      	bls.n	800639e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	4413      	add	r3, r2
 8006382:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	68b9      	ldr	r1, [r7, #8]
 8006388:	6938      	ldr	r0, [r7, #16]
 800638a:	f000 fcb1 	bl	8006cf0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800638e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8006392:	69fa      	ldr	r2, [r7, #28]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	441a      	add	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800639c:	e01f      	b.n	80063de <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	4413      	add	r3, r2
 80063aa:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	68b9      	ldr	r1, [r7, #8]
 80063b0:	6938      	ldr	r0, [r7, #16]
 80063b2:	f000 fc9d 	bl	8006cf0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	4413      	add	r3, r2
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	4619      	mov	r1, r3
 80063ce:	6938      	ldr	r0, [r7, #16]
 80063d0:	f000 fc8e 	bl	8006cf0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80063d4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	60da      	str	r2, [r3, #12]
}
 80063de:	bf00      	nop
 80063e0:	3720      	adds	r7, #32
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80063e6:	b480      	push	{r7}
 80063e8:	b087      	sub	sp, #28
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d808      	bhi.n	8006414 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	689a      	ldr	r2, [r3, #8]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	1ad2      	subs	r2, r2, r3
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	4413      	add	r3, r2
 800640e:	3b01      	subs	r3, #1
 8006410:	617b      	str	r3, [r7, #20]
 8006412:	e004      	b.n	800641e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	3b01      	subs	r3, #1
 800641c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800641e:	697b      	ldr	r3, [r7, #20]
}
 8006420:	4618      	mov	r0, r3
 8006422:	371c      	adds	r7, #28
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800642c:	b580      	push	{r7, lr}
 800642e:	b088      	sub	sp, #32
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	1c5a      	adds	r2, r3, #1
 8006440:	4613      	mov	r3, r2
 8006442:	005b      	lsls	r3, r3, #1
 8006444:	4413      	add	r3, r2
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	4a1f      	ldr	r2, [pc, #124]	; (80064c8 <SEGGER_RTT_WriteNoLock+0x9c>)
 800644a:	4413      	add	r3, r2
 800644c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	2b02      	cmp	r3, #2
 8006454:	d029      	beq.n	80064aa <SEGGER_RTT_WriteNoLock+0x7e>
 8006456:	2b02      	cmp	r3, #2
 8006458:	d82e      	bhi.n	80064b8 <SEGGER_RTT_WriteNoLock+0x8c>
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <SEGGER_RTT_WriteNoLock+0x38>
 800645e:	2b01      	cmp	r3, #1
 8006460:	d013      	beq.n	800648a <SEGGER_RTT_WriteNoLock+0x5e>
 8006462:	e029      	b.n	80064b8 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006464:	6978      	ldr	r0, [r7, #20]
 8006466:	f7ff ffbe 	bl	80063e6 <_GetAvailWriteSpace>
 800646a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	429a      	cmp	r2, r3
 8006472:	d202      	bcs.n	800647a <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8006474:	2300      	movs	r3, #0
 8006476:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8006478:	e021      	b.n	80064be <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	69b9      	ldr	r1, [r7, #24]
 8006482:	6978      	ldr	r0, [r7, #20]
 8006484:	f7ff ff67 	bl	8006356 <_WriteNoCheck>
    break;
 8006488:	e019      	b.n	80064be <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800648a:	6978      	ldr	r0, [r7, #20]
 800648c:	f7ff ffab 	bl	80063e6 <_GetAvailWriteSpace>
 8006490:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	4293      	cmp	r3, r2
 8006498:	bf28      	it	cs
 800649a:	4613      	movcs	r3, r2
 800649c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800649e:	69fa      	ldr	r2, [r7, #28]
 80064a0:	69b9      	ldr	r1, [r7, #24]
 80064a2:	6978      	ldr	r0, [r7, #20]
 80064a4:	f7ff ff57 	bl	8006356 <_WriteNoCheck>
    break;
 80064a8:	e009      	b.n	80064be <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	69b9      	ldr	r1, [r7, #24]
 80064ae:	6978      	ldr	r0, [r7, #20]
 80064b0:	f7ff fef4 	bl	800629c <_WriteBlocking>
 80064b4:	61f8      	str	r0, [r7, #28]
    break;
 80064b6:	e002      	b.n	80064be <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80064b8:	2300      	movs	r3, #0
 80064ba:	61fb      	str	r3, [r7, #28]
    break;
 80064bc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80064be:	69fb      	ldr	r3, [r7, #28]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3720      	adds	r7, #32
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	20002de8 	.word	0x20002de8

080064cc <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b088      	sub	sp, #32
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80064d8:	4b0e      	ldr	r3, [pc, #56]	; (8006514 <SEGGER_RTT_Write+0x48>)
 80064da:	61fb      	str	r3, [r7, #28]
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <SEGGER_RTT_Write+0x1e>
 80064e6:	f7ff fe81 	bl	80061ec <_DoInit>
  SEGGER_RTT_LOCK();
 80064ea:	f3ef 8311 	mrs	r3, BASEPRI
 80064ee:	f04f 0120 	mov.w	r1, #32
 80064f2:	f381 8811 	msr	BASEPRI, r1
 80064f6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	68b9      	ldr	r1, [r7, #8]
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f7ff ff95 	bl	800642c <SEGGER_RTT_WriteNoLock>
 8006502:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800650a:	697b      	ldr	r3, [r7, #20]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3720      	adds	r7, #32
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	20002de8 	.word	0x20002de8

08006518 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006518:	b580      	push	{r7, lr}
 800651a:	b08a      	sub	sp, #40	; 0x28
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
 8006524:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_UP* pUp;

  INIT();
 8006526:	4b20      	ldr	r3, [pc, #128]	; (80065a8 <SEGGER_RTT_ConfigUpBuffer+0x90>)
 8006528:	623b      	str	r3, [r7, #32]
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <SEGGER_RTT_ConfigUpBuffer+0x20>
 8006534:	f7ff fe5a 	bl	80061ec <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006538:	4b1b      	ldr	r3, [pc, #108]	; (80065a8 <SEGGER_RTT_ConfigUpBuffer+0x90>)
 800653a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b02      	cmp	r3, #2
 8006540:	d82a      	bhi.n	8006598 <SEGGER_RTT_ConfigUpBuffer+0x80>
    SEGGER_RTT_LOCK();
 8006542:	f3ef 8311 	mrs	r3, BASEPRI
 8006546:	f04f 0120 	mov.w	r1, #32
 800654a:	f381 8811 	msr	BASEPRI, r1
 800654e:	61bb      	str	r3, [r7, #24]
    pUp = &pRTTCB->aUp[BufferIndex];
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	4613      	mov	r3, r2
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	4413      	add	r3, r2
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	69fa      	ldr	r2, [r7, #28]
 800655e:	4413      	add	r3, r2
 8006560:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00e      	beq.n	8006586 <SEGGER_RTT_ConfigUpBuffer+0x6e>
      pUp->sName        = sName;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	601a      	str	r2, [r3, #0]
      pUp->pBuffer      = (char*)pBuffer;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	605a      	str	r2, [r3, #4]
      pUp->SizeOfBuffer = BufferSize;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	609a      	str	r2, [r3, #8]
      pUp->RdOff        = 0u;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2200      	movs	r2, #0
 800657e:	611a      	str	r2, [r3, #16]
      pUp->WrOff        = 0u;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	2200      	movs	r2, #0
 8006584:	60da      	str	r2, [r3, #12]
    }
    pUp->Flags          = Flags;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800658a:	615a      	str	r2, [r3, #20]
    SEGGER_RTT_UNLOCK();
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8006592:	2300      	movs	r3, #0
 8006594:	627b      	str	r3, [r7, #36]	; 0x24
 8006596:	e002      	b.n	800659e <SEGGER_RTT_ConfigUpBuffer+0x86>
  } else {
    r = -1;
 8006598:	f04f 33ff 	mov.w	r3, #4294967295
 800659c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3728      	adds	r7, #40	; 0x28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	20002de8 	.word	0x20002de8

080065ac <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	460b      	mov	r3, r1
 80065b6:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	1c5a      	adds	r2, r3, #1
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d80e      	bhi.n	80065e8 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4413      	add	r3, r2
 80065d2:	78fa      	ldrb	r2, [r7, #3]
 80065d4:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	1c5a      	adds	r2, r3, #1
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	1c5a      	adds	r2, r3, #1
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d115      	bne.n	8006620 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6918      	ldr	r0, [r3, #16]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6819      	ldr	r1, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	461a      	mov	r2, r3
 8006602:	f7ff ff63 	bl	80064cc <SEGGER_RTT_Write>
 8006606:	4602      	mov	r2, r0
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	429a      	cmp	r2, r3
 800660e:	d004      	beq.n	800661a <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f04f 32ff 	mov.w	r2, #4294967295
 8006616:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8006618:	e002      	b.n	8006620 <_StoreChar+0x74>
      p->Cnt = 0u;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	609a      	str	r2, [r3, #8]
}
 8006620:	bf00      	nop
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8006628:	b580      	push	{r7, lr}
 800662a:	b08a      	sub	sp, #40	; 0x28
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
 8006634:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800663a:	2301      	movs	r3, #1
 800663c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800663e:	2301      	movs	r3, #1
 8006640:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006642:	e007      	b.n	8006654 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8006644:	6a3a      	ldr	r2, [r7, #32]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	fbb2 f3f3 	udiv	r3, r2, r3
 800664c:	623b      	str	r3, [r7, #32]
    Width++;
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	3301      	adds	r3, #1
 8006652:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006654:	6a3a      	ldr	r2, [r7, #32]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	429a      	cmp	r2, r3
 800665a:	d2f3      	bcs.n	8006644 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800665c:	683a      	ldr	r2, [r7, #0]
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	429a      	cmp	r2, r3
 8006662:	d901      	bls.n	8006668 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b00      	cmp	r3, #0
 8006670:	d125      	bne.n	80066be <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	2b00      	cmp	r3, #0
 8006676:	d022      	beq.n	80066be <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8006678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d005      	beq.n	800668e <_PrintUnsigned+0x66>
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d102      	bne.n	800668e <_PrintUnsigned+0x66>
        c = '0';
 8006688:	2330      	movs	r3, #48	; 0x30
 800668a:	76fb      	strb	r3, [r7, #27]
 800668c:	e001      	b.n	8006692 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800668e:	2320      	movs	r3, #32
 8006690:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006692:	e00b      	b.n	80066ac <_PrintUnsigned+0x84>
        FieldWidth--;
 8006694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006696:	3b01      	subs	r3, #1
 8006698:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800669a:	7efb      	ldrb	r3, [r7, #27]
 800669c:	4619      	mov	r1, r3
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f7ff ff84 	bl	80065ac <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	db07      	blt.n	80066bc <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80066ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d005      	beq.n	80066be <_PrintUnsigned+0x96>
 80066b2:	69fa      	ldr	r2, [r7, #28]
 80066b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d3ec      	bcc.n	8006694 <_PrintUnsigned+0x6c>
 80066ba:	e000      	b.n	80066be <_PrintUnsigned+0x96>
          break;
 80066bc:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	db55      	blt.n	8006772 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d903      	bls.n	80066d4 <_PrintUnsigned+0xac>
        NumDigits--;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	603b      	str	r3, [r7, #0]
 80066d2:	e009      	b.n	80066e8 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066dc:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d200      	bcs.n	80066e8 <_PrintUnsigned+0xc0>
          break;
 80066e6:	e005      	b.n	80066f4 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	fb02 f303 	mul.w	r3, r2, r3
 80066f0:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80066f2:	e7e8      	b.n	80066c6 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066fc:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006702:	fb02 f303 	mul.w	r3, r2, r3
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 800670c:	4a1b      	ldr	r2, [pc, #108]	; (800677c <_PrintUnsigned+0x154>)
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	4413      	add	r3, r2
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	4619      	mov	r1, r3
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f7ff ff48 	bl	80065ac <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	2b00      	cmp	r3, #0
 8006722:	db08      	blt.n	8006736 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8006724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	fbb2 f3f3 	udiv	r3, r2, r3
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1df      	bne.n	80066f4 <_PrintUnsigned+0xcc>
 8006734:	e000      	b.n	8006738 <_PrintUnsigned+0x110>
        break;
 8006736:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8006738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d017      	beq.n	8006772 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 8006742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006744:	2b00      	cmp	r3, #0
 8006746:	d014      	beq.n	8006772 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006748:	e00a      	b.n	8006760 <_PrintUnsigned+0x138>
          FieldWidth--;
 800674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674c:	3b01      	subs	r3, #1
 800674e:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 8006750:	2120      	movs	r1, #32
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f7ff ff2a 	bl	80065ac <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	2b00      	cmp	r3, #0
 800675e:	db07      	blt.n	8006770 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006762:	2b00      	cmp	r3, #0
 8006764:	d005      	beq.n	8006772 <_PrintUnsigned+0x14a>
 8006766:	69fa      	ldr	r2, [r7, #28]
 8006768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676a:	429a      	cmp	r2, r3
 800676c:	d3ed      	bcc.n	800674a <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 800676e:	e000      	b.n	8006772 <_PrintUnsigned+0x14a>
            break;
 8006770:	bf00      	nop
}
 8006772:	bf00      	nop
 8006774:	3728      	adds	r7, #40	; 0x28
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	08006ef4 	.word	0x08006ef4

08006780 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8006780:	b580      	push	{r7, lr}
 8006782:	b088      	sub	sp, #32
 8006784:	af02      	add	r7, sp, #8
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
 800678c:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	2b00      	cmp	r3, #0
 8006792:	bfb8      	it	lt
 8006794:	425b      	neglt	r3, r3
 8006796:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006798:	2301      	movs	r3, #1
 800679a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800679c:	e007      	b.n	80067ae <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80067a6:	613b      	str	r3, [r7, #16]
    Width++;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	3301      	adds	r3, #1
 80067ac:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	daf3      	bge.n	800679e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80067b6:	683a      	ldr	r2, [r7, #0]
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d901      	bls.n	80067c2 <_PrintInt+0x42>
    Width = NumDigits;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80067c2:	6a3b      	ldr	r3, [r7, #32]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00a      	beq.n	80067de <_PrintInt+0x5e>
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	db04      	blt.n	80067d8 <_PrintInt+0x58>
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	f003 0304 	and.w	r3, r3, #4
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d002      	beq.n	80067de <_PrintInt+0x5e>
    FieldWidth--;
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	3b01      	subs	r3, #1
 80067dc:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	f003 0302 	and.w	r3, r3, #2
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d002      	beq.n	80067ee <_PrintInt+0x6e>
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d01c      	beq.n	8006828 <_PrintInt+0xa8>
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	f003 0301 	and.w	r3, r3, #1
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d117      	bne.n	8006828 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d014      	beq.n	8006828 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80067fe:	e00a      	b.n	8006816 <_PrintInt+0x96>
        FieldWidth--;
 8006800:	6a3b      	ldr	r3, [r7, #32]
 8006802:	3b01      	subs	r3, #1
 8006804:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8006806:	2120      	movs	r1, #32
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f7ff fecf 	bl	80065ac <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	2b00      	cmp	r3, #0
 8006814:	db07      	blt.n	8006826 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006816:	6a3b      	ldr	r3, [r7, #32]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d005      	beq.n	8006828 <_PrintInt+0xa8>
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	429a      	cmp	r2, r3
 8006822:	d3ed      	bcc.n	8006800 <_PrintInt+0x80>
 8006824:	e000      	b.n	8006828 <_PrintInt+0xa8>
          break;
 8006826:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	2b00      	cmp	r3, #0
 800682e:	db4a      	blt.n	80068c6 <_PrintInt+0x146>
    if (v < 0) {
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	2b00      	cmp	r3, #0
 8006834:	da07      	bge.n	8006846 <_PrintInt+0xc6>
      v = -v;
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	425b      	negs	r3, r3
 800683a:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 800683c:	212d      	movs	r1, #45	; 0x2d
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f7ff feb4 	bl	80065ac <_StoreChar>
 8006844:	e008      	b.n	8006858 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	2b00      	cmp	r3, #0
 800684e:	d003      	beq.n	8006858 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 8006850:	212b      	movs	r1, #43	; 0x2b
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f7ff feaa 	bl	80065ac <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	2b00      	cmp	r3, #0
 800685e:	db32      	blt.n	80068c6 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d01f      	beq.n	80068aa <_PrintInt+0x12a>
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	d11a      	bne.n	80068aa <_PrintInt+0x12a>
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d117      	bne.n	80068aa <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d014      	beq.n	80068aa <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006880:	e00a      	b.n	8006898 <_PrintInt+0x118>
            FieldWidth--;
 8006882:	6a3b      	ldr	r3, [r7, #32]
 8006884:	3b01      	subs	r3, #1
 8006886:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8006888:	2130      	movs	r1, #48	; 0x30
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f7ff fe8e 	bl	80065ac <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	2b00      	cmp	r3, #0
 8006896:	db07      	blt.n	80068a8 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d005      	beq.n	80068aa <_PrintInt+0x12a>
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d3ed      	bcc.n	8006882 <_PrintInt+0x102>
 80068a6:	e000      	b.n	80068aa <_PrintInt+0x12a>
              break;
 80068a8:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	db09      	blt.n	80068c6 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 80068b2:	68b9      	ldr	r1, [r7, #8]
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	9301      	str	r3, [sp, #4]
 80068b8:	6a3b      	ldr	r3, [r7, #32]
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f7ff feb1 	bl	8006628 <_PrintUnsigned>
      }
    }
  }
}
 80068c6:	bf00      	nop
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
	...

080068d0 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b0a2      	sub	sp, #136	; 0x88
 80068d4:	af02      	add	r7, sp, #8
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 80068dc:	f107 0310 	add.w	r3, r7, #16
 80068e0:	653b      	str	r3, [r7, #80]	; 0x50
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 80068e2:	2340      	movs	r3, #64	; 0x40
 80068e4:	657b      	str	r3, [r7, #84]	; 0x54
  BufferDesc.Cnt            = 0u;
 80068e6:	2300      	movs	r3, #0
 80068e8:	65bb      	str	r3, [r7, #88]	; 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	663b      	str	r3, [r7, #96]	; 0x60
  BufferDesc.ReturnValue    = 0;
 80068ee:	2300      	movs	r3, #0
 80068f0:	65fb      	str	r3, [r7, #92]	; 0x5c

  do {
    c = *sFormat;
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    sFormat++;
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	3301      	adds	r3, #1
 80068fe:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8006900:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 819f 	beq.w	8006c48 <SEGGER_RTT_vprintf+0x378>
      break;
    }
    if (c == '%') {
 800690a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800690e:	2b25      	cmp	r3, #37	; 0x25
 8006910:	f040 818d 	bne.w	8006c2e <SEGGER_RTT_vprintf+0x35e>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006914:	2300      	movs	r3, #0
 8006916:	673b      	str	r3, [r7, #112]	; 0x70
      v = 1;
 8006918:	2301      	movs	r3, #1
 800691a:	67bb      	str	r3, [r7, #120]	; 0x78
      do {
        c = *sFormat;
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        switch (c) {
 8006924:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006928:	3b23      	subs	r3, #35	; 0x23
 800692a:	2b0d      	cmp	r3, #13
 800692c:	d83e      	bhi.n	80069ac <SEGGER_RTT_vprintf+0xdc>
 800692e:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <SEGGER_RTT_vprintf+0x64>)
 8006930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006934:	0800699d 	.word	0x0800699d
 8006938:	080069ad 	.word	0x080069ad
 800693c:	080069ad 	.word	0x080069ad
 8006940:	080069ad 	.word	0x080069ad
 8006944:	080069ad 	.word	0x080069ad
 8006948:	080069ad 	.word	0x080069ad
 800694c:	080069ad 	.word	0x080069ad
 8006950:	080069ad 	.word	0x080069ad
 8006954:	0800698d 	.word	0x0800698d
 8006958:	080069ad 	.word	0x080069ad
 800695c:	0800696d 	.word	0x0800696d
 8006960:	080069ad 	.word	0x080069ad
 8006964:	080069ad 	.word	0x080069ad
 8006968:	0800697d 	.word	0x0800697d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800696c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800696e:	f043 0301 	orr.w	r3, r3, #1
 8006972:	673b      	str	r3, [r7, #112]	; 0x70
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	3301      	adds	r3, #1
 8006978:	60bb      	str	r3, [r7, #8]
 800697a:	e01a      	b.n	80069b2 <SEGGER_RTT_vprintf+0xe2>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800697c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800697e:	f043 0302 	orr.w	r3, r3, #2
 8006982:	673b      	str	r3, [r7, #112]	; 0x70
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	3301      	adds	r3, #1
 8006988:	60bb      	str	r3, [r7, #8]
 800698a:	e012      	b.n	80069b2 <SEGGER_RTT_vprintf+0xe2>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800698c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800698e:	f043 0304 	orr.w	r3, r3, #4
 8006992:	673b      	str	r3, [r7, #112]	; 0x70
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	3301      	adds	r3, #1
 8006998:	60bb      	str	r3, [r7, #8]
 800699a:	e00a      	b.n	80069b2 <SEGGER_RTT_vprintf+0xe2>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800699c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800699e:	f043 0308 	orr.w	r3, r3, #8
 80069a2:	673b      	str	r3, [r7, #112]	; 0x70
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	3301      	adds	r3, #1
 80069a8:	60bb      	str	r3, [r7, #8]
 80069aa:	e002      	b.n	80069b2 <SEGGER_RTT_vprintf+0xe2>
        default:  v = 0; break;
 80069ac:	2300      	movs	r3, #0
 80069ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80069b0:	bf00      	nop
        }
      } while (v);
 80069b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1b1      	bne.n	800691c <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80069b8:	2300      	movs	r3, #0
 80069ba:	66fb      	str	r3, [r7, #108]	; 0x6c
      do {
        c = *sFormat;
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c < '0') || (c > '9')) {
 80069c4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80069c8:	2b2f      	cmp	r3, #47	; 0x2f
 80069ca:	d912      	bls.n	80069f2 <SEGGER_RTT_vprintf+0x122>
 80069cc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80069d0:	2b39      	cmp	r3, #57	; 0x39
 80069d2:	d80e      	bhi.n	80069f2 <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	3301      	adds	r3, #1
 80069d8:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 80069da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80069dc:	4613      	mov	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	005b      	lsls	r3, r3, #1
 80069e4:	461a      	mov	r2, r3
 80069e6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80069ea:	4413      	add	r3, r2
 80069ec:	3b30      	subs	r3, #48	; 0x30
 80069ee:	66fb      	str	r3, [r7, #108]	; 0x6c
        c = *sFormat;
 80069f0:	e7e4      	b.n	80069bc <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80069f2:	2300      	movs	r3, #0
 80069f4:	677b      	str	r3, [r7, #116]	; 0x74
      c = *sFormat;
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      if (c == '.') {
 80069fe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006a02:	2b2e      	cmp	r3, #46	; 0x2e
 8006a04:	d11d      	bne.n	8006a42 <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
          if ((c < '0') || (c > '9')) {
 8006a14:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006a18:	2b2f      	cmp	r3, #47	; 0x2f
 8006a1a:	d912      	bls.n	8006a42 <SEGGER_RTT_vprintf+0x172>
 8006a1c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006a20:	2b39      	cmp	r3, #57	; 0x39
 8006a22:	d80e      	bhi.n	8006a42 <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	3301      	adds	r3, #1
 8006a28:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 8006a2a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4413      	add	r3, r2
 8006a32:	005b      	lsls	r3, r3, #1
 8006a34:	461a      	mov	r2, r3
 8006a36:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006a3a:	4413      	add	r3, r2
 8006a3c:	3b30      	subs	r3, #48	; 0x30
 8006a3e:	677b      	str	r3, [r7, #116]	; 0x74
          c = *sFormat;
 8006a40:	e7e4      	b.n	8006a0c <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 8006a4a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006a4e:	2b6c      	cmp	r3, #108	; 0x6c
 8006a50:	d003      	beq.n	8006a5a <SEGGER_RTT_vprintf+0x18a>
 8006a52:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006a56:	2b68      	cmp	r3, #104	; 0x68
 8006a58:	d107      	bne.n	8006a6a <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c == 'l') || (c == 'h')) {
 8006a68:	e7ef      	b.n	8006a4a <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006a6a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006a6e:	2b25      	cmp	r3, #37	; 0x25
 8006a70:	f000 80d1 	beq.w	8006c16 <SEGGER_RTT_vprintf+0x346>
 8006a74:	2b25      	cmp	r3, #37	; 0x25
 8006a76:	f2c0 80d5 	blt.w	8006c24 <SEGGER_RTT_vprintf+0x354>
 8006a7a:	2b78      	cmp	r3, #120	; 0x78
 8006a7c:	f300 80d2 	bgt.w	8006c24 <SEGGER_RTT_vprintf+0x354>
 8006a80:	2b58      	cmp	r3, #88	; 0x58
 8006a82:	f2c0 80cf 	blt.w	8006c24 <SEGGER_RTT_vprintf+0x354>
 8006a86:	3b58      	subs	r3, #88	; 0x58
 8006a88:	2b20      	cmp	r3, #32
 8006a8a:	f200 80cb 	bhi.w	8006c24 <SEGGER_RTT_vprintf+0x354>
 8006a8e:	a201      	add	r2, pc, #4	; (adr r2, 8006a94 <SEGGER_RTT_vprintf+0x1c4>)
 8006a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a94:	08006b8b 	.word	0x08006b8b
 8006a98:	08006c25 	.word	0x08006c25
 8006a9c:	08006c25 	.word	0x08006c25
 8006aa0:	08006c25 	.word	0x08006c25
 8006aa4:	08006c25 	.word	0x08006c25
 8006aa8:	08006c25 	.word	0x08006c25
 8006aac:	08006c25 	.word	0x08006c25
 8006ab0:	08006c25 	.word	0x08006c25
 8006ab4:	08006c25 	.word	0x08006c25
 8006ab8:	08006c25 	.word	0x08006c25
 8006abc:	08006c25 	.word	0x08006c25
 8006ac0:	08006b19 	.word	0x08006b19
 8006ac4:	08006b3f 	.word	0x08006b3f
 8006ac8:	08006c25 	.word	0x08006c25
 8006acc:	08006c25 	.word	0x08006c25
 8006ad0:	08006c25 	.word	0x08006c25
 8006ad4:	08006c25 	.word	0x08006c25
 8006ad8:	08006c25 	.word	0x08006c25
 8006adc:	08006c25 	.word	0x08006c25
 8006ae0:	08006c25 	.word	0x08006c25
 8006ae4:	08006c25 	.word	0x08006c25
 8006ae8:	08006c25 	.word	0x08006c25
 8006aec:	08006c25 	.word	0x08006c25
 8006af0:	08006c25 	.word	0x08006c25
 8006af4:	08006bf1 	.word	0x08006bf1
 8006af8:	08006c25 	.word	0x08006c25
 8006afc:	08006c25 	.word	0x08006c25
 8006b00:	08006bb1 	.word	0x08006bb1
 8006b04:	08006c25 	.word	0x08006c25
 8006b08:	08006b65 	.word	0x08006b65
 8006b0c:	08006c25 	.word	0x08006c25
 8006b10:	08006c25 	.word	0x08006c25
 8006b14:	08006b8b 	.word	0x08006b8b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	1d19      	adds	r1, r3, #4
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	6011      	str	r1, [r2, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	67bb      	str	r3, [r7, #120]	; 0x78
        c0 = (char)v;
 8006b26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        _StoreChar(&BufferDesc, c0);
 8006b2c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8006b30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006b34:	4611      	mov	r1, r2
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7ff fd38 	bl	80065ac <_StoreChar>
        break;
 8006b3c:	e073      	b.n	8006c26 <SEGGER_RTT_vprintf+0x356>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	1d19      	adds	r1, r3, #4
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	6011      	str	r1, [r2, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006b4c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8006b50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b52:	9301      	str	r3, [sp, #4]
 8006b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b5a:	220a      	movs	r2, #10
 8006b5c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006b5e:	f7ff fe0f 	bl	8006780 <_PrintInt>
        break;
 8006b62:	e060      	b.n	8006c26 <SEGGER_RTT_vprintf+0x356>
      case 'u':
        v = va_arg(*pParamList, int);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	1d19      	adds	r1, r3, #4
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	6011      	str	r1, [r2, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006b72:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006b74:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8006b78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b7a:	9301      	str	r3, [sp, #4]
 8006b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b82:	220a      	movs	r2, #10
 8006b84:	f7ff fd50 	bl	8006628 <_PrintUnsigned>
        break;
 8006b88:	e04d      	b.n	8006c26 <SEGGER_RTT_vprintf+0x356>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	1d19      	adds	r1, r3, #4
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	6011      	str	r1, [r2, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006b98:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006b9a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8006b9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ba0:	9301      	str	r3, [sp, #4]
 8006ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ba8:	2210      	movs	r2, #16
 8006baa:	f7ff fd3d 	bl	8006628 <_PrintUnsigned>
        break;
 8006bae:	e03a      	b.n	8006c26 <SEGGER_RTT_vprintf+0x356>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	1d19      	adds	r1, r3, #4
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	6011      	str	r1, [r2, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	66bb      	str	r3, [r7, #104]	; 0x68
          do {
            c = *s;
 8006bbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            s++;
 8006bc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006bc8:	3301      	adds	r3, #1
 8006bca:	66bb      	str	r3, [r7, #104]	; 0x68
            if (c == '\0') {
 8006bcc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00b      	beq.n	8006bec <SEGGER_RTT_vprintf+0x31c>
              break;
            }
           _StoreChar(&BufferDesc, c);
 8006bd4:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8006bd8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006bdc:	4611      	mov	r1, r2
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7ff fce4 	bl	80065ac <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8006be4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	dae9      	bge.n	8006bbe <SEGGER_RTT_vprintf+0x2ee>
        }
        break;
 8006bea:	e01c      	b.n	8006c26 <SEGGER_RTT_vprintf+0x356>
              break;
 8006bec:	bf00      	nop
        break;
 8006bee:	e01a      	b.n	8006c26 <SEGGER_RTT_vprintf+0x356>
      case 'p':
        v = va_arg(*pParamList, int);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	1d19      	adds	r1, r3, #4
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	6011      	str	r1, [r2, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8006bfe:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006c00:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8006c04:	2300      	movs	r3, #0
 8006c06:	9301      	str	r3, [sp, #4]
 8006c08:	2308      	movs	r3, #8
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	2308      	movs	r3, #8
 8006c0e:	2210      	movs	r2, #16
 8006c10:	f7ff fd0a 	bl	8006628 <_PrintUnsigned>
        break;
 8006c14:	e007      	b.n	8006c26 <SEGGER_RTT_vprintf+0x356>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006c16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006c1a:	2125      	movs	r1, #37	; 0x25
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7ff fcc5 	bl	80065ac <_StoreChar>
        break;
 8006c22:	e000      	b.n	8006c26 <SEGGER_RTT_vprintf+0x356>
      default:
        break;
 8006c24:	bf00      	nop
      }
      sFormat++;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	60bb      	str	r3, [r7, #8]
 8006c2c:	e007      	b.n	8006c3e <SEGGER_RTT_vprintf+0x36e>
    } else {
      _StoreChar(&BufferDesc, c);
 8006c2e:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8006c32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006c36:	4611      	mov	r1, r2
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7ff fcb7 	bl	80065ac <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8006c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f6bf ae56 	bge.w	80068f2 <SEGGER_RTT_vprintf+0x22>
 8006c46:	e000      	b.n	8006c4a <SEGGER_RTT_vprintf+0x37a>
      break;
 8006c48:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8006c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	dd0d      	ble.n	8006c6c <SEGGER_RTT_vprintf+0x39c>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8006c50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d006      	beq.n	8006c64 <SEGGER_RTT_vprintf+0x394>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8006c56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c58:	f107 0310 	add.w	r3, r7, #16
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f7ff fc34 	bl	80064cc <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8006c64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c68:	4413      	add	r3, r2
 8006c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
  }
  return BufferDesc.ReturnValue;
 8006c6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3780      	adds	r7, #128	; 0x80
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop

08006c78 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8006c78:	b40e      	push	{r1, r2, r3}
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b085      	sub	sp, #20
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8006c82:	f107 0320 	add.w	r3, r7, #32
 8006c86:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8006c88:	f107 0308 	add.w	r3, r7, #8
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	69f9      	ldr	r1, [r7, #28]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7ff fe1d 	bl	80068d0 <SEGGER_RTT_vprintf>
 8006c96:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8006c98:	68fb      	ldr	r3, [r7, #12]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ca4:	b003      	add	sp, #12
 8006ca6:	4770      	bx	lr

08006ca8 <__libc_init_array>:
 8006ca8:	b570      	push	{r4, r5, r6, lr}
 8006caa:	4d0d      	ldr	r5, [pc, #52]	; (8006ce0 <__libc_init_array+0x38>)
 8006cac:	4c0d      	ldr	r4, [pc, #52]	; (8006ce4 <__libc_init_array+0x3c>)
 8006cae:	1b64      	subs	r4, r4, r5
 8006cb0:	10a4      	asrs	r4, r4, #2
 8006cb2:	2600      	movs	r6, #0
 8006cb4:	42a6      	cmp	r6, r4
 8006cb6:	d109      	bne.n	8006ccc <__libc_init_array+0x24>
 8006cb8:	4d0b      	ldr	r5, [pc, #44]	; (8006ce8 <__libc_init_array+0x40>)
 8006cba:	4c0c      	ldr	r4, [pc, #48]	; (8006cec <__libc_init_array+0x44>)
 8006cbc:	f000 f82e 	bl	8006d1c <_init>
 8006cc0:	1b64      	subs	r4, r4, r5
 8006cc2:	10a4      	asrs	r4, r4, #2
 8006cc4:	2600      	movs	r6, #0
 8006cc6:	42a6      	cmp	r6, r4
 8006cc8:	d105      	bne.n	8006cd6 <__libc_init_array+0x2e>
 8006cca:	bd70      	pop	{r4, r5, r6, pc}
 8006ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd0:	4798      	blx	r3
 8006cd2:	3601      	adds	r6, #1
 8006cd4:	e7ee      	b.n	8006cb4 <__libc_init_array+0xc>
 8006cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cda:	4798      	blx	r3
 8006cdc:	3601      	adds	r6, #1
 8006cde:	e7f2      	b.n	8006cc6 <__libc_init_array+0x1e>
 8006ce0:	08006f0c 	.word	0x08006f0c
 8006ce4:	08006f0c 	.word	0x08006f0c
 8006ce8:	08006f0c 	.word	0x08006f0c
 8006cec:	08006f10 	.word	0x08006f10

08006cf0 <memcpy>:
 8006cf0:	440a      	add	r2, r1
 8006cf2:	4291      	cmp	r1, r2
 8006cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cf8:	d100      	bne.n	8006cfc <memcpy+0xc>
 8006cfa:	4770      	bx	lr
 8006cfc:	b510      	push	{r4, lr}
 8006cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d06:	4291      	cmp	r1, r2
 8006d08:	d1f9      	bne.n	8006cfe <memcpy+0xe>
 8006d0a:	bd10      	pop	{r4, pc}

08006d0c <memset>:
 8006d0c:	4402      	add	r2, r0
 8006d0e:	4603      	mov	r3, r0
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d100      	bne.n	8006d16 <memset+0xa>
 8006d14:	4770      	bx	lr
 8006d16:	f803 1b01 	strb.w	r1, [r3], #1
 8006d1a:	e7f9      	b.n	8006d10 <memset+0x4>

08006d1c <_init>:
 8006d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d1e:	bf00      	nop
 8006d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d22:	bc08      	pop	{r3}
 8006d24:	469e      	mov	lr, r3
 8006d26:	4770      	bx	lr

08006d28 <_fini>:
 8006d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2a:	bf00      	nop
 8006d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d2e:	bc08      	pop	{r3}
 8006d30:	469e      	mov	lr, r3
 8006d32:	4770      	bx	lr
