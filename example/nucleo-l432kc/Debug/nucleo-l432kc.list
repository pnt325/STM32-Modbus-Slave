
nucleo-l432kc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c4c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08005dd8  08005dd8  00015dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e28  08005e28  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e28  08005e28  00015e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e30  08005e30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e30  08005e30  00015e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e34  08005e34  00015e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f98  2000000c  08005e44  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fa4  08005e44  00020fa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e2f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000313b  00000000  00000000  00034e6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  00037fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001058  00000000  00000000  00039170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021af3  00000000  00000000  0003a1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169af  00000000  00000000  0005bcbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc035  00000000  00000000  0007266a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013e69f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000475c  00000000  00000000  0013e6f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005dc0 	.word	0x08005dc0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08005dc0 	.word	0x08005dc0

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 030c 	add.w	r3, r7, #12
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	4b1d      	ldr	r3, [pc, #116]	; (800055c <MX_GPIO_Init+0x8c>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	4a1c      	ldr	r2, [pc, #112]	; (800055c <MX_GPIO_Init+0x8c>)
 80004ec:	f043 0304 	orr.w	r3, r3, #4
 80004f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004f2:	4b1a      	ldr	r3, [pc, #104]	; (800055c <MX_GPIO_Init+0x8c>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	f003 0304 	and.w	r3, r3, #4
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fe:	4b17      	ldr	r3, [pc, #92]	; (800055c <MX_GPIO_Init+0x8c>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	4a16      	ldr	r2, [pc, #88]	; (800055c <MX_GPIO_Init+0x8c>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800050a:	4b14      	ldr	r3, [pc, #80]	; (800055c <MX_GPIO_Init+0x8c>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <MX_GPIO_Init+0x8c>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	4a10      	ldr	r2, [pc, #64]	; (800055c <MX_GPIO_Init+0x8c>)
 800051c:	f043 0302 	orr.w	r3, r3, #2
 8000520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <MX_GPIO_Init+0x8c>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	f003 0302 	and.w	r3, r3, #2
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	2108      	movs	r1, #8
 8000532:	480b      	ldr	r0, [pc, #44]	; (8000560 <MX_GPIO_Init+0x90>)
 8000534:	f000 fdde 	bl	80010f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000538:	2308      	movs	r3, #8
 800053a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053c:	2301      	movs	r3, #1
 800053e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000544:	2300      	movs	r3, #0
 8000546:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	4619      	mov	r1, r3
 800054e:	4804      	ldr	r0, [pc, #16]	; (8000560 <MX_GPIO_Init+0x90>)
 8000550:	f000 fc66 	bl	8000e20 <HAL_GPIO_Init>

}
 8000554:	bf00      	nop
 8000556:	3720      	adds	r7, #32
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40021000 	.word	0x40021000
 8000560:	48000400 	.word	0x48000400

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000568:	f000 fa55 	bl	8000a16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056c:	f000 f84b 	bl	8000606 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000570:	f7ff ffae 	bl	80004d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000574:	f000 f984 	bl	8000880 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000578:	f000 f910 	bl	800079c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  bsp_mb_slave_init();
 800057c:	f004 f836 	bl	80045ec <bsp_mb_slave_init>

	// Update coil status
	bsp_mb_coil_set(0, 1);
 8000580:	2101      	movs	r1, #1
 8000582:	2000      	movs	r0, #0
 8000584:	f004 f854 	bl	8004630 <bsp_mb_coil_set>
	bsp_mb_coil_set(1, 0);
 8000588:	2100      	movs	r1, #0
 800058a:	2001      	movs	r0, #1
 800058c:	f004 f850 	bl	8004630 <bsp_mb_coil_set>
	bsp_mb_coil_set(2, 1);
 8000590:	2101      	movs	r1, #1
 8000592:	2002      	movs	r0, #2
 8000594:	f004 f84c 	bl	8004630 <bsp_mb_coil_set>
	bsp_mb_coil_set(3, 0);
 8000598:	2100      	movs	r1, #0
 800059a:	2003      	movs	r0, #3
 800059c:	f004 f848 	bl	8004630 <bsp_mb_coil_set>

	// Update input register
	bsp_mb_discrete_input_set(0, 0);
 80005a0:	2100      	movs	r1, #0
 80005a2:	2000      	movs	r0, #0
 80005a4:	f004 f85c 	bl	8004660 <bsp_mb_discrete_input_set>
	bsp_mb_discrete_input_set(0, 1);
 80005a8:	2101      	movs	r1, #1
 80005aa:	2000      	movs	r0, #0
 80005ac:	f004 f858 	bl	8004660 <bsp_mb_discrete_input_set>
	bsp_mb_discrete_input_set(0, 0);
 80005b0:	2100      	movs	r1, #0
 80005b2:	2000      	movs	r0, #0
 80005b4:	f004 f854 	bl	8004660 <bsp_mb_discrete_input_set>
	bsp_mb_discrete_input_set(0, 1);
 80005b8:	2101      	movs	r1, #1
 80005ba:	2000      	movs	r0, #0
 80005bc:	f004 f850 	bl	8004660 <bsp_mb_discrete_input_set>

	// Update input register
	bsp_mb_input_reg_set(0, 1);
 80005c0:	2101      	movs	r1, #1
 80005c2:	2000      	movs	r0, #0
 80005c4:	f004 f864 	bl	8004690 <bsp_mb_input_reg_set>
	bsp_mb_input_reg_set(1, 2);
 80005c8:	2102      	movs	r1, #2
 80005ca:	2001      	movs	r0, #1
 80005cc:	f004 f860 	bl	8004690 <bsp_mb_input_reg_set>
	bsp_mb_input_reg_set(2, 3);
 80005d0:	2103      	movs	r1, #3
 80005d2:	2002      	movs	r0, #2
 80005d4:	f004 f85c 	bl	8004690 <bsp_mb_input_reg_set>
	bsp_mb_input_reg_set(3, 4);
 80005d8:	2104      	movs	r1, #4
 80005da:	2003      	movs	r0, #3
 80005dc:	f004 f858 	bl	8004690 <bsp_mb_input_reg_set>

	// Update holding register
	bsp_mb_holding_reg_set(0, 5);
 80005e0:	2105      	movs	r1, #5
 80005e2:	2000      	movs	r0, #0
 80005e4:	f004 f86c 	bl	80046c0 <bsp_mb_holding_reg_set>
	bsp_mb_holding_reg_set(1, 6);
 80005e8:	2106      	movs	r1, #6
 80005ea:	2001      	movs	r0, #1
 80005ec:	f004 f868 	bl	80046c0 <bsp_mb_holding_reg_set>
	bsp_mb_holding_reg_set(2, 7);
 80005f0:	2107      	movs	r1, #7
 80005f2:	2002      	movs	r0, #2
 80005f4:	f004 f864 	bl	80046c0 <bsp_mb_holding_reg_set>
	bsp_mb_holding_reg_set(3, 8);
 80005f8:	2108      	movs	r1, #8
 80005fa:	2003      	movs	r0, #3
 80005fc:	f004 f860 	bl	80046c0 <bsp_mb_holding_reg_set>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    bsp_mb_slave_handle();
 8000600:	f004 f80c 	bl	800461c <bsp_mb_slave_handle>
 8000604:	e7fc      	b.n	8000600 <main+0x9c>

08000606 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b096      	sub	sp, #88	; 0x58
 800060a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	2244      	movs	r2, #68	; 0x44
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f005 fbcb 	bl	8005db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061a:	463b      	mov	r3, r7
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000628:	f44f 7000 	mov.w	r0, #512	; 0x200
 800062c:	f000 fd88 	bl	8001140 <HAL_PWREx_ControlVoltageScaling>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000636:	f000 f837 	bl	80006a8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063a:	2302      	movs	r3, #2
 800063c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000644:	2310      	movs	r3, #16
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000648:	2302      	movs	r3, #2
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000650:	2301      	movs	r3, #1
 8000652:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000654:	230a      	movs	r3, #10
 8000656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000658:	2307      	movs	r3, #7
 800065a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fdbf 	bl	80011ec <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000674:	f000 f818 	bl	80006a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2303      	movs	r3, #3
 800067e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800068c:	463b      	mov	r3, r7
 800068e:	2104      	movs	r1, #4
 8000690:	4618      	mov	r0, r3
 8000692:	f001 f9bf 	bl	8001a14 <HAL_RCC_ClockConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800069c:	f000 f804 	bl	80006a8 <Error_Handler>
  }
}
 80006a0:	bf00      	nop
 80006a2:	3758      	adds	r7, #88	; 0x58
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <Error_Handler+0x8>
	...

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <HAL_MspInit+0x44>)
 80006bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006be:	4a0e      	ldr	r2, [pc, #56]	; (80006f8 <HAL_MspInit+0x44>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6613      	str	r3, [r2, #96]	; 0x60
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <HAL_MspInit+0x44>)
 80006c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <HAL_MspInit+0x44>)
 80006d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006d6:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <HAL_MspInit+0x44>)
 80006d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006dc:	6593      	str	r3, [r2, #88]	; 0x58
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <HAL_MspInit+0x44>)
 80006e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40021000 	.word	0x40021000

080006fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <NMI_Handler+0x4>

08000702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <HardFault_Handler+0x4>

08000708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <MemManage_Handler+0x4>

0800070e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000712:	e7fe      	b.n	8000712 <BusFault_Handler+0x4>

08000714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <UsageFault_Handler+0x4>

0800071a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000748:	f000 f9ba 	bl	8000ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000754:	4802      	ldr	r0, [pc, #8]	; (8000760 <TIM2_IRQHandler+0x10>)
 8000756:	f001 ff44 	bl	80025e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000028 	.word	0x20000028

08000764 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000768:	4802      	ldr	r0, [pc, #8]	; (8000774 <USART2_IRQHandler+0x10>)
 800076a:	f002 fca7 	bl	80030bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000074 	.word	0x20000074

08000778 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <SystemInit+0x20>)
 800077e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000782:	4a05      	ldr	r2, [pc, #20]	; (8000798 <SystemInit+0x20>)
 8000784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a2:	f107 0310 	add.w	r3, r7, #16
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ba:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <MX_TIM2_Init+0x98>)
 80007bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80;
 80007c2:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <MX_TIM2_Init+0x98>)
 80007c4:	2250      	movs	r2, #80	; 0x50
 80007c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c8:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <MX_TIM2_Init+0x98>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 80007ce:	4b19      	ldr	r3, [pc, #100]	; (8000834 <MX_TIM2_Init+0x98>)
 80007d0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80007d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d6:	4b17      	ldr	r3, [pc, #92]	; (8000834 <MX_TIM2_Init+0x98>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007dc:	4b15      	ldr	r3, [pc, #84]	; (8000834 <MX_TIM2_Init+0x98>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007e2:	4814      	ldr	r0, [pc, #80]	; (8000834 <MX_TIM2_Init+0x98>)
 80007e4:	f001 fe22 	bl	800242c <HAL_TIM_Base_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007ee:	f7ff ff5b 	bl	80006a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	4619      	mov	r1, r3
 80007fe:	480d      	ldr	r0, [pc, #52]	; (8000834 <MX_TIM2_Init+0x98>)
 8000800:	f002 f80e 	bl	8002820 <HAL_TIM_ConfigClockSource>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800080a:	f7ff ff4d 	bl	80006a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	4619      	mov	r1, r3
 800081a:	4806      	ldr	r0, [pc, #24]	; (8000834 <MX_TIM2_Init+0x98>)
 800081c:	f002 f9f0 	bl	8002c00 <HAL_TIMEx_MasterConfigSynchronization>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000826:	f7ff ff3f 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	3720      	adds	r7, #32
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000028 	.word	0x20000028

08000838 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000848:	d113      	bne.n	8000872 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <HAL_TIM_Base_MspInit+0x44>)
 800084c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084e:	4a0b      	ldr	r2, [pc, #44]	; (800087c <HAL_TIM_Base_MspInit+0x44>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6593      	str	r3, [r2, #88]	; 0x58
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <HAL_TIM_Base_MspInit+0x44>)
 8000858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	201c      	movs	r0, #28
 8000868:	f000 fa25 	bl	8000cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800086c:	201c      	movs	r0, #28
 800086e:	f000 fa3e 	bl	8000cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40021000 	.word	0x40021000

08000880 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 8000886:	4a15      	ldr	r2, [pc, #84]	; (80008dc <MX_USART2_UART_Init+0x5c>)
 8000888:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 800088c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000890:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 80008a6:	220c      	movs	r2, #12
 80008a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 80008c4:	f002 fa20 	bl	8002d08 <HAL_UART_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008ce:	f7ff feeb 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000074 	.word	0x20000074
 80008dc:	40004400 	.word	0x40004400

080008e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b09e      	sub	sp, #120	; 0x78
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	2254      	movs	r2, #84	; 0x54
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f005 fa55 	bl	8005db0 <memset>
  if(uartHandle->Instance==USART2)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a2c      	ldr	r2, [pc, #176]	; (80009bc <HAL_UART_MspInit+0xdc>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d150      	bne.n	80009b2 <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000910:	2302      	movs	r3, #2
 8000912:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000914:	2300      	movs	r3, #0
 8000916:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	4618      	mov	r0, r3
 800091e:	f001 fa9d 	bl	8001e5c <HAL_RCCEx_PeriphCLKConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000928:	f7ff febe 	bl	80006a8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800092c:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <HAL_UART_MspInit+0xe0>)
 800092e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000930:	4a23      	ldr	r2, [pc, #140]	; (80009c0 <HAL_UART_MspInit+0xe0>)
 8000932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000936:	6593      	str	r3, [r2, #88]	; 0x58
 8000938:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <HAL_UART_MspInit+0xe0>)
 800093a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000944:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <HAL_UART_MspInit+0xe0>)
 8000946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000948:	4a1d      	ldr	r2, [pc, #116]	; (80009c0 <HAL_UART_MspInit+0xe0>)
 800094a:	f043 0301 	orr.w	r3, r3, #1
 800094e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000950:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <HAL_UART_MspInit+0xe0>)
 8000952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800095c:	2304      	movs	r3, #4
 800095e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000968:	2303      	movs	r3, #3
 800096a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800096c:	2307      	movs	r3, #7
 800096e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000974:	4619      	mov	r1, r3
 8000976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097a:	f000 fa51 	bl	8000e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800097e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000982:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098c:	2303      	movs	r3, #3
 800098e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000990:	2303      	movs	r3, #3
 8000992:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000998:	4619      	mov	r1, r3
 800099a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099e:	f000 fa3f 	bl	8000e20 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2100      	movs	r1, #0
 80009a6:	2026      	movs	r0, #38	; 0x26
 80009a8:	f000 f985 	bl	8000cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009ac:	2026      	movs	r0, #38	; 0x26
 80009ae:	f000 f99e 	bl	8000cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009b2:	bf00      	nop
 80009b4:	3778      	adds	r7, #120	; 0x78
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40004400 	.word	0x40004400
 80009c0:	40021000 	.word	0x40021000

080009c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009c8:	f7ff fed6 	bl	8000778 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009cc:	480c      	ldr	r0, [pc, #48]	; (8000a00 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ce:	490d      	ldr	r1, [pc, #52]	; (8000a04 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009d0:	4a0d      	ldr	r2, [pc, #52]	; (8000a08 <LoopForever+0xe>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d4:	e002      	b.n	80009dc <LoopCopyDataInit>

080009d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009da:	3304      	adds	r3, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e0:	d3f9      	bcc.n	80009d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e2:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <LoopForever+0x12>)
  ldr r4, =_ebss
 80009e4:	4c0a      	ldr	r4, [pc, #40]	; (8000a10 <LoopForever+0x16>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e8:	e001      	b.n	80009ee <LoopFillZerobss>

080009ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ec:	3204      	adds	r2, #4

080009ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f0:	d3fb      	bcc.n	80009ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009f2:	f005 f9b9 	bl	8005d68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009f6:	f7ff fdb5 	bl	8000564 <main>

080009fa <LoopForever>:

LoopForever:
    b LoopForever
 80009fa:	e7fe      	b.n	80009fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009fc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a08:	08005e38 	.word	0x08005e38
  ldr r2, =_sbss
 8000a0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a10:	20000fa4 	.word	0x20000fa4

08000a14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC1_IRQHandler>

08000a16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b082      	sub	sp, #8
 8000a1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a20:	2003      	movs	r0, #3
 8000a22:	f000 f93d 	bl	8000ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a26:	2000      	movs	r0, #0
 8000a28:	f000 f80e 	bl	8000a48 <HAL_InitTick>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d002      	beq.n	8000a38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	71fb      	strb	r3, [r7, #7]
 8000a36:	e001      	b.n	8000a3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a38:	f7ff fe3c 	bl	80006b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a50:	2300      	movs	r3, #0
 8000a52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <HAL_InitTick+0x6c>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d023      	beq.n	8000aa4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <HAL_InitTick+0x70>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <HAL_InitTick+0x6c>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f949 	bl	8000d0a <HAL_SYSTICK_Config>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d10f      	bne.n	8000a9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b0f      	cmp	r3, #15
 8000a82:	d809      	bhi.n	8000a98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a84:	2200      	movs	r2, #0
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	f000 f913 	bl	8000cb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a90:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <HAL_InitTick+0x74>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6013      	str	r3, [r2, #0]
 8000a96:	e007      	b.n	8000aa8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	73fb      	strb	r3, [r7, #15]
 8000a9c:	e004      	b.n	8000aa8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	73fb      	strb	r3, [r7, #15]
 8000aa2:	e001      	b.n	8000aa8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	20000004 	.word	0x20000004

08000ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_IncTick+0x20>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_IncTick+0x24>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4413      	add	r3, r2
 8000ad0:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <HAL_IncTick+0x24>)
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	200000f8 	.word	0x200000f8

08000ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return uwTick;
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <HAL_GetTick+0x14>)
 8000aee:	681b      	ldr	r3, [r3, #0]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	200000f8 	.word	0x200000f8

08000b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b32:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	60d3      	str	r3, [r2, #12]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <__NVIC_GetPriorityGrouping+0x18>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	0a1b      	lsrs	r3, r3, #8
 8000b52:	f003 0307 	and.w	r3, r3, #7
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	db0b      	blt.n	8000b8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	f003 021f 	and.w	r2, r3, #31
 8000b7c:	4907      	ldr	r1, [pc, #28]	; (8000b9c <__NVIC_EnableIRQ+0x38>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	095b      	lsrs	r3, r3, #5
 8000b84:	2001      	movs	r0, #1
 8000b86:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000e100 	.word	0xe000e100

08000ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	6039      	str	r1, [r7, #0]
 8000baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	db0a      	blt.n	8000bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	490c      	ldr	r1, [pc, #48]	; (8000bec <__NVIC_SetPriority+0x4c>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	0112      	lsls	r2, r2, #4
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc8:	e00a      	b.n	8000be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4908      	ldr	r1, [pc, #32]	; (8000bf0 <__NVIC_SetPriority+0x50>)
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	f003 030f 	and.w	r3, r3, #15
 8000bd6:	3b04      	subs	r3, #4
 8000bd8:	0112      	lsls	r2, r2, #4
 8000bda:	b2d2      	uxtb	r2, r2
 8000bdc:	440b      	add	r3, r1
 8000bde:	761a      	strb	r2, [r3, #24]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000e100 	.word	0xe000e100
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	; 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	f1c3 0307 	rsb	r3, r3, #7
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	bf28      	it	cs
 8000c12:	2304      	movcs	r3, #4
 8000c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	2b06      	cmp	r3, #6
 8000c1c:	d902      	bls.n	8000c24 <NVIC_EncodePriority+0x30>
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3b03      	subs	r3, #3
 8000c22:	e000      	b.n	8000c26 <NVIC_EncodePriority+0x32>
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43da      	mvns	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	401a      	ands	r2, r3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
 8000c46:	43d9      	mvns	r1, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	4313      	orrs	r3, r2
         );
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3724      	adds	r7, #36	; 0x24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c6c:	d301      	bcc.n	8000c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00f      	b.n	8000c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c72:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <SysTick_Config+0x40>)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7a:	210f      	movs	r1, #15
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	f7ff ff8e 	bl	8000ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <SysTick_Config+0x40>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8a:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <SysTick_Config+0x40>)
 8000c8c:	2207      	movs	r2, #7
 8000c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	e000e010 	.word	0xe000e010

08000ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff ff29 	bl	8000b00 <__NVIC_SetPriorityGrouping>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b086      	sub	sp, #24
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
 8000cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc8:	f7ff ff3e 	bl	8000b48 <__NVIC_GetPriorityGrouping>
 8000ccc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	68b9      	ldr	r1, [r7, #8]
 8000cd2:	6978      	ldr	r0, [r7, #20]
 8000cd4:	f7ff ff8e 	bl	8000bf4 <NVIC_EncodePriority>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cde:	4611      	mov	r1, r2
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff5d 	bl	8000ba0 <__NVIC_SetPriority>
}
 8000ce6:	bf00      	nop
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff31 	bl	8000b64 <__NVIC_EnableIRQ>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ffa2 	bl	8000c5c <SysTick_Config>
 8000d18:	4603      	mov	r3, r0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b085      	sub	sp, #20
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d008      	beq.n	8000d4c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2204      	movs	r2, #4
 8000d3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2200      	movs	r2, #0
 8000d44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e022      	b.n	8000d92 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f022 020e 	bic.w	r2, r2, #14
 8000d5a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f022 0201 	bic.w	r2, r2, #1
 8000d6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d70:	f003 021c 	and.w	r2, r3, #28
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2201      	movs	r2, #1
 8000d84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b084      	sub	sp, #16
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d005      	beq.n	8000dc2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2204      	movs	r2, #4
 8000dba:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
 8000dc0:	e029      	b.n	8000e16 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f022 020e 	bic.w	r2, r2, #14
 8000dd0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f022 0201 	bic.w	r2, r2, #1
 8000de0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	f003 021c 	and.w	r2, r3, #28
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	2101      	movs	r1, #1
 8000df0:	fa01 f202 	lsl.w	r2, r1, r2
 8000df4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	4798      	blx	r3
    }
  }
  return status;
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b087      	sub	sp, #28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2e:	e148      	b.n	80010c2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	2101      	movs	r1, #1
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 813a 	beq.w	80010bc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d005      	beq.n	8000e60 <HAL_GPIO_Init+0x40>
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d130      	bne.n	8000ec2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	68da      	ldr	r2, [r3, #12]
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e96:	2201      	movs	r2, #1
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	091b      	lsrs	r3, r3, #4
 8000eac:	f003 0201 	and.w	r2, r3, #1
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	d017      	beq.n	8000efe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	2203      	movs	r2, #3
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d123      	bne.n	8000f52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	08da      	lsrs	r2, r3, #3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3208      	adds	r2, #8
 8000f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	220f      	movs	r2, #15
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	691a      	ldr	r2, [r3, #16]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	f003 0307 	and.w	r3, r3, #7
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	08da      	lsrs	r2, r3, #3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3208      	adds	r2, #8
 8000f4c:	6939      	ldr	r1, [r7, #16]
 8000f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0203 	and.w	r2, r3, #3
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 8094 	beq.w	80010bc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f94:	4b52      	ldr	r3, [pc, #328]	; (80010e0 <HAL_GPIO_Init+0x2c0>)
 8000f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f98:	4a51      	ldr	r2, [pc, #324]	; (80010e0 <HAL_GPIO_Init+0x2c0>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa0:	4b4f      	ldr	r3, [pc, #316]	; (80010e0 <HAL_GPIO_Init+0x2c0>)
 8000fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fac:	4a4d      	ldr	r2, [pc, #308]	; (80010e4 <HAL_GPIO_Init+0x2c4>)
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	220f      	movs	r2, #15
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fd6:	d00d      	beq.n	8000ff4 <HAL_GPIO_Init+0x1d4>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a43      	ldr	r2, [pc, #268]	; (80010e8 <HAL_GPIO_Init+0x2c8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d007      	beq.n	8000ff0 <HAL_GPIO_Init+0x1d0>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a42      	ldr	r2, [pc, #264]	; (80010ec <HAL_GPIO_Init+0x2cc>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d101      	bne.n	8000fec <HAL_GPIO_Init+0x1cc>
 8000fe8:	2302      	movs	r3, #2
 8000fea:	e004      	b.n	8000ff6 <HAL_GPIO_Init+0x1d6>
 8000fec:	2307      	movs	r3, #7
 8000fee:	e002      	b.n	8000ff6 <HAL_GPIO_Init+0x1d6>
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e000      	b.n	8000ff6 <HAL_GPIO_Init+0x1d6>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	f002 0203 	and.w	r2, r2, #3
 8000ffc:	0092      	lsls	r2, r2, #2
 8000ffe:	4093      	lsls	r3, r2
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001006:	4937      	ldr	r1, [pc, #220]	; (80010e4 <HAL_GPIO_Init+0x2c4>)
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	089b      	lsrs	r3, r3, #2
 800100c:	3302      	adds	r3, #2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001014:	4b36      	ldr	r3, [pc, #216]	; (80010f0 <HAL_GPIO_Init+0x2d0>)
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	43db      	mvns	r3, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001038:	4a2d      	ldr	r2, [pc, #180]	; (80010f0 <HAL_GPIO_Init+0x2d0>)
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800103e:	4b2c      	ldr	r3, [pc, #176]	; (80010f0 <HAL_GPIO_Init+0x2d0>)
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	43db      	mvns	r3, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4313      	orrs	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001062:	4a23      	ldr	r2, [pc, #140]	; (80010f0 <HAL_GPIO_Init+0x2d0>)
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001068:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <HAL_GPIO_Init+0x2d0>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800108c:	4a18      	ldr	r2, [pc, #96]	; (80010f0 <HAL_GPIO_Init+0x2d0>)
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <HAL_GPIO_Init+0x2d0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010b6:	4a0e      	ldr	r2, [pc, #56]	; (80010f0 <HAL_GPIO_Init+0x2d0>)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	3301      	adds	r3, #1
 80010c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	fa22 f303 	lsr.w	r3, r2, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f47f aeaf 	bne.w	8000e30 <HAL_GPIO_Init+0x10>
  }
}
 80010d2:	bf00      	nop
 80010d4:	bf00      	nop
 80010d6:	371c      	adds	r7, #28
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010000 	.word	0x40010000
 80010e8:	48000400 	.word	0x48000400
 80010ec:	48000800 	.word	0x48000800
 80010f0:	40010400 	.word	0x40010400

080010f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	807b      	strh	r3, [r7, #2]
 8001100:	4613      	mov	r3, r2
 8001102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001104:	787b      	ldrb	r3, [r7, #1]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800110a:	887a      	ldrh	r2, [r7, #2]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001110:	e002      	b.n	8001118 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <HAL_PWREx_GetVoltageRange+0x18>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40007000 	.word	0x40007000

08001140 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800114e:	d130      	bne.n	80011b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001150:	4b23      	ldr	r3, [pc, #140]	; (80011e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800115c:	d038      	beq.n	80011d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800115e:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001166:	4a1e      	ldr	r2, [pc, #120]	; (80011e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001168:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800116c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800116e:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2232      	movs	r2, #50	; 0x32
 8001174:	fb02 f303 	mul.w	r3, r2, r3
 8001178:	4a1b      	ldr	r2, [pc, #108]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800117a:	fba2 2303 	umull	r2, r3, r2, r3
 800117e:	0c9b      	lsrs	r3, r3, #18
 8001180:	3301      	adds	r3, #1
 8001182:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001184:	e002      	b.n	800118c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	3b01      	subs	r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800118e:	695b      	ldr	r3, [r3, #20]
 8001190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001198:	d102      	bne.n	80011a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1f2      	bne.n	8001186 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ac:	d110      	bne.n	80011d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e00f      	b.n	80011d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011be:	d007      	beq.n	80011d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011c0:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011c8:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40007000 	.word	0x40007000
 80011e4:	20000000 	.word	0x20000000
 80011e8:	431bde83 	.word	0x431bde83

080011ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d102      	bne.n	8001200 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	f000 bc02 	b.w	8001a04 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001200:	4b96      	ldr	r3, [pc, #600]	; (800145c <HAL_RCC_OscConfig+0x270>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f003 030c 	and.w	r3, r3, #12
 8001208:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800120a:	4b94      	ldr	r3, [pc, #592]	; (800145c <HAL_RCC_OscConfig+0x270>)
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0310 	and.w	r3, r3, #16
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 80e4 	beq.w	80013ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d007      	beq.n	8001238 <HAL_RCC_OscConfig+0x4c>
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	2b0c      	cmp	r3, #12
 800122c:	f040 808b 	bne.w	8001346 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	2b01      	cmp	r3, #1
 8001234:	f040 8087 	bne.w	8001346 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001238:	4b88      	ldr	r3, [pc, #544]	; (800145c <HAL_RCC_OscConfig+0x270>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d005      	beq.n	8001250 <HAL_RCC_OscConfig+0x64>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d101      	bne.n	8001250 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e3d9      	b.n	8001a04 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a1a      	ldr	r2, [r3, #32]
 8001254:	4b81      	ldr	r3, [pc, #516]	; (800145c <HAL_RCC_OscConfig+0x270>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	2b00      	cmp	r3, #0
 800125e:	d004      	beq.n	800126a <HAL_RCC_OscConfig+0x7e>
 8001260:	4b7e      	ldr	r3, [pc, #504]	; (800145c <HAL_RCC_OscConfig+0x270>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001268:	e005      	b.n	8001276 <HAL_RCC_OscConfig+0x8a>
 800126a:	4b7c      	ldr	r3, [pc, #496]	; (800145c <HAL_RCC_OscConfig+0x270>)
 800126c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001270:	091b      	lsrs	r3, r3, #4
 8001272:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001276:	4293      	cmp	r3, r2
 8001278:	d223      	bcs.n	80012c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a1b      	ldr	r3, [r3, #32]
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fd8c 	bl	8001d9c <RCC_SetFlashLatencyFromMSIRange>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e3ba      	b.n	8001a04 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800128e:	4b73      	ldr	r3, [pc, #460]	; (800145c <HAL_RCC_OscConfig+0x270>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a72      	ldr	r2, [pc, #456]	; (800145c <HAL_RCC_OscConfig+0x270>)
 8001294:	f043 0308 	orr.w	r3, r3, #8
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	4b70      	ldr	r3, [pc, #448]	; (800145c <HAL_RCC_OscConfig+0x270>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a1b      	ldr	r3, [r3, #32]
 80012a6:	496d      	ldr	r1, [pc, #436]	; (800145c <HAL_RCC_OscConfig+0x270>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ac:	4b6b      	ldr	r3, [pc, #428]	; (800145c <HAL_RCC_OscConfig+0x270>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69db      	ldr	r3, [r3, #28]
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	4968      	ldr	r1, [pc, #416]	; (800145c <HAL_RCC_OscConfig+0x270>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	604b      	str	r3, [r1, #4]
 80012c0:	e025      	b.n	800130e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012c2:	4b66      	ldr	r3, [pc, #408]	; (800145c <HAL_RCC_OscConfig+0x270>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a65      	ldr	r2, [pc, #404]	; (800145c <HAL_RCC_OscConfig+0x270>)
 80012c8:	f043 0308 	orr.w	r3, r3, #8
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b63      	ldr	r3, [pc, #396]	; (800145c <HAL_RCC_OscConfig+0x270>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a1b      	ldr	r3, [r3, #32]
 80012da:	4960      	ldr	r1, [pc, #384]	; (800145c <HAL_RCC_OscConfig+0x270>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012e0:	4b5e      	ldr	r3, [pc, #376]	; (800145c <HAL_RCC_OscConfig+0x270>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69db      	ldr	r3, [r3, #28]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	495b      	ldr	r1, [pc, #364]	; (800145c <HAL_RCC_OscConfig+0x270>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d109      	bne.n	800130e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 fd4c 	bl	8001d9c <RCC_SetFlashLatencyFromMSIRange>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e37a      	b.n	8001a04 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800130e:	f000 fc81 	bl	8001c14 <HAL_RCC_GetSysClockFreq>
 8001312:	4602      	mov	r2, r0
 8001314:	4b51      	ldr	r3, [pc, #324]	; (800145c <HAL_RCC_OscConfig+0x270>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	091b      	lsrs	r3, r3, #4
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	4950      	ldr	r1, [pc, #320]	; (8001460 <HAL_RCC_OscConfig+0x274>)
 8001320:	5ccb      	ldrb	r3, [r1, r3]
 8001322:	f003 031f 	and.w	r3, r3, #31
 8001326:	fa22 f303 	lsr.w	r3, r2, r3
 800132a:	4a4e      	ldr	r2, [pc, #312]	; (8001464 <HAL_RCC_OscConfig+0x278>)
 800132c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800132e:	4b4e      	ldr	r3, [pc, #312]	; (8001468 <HAL_RCC_OscConfig+0x27c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fb88 	bl	8000a48 <HAL_InitTick>
 8001338:	4603      	mov	r3, r0
 800133a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d052      	beq.n	80013e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	e35e      	b.n	8001a04 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d032      	beq.n	80013b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800134e:	4b43      	ldr	r3, [pc, #268]	; (800145c <HAL_RCC_OscConfig+0x270>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a42      	ldr	r2, [pc, #264]	; (800145c <HAL_RCC_OscConfig+0x270>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800135a:	f7ff fbc5 	bl	8000ae8 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001362:	f7ff fbc1 	bl	8000ae8 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e347      	b.n	8001a04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001374:	4b39      	ldr	r3, [pc, #228]	; (800145c <HAL_RCC_OscConfig+0x270>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0f0      	beq.n	8001362 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001380:	4b36      	ldr	r3, [pc, #216]	; (800145c <HAL_RCC_OscConfig+0x270>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a35      	ldr	r2, [pc, #212]	; (800145c <HAL_RCC_OscConfig+0x270>)
 8001386:	f043 0308 	orr.w	r3, r3, #8
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	4b33      	ldr	r3, [pc, #204]	; (800145c <HAL_RCC_OscConfig+0x270>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	4930      	ldr	r1, [pc, #192]	; (800145c <HAL_RCC_OscConfig+0x270>)
 800139a:	4313      	orrs	r3, r2
 800139c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800139e:	4b2f      	ldr	r3, [pc, #188]	; (800145c <HAL_RCC_OscConfig+0x270>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	492b      	ldr	r1, [pc, #172]	; (800145c <HAL_RCC_OscConfig+0x270>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	604b      	str	r3, [r1, #4]
 80013b2:	e01a      	b.n	80013ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013b4:	4b29      	ldr	r3, [pc, #164]	; (800145c <HAL_RCC_OscConfig+0x270>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a28      	ldr	r2, [pc, #160]	; (800145c <HAL_RCC_OscConfig+0x270>)
 80013ba:	f023 0301 	bic.w	r3, r3, #1
 80013be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fb92 	bl	8000ae8 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013c8:	f7ff fb8e 	bl	8000ae8 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e314      	b.n	8001a04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013da:	4b20      	ldr	r3, [pc, #128]	; (800145c <HAL_RCC_OscConfig+0x270>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x1dc>
 80013e6:	e000      	b.n	80013ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d073      	beq.n	80014de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	2b08      	cmp	r3, #8
 80013fa:	d005      	beq.n	8001408 <HAL_RCC_OscConfig+0x21c>
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	2b0c      	cmp	r3, #12
 8001400:	d10e      	bne.n	8001420 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	2b03      	cmp	r3, #3
 8001406:	d10b      	bne.n	8001420 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <HAL_RCC_OscConfig+0x270>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d063      	beq.n	80014dc <HAL_RCC_OscConfig+0x2f0>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d15f      	bne.n	80014dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e2f1      	b.n	8001a04 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001428:	d106      	bne.n	8001438 <HAL_RCC_OscConfig+0x24c>
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <HAL_RCC_OscConfig+0x270>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a0b      	ldr	r2, [pc, #44]	; (800145c <HAL_RCC_OscConfig+0x270>)
 8001430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e025      	b.n	8001484 <HAL_RCC_OscConfig+0x298>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001440:	d114      	bne.n	800146c <HAL_RCC_OscConfig+0x280>
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_RCC_OscConfig+0x270>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a05      	ldr	r2, [pc, #20]	; (800145c <HAL_RCC_OscConfig+0x270>)
 8001448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	4b03      	ldr	r3, [pc, #12]	; (800145c <HAL_RCC_OscConfig+0x270>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a02      	ldr	r2, [pc, #8]	; (800145c <HAL_RCC_OscConfig+0x270>)
 8001454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	e013      	b.n	8001484 <HAL_RCC_OscConfig+0x298>
 800145c:	40021000 	.word	0x40021000
 8001460:	08005dd8 	.word	0x08005dd8
 8001464:	20000000 	.word	0x20000000
 8001468:	20000004 	.word	0x20000004
 800146c:	4ba0      	ldr	r3, [pc, #640]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a9f      	ldr	r2, [pc, #636]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	4b9d      	ldr	r3, [pc, #628]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a9c      	ldr	r2, [pc, #624]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 800147e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d013      	beq.n	80014b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148c:	f7ff fb2c 	bl	8000ae8 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001494:	f7ff fb28 	bl	8000ae8 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b64      	cmp	r3, #100	; 0x64
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e2ae      	b.n	8001a04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014a6:	4b92      	ldr	r3, [pc, #584]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0x2a8>
 80014b2:	e014      	b.n	80014de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b4:	f7ff fb18 	bl	8000ae8 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014bc:	f7ff fb14 	bl	8000ae8 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b64      	cmp	r3, #100	; 0x64
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e29a      	b.n	8001a04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ce:	4b88      	ldr	r3, [pc, #544]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x2d0>
 80014da:	e000      	b.n	80014de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d060      	beq.n	80015ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	2b04      	cmp	r3, #4
 80014ee:	d005      	beq.n	80014fc <HAL_RCC_OscConfig+0x310>
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	2b0c      	cmp	r3, #12
 80014f4:	d119      	bne.n	800152a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d116      	bne.n	800152a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014fc:	4b7c      	ldr	r3, [pc, #496]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001504:	2b00      	cmp	r3, #0
 8001506:	d005      	beq.n	8001514 <HAL_RCC_OscConfig+0x328>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e277      	b.n	8001a04 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001514:	4b76      	ldr	r3, [pc, #472]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	061b      	lsls	r3, r3, #24
 8001522:	4973      	ldr	r1, [pc, #460]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001524:	4313      	orrs	r3, r2
 8001526:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001528:	e040      	b.n	80015ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d023      	beq.n	800157a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001532:	4b6f      	ldr	r3, [pc, #444]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a6e      	ldr	r2, [pc, #440]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153e:	f7ff fad3 	bl	8000ae8 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001546:	f7ff facf 	bl	8000ae8 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e255      	b.n	8001a04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001558:	4b65      	ldr	r3, [pc, #404]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0f0      	beq.n	8001546 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001564:	4b62      	ldr	r3, [pc, #392]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	061b      	lsls	r3, r3, #24
 8001572:	495f      	ldr	r1, [pc, #380]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001574:	4313      	orrs	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
 8001578:	e018      	b.n	80015ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800157a:	4b5d      	ldr	r3, [pc, #372]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a5c      	ldr	r2, [pc, #368]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001586:	f7ff faaf 	bl	8000ae8 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800158e:	f7ff faab 	bl	8000ae8 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e231      	b.n	8001a04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015a0:	4b53      	ldr	r3, [pc, #332]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f0      	bne.n	800158e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d03c      	beq.n	8001632 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d01c      	beq.n	80015fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c0:	4b4b      	ldr	r3, [pc, #300]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 80015c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015c6:	4a4a      	ldr	r2, [pc, #296]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d0:	f7ff fa8a 	bl	8000ae8 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d8:	f7ff fa86 	bl	8000ae8 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e20c      	b.n	8001a04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ea:	4b41      	ldr	r3, [pc, #260]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 80015ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0ef      	beq.n	80015d8 <HAL_RCC_OscConfig+0x3ec>
 80015f8:	e01b      	b.n	8001632 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015fa:	4b3d      	ldr	r3, [pc, #244]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 80015fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001600:	4a3b      	ldr	r2, [pc, #236]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001602:	f023 0301 	bic.w	r3, r3, #1
 8001606:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160a:	f7ff fa6d 	bl	8000ae8 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001612:	f7ff fa69 	bl	8000ae8 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e1ef      	b.n	8001a04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001624:	4b32      	ldr	r3, [pc, #200]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1ef      	bne.n	8001612 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 80a6 	beq.w	800178c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001640:	2300      	movs	r3, #0
 8001642:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001644:	4b2a      	ldr	r3, [pc, #168]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10d      	bne.n	800166c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001650:	4b27      	ldr	r3, [pc, #156]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001654:	4a26      	ldr	r2, [pc, #152]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165a:	6593      	str	r3, [r2, #88]	; 0x58
 800165c:	4b24      	ldr	r3, [pc, #144]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 800165e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001668:	2301      	movs	r3, #1
 800166a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800166c:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <HAL_RCC_OscConfig+0x508>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001674:	2b00      	cmp	r3, #0
 8001676:	d118      	bne.n	80016aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001678:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <HAL_RCC_OscConfig+0x508>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a1d      	ldr	r2, [pc, #116]	; (80016f4 <HAL_RCC_OscConfig+0x508>)
 800167e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001682:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001684:	f7ff fa30 	bl	8000ae8 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800168c:	f7ff fa2c 	bl	8000ae8 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e1b2      	b.n	8001a04 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <HAL_RCC_OscConfig+0x508>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f0      	beq.n	800168c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d108      	bne.n	80016c4 <HAL_RCC_OscConfig+0x4d8>
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 80016b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b8:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016c2:	e029      	b.n	8001718 <HAL_RCC_OscConfig+0x52c>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2b05      	cmp	r3, #5
 80016ca:	d115      	bne.n	80016f8 <HAL_RCC_OscConfig+0x50c>
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 80016ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d2:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016dc:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 80016de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e2:	4a03      	ldr	r2, [pc, #12]	; (80016f0 <HAL_RCC_OscConfig+0x504>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016ec:	e014      	b.n	8001718 <HAL_RCC_OscConfig+0x52c>
 80016ee:	bf00      	nop
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40007000 	.word	0x40007000
 80016f8:	4b9a      	ldr	r3, [pc, #616]	; (8001964 <HAL_RCC_OscConfig+0x778>)
 80016fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016fe:	4a99      	ldr	r2, [pc, #612]	; (8001964 <HAL_RCC_OscConfig+0x778>)
 8001700:	f023 0301 	bic.w	r3, r3, #1
 8001704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001708:	4b96      	ldr	r3, [pc, #600]	; (8001964 <HAL_RCC_OscConfig+0x778>)
 800170a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800170e:	4a95      	ldr	r2, [pc, #596]	; (8001964 <HAL_RCC_OscConfig+0x778>)
 8001710:	f023 0304 	bic.w	r3, r3, #4
 8001714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d016      	beq.n	800174e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001720:	f7ff f9e2 	bl	8000ae8 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001726:	e00a      	b.n	800173e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001728:	f7ff f9de 	bl	8000ae8 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	f241 3288 	movw	r2, #5000	; 0x1388
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e162      	b.n	8001a04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800173e:	4b89      	ldr	r3, [pc, #548]	; (8001964 <HAL_RCC_OscConfig+0x778>)
 8001740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0ed      	beq.n	8001728 <HAL_RCC_OscConfig+0x53c>
 800174c:	e015      	b.n	800177a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174e:	f7ff f9cb 	bl	8000ae8 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001754:	e00a      	b.n	800176c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001756:	f7ff f9c7 	bl	8000ae8 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	f241 3288 	movw	r2, #5000	; 0x1388
 8001764:	4293      	cmp	r3, r2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e14b      	b.n	8001a04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800176c:	4b7d      	ldr	r3, [pc, #500]	; (8001964 <HAL_RCC_OscConfig+0x778>)
 800176e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1ed      	bne.n	8001756 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800177a:	7ffb      	ldrb	r3, [r7, #31]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d105      	bne.n	800178c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001780:	4b78      	ldr	r3, [pc, #480]	; (8001964 <HAL_RCC_OscConfig+0x778>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001784:	4a77      	ldr	r2, [pc, #476]	; (8001964 <HAL_RCC_OscConfig+0x778>)
 8001786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800178a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0320 	and.w	r3, r3, #32
 8001794:	2b00      	cmp	r3, #0
 8001796:	d03c      	beq.n	8001812 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	2b00      	cmp	r3, #0
 800179e:	d01c      	beq.n	80017da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017a0:	4b70      	ldr	r3, [pc, #448]	; (8001964 <HAL_RCC_OscConfig+0x778>)
 80017a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017a6:	4a6f      	ldr	r2, [pc, #444]	; (8001964 <HAL_RCC_OscConfig+0x778>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b0:	f7ff f99a 	bl	8000ae8 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017b8:	f7ff f996 	bl	8000ae8 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e11c      	b.n	8001a04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017ca:	4b66      	ldr	r3, [pc, #408]	; (8001964 <HAL_RCC_OscConfig+0x778>)
 80017cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0ef      	beq.n	80017b8 <HAL_RCC_OscConfig+0x5cc>
 80017d8:	e01b      	b.n	8001812 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017da:	4b62      	ldr	r3, [pc, #392]	; (8001964 <HAL_RCC_OscConfig+0x778>)
 80017dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017e0:	4a60      	ldr	r2, [pc, #384]	; (8001964 <HAL_RCC_OscConfig+0x778>)
 80017e2:	f023 0301 	bic.w	r3, r3, #1
 80017e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ea:	f7ff f97d 	bl	8000ae8 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017f2:	f7ff f979 	bl	8000ae8 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e0ff      	b.n	8001a04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001804:	4b57      	ldr	r3, [pc, #348]	; (8001964 <HAL_RCC_OscConfig+0x778>)
 8001806:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1ef      	bne.n	80017f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 80f3 	beq.w	8001a02 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001820:	2b02      	cmp	r3, #2
 8001822:	f040 80c9 	bne.w	80019b8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001826:	4b4f      	ldr	r3, [pc, #316]	; (8001964 <HAL_RCC_OscConfig+0x778>)
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f003 0203 	and.w	r2, r3, #3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001836:	429a      	cmp	r2, r3
 8001838:	d12c      	bne.n	8001894 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001844:	3b01      	subs	r3, #1
 8001846:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001848:	429a      	cmp	r2, r3
 800184a:	d123      	bne.n	8001894 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001856:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001858:	429a      	cmp	r2, r3
 800185a:	d11b      	bne.n	8001894 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001866:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001868:	429a      	cmp	r2, r3
 800186a:	d113      	bne.n	8001894 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001876:	085b      	lsrs	r3, r3, #1
 8001878:	3b01      	subs	r3, #1
 800187a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d109      	bne.n	8001894 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	085b      	lsrs	r3, r3, #1
 800188c:	3b01      	subs	r3, #1
 800188e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001890:	429a      	cmp	r2, r3
 8001892:	d06b      	beq.n	800196c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	2b0c      	cmp	r3, #12
 8001898:	d062      	beq.n	8001960 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800189a:	4b32      	ldr	r3, [pc, #200]	; (8001964 <HAL_RCC_OscConfig+0x778>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e0ac      	b.n	8001a04 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018aa:	4b2e      	ldr	r3, [pc, #184]	; (8001964 <HAL_RCC_OscConfig+0x778>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a2d      	ldr	r2, [pc, #180]	; (8001964 <HAL_RCC_OscConfig+0x778>)
 80018b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018b6:	f7ff f917 	bl	8000ae8 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018be:	f7ff f913 	bl	8000ae8 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e099      	b.n	8001a04 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d0:	4b24      	ldr	r3, [pc, #144]	; (8001964 <HAL_RCC_OscConfig+0x778>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f0      	bne.n	80018be <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018dc:	4b21      	ldr	r3, [pc, #132]	; (8001964 <HAL_RCC_OscConfig+0x778>)
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	4b21      	ldr	r3, [pc, #132]	; (8001968 <HAL_RCC_OscConfig+0x77c>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018ec:	3a01      	subs	r2, #1
 80018ee:	0112      	lsls	r2, r2, #4
 80018f0:	4311      	orrs	r1, r2
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018f6:	0212      	lsls	r2, r2, #8
 80018f8:	4311      	orrs	r1, r2
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018fe:	0852      	lsrs	r2, r2, #1
 8001900:	3a01      	subs	r2, #1
 8001902:	0552      	lsls	r2, r2, #21
 8001904:	4311      	orrs	r1, r2
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800190a:	0852      	lsrs	r2, r2, #1
 800190c:	3a01      	subs	r2, #1
 800190e:	0652      	lsls	r2, r2, #25
 8001910:	4311      	orrs	r1, r2
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001916:	06d2      	lsls	r2, r2, #27
 8001918:	430a      	orrs	r2, r1
 800191a:	4912      	ldr	r1, [pc, #72]	; (8001964 <HAL_RCC_OscConfig+0x778>)
 800191c:	4313      	orrs	r3, r2
 800191e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001920:	4b10      	ldr	r3, [pc, #64]	; (8001964 <HAL_RCC_OscConfig+0x778>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0f      	ldr	r2, [pc, #60]	; (8001964 <HAL_RCC_OscConfig+0x778>)
 8001926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800192a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800192c:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <HAL_RCC_OscConfig+0x778>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	4a0c      	ldr	r2, [pc, #48]	; (8001964 <HAL_RCC_OscConfig+0x778>)
 8001932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001936:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001938:	f7ff f8d6 	bl	8000ae8 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001940:	f7ff f8d2 	bl	8000ae8 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e058      	b.n	8001a04 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001952:	4b04      	ldr	r3, [pc, #16]	; (8001964 <HAL_RCC_OscConfig+0x778>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800195e:	e050      	b.n	8001a02 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e04f      	b.n	8001a04 <HAL_RCC_OscConfig+0x818>
 8001964:	40021000 	.word	0x40021000
 8001968:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800196c:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <HAL_RCC_OscConfig+0x820>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d144      	bne.n	8001a02 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001978:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <HAL_RCC_OscConfig+0x820>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a23      	ldr	r2, [pc, #140]	; (8001a0c <HAL_RCC_OscConfig+0x820>)
 800197e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001982:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001984:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <HAL_RCC_OscConfig+0x820>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4a20      	ldr	r2, [pc, #128]	; (8001a0c <HAL_RCC_OscConfig+0x820>)
 800198a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800198e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001990:	f7ff f8aa 	bl	8000ae8 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001998:	f7ff f8a6 	bl	8000ae8 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e02c      	b.n	8001a04 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019aa:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <HAL_RCC_OscConfig+0x820>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x7ac>
 80019b6:	e024      	b.n	8001a02 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	2b0c      	cmp	r3, #12
 80019bc:	d01f      	beq.n	80019fe <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019be:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <HAL_RCC_OscConfig+0x820>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a12      	ldr	r2, [pc, #72]	; (8001a0c <HAL_RCC_OscConfig+0x820>)
 80019c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ca:	f7ff f88d 	bl	8000ae8 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d2:	f7ff f889 	bl	8000ae8 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e00f      	b.n	8001a04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_RCC_OscConfig+0x820>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f0      	bne.n	80019d2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_RCC_OscConfig+0x820>)
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	4905      	ldr	r1, [pc, #20]	; (8001a0c <HAL_RCC_OscConfig+0x820>)
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_RCC_OscConfig+0x824>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	60cb      	str	r3, [r1, #12]
 80019fc:	e001      	b.n	8001a02 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3720      	adds	r7, #32
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	feeefffc 	.word	0xfeeefffc

08001a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e0e7      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a28:	4b75      	ldr	r3, [pc, #468]	; (8001c00 <HAL_RCC_ClockConfig+0x1ec>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d910      	bls.n	8001a58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a36:	4b72      	ldr	r3, [pc, #456]	; (8001c00 <HAL_RCC_ClockConfig+0x1ec>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f023 0207 	bic.w	r2, r3, #7
 8001a3e:	4970      	ldr	r1, [pc, #448]	; (8001c00 <HAL_RCC_ClockConfig+0x1ec>)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a46:	4b6e      	ldr	r3, [pc, #440]	; (8001c00 <HAL_RCC_ClockConfig+0x1ec>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d001      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0cf      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d010      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	4b66      	ldr	r3, [pc, #408]	; (8001c04 <HAL_RCC_ClockConfig+0x1f0>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d908      	bls.n	8001a86 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a74:	4b63      	ldr	r3, [pc, #396]	; (8001c04 <HAL_RCC_ClockConfig+0x1f0>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	4960      	ldr	r1, [pc, #384]	; (8001c04 <HAL_RCC_ClockConfig+0x1f0>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d04c      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d107      	bne.n	8001aaa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a9a:	4b5a      	ldr	r3, [pc, #360]	; (8001c04 <HAL_RCC_ClockConfig+0x1f0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d121      	bne.n	8001aea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e0a6      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d107      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab2:	4b54      	ldr	r3, [pc, #336]	; (8001c04 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d115      	bne.n	8001aea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e09a      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d107      	bne.n	8001ada <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aca:	4b4e      	ldr	r3, [pc, #312]	; (8001c04 <HAL_RCC_ClockConfig+0x1f0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d109      	bne.n	8001aea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e08e      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ada:	4b4a      	ldr	r3, [pc, #296]	; (8001c04 <HAL_RCC_ClockConfig+0x1f0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e086      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001aea:	4b46      	ldr	r3, [pc, #280]	; (8001c04 <HAL_RCC_ClockConfig+0x1f0>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f023 0203 	bic.w	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	4943      	ldr	r1, [pc, #268]	; (8001c04 <HAL_RCC_ClockConfig+0x1f0>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001afc:	f7fe fff4 	bl	8000ae8 <HAL_GetTick>
 8001b00:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b02:	e00a      	b.n	8001b1a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b04:	f7fe fff0 	bl	8000ae8 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e06e      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1a:	4b3a      	ldr	r3, [pc, #232]	; (8001c04 <HAL_RCC_ClockConfig+0x1f0>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 020c 	and.w	r2, r3, #12
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d1eb      	bne.n	8001b04 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d010      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	4b31      	ldr	r3, [pc, #196]	; (8001c04 <HAL_RCC_ClockConfig+0x1f0>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d208      	bcs.n	8001b5a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b48:	4b2e      	ldr	r3, [pc, #184]	; (8001c04 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	492b      	ldr	r1, [pc, #172]	; (8001c04 <HAL_RCC_ClockConfig+0x1f0>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b5a:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <HAL_RCC_ClockConfig+0x1ec>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d210      	bcs.n	8001b8a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b68:	4b25      	ldr	r3, [pc, #148]	; (8001c00 <HAL_RCC_ClockConfig+0x1ec>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f023 0207 	bic.w	r2, r3, #7
 8001b70:	4923      	ldr	r1, [pc, #140]	; (8001c00 <HAL_RCC_ClockConfig+0x1ec>)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b78:	4b21      	ldr	r3, [pc, #132]	; (8001c00 <HAL_RCC_ClockConfig+0x1ec>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d001      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e036      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d008      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b96:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <HAL_RCC_ClockConfig+0x1f0>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	4918      	ldr	r1, [pc, #96]	; (8001c04 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0308 	and.w	r3, r3, #8
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d009      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bb4:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	4910      	ldr	r1, [pc, #64]	; (8001c04 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bc8:	f000 f824 	bl	8001c14 <HAL_RCC_GetSysClockFreq>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	091b      	lsrs	r3, r3, #4
 8001bd4:	f003 030f 	and.w	r3, r3, #15
 8001bd8:	490b      	ldr	r1, [pc, #44]	; (8001c08 <HAL_RCC_ClockConfig+0x1f4>)
 8001bda:	5ccb      	ldrb	r3, [r1, r3]
 8001bdc:	f003 031f 	and.w	r3, r3, #31
 8001be0:	fa22 f303 	lsr.w	r3, r2, r3
 8001be4:	4a09      	ldr	r2, [pc, #36]	; (8001c0c <HAL_RCC_ClockConfig+0x1f8>)
 8001be6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <HAL_RCC_ClockConfig+0x1fc>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe ff2b 	bl	8000a48 <HAL_InitTick>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bf6:	7afb      	ldrb	r3, [r7, #11]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40022000 	.word	0x40022000
 8001c04:	40021000 	.word	0x40021000
 8001c08:	08005dd8 	.word	0x08005dd8
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	20000004 	.word	0x20000004

08001c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	; 0x24
 8001c18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c22:	4b3e      	ldr	r3, [pc, #248]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c2c:	4b3b      	ldr	r3, [pc, #236]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <HAL_RCC_GetSysClockFreq+0x34>
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	2b0c      	cmp	r3, #12
 8001c40:	d121      	bne.n	8001c86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d11e      	bne.n	8001c86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c48:	4b34      	ldr	r3, [pc, #208]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d107      	bne.n	8001c64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c54:	4b31      	ldr	r3, [pc, #196]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c5a:	0a1b      	lsrs	r3, r3, #8
 8001c5c:	f003 030f 	and.w	r3, r3, #15
 8001c60:	61fb      	str	r3, [r7, #28]
 8001c62:	e005      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c64:	4b2d      	ldr	r3, [pc, #180]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	091b      	lsrs	r3, r3, #4
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c70:	4a2b      	ldr	r2, [pc, #172]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d10d      	bne.n	8001c9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c84:	e00a      	b.n	8001c9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d102      	bne.n	8001c92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c8c:	4b25      	ldr	r3, [pc, #148]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c8e:	61bb      	str	r3, [r7, #24]
 8001c90:	e004      	b.n	8001c9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d101      	bne.n	8001c9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c98:	4b23      	ldr	r3, [pc, #140]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	2b0c      	cmp	r3, #12
 8001ca0:	d134      	bne.n	8001d0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ca2:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d003      	beq.n	8001cba <HAL_RCC_GetSysClockFreq+0xa6>
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	d003      	beq.n	8001cc0 <HAL_RCC_GetSysClockFreq+0xac>
 8001cb8:	e005      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cba:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cbc:	617b      	str	r3, [r7, #20]
      break;
 8001cbe:	e005      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cc0:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cc2:	617b      	str	r3, [r7, #20]
      break;
 8001cc4:	e002      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	617b      	str	r3, [r7, #20]
      break;
 8001cca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ccc:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cda:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	0a1b      	lsrs	r3, r3, #8
 8001ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	fb03 f202 	mul.w	r2, r3, r2
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	0e5b      	lsrs	r3, r3, #25
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d0c:	69bb      	ldr	r3, [r7, #24]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3724      	adds	r7, #36	; 0x24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	08005df0 	.word	0x08005df0
 8001d24:	00f42400 	.word	0x00f42400
 8001d28:	016e3600 	.word	0x016e3600

08001d2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20000000 	.word	0x20000000

08001d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d48:	f7ff fff0 	bl	8001d2c <HAL_RCC_GetHCLKFreq>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	0a1b      	lsrs	r3, r3, #8
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	4904      	ldr	r1, [pc, #16]	; (8001d6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d5a:	5ccb      	ldrb	r3, [r1, r3]
 8001d5c:	f003 031f 	and.w	r3, r3, #31
 8001d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	08005de8 	.word	0x08005de8

08001d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d74:	f7ff ffda 	bl	8001d2c <HAL_RCC_GetHCLKFreq>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	0adb      	lsrs	r3, r3, #11
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	4904      	ldr	r1, [pc, #16]	; (8001d98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d86:	5ccb      	ldrb	r3, [r1, r3]
 8001d88:	f003 031f 	and.w	r3, r3, #31
 8001d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40021000 	.word	0x40021000
 8001d98:	08005de8 	.word	0x08005de8

08001d9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001da4:	2300      	movs	r3, #0
 8001da6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001da8:	4b2a      	ldr	r3, [pc, #168]	; (8001e54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001db4:	f7ff f9b6 	bl	8001124 <HAL_PWREx_GetVoltageRange>
 8001db8:	6178      	str	r0, [r7, #20]
 8001dba:	e014      	b.n	8001de6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dbc:	4b25      	ldr	r3, [pc, #148]	; (8001e54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc0:	4a24      	ldr	r2, [pc, #144]	; (8001e54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc8:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001dd4:	f7ff f9a6 	bl	8001124 <HAL_PWREx_GetVoltageRange>
 8001dd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001dda:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dde:	4a1d      	ldr	r2, [pc, #116]	; (8001e54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dec:	d10b      	bne.n	8001e06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b80      	cmp	r3, #128	; 0x80
 8001df2:	d919      	bls.n	8001e28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2ba0      	cmp	r3, #160	; 0xa0
 8001df8:	d902      	bls.n	8001e00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	e013      	b.n	8001e28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e00:	2301      	movs	r3, #1
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	e010      	b.n	8001e28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b80      	cmp	r3, #128	; 0x80
 8001e0a:	d902      	bls.n	8001e12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	e00a      	b.n	8001e28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b80      	cmp	r3, #128	; 0x80
 8001e16:	d102      	bne.n	8001e1e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e18:	2302      	movs	r3, #2
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	e004      	b.n	8001e28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b70      	cmp	r3, #112	; 0x70
 8001e22:	d101      	bne.n	8001e28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e24:	2301      	movs	r3, #1
 8001e26:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f023 0207 	bic.w	r2, r3, #7
 8001e30:	4909      	ldr	r1, [pc, #36]	; (8001e58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e38:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d001      	beq.n	8001e4a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40022000 	.word	0x40022000

08001e5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e64:	2300      	movs	r3, #0
 8001e66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e68:	2300      	movs	r3, #0
 8001e6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d031      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e80:	d01a      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001e82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e86:	d814      	bhi.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d009      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e90:	d10f      	bne.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001e92:	4b5d      	ldr	r3, [pc, #372]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	4a5c      	ldr	r2, [pc, #368]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e9e:	e00c      	b.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 f9ce 	bl	8002248 <RCCEx_PLLSAI1_Config>
 8001eac:	4603      	mov	r3, r0
 8001eae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001eb0:	e003      	b.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	74fb      	strb	r3, [r7, #19]
      break;
 8001eb6:	e000      	b.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001eb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001eba:	7cfb      	ldrb	r3, [r7, #19]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10b      	bne.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ec0:	4b51      	ldr	r3, [pc, #324]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ece:	494e      	ldr	r1, [pc, #312]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ed6:	e001      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ed8:	7cfb      	ldrb	r3, [r7, #19]
 8001eda:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 809e 	beq.w	8002026 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001eee:	4b46      	ldr	r3, [pc, #280]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001efe:	2300      	movs	r3, #0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00d      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f04:	4b40      	ldr	r3, [pc, #256]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f08:	4a3f      	ldr	r2, [pc, #252]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f10:	4b3d      	ldr	r3, [pc, #244]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f20:	4b3a      	ldr	r3, [pc, #232]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a39      	ldr	r2, [pc, #228]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f2c:	f7fe fddc 	bl	8000ae8 <HAL_GetTick>
 8001f30:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f32:	e009      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f34:	f7fe fdd8 	bl	8000ae8 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d902      	bls.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	74fb      	strb	r3, [r7, #19]
        break;
 8001f46:	e005      	b.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f48:	4b30      	ldr	r3, [pc, #192]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0ef      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001f54:	7cfb      	ldrb	r3, [r7, #19]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d15a      	bne.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f5a:	4b2b      	ldr	r3, [pc, #172]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f64:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d01e      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d019      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f76:	4b24      	ldr	r3, [pc, #144]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f80:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f82:	4b21      	ldr	r3, [pc, #132]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f88:	4a1f      	ldr	r2, [pc, #124]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f92:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f98:	4a1b      	ldr	r2, [pc, #108]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fa2:	4a19      	ldr	r2, [pc, #100]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d016      	beq.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb4:	f7fe fd98 	bl	8000ae8 <HAL_GetTick>
 8001fb8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fba:	e00b      	b.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fbc:	f7fe fd94 	bl	8000ae8 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d902      	bls.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	74fb      	strb	r3, [r7, #19]
            break;
 8001fd2:	e006      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0ec      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001fe2:	7cfb      	ldrb	r3, [r7, #19]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10b      	bne.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fe8:	4b07      	ldr	r3, [pc, #28]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff6:	4904      	ldr	r1, [pc, #16]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001ffe:	e009      	b.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002000:	7cfb      	ldrb	r3, [r7, #19]
 8002002:	74bb      	strb	r3, [r7, #18]
 8002004:	e006      	b.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002010:	7cfb      	ldrb	r3, [r7, #19]
 8002012:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002014:	7c7b      	ldrb	r3, [r7, #17]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d105      	bne.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800201a:	4b8a      	ldr	r3, [pc, #552]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201e:	4a89      	ldr	r2, [pc, #548]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002024:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00a      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002032:	4b84      	ldr	r3, [pc, #528]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002038:	f023 0203 	bic.w	r2, r3, #3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	4980      	ldr	r1, [pc, #512]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002042:	4313      	orrs	r3, r2
 8002044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00a      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002054:	4b7b      	ldr	r3, [pc, #492]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205a:	f023 020c 	bic.w	r2, r3, #12
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	4978      	ldr	r1, [pc, #480]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002064:	4313      	orrs	r3, r2
 8002066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0320 	and.w	r3, r3, #32
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00a      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002076:	4b73      	ldr	r3, [pc, #460]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	496f      	ldr	r1, [pc, #444]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002086:	4313      	orrs	r3, r2
 8002088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00a      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002098:	4b6a      	ldr	r3, [pc, #424]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800209a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a6:	4967      	ldr	r1, [pc, #412]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00a      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020ba:	4b62      	ldr	r3, [pc, #392]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c8:	495e      	ldr	r1, [pc, #376]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00a      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020dc:	4b59      	ldr	r3, [pc, #356]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ea:	4956      	ldr	r1, [pc, #344]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00a      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020fe:	4b51      	ldr	r3, [pc, #324]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002104:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210c:	494d      	ldr	r1, [pc, #308]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800210e:	4313      	orrs	r3, r2
 8002110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d028      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002120:	4b48      	ldr	r3, [pc, #288]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002126:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	4945      	ldr	r1, [pc, #276]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002130:	4313      	orrs	r3, r2
 8002132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800213e:	d106      	bne.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002140:	4b40      	ldr	r3, [pc, #256]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4a3f      	ldr	r2, [pc, #252]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002146:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800214a:	60d3      	str	r3, [r2, #12]
 800214c:	e011      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002156:	d10c      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3304      	adds	r3, #4
 800215c:	2101      	movs	r1, #1
 800215e:	4618      	mov	r0, r3
 8002160:	f000 f872 	bl	8002248 <RCCEx_PLLSAI1_Config>
 8002164:	4603      	mov	r3, r0
 8002166:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002168:	7cfb      	ldrb	r3, [r7, #19]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800216e:	7cfb      	ldrb	r3, [r7, #19]
 8002170:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d028      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800217e:	4b31      	ldr	r3, [pc, #196]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002184:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218c:	492d      	ldr	r1, [pc, #180]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002198:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800219c:	d106      	bne.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800219e:	4b29      	ldr	r3, [pc, #164]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	4a28      	ldr	r2, [pc, #160]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021a8:	60d3      	str	r3, [r2, #12]
 80021aa:	e011      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021b4:	d10c      	bne.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3304      	adds	r3, #4
 80021ba:	2101      	movs	r1, #1
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 f843 	bl	8002248 <RCCEx_PLLSAI1_Config>
 80021c2:	4603      	mov	r3, r0
 80021c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021c6:	7cfb      	ldrb	r3, [r7, #19]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80021cc:	7cfb      	ldrb	r3, [r7, #19]
 80021ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d01c      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ea:	4916      	ldr	r1, [pc, #88]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021fa:	d10c      	bne.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3304      	adds	r3, #4
 8002200:	2102      	movs	r1, #2
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f820 	bl	8002248 <RCCEx_PLLSAI1_Config>
 8002208:	4603      	mov	r3, r0
 800220a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800220c:	7cfb      	ldrb	r3, [r7, #19]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002212:	7cfb      	ldrb	r3, [r7, #19]
 8002214:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00a      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002222:	4b08      	ldr	r3, [pc, #32]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002228:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002230:	4904      	ldr	r1, [pc, #16]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002232:	4313      	orrs	r3, r2
 8002234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002238:	7cbb      	ldrb	r3, [r7, #18]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000

08002248 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002256:	4b74      	ldr	r3, [pc, #464]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d018      	beq.n	8002294 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002262:	4b71      	ldr	r3, [pc, #452]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	f003 0203 	and.w	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d10d      	bne.n	800228e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
       ||
 8002276:	2b00      	cmp	r3, #0
 8002278:	d009      	beq.n	800228e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800227a:	4b6b      	ldr	r3, [pc, #428]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e0>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	091b      	lsrs	r3, r3, #4
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
       ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d047      	beq.n	800231e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	73fb      	strb	r3, [r7, #15]
 8002292:	e044      	b.n	800231e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d018      	beq.n	80022ce <RCCEx_PLLSAI1_Config+0x86>
 800229c:	2b03      	cmp	r3, #3
 800229e:	d825      	bhi.n	80022ec <RCCEx_PLLSAI1_Config+0xa4>
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d002      	beq.n	80022aa <RCCEx_PLLSAI1_Config+0x62>
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d009      	beq.n	80022bc <RCCEx_PLLSAI1_Config+0x74>
 80022a8:	e020      	b.n	80022ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022aa:	4b5f      	ldr	r3, [pc, #380]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d11d      	bne.n	80022f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022ba:	e01a      	b.n	80022f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022bc:	4b5a      	ldr	r3, [pc, #360]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d116      	bne.n	80022f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022cc:	e013      	b.n	80022f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022ce:	4b56      	ldr	r3, [pc, #344]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10f      	bne.n	80022fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022da:	4b53      	ldr	r3, [pc, #332]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d109      	bne.n	80022fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80022ea:	e006      	b.n	80022fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
      break;
 80022f0:	e004      	b.n	80022fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022f2:	bf00      	nop
 80022f4:	e002      	b.n	80022fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022f6:	bf00      	nop
 80022f8:	e000      	b.n	80022fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10d      	bne.n	800231e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002302:	4b49      	ldr	r3, [pc, #292]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6819      	ldr	r1, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	3b01      	subs	r3, #1
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	430b      	orrs	r3, r1
 8002318:	4943      	ldr	r1, [pc, #268]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e0>)
 800231a:	4313      	orrs	r3, r2
 800231c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d17c      	bne.n	800241e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002324:	4b40      	ldr	r3, [pc, #256]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a3f      	ldr	r2, [pc, #252]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e0>)
 800232a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800232e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002330:	f7fe fbda 	bl	8000ae8 <HAL_GetTick>
 8002334:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002336:	e009      	b.n	800234c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002338:	f7fe fbd6 	bl	8000ae8 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d902      	bls.n	800234c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	73fb      	strb	r3, [r7, #15]
        break;
 800234a:	e005      	b.n	8002358 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800234c:	4b36      	ldr	r3, [pc, #216]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e0>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1ef      	bne.n	8002338 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d15f      	bne.n	800241e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d110      	bne.n	8002386 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002364:	4b30      	ldr	r3, [pc, #192]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800236c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6892      	ldr	r2, [r2, #8]
 8002374:	0211      	lsls	r1, r2, #8
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68d2      	ldr	r2, [r2, #12]
 800237a:	06d2      	lsls	r2, r2, #27
 800237c:	430a      	orrs	r2, r1
 800237e:	492a      	ldr	r1, [pc, #168]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002380:	4313      	orrs	r3, r2
 8002382:	610b      	str	r3, [r1, #16]
 8002384:	e027      	b.n	80023d6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d112      	bne.n	80023b2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800238c:	4b26      	ldr	r3, [pc, #152]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e0>)
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002394:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6892      	ldr	r2, [r2, #8]
 800239c:	0211      	lsls	r1, r2, #8
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6912      	ldr	r2, [r2, #16]
 80023a2:	0852      	lsrs	r2, r2, #1
 80023a4:	3a01      	subs	r2, #1
 80023a6:	0552      	lsls	r2, r2, #21
 80023a8:	430a      	orrs	r2, r1
 80023aa:	491f      	ldr	r1, [pc, #124]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	610b      	str	r3, [r1, #16]
 80023b0:	e011      	b.n	80023d6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023b2:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80023ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6892      	ldr	r2, [r2, #8]
 80023c2:	0211      	lsls	r1, r2, #8
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6952      	ldr	r2, [r2, #20]
 80023c8:	0852      	lsrs	r2, r2, #1
 80023ca:	3a01      	subs	r2, #1
 80023cc:	0652      	lsls	r2, r2, #25
 80023ce:	430a      	orrs	r2, r1
 80023d0:	4915      	ldr	r1, [pc, #84]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80023d6:	4b14      	ldr	r3, [pc, #80]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a13      	ldr	r2, [pc, #76]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e2:	f7fe fb81 	bl	8000ae8 <HAL_GetTick>
 80023e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023e8:	e009      	b.n	80023fe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023ea:	f7fe fb7d 	bl	8000ae8 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d902      	bls.n	80023fe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	73fb      	strb	r3, [r7, #15]
          break;
 80023fc:	e005      	b.n	800240a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0ef      	beq.n	80023ea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800240a:	7bfb      	ldrb	r3, [r7, #15]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d106      	bne.n	800241e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002410:	4b05      	ldr	r3, [pc, #20]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002412:	691a      	ldr	r2, [r3, #16]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	4903      	ldr	r1, [pc, #12]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e0>)
 800241a:	4313      	orrs	r3, r2
 800241c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800241e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40021000 	.word	0x40021000

0800242c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e049      	b.n	80024d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7fe f9f0 	bl	8000838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3304      	adds	r3, #4
 8002468:	4619      	mov	r1, r3
 800246a:	4610      	mov	r0, r2
 800246c:	f000 faca 	bl	8002a04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d001      	beq.n	80024f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e03b      	b.n	800256c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2202      	movs	r2, #2
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0201 	orr.w	r2, r2, #1
 800250a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a19      	ldr	r2, [pc, #100]	; (8002578 <HAL_TIM_Base_Start_IT+0x9c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d009      	beq.n	800252a <HAL_TIM_Base_Start_IT+0x4e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800251e:	d004      	beq.n	800252a <HAL_TIM_Base_Start_IT+0x4e>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a15      	ldr	r2, [pc, #84]	; (800257c <HAL_TIM_Base_Start_IT+0xa0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d115      	bne.n	8002556 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	4b13      	ldr	r3, [pc, #76]	; (8002580 <HAL_TIM_Base_Start_IT+0xa4>)
 8002532:	4013      	ands	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b06      	cmp	r3, #6
 800253a:	d015      	beq.n	8002568 <HAL_TIM_Base_Start_IT+0x8c>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002542:	d011      	beq.n	8002568 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002554:	e008      	b.n	8002568 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f042 0201 	orr.w	r2, r2, #1
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	e000      	b.n	800256a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002568:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	40012c00 	.word	0x40012c00
 800257c:	40014000 	.word	0x40014000
 8002580:	00010007 	.word	0x00010007

08002584 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0201 	bic.w	r2, r2, #1
 800259a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6a1a      	ldr	r2, [r3, #32]
 80025a2:	f241 1311 	movw	r3, #4369	; 0x1111
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10f      	bne.n	80025cc <HAL_TIM_Base_Stop_IT+0x48>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6a1a      	ldr	r2, [r3, #32]
 80025b2:	f240 4344 	movw	r3, #1092	; 0x444
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d107      	bne.n	80025cc <HAL_TIM_Base_Stop_IT+0x48>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0201 	bic.w	r2, r2, #1
 80025ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d122      	bne.n	800263e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b02      	cmp	r3, #2
 8002604:	d11b      	bne.n	800263e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f06f 0202 	mvn.w	r2, #2
 800260e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f9ce 	bl	80029c6 <HAL_TIM_IC_CaptureCallback>
 800262a:	e005      	b.n	8002638 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f9c0 	bl	80029b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f9d1 	bl	80029da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b04      	cmp	r3, #4
 800264a:	d122      	bne.n	8002692 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b04      	cmp	r3, #4
 8002658:	d11b      	bne.n	8002692 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f06f 0204 	mvn.w	r2, #4
 8002662:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f9a4 	bl	80029c6 <HAL_TIM_IC_CaptureCallback>
 800267e:	e005      	b.n	800268c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f996 	bl	80029b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f9a7 	bl	80029da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b08      	cmp	r3, #8
 800269e:	d122      	bne.n	80026e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d11b      	bne.n	80026e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f06f 0208 	mvn.w	r2, #8
 80026b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2204      	movs	r2, #4
 80026bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f97a 	bl	80029c6 <HAL_TIM_IC_CaptureCallback>
 80026d2:	e005      	b.n	80026e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f96c 	bl	80029b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f97d 	bl	80029da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	2b10      	cmp	r3, #16
 80026f2:	d122      	bne.n	800273a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	2b10      	cmp	r3, #16
 8002700:	d11b      	bne.n	800273a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f06f 0210 	mvn.w	r2, #16
 800270a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2208      	movs	r2, #8
 8002710:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f950 	bl	80029c6 <HAL_TIM_IC_CaptureCallback>
 8002726:	e005      	b.n	8002734 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f942 	bl	80029b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f953 	bl	80029da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b01      	cmp	r3, #1
 8002746:	d10e      	bne.n	8002766 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b01      	cmp	r3, #1
 8002754:	d107      	bne.n	8002766 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f06f 0201 	mvn.w	r2, #1
 800275e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f001 ffc5 	bl	80046f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002770:	2b80      	cmp	r3, #128	; 0x80
 8002772:	d10e      	bne.n	8002792 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277e:	2b80      	cmp	r3, #128	; 0x80
 8002780:	d107      	bne.n	8002792 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800278a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 faa7 	bl	8002ce0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027a0:	d10e      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ac:	2b80      	cmp	r3, #128	; 0x80
 80027ae:	d107      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80027b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 fa9a 	bl	8002cf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ca:	2b40      	cmp	r3, #64	; 0x40
 80027cc:	d10e      	bne.n	80027ec <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d8:	2b40      	cmp	r3, #64	; 0x40
 80027da:	d107      	bne.n	80027ec <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f901 	bl	80029ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f003 0320 	and.w	r3, r3, #32
 80027f6:	2b20      	cmp	r3, #32
 80027f8:	d10e      	bne.n	8002818 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f003 0320 	and.w	r3, r3, #32
 8002804:	2b20      	cmp	r3, #32
 8002806:	d107      	bne.n	8002818 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f06f 0220 	mvn.w	r2, #32
 8002810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fa5a 	bl	8002ccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002818:	bf00      	nop
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_TIM_ConfigClockSource+0x1c>
 8002838:	2302      	movs	r3, #2
 800283a:	e0b6      	b.n	80029aa <HAL_TIM_ConfigClockSource+0x18a>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800285e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002866:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002878:	d03e      	beq.n	80028f8 <HAL_TIM_ConfigClockSource+0xd8>
 800287a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800287e:	f200 8087 	bhi.w	8002990 <HAL_TIM_ConfigClockSource+0x170>
 8002882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002886:	f000 8086 	beq.w	8002996 <HAL_TIM_ConfigClockSource+0x176>
 800288a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800288e:	d87f      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x170>
 8002890:	2b70      	cmp	r3, #112	; 0x70
 8002892:	d01a      	beq.n	80028ca <HAL_TIM_ConfigClockSource+0xaa>
 8002894:	2b70      	cmp	r3, #112	; 0x70
 8002896:	d87b      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x170>
 8002898:	2b60      	cmp	r3, #96	; 0x60
 800289a:	d050      	beq.n	800293e <HAL_TIM_ConfigClockSource+0x11e>
 800289c:	2b60      	cmp	r3, #96	; 0x60
 800289e:	d877      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x170>
 80028a0:	2b50      	cmp	r3, #80	; 0x50
 80028a2:	d03c      	beq.n	800291e <HAL_TIM_ConfigClockSource+0xfe>
 80028a4:	2b50      	cmp	r3, #80	; 0x50
 80028a6:	d873      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x170>
 80028a8:	2b40      	cmp	r3, #64	; 0x40
 80028aa:	d058      	beq.n	800295e <HAL_TIM_ConfigClockSource+0x13e>
 80028ac:	2b40      	cmp	r3, #64	; 0x40
 80028ae:	d86f      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x170>
 80028b0:	2b30      	cmp	r3, #48	; 0x30
 80028b2:	d064      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x15e>
 80028b4:	2b30      	cmp	r3, #48	; 0x30
 80028b6:	d86b      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x170>
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	d060      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x15e>
 80028bc:	2b20      	cmp	r3, #32
 80028be:	d867      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x170>
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d05c      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x15e>
 80028c4:	2b10      	cmp	r3, #16
 80028c6:	d05a      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x15e>
 80028c8:	e062      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6899      	ldr	r1, [r3, #8]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f000 f971 	bl	8002bc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	609a      	str	r2, [r3, #8]
      break;
 80028f6:	e04f      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	6899      	ldr	r1, [r3, #8]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f000 f95a 	bl	8002bc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800291a:	609a      	str	r2, [r3, #8]
      break;
 800291c:	e03c      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6859      	ldr	r1, [r3, #4]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	461a      	mov	r2, r3
 800292c:	f000 f8ce 	bl	8002acc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2150      	movs	r1, #80	; 0x50
 8002936:	4618      	mov	r0, r3
 8002938:	f000 f927 	bl	8002b8a <TIM_ITRx_SetConfig>
      break;
 800293c:	e02c      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6859      	ldr	r1, [r3, #4]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	461a      	mov	r2, r3
 800294c:	f000 f8ed 	bl	8002b2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2160      	movs	r1, #96	; 0x60
 8002956:	4618      	mov	r0, r3
 8002958:	f000 f917 	bl	8002b8a <TIM_ITRx_SetConfig>
      break;
 800295c:	e01c      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6818      	ldr	r0, [r3, #0]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	6859      	ldr	r1, [r3, #4]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	461a      	mov	r2, r3
 800296c:	f000 f8ae 	bl	8002acc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2140      	movs	r1, #64	; 0x40
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f907 	bl	8002b8a <TIM_ITRx_SetConfig>
      break;
 800297c:	e00c      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4619      	mov	r1, r3
 8002988:	4610      	mov	r0, r2
 800298a:	f000 f8fe 	bl	8002b8a <TIM_ITRx_SetConfig>
      break;
 800298e:	e003      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
      break;
 8002994:	e000      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002996:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a2a      	ldr	r2, [pc, #168]	; (8002ac0 <TIM_Base_SetConfig+0xbc>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d003      	beq.n	8002a24 <TIM_Base_SetConfig+0x20>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a22:	d108      	bne.n	8002a36 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a21      	ldr	r2, [pc, #132]	; (8002ac0 <TIM_Base_SetConfig+0xbc>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00b      	beq.n	8002a56 <TIM_Base_SetConfig+0x52>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a44:	d007      	beq.n	8002a56 <TIM_Base_SetConfig+0x52>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a1e      	ldr	r2, [pc, #120]	; (8002ac4 <TIM_Base_SetConfig+0xc0>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d003      	beq.n	8002a56 <TIM_Base_SetConfig+0x52>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a1d      	ldr	r2, [pc, #116]	; (8002ac8 <TIM_Base_SetConfig+0xc4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d108      	bne.n	8002a68 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a0c      	ldr	r2, [pc, #48]	; (8002ac0 <TIM_Base_SetConfig+0xbc>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d007      	beq.n	8002aa4 <TIM_Base_SetConfig+0xa0>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a0b      	ldr	r2, [pc, #44]	; (8002ac4 <TIM_Base_SetConfig+0xc0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d003      	beq.n	8002aa4 <TIM_Base_SetConfig+0xa0>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <TIM_Base_SetConfig+0xc4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d103      	bne.n	8002aac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	615a      	str	r2, [r3, #20]
}
 8002ab2:	bf00      	nop
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40012c00 	.word	0x40012c00
 8002ac4:	40014000 	.word	0x40014000
 8002ac8:	40014400 	.word	0x40014400

08002acc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	f023 0201 	bic.w	r2, r3, #1
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f023 030a 	bic.w	r3, r3, #10
 8002b08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	621a      	str	r2, [r3, #32]
}
 8002b1e:	bf00      	nop
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b087      	sub	sp, #28
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	f023 0210 	bic.w	r2, r3, #16
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	031b      	lsls	r3, r3, #12
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	621a      	str	r2, [r3, #32]
}
 8002b7e:	bf00      	nop
 8002b80:	371c      	adds	r7, #28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b085      	sub	sp, #20
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f043 0307 	orr.w	r3, r3, #7
 8002bac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	609a      	str	r2, [r3, #8]
}
 8002bb4:	bf00      	nop
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
 8002bcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	021a      	lsls	r2, r3, #8
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	609a      	str	r2, [r3, #8]
}
 8002bf4:	bf00      	nop
 8002bf6:	371c      	adds	r7, #28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e04f      	b.n	8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a21      	ldr	r2, [pc, #132]	; (8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d108      	bne.n	8002c54 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002c48:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a14      	ldr	r2, [pc, #80]	; (8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d009      	beq.n	8002c8c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c80:	d004      	beq.n	8002c8c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a10      	ldr	r2, [pc, #64]	; (8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d10c      	bne.n	8002ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	40012c00 	.word	0x40012c00
 8002cc8:	40014000 	.word	0x40014000

08002ccc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e040      	b.n	8002d9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d106      	bne.n	8002d30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7fd fdd8 	bl	80008e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2224      	movs	r2, #36	; 0x24
 8002d34:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0201 	bic.w	r2, r2, #1
 8002d44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fcba 	bl	80036c0 <UART_SetConfig>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e022      	b.n	8002d9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 feda 	bl	8003b18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0201 	orr.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 ff61 	bl	8003c5c <UART_CheckIdleState>
 8002d9a:	4603      	mov	r3, r0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b08b      	sub	sp, #44	; 0x2c
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	4613      	mov	r3, r2
 8002db0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002db6:	2b20      	cmp	r3, #32
 8002db8:	d156      	bne.n	8002e68 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <HAL_UART_Transmit_IT+0x22>
 8002dc0:	88fb      	ldrh	r3, [r7, #6]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e04f      	b.n	8002e6a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d101      	bne.n	8002dd8 <HAL_UART_Transmit_IT+0x34>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	e048      	b.n	8002e6a <HAL_UART_Transmit_IT+0xc6>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	88fa      	ldrh	r2, [r7, #6]
 8002dea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	88fa      	ldrh	r2, [r7, #6]
 8002df2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2221      	movs	r2, #33	; 0x21
 8002e08:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e12:	d107      	bne.n	8002e24 <HAL_UART_Transmit_IT+0x80>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d103      	bne.n	8002e24 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4a16      	ldr	r2, [pc, #88]	; (8002e78 <HAL_UART_Transmit_IT+0xd4>)
 8002e20:	669a      	str	r2, [r3, #104]	; 0x68
 8002e22:	e002      	b.n	8002e2a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4a15      	ldr	r2, [pc, #84]	; (8002e7c <HAL_UART_Transmit_IT+0xd8>)
 8002e28:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	e853 3f00 	ldrex	r3, [r3]
 8002e3e:	613b      	str	r3, [r7, #16]
   return(result);
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	623b      	str	r3, [r7, #32]
 8002e52:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e54:	69f9      	ldr	r1, [r7, #28]
 8002e56:	6a3a      	ldr	r2, [r7, #32]
 8002e58:	e841 2300 	strex	r3, r2, [r1]
 8002e5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1e6      	bne.n	8002e32 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	e000      	b.n	8002e6a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8002e68:	2302      	movs	r3, #2
  }
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	372c      	adds	r7, #44	; 0x2c
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	08004203 	.word	0x08004203
 8002e7c:	0800414b 	.word	0x0800414b

08002e80 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08a      	sub	sp, #40	; 0x28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e92:	2b20      	cmp	r3, #32
 8002e94:	d142      	bne.n	8002f1c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <HAL_UART_Receive_IT+0x22>
 8002e9c:	88fb      	ldrh	r3, [r7, #6]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e03b      	b.n	8002f1e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_UART_Receive_IT+0x34>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e034      	b.n	8002f1e <HAL_UART_Receive_IT+0x9e>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a18      	ldr	r2, [pc, #96]	; (8002f28 <HAL_UART_Receive_IT+0xa8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d01f      	beq.n	8002f0c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d018      	beq.n	8002f0c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	e853 3f00 	ldrex	r3, [r3]
 8002ee6:	613b      	str	r3, [r7, #16]
   return(result);
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	623b      	str	r3, [r7, #32]
 8002efa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002efc:	69f9      	ldr	r1, [r7, #28]
 8002efe:	6a3a      	ldr	r2, [r7, #32]
 8002f00:	e841 2300 	strex	r3, r2, [r1]
 8002f04:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1e6      	bne.n	8002eda <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f0c:	88fb      	ldrh	r3, [r7, #6]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 ffb0 	bl	8003e78 <UART_Start_Receive_IT>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	e000      	b.n	8002f1e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002f1c:	2302      	movs	r3, #2
  }
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3728      	adds	r7, #40	; 0x28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40008000 	.word	0x40008000

08002f2c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b09a      	sub	sp, #104	; 0x68
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f3c:	e853 3f00 	ldrex	r3, [r3]
 8002f40:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f48:	667b      	str	r3, [r7, #100]	; 0x64
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f52:	657b      	str	r3, [r7, #84]	; 0x54
 8002f54:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f56:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002f58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f5a:	e841 2300 	strex	r3, r2, [r1]
 8002f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1e6      	bne.n	8002f34 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	3308      	adds	r3, #8
 8002f6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f70:	e853 3f00 	ldrex	r3, [r3]
 8002f74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	f023 0301 	bic.w	r3, r3, #1
 8002f7c:	663b      	str	r3, [r7, #96]	; 0x60
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3308      	adds	r3, #8
 8002f84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f86:	643a      	str	r2, [r7, #64]	; 0x40
 8002f88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f8e:	e841 2300 	strex	r3, r2, [r1]
 8002f92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1e5      	bne.n	8002f66 <HAL_UART_AbortReceive_IT+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d118      	bne.n	8002fd4 <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	e853 3f00 	ldrex	r3, [r3]
 8002fae:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f023 0310 	bic.w	r3, r3, #16
 8002fb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fc2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fc8:	e841 2300 	strex	r3, r2, [r1]
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1e6      	bne.n	8002fa2 <HAL_UART_AbortReceive_IT+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fde:	2b40      	cmp	r3, #64	; 0x40
 8002fe0:	d150      	bne.n	8003084 <HAL_UART_AbortReceive_IT+0x158>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	3308      	adds	r3, #8
 8002fe8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	e853 3f00 	ldrex	r3, [r3]
 8002ff0:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ff8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	3308      	adds	r3, #8
 8003000:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003002:	61ba      	str	r2, [r7, #24]
 8003004:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003006:	6979      	ldr	r1, [r7, #20]
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	e841 2300 	strex	r3, r2, [r1]
 800300e:	613b      	str	r3, [r7, #16]
   return(result);
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1e5      	bne.n	8002fe2 <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301a:	2b00      	cmp	r3, #0
 800301c:	d013      	beq.n	8003046 <HAL_UART_AbortReceive_IT+0x11a>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	4a25      	ldr	r2, [pc, #148]	; (80030b8 <HAL_UART_AbortReceive_IT+0x18c>)
 8003024:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302a:	4618      	mov	r0, r3
 800302c:	f7fd feb7 	bl	8000d9e <HAL_DMA_Abort_IT>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d03a      	beq.n	80030ac <HAL_UART_AbortReceive_IT+0x180>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003040:	4610      	mov	r0, r2
 8003042:	4798      	blx	r3
 8003044:	e032      	b.n	80030ac <HAL_UART_AbortReceive_IT+0x180>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	220f      	movs	r2, #15
 800305a:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	8b1b      	ldrh	r3, [r3, #24]
 8003062:	b29a      	uxth	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f042 0208 	orr.w	r2, r2, #8
 800306c:	b292      	uxth	r2, r2
 800306e:	831a      	strh	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2220      	movs	r2, #32
 8003074:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 fb09 	bl	8003694 <HAL_UART_AbortReceiveCpltCallback>
 8003082:	e013      	b.n	80030ac <HAL_UART_AbortReceive_IT+0x180>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	220f      	movs	r2, #15
 8003098:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2220      	movs	r2, #32
 800309e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 faf4 	bl	8003694 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3768      	adds	r7, #104	; 0x68
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	080040ff 	.word	0x080040ff

080030bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b0ba      	sub	sp, #232	; 0xe8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80030e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80030e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80030ea:	4013      	ands	r3, r2
 80030ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80030f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d115      	bne.n	8003124 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80030f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030fc:	f003 0320 	and.w	r3, r3, #32
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00f      	beq.n	8003124 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b00      	cmp	r3, #0
 800310e:	d009      	beq.n	8003124 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 82a6 	beq.w	8003666 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	4798      	blx	r3
      }
      return;
 8003122:	e2a0      	b.n	8003666 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003124:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 8117 	beq.w	800335c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800312e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800313a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800313e:	4b85      	ldr	r3, [pc, #532]	; (8003354 <HAL_UART_IRQHandler+0x298>)
 8003140:	4013      	ands	r3, r2
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 810a 	beq.w	800335c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d011      	beq.n	8003178 <HAL_UART_IRQHandler+0xbc>
 8003154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00b      	beq.n	8003178 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2201      	movs	r2, #1
 8003166:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800316e:	f043 0201 	orr.w	r2, r3, #1
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d011      	beq.n	80031a8 <HAL_UART_IRQHandler+0xec>
 8003184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00b      	beq.n	80031a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2202      	movs	r2, #2
 8003196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800319e:	f043 0204 	orr.w	r2, r3, #4
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d011      	beq.n	80031d8 <HAL_UART_IRQHandler+0x11c>
 80031b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00b      	beq.n	80031d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2204      	movs	r2, #4
 80031c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ce:	f043 0202 	orr.w	r2, r3, #2
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80031d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d017      	beq.n	8003214 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d105      	bne.n	80031fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80031f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00b      	beq.n	8003214 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2208      	movs	r2, #8
 8003202:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800320a:	f043 0208 	orr.w	r2, r3, #8
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800321c:	2b00      	cmp	r3, #0
 800321e:	d012      	beq.n	8003246 <HAL_UART_IRQHandler+0x18a>
 8003220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003224:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00c      	beq.n	8003246 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003234:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800323c:	f043 0220 	orr.w	r2, r3, #32
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 820c 	beq.w	800366a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003256:	f003 0320 	and.w	r3, r3, #32
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00d      	beq.n	800327a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800325e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003262:	f003 0320 	and.w	r3, r3, #32
 8003266:	2b00      	cmp	r3, #0
 8003268:	d007      	beq.n	800327a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003280:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328e:	2b40      	cmp	r3, #64	; 0x40
 8003290:	d005      	beq.n	800329e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003292:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003296:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800329a:	2b00      	cmp	r3, #0
 800329c:	d04f      	beq.n	800333e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 feb4 	bl	800400c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ae:	2b40      	cmp	r3, #64	; 0x40
 80032b0:	d141      	bne.n	8003336 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	3308      	adds	r3, #8
 80032b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032c0:	e853 3f00 	ldrex	r3, [r3]
 80032c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80032c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3308      	adds	r3, #8
 80032da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80032de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80032e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80032ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80032ee:	e841 2300 	strex	r3, r2, [r1]
 80032f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80032f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1d9      	bne.n	80032b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	2b00      	cmp	r3, #0
 8003304:	d013      	beq.n	800332e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330a:	4a13      	ldr	r2, [pc, #76]	; (8003358 <HAL_UART_IRQHandler+0x29c>)
 800330c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003312:	4618      	mov	r0, r3
 8003314:	f7fd fd43 	bl	8000d9e <HAL_DMA_Abort_IT>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d017      	beq.n	800334e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003328:	4610      	mov	r0, r2
 800332a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800332c:	e00f      	b.n	800334e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f9a6 	bl	8003680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003334:	e00b      	b.n	800334e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f9a2 	bl	8003680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800333c:	e007      	b.n	800334e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f99e 	bl	8003680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800334c:	e18d      	b.n	800366a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800334e:	bf00      	nop
    return;
 8003350:	e18b      	b.n	800366a <HAL_UART_IRQHandler+0x5ae>
 8003352:	bf00      	nop
 8003354:	04000120 	.word	0x04000120
 8003358:	080040d3 	.word	0x080040d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003360:	2b01      	cmp	r3, #1
 8003362:	f040 8146 	bne.w	80035f2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800336a:	f003 0310 	and.w	r3, r3, #16
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 813f 	beq.w	80035f2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 8138 	beq.w	80035f2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2210      	movs	r2, #16
 8003388:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003394:	2b40      	cmp	r3, #64	; 0x40
 8003396:	f040 80b4 	bne.w	8003502 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 815f 	beq.w	800366e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80033b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033ba:	429a      	cmp	r2, r3
 80033bc:	f080 8157 	bcs.w	800366e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0320 	and.w	r3, r3, #32
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f040 8085 	bne.w	80034e6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033e8:	e853 3f00 	ldrex	r3, [r3]
 80033ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80033f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	461a      	mov	r2, r3
 8003402:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003406:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800340a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003412:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003416:	e841 2300 	strex	r3, r2, [r1]
 800341a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800341e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1da      	bne.n	80033dc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	3308      	adds	r3, #8
 800342c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003430:	e853 3f00 	ldrex	r3, [r3]
 8003434:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003436:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003438:	f023 0301 	bic.w	r3, r3, #1
 800343c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	3308      	adds	r3, #8
 8003446:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800344a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800344e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003450:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003452:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003456:	e841 2300 	strex	r3, r2, [r1]
 800345a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800345c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1e1      	bne.n	8003426 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	3308      	adds	r3, #8
 8003468:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800346c:	e853 3f00 	ldrex	r3, [r3]
 8003470:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003478:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	3308      	adds	r3, #8
 8003482:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003486:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003488:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800348c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800348e:	e841 2300 	strex	r3, r2, [r1]
 8003492:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1e3      	bne.n	8003462 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2220      	movs	r2, #32
 800349e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ae:	e853 3f00 	ldrex	r3, [r3]
 80034b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80034b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034b6:	f023 0310 	bic.w	r3, r3, #16
 80034ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80034ca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034d0:	e841 2300 	strex	r3, r2, [r1]
 80034d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80034d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1e4      	bne.n	80034a6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fd fc1e 	bl	8000d22 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	4619      	mov	r1, r3
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f8d4 	bl	80036a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003500:	e0b5      	b.n	800366e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800350e:	b29b      	uxth	r3, r3
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800351c:	b29b      	uxth	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 80a7 	beq.w	8003672 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003524:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 80a2 	beq.w	8003672 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003536:	e853 3f00 	ldrex	r3, [r3]
 800353a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800353c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800353e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003542:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	461a      	mov	r2, r3
 800354c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003550:	647b      	str	r3, [r7, #68]	; 0x44
 8003552:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003554:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003556:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003558:	e841 2300 	strex	r3, r2, [r1]
 800355c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800355e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1e4      	bne.n	800352e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	3308      	adds	r3, #8
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	e853 3f00 	ldrex	r3, [r3]
 8003572:	623b      	str	r3, [r7, #32]
   return(result);
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	f023 0301 	bic.w	r3, r3, #1
 800357a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	3308      	adds	r3, #8
 8003584:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003588:	633a      	str	r2, [r7, #48]	; 0x30
 800358a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800358e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003590:	e841 2300 	strex	r3, r2, [r1]
 8003594:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1e3      	bne.n	8003564 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2220      	movs	r2, #32
 80035a0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	e853 3f00 	ldrex	r3, [r3]
 80035ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0310 	bic.w	r3, r3, #16
 80035c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035d0:	61fb      	str	r3, [r7, #28]
 80035d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d4:	69b9      	ldr	r1, [r7, #24]
 80035d6:	69fa      	ldr	r2, [r7, #28]
 80035d8:	e841 2300 	strex	r3, r2, [r1]
 80035dc:	617b      	str	r3, [r7, #20]
   return(result);
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1e4      	bne.n	80035ae <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035e8:	4619      	mov	r1, r3
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f85c 	bl	80036a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035f0:	e03f      	b.n	8003672 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80035f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00e      	beq.n	800361c <HAL_UART_IRQHandler+0x560>
 80035fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d008      	beq.n	800361c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003612:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 ffde 	bl	80045d6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800361a:	e02d      	b.n	8003678 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800361c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00e      	beq.n	8003646 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800362c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003638:	2b00      	cmp	r3, #0
 800363a:	d01c      	beq.n	8003676 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	4798      	blx	r3
    }
    return;
 8003644:	e017      	b.n	8003676 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800364a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364e:	2b00      	cmp	r3, #0
 8003650:	d012      	beq.n	8003678 <HAL_UART_IRQHandler+0x5bc>
 8003652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00c      	beq.n	8003678 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 fe2f 	bl	80042c2 <UART_EndTransmit_IT>
    return;
 8003664:	e008      	b.n	8003678 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003666:	bf00      	nop
 8003668:	e006      	b.n	8003678 <HAL_UART_IRQHandler+0x5bc>
    return;
 800366a:	bf00      	nop
 800366c:	e004      	b.n	8003678 <HAL_UART_IRQHandler+0x5bc>
      return;
 800366e:	bf00      	nop
 8003670:	e002      	b.n	8003678 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003672:	bf00      	nop
 8003674:	e000      	b.n	8003678 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003676:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003678:	37e8      	adds	r7, #232	; 0xe8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop

08003680 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036c4:	b08a      	sub	sp, #40	; 0x28
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	431a      	orrs	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	431a      	orrs	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	4bb4      	ldr	r3, [pc, #720]	; (80039c0 <UART_SetConfig+0x300>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	6812      	ldr	r2, [r2, #0]
 80036f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036f8:	430b      	orrs	r3, r1
 80036fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4aa9      	ldr	r2, [pc, #676]	; (80039c4 <UART_SetConfig+0x304>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d004      	beq.n	800372c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003728:	4313      	orrs	r3, r2
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800373c:	430a      	orrs	r2, r1
 800373e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4aa0      	ldr	r2, [pc, #640]	; (80039c8 <UART_SetConfig+0x308>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d126      	bne.n	8003798 <UART_SetConfig+0xd8>
 800374a:	4ba0      	ldr	r3, [pc, #640]	; (80039cc <UART_SetConfig+0x30c>)
 800374c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003750:	f003 0303 	and.w	r3, r3, #3
 8003754:	2b03      	cmp	r3, #3
 8003756:	d81b      	bhi.n	8003790 <UART_SetConfig+0xd0>
 8003758:	a201      	add	r2, pc, #4	; (adr r2, 8003760 <UART_SetConfig+0xa0>)
 800375a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375e:	bf00      	nop
 8003760:	08003771 	.word	0x08003771
 8003764:	08003781 	.word	0x08003781
 8003768:	08003779 	.word	0x08003779
 800376c:	08003789 	.word	0x08003789
 8003770:	2301      	movs	r3, #1
 8003772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003776:	e080      	b.n	800387a <UART_SetConfig+0x1ba>
 8003778:	2302      	movs	r3, #2
 800377a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800377e:	e07c      	b.n	800387a <UART_SetConfig+0x1ba>
 8003780:	2304      	movs	r3, #4
 8003782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003786:	e078      	b.n	800387a <UART_SetConfig+0x1ba>
 8003788:	2308      	movs	r3, #8
 800378a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800378e:	e074      	b.n	800387a <UART_SetConfig+0x1ba>
 8003790:	2310      	movs	r3, #16
 8003792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003796:	e070      	b.n	800387a <UART_SetConfig+0x1ba>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a8c      	ldr	r2, [pc, #560]	; (80039d0 <UART_SetConfig+0x310>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d138      	bne.n	8003814 <UART_SetConfig+0x154>
 80037a2:	4b8a      	ldr	r3, [pc, #552]	; (80039cc <UART_SetConfig+0x30c>)
 80037a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a8:	f003 030c 	and.w	r3, r3, #12
 80037ac:	2b0c      	cmp	r3, #12
 80037ae:	d82d      	bhi.n	800380c <UART_SetConfig+0x14c>
 80037b0:	a201      	add	r2, pc, #4	; (adr r2, 80037b8 <UART_SetConfig+0xf8>)
 80037b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b6:	bf00      	nop
 80037b8:	080037ed 	.word	0x080037ed
 80037bc:	0800380d 	.word	0x0800380d
 80037c0:	0800380d 	.word	0x0800380d
 80037c4:	0800380d 	.word	0x0800380d
 80037c8:	080037fd 	.word	0x080037fd
 80037cc:	0800380d 	.word	0x0800380d
 80037d0:	0800380d 	.word	0x0800380d
 80037d4:	0800380d 	.word	0x0800380d
 80037d8:	080037f5 	.word	0x080037f5
 80037dc:	0800380d 	.word	0x0800380d
 80037e0:	0800380d 	.word	0x0800380d
 80037e4:	0800380d 	.word	0x0800380d
 80037e8:	08003805 	.word	0x08003805
 80037ec:	2300      	movs	r3, #0
 80037ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037f2:	e042      	b.n	800387a <UART_SetConfig+0x1ba>
 80037f4:	2302      	movs	r3, #2
 80037f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037fa:	e03e      	b.n	800387a <UART_SetConfig+0x1ba>
 80037fc:	2304      	movs	r3, #4
 80037fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003802:	e03a      	b.n	800387a <UART_SetConfig+0x1ba>
 8003804:	2308      	movs	r3, #8
 8003806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800380a:	e036      	b.n	800387a <UART_SetConfig+0x1ba>
 800380c:	2310      	movs	r3, #16
 800380e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003812:	e032      	b.n	800387a <UART_SetConfig+0x1ba>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a6a      	ldr	r2, [pc, #424]	; (80039c4 <UART_SetConfig+0x304>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d12a      	bne.n	8003874 <UART_SetConfig+0x1b4>
 800381e:	4b6b      	ldr	r3, [pc, #428]	; (80039cc <UART_SetConfig+0x30c>)
 8003820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003824:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003828:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800382c:	d01a      	beq.n	8003864 <UART_SetConfig+0x1a4>
 800382e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003832:	d81b      	bhi.n	800386c <UART_SetConfig+0x1ac>
 8003834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003838:	d00c      	beq.n	8003854 <UART_SetConfig+0x194>
 800383a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800383e:	d815      	bhi.n	800386c <UART_SetConfig+0x1ac>
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <UART_SetConfig+0x18c>
 8003844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003848:	d008      	beq.n	800385c <UART_SetConfig+0x19c>
 800384a:	e00f      	b.n	800386c <UART_SetConfig+0x1ac>
 800384c:	2300      	movs	r3, #0
 800384e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003852:	e012      	b.n	800387a <UART_SetConfig+0x1ba>
 8003854:	2302      	movs	r3, #2
 8003856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800385a:	e00e      	b.n	800387a <UART_SetConfig+0x1ba>
 800385c:	2304      	movs	r3, #4
 800385e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003862:	e00a      	b.n	800387a <UART_SetConfig+0x1ba>
 8003864:	2308      	movs	r3, #8
 8003866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800386a:	e006      	b.n	800387a <UART_SetConfig+0x1ba>
 800386c:	2310      	movs	r3, #16
 800386e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003872:	e002      	b.n	800387a <UART_SetConfig+0x1ba>
 8003874:	2310      	movs	r3, #16
 8003876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a51      	ldr	r2, [pc, #324]	; (80039c4 <UART_SetConfig+0x304>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d17a      	bne.n	800397a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003884:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003888:	2b08      	cmp	r3, #8
 800388a:	d824      	bhi.n	80038d6 <UART_SetConfig+0x216>
 800388c:	a201      	add	r2, pc, #4	; (adr r2, 8003894 <UART_SetConfig+0x1d4>)
 800388e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003892:	bf00      	nop
 8003894:	080038b9 	.word	0x080038b9
 8003898:	080038d7 	.word	0x080038d7
 800389c:	080038c1 	.word	0x080038c1
 80038a0:	080038d7 	.word	0x080038d7
 80038a4:	080038c7 	.word	0x080038c7
 80038a8:	080038d7 	.word	0x080038d7
 80038ac:	080038d7 	.word	0x080038d7
 80038b0:	080038d7 	.word	0x080038d7
 80038b4:	080038cf 	.word	0x080038cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b8:	f7fe fa44 	bl	8001d44 <HAL_RCC_GetPCLK1Freq>
 80038bc:	61f8      	str	r0, [r7, #28]
        break;
 80038be:	e010      	b.n	80038e2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c0:	4b44      	ldr	r3, [pc, #272]	; (80039d4 <UART_SetConfig+0x314>)
 80038c2:	61fb      	str	r3, [r7, #28]
        break;
 80038c4:	e00d      	b.n	80038e2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038c6:	f7fe f9a5 	bl	8001c14 <HAL_RCC_GetSysClockFreq>
 80038ca:	61f8      	str	r0, [r7, #28]
        break;
 80038cc:	e009      	b.n	80038e2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038d2:	61fb      	str	r3, [r7, #28]
        break;
 80038d4:	e005      	b.n	80038e2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80038e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 8107 	beq.w	8003af8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	4413      	add	r3, r2
 80038f4:	69fa      	ldr	r2, [r7, #28]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d305      	bcc.n	8003906 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003900:	69fa      	ldr	r2, [r7, #28]
 8003902:	429a      	cmp	r2, r3
 8003904:	d903      	bls.n	800390e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800390c:	e0f4      	b.n	8003af8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	2200      	movs	r2, #0
 8003912:	461c      	mov	r4, r3
 8003914:	4615      	mov	r5, r2
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	022b      	lsls	r3, r5, #8
 8003920:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003924:	0222      	lsls	r2, r4, #8
 8003926:	68f9      	ldr	r1, [r7, #12]
 8003928:	6849      	ldr	r1, [r1, #4]
 800392a:	0849      	lsrs	r1, r1, #1
 800392c:	2000      	movs	r0, #0
 800392e:	4688      	mov	r8, r1
 8003930:	4681      	mov	r9, r0
 8003932:	eb12 0a08 	adds.w	sl, r2, r8
 8003936:	eb43 0b09 	adc.w	fp, r3, r9
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	603b      	str	r3, [r7, #0]
 8003942:	607a      	str	r2, [r7, #4]
 8003944:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003948:	4650      	mov	r0, sl
 800394a:	4659      	mov	r1, fp
 800394c:	f7fc fc3e 	bl	80001cc <__aeabi_uldivmod>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	4613      	mov	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800395e:	d308      	bcc.n	8003972 <UART_SetConfig+0x2b2>
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003966:	d204      	bcs.n	8003972 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	60da      	str	r2, [r3, #12]
 8003970:	e0c2      	b.n	8003af8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003978:	e0be      	b.n	8003af8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003982:	d16a      	bne.n	8003a5a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003984:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003988:	2b08      	cmp	r3, #8
 800398a:	d834      	bhi.n	80039f6 <UART_SetConfig+0x336>
 800398c:	a201      	add	r2, pc, #4	; (adr r2, 8003994 <UART_SetConfig+0x2d4>)
 800398e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003992:	bf00      	nop
 8003994:	080039b9 	.word	0x080039b9
 8003998:	080039d9 	.word	0x080039d9
 800399c:	080039e1 	.word	0x080039e1
 80039a0:	080039f7 	.word	0x080039f7
 80039a4:	080039e7 	.word	0x080039e7
 80039a8:	080039f7 	.word	0x080039f7
 80039ac:	080039f7 	.word	0x080039f7
 80039b0:	080039f7 	.word	0x080039f7
 80039b4:	080039ef 	.word	0x080039ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039b8:	f7fe f9c4 	bl	8001d44 <HAL_RCC_GetPCLK1Freq>
 80039bc:	61f8      	str	r0, [r7, #28]
        break;
 80039be:	e020      	b.n	8003a02 <UART_SetConfig+0x342>
 80039c0:	efff69f3 	.word	0xefff69f3
 80039c4:	40008000 	.word	0x40008000
 80039c8:	40013800 	.word	0x40013800
 80039cc:	40021000 	.word	0x40021000
 80039d0:	40004400 	.word	0x40004400
 80039d4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039d8:	f7fe f9ca 	bl	8001d70 <HAL_RCC_GetPCLK2Freq>
 80039dc:	61f8      	str	r0, [r7, #28]
        break;
 80039de:	e010      	b.n	8003a02 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039e0:	4b4c      	ldr	r3, [pc, #304]	; (8003b14 <UART_SetConfig+0x454>)
 80039e2:	61fb      	str	r3, [r7, #28]
        break;
 80039e4:	e00d      	b.n	8003a02 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039e6:	f7fe f915 	bl	8001c14 <HAL_RCC_GetSysClockFreq>
 80039ea:	61f8      	str	r0, [r7, #28]
        break;
 80039ec:	e009      	b.n	8003a02 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039f2:	61fb      	str	r3, [r7, #28]
        break;
 80039f4:	e005      	b.n	8003a02 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d077      	beq.n	8003af8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	005a      	lsls	r2, r3, #1
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	085b      	lsrs	r3, r3, #1
 8003a12:	441a      	add	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	2b0f      	cmp	r3, #15
 8003a22:	d916      	bls.n	8003a52 <UART_SetConfig+0x392>
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a2a:	d212      	bcs.n	8003a52 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	f023 030f 	bic.w	r3, r3, #15
 8003a34:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	085b      	lsrs	r3, r3, #1
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	8afb      	ldrh	r3, [r7, #22]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	8afa      	ldrh	r2, [r7, #22]
 8003a4e:	60da      	str	r2, [r3, #12]
 8003a50:	e052      	b.n	8003af8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a58:	e04e      	b.n	8003af8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d827      	bhi.n	8003ab2 <UART_SetConfig+0x3f2>
 8003a62:	a201      	add	r2, pc, #4	; (adr r2, 8003a68 <UART_SetConfig+0x3a8>)
 8003a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a68:	08003a8d 	.word	0x08003a8d
 8003a6c:	08003a95 	.word	0x08003a95
 8003a70:	08003a9d 	.word	0x08003a9d
 8003a74:	08003ab3 	.word	0x08003ab3
 8003a78:	08003aa3 	.word	0x08003aa3
 8003a7c:	08003ab3 	.word	0x08003ab3
 8003a80:	08003ab3 	.word	0x08003ab3
 8003a84:	08003ab3 	.word	0x08003ab3
 8003a88:	08003aab 	.word	0x08003aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a8c:	f7fe f95a 	bl	8001d44 <HAL_RCC_GetPCLK1Freq>
 8003a90:	61f8      	str	r0, [r7, #28]
        break;
 8003a92:	e014      	b.n	8003abe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a94:	f7fe f96c 	bl	8001d70 <HAL_RCC_GetPCLK2Freq>
 8003a98:	61f8      	str	r0, [r7, #28]
        break;
 8003a9a:	e010      	b.n	8003abe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a9c:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <UART_SetConfig+0x454>)
 8003a9e:	61fb      	str	r3, [r7, #28]
        break;
 8003aa0:	e00d      	b.n	8003abe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aa2:	f7fe f8b7 	bl	8001c14 <HAL_RCC_GetSysClockFreq>
 8003aa6:	61f8      	str	r0, [r7, #28]
        break;
 8003aa8:	e009      	b.n	8003abe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aae:	61fb      	str	r3, [r7, #28]
        break;
 8003ab0:	e005      	b.n	8003abe <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003abc:	bf00      	nop
    }

    if (pclk != 0U)
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d019      	beq.n	8003af8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	085a      	lsrs	r2, r3, #1
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	441a      	add	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	2b0f      	cmp	r3, #15
 8003adc:	d909      	bls.n	8003af2 <UART_SetConfig+0x432>
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae4:	d205      	bcs.n	8003af2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60da      	str	r2, [r3, #12]
 8003af0:	e002      	b.n	8003af8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3728      	adds	r7, #40	; 0x28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b12:	bf00      	nop
 8003b14:	00f42400 	.word	0x00f42400

08003b18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	f003 0320 	and.w	r3, r3, #32
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d01a      	beq.n	8003c2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c16:	d10a      	bne.n	8003c2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	605a      	str	r2, [r3, #4]
  }
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af02      	add	r7, sp, #8
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c6c:	f7fc ff3c 	bl	8000ae8 <HAL_GetTick>
 8003c70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d10e      	bne.n	8003c9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f82d 	bl	8003cee <UART_WaitOnFlagUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e023      	b.n	8003ce6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d10e      	bne.n	8003cca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f817 	bl	8003cee <UART_WaitOnFlagUntilTimeout>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e00d      	b.n	8003ce6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b09c      	sub	sp, #112	; 0x70
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	603b      	str	r3, [r7, #0]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cfe:	e0a5      	b.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d06:	f000 80a1 	beq.w	8003e4c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d0a:	f7fc feed 	bl	8000ae8 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d302      	bcc.n	8003d20 <UART_WaitOnFlagUntilTimeout+0x32>
 8003d1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d13e      	bne.n	8003d9e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d28:	e853 3f00 	ldrex	r3, [r3]
 8003d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d34:	667b      	str	r3, [r7, #100]	; 0x64
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d40:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d46:	e841 2300 	strex	r3, r2, [r1]
 8003d4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1e6      	bne.n	8003d20 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3308      	adds	r3, #8
 8003d58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d5c:	e853 3f00 	ldrex	r3, [r3]
 8003d60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d64:	f023 0301 	bic.w	r3, r3, #1
 8003d68:	663b      	str	r3, [r7, #96]	; 0x60
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	3308      	adds	r3, #8
 8003d70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d72:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d7a:	e841 2300 	strex	r3, r2, [r1]
 8003d7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1e5      	bne.n	8003d52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e067      	b.n	8003e6e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d04f      	beq.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dba:	d147      	bne.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dc4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dce:	e853 3f00 	ldrex	r3, [r3]
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	461a      	mov	r2, r3
 8003de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de4:	637b      	str	r3, [r7, #52]	; 0x34
 8003de6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dec:	e841 2300 	strex	r3, r2, [r1]
 8003df0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e6      	bne.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3308      	adds	r3, #8
 8003dfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	e853 3f00 	ldrex	r3, [r3]
 8003e06:	613b      	str	r3, [r7, #16]
   return(result);
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f023 0301 	bic.w	r3, r3, #1
 8003e0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3308      	adds	r3, #8
 8003e16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e18:	623a      	str	r2, [r7, #32]
 8003e1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1c:	69f9      	ldr	r1, [r7, #28]
 8003e1e:	6a3a      	ldr	r2, [r7, #32]
 8003e20:	e841 2300 	strex	r3, r2, [r1]
 8003e24:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1e5      	bne.n	8003df8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2220      	movs	r2, #32
 8003e36:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e010      	b.n	8003e6e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	69da      	ldr	r2, [r3, #28]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	4013      	ands	r3, r2
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	bf0c      	ite	eq
 8003e5c:	2301      	moveq	r3, #1
 8003e5e:	2300      	movne	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	461a      	mov	r2, r3
 8003e64:	79fb      	ldrb	r3, [r7, #7]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	f43f af4a 	beq.w	8003d00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3770      	adds	r7, #112	; 0x70
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b097      	sub	sp, #92	; 0x5c
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	4613      	mov	r3, r2
 8003e84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	88fa      	ldrh	r2, [r7, #6]
 8003e90:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	88fa      	ldrh	r2, [r7, #6]
 8003e98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eaa:	d10e      	bne.n	8003eca <UART_Start_Receive_IT+0x52>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d105      	bne.n	8003ec0 <UART_Start_Receive_IT+0x48>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003eba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ebe:	e02d      	b.n	8003f1c <UART_Start_Receive_IT+0xa4>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	22ff      	movs	r2, #255	; 0xff
 8003ec4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ec8:	e028      	b.n	8003f1c <UART_Start_Receive_IT+0xa4>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10d      	bne.n	8003eee <UART_Start_Receive_IT+0x76>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d104      	bne.n	8003ee4 <UART_Start_Receive_IT+0x6c>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	22ff      	movs	r2, #255	; 0xff
 8003ede:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ee2:	e01b      	b.n	8003f1c <UART_Start_Receive_IT+0xa4>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	227f      	movs	r2, #127	; 0x7f
 8003ee8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003eec:	e016      	b.n	8003f1c <UART_Start_Receive_IT+0xa4>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ef6:	d10d      	bne.n	8003f14 <UART_Start_Receive_IT+0x9c>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d104      	bne.n	8003f0a <UART_Start_Receive_IT+0x92>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	227f      	movs	r2, #127	; 0x7f
 8003f04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f08:	e008      	b.n	8003f1c <UART_Start_Receive_IT+0xa4>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	223f      	movs	r2, #63	; 0x3f
 8003f0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f12:	e003      	b.n	8003f1c <UART_Start_Receive_IT+0xa4>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2222      	movs	r2, #34	; 0x22
 8003f28:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3308      	adds	r3, #8
 8003f30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	657b      	str	r3, [r7, #84]	; 0x54
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3308      	adds	r3, #8
 8003f48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e5      	bne.n	8003f2a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f66:	d107      	bne.n	8003f78 <UART_Start_Receive_IT+0x100>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d103      	bne.n	8003f78 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4a24      	ldr	r2, [pc, #144]	; (8004004 <UART_Start_Receive_IT+0x18c>)
 8003f74:	665a      	str	r2, [r3, #100]	; 0x64
 8003f76:	e002      	b.n	8003f7e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4a23      	ldr	r2, [pc, #140]	; (8004008 <UART_Start_Receive_IT+0x190>)
 8003f7c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d019      	beq.n	8003fc2 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f96:	e853 3f00 	ldrex	r3, [r3]
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fac:	637b      	str	r3, [r7, #52]	; 0x34
 8003fae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fb4:	e841 2300 	strex	r3, r2, [r1]
 8003fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1e6      	bne.n	8003f8e <UART_Start_Receive_IT+0x116>
 8003fc0:	e018      	b.n	8003ff4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	e853 3f00 	ldrex	r3, [r3]
 8003fce:	613b      	str	r3, [r7, #16]
   return(result);
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f043 0320 	orr.w	r3, r3, #32
 8003fd6:	653b      	str	r3, [r7, #80]	; 0x50
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fe0:	623b      	str	r3, [r7, #32]
 8003fe2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe4:	69f9      	ldr	r1, [r7, #28]
 8003fe6:	6a3a      	ldr	r2, [r7, #32]
 8003fe8:	e841 2300 	strex	r3, r2, [r1]
 8003fec:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e6      	bne.n	8003fc2 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	375c      	adds	r7, #92	; 0x5c
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	08004477 	.word	0x08004477
 8004008:	08004317 	.word	0x08004317

0800400c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800400c:	b480      	push	{r7}
 800400e:	b095      	sub	sp, #84	; 0x54
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004024:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004028:	64fb      	str	r3, [r7, #76]	; 0x4c
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004032:	643b      	str	r3, [r7, #64]	; 0x40
 8004034:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004036:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004038:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800403a:	e841 2300 	strex	r3, r2, [r1]
 800403e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e6      	bne.n	8004014 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3308      	adds	r3, #8
 800404c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	61fb      	str	r3, [r7, #28]
   return(result);
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	64bb      	str	r3, [r7, #72]	; 0x48
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3308      	adds	r3, #8
 8004064:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004066:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004068:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800406c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e5      	bne.n	8004046 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800407e:	2b01      	cmp	r3, #1
 8004080:	d118      	bne.n	80040b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	e853 3f00 	ldrex	r3, [r3]
 800408e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f023 0310 	bic.w	r3, r3, #16
 8004096:	647b      	str	r3, [r7, #68]	; 0x44
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	461a      	mov	r2, r3
 800409e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040a0:	61bb      	str	r3, [r7, #24]
 80040a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a4:	6979      	ldr	r1, [r7, #20]
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	e841 2300 	strex	r3, r2, [r1]
 80040ac:	613b      	str	r3, [r7, #16]
   return(result);
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1e6      	bne.n	8004082 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2220      	movs	r2, #32
 80040b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80040c6:	bf00      	nop
 80040c8:	3754      	adds	r7, #84	; 0x54
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b084      	sub	sp, #16
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f7ff fac5 	bl	8003680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040f6:	bf00      	nop
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b084      	sub	sp, #16
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410a:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	220f      	movs	r2, #15
 800411a:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	8b1b      	ldrh	r3, [r3, #24]
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f042 0208 	orr.w	r2, r2, #8
 800412c:	b292      	uxth	r2, r2
 800412e:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2220      	movs	r2, #32
 8004134:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f7ff faa9 	bl	8003694 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004142:	bf00      	nop
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800414a:	b480      	push	{r7}
 800414c:	b08f      	sub	sp, #60	; 0x3c
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004156:	2b21      	cmp	r3, #33	; 0x21
 8004158:	d14d      	bne.n	80041f6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d132      	bne.n	80041cc <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	e853 3f00 	ldrex	r3, [r3]
 8004172:	61fb      	str	r3, [r7, #28]
   return(result);
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800417a:	637b      	str	r3, [r7, #52]	; 0x34
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004186:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004188:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800418a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800418c:	e841 2300 	strex	r3, r2, [r1]
 8004190:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1e6      	bne.n	8004166 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041ac:	633b      	str	r3, [r7, #48]	; 0x30
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b6:	61bb      	str	r3, [r7, #24]
 80041b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ba:	6979      	ldr	r1, [r7, #20]
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	e841 2300 	strex	r3, r2, [r1]
 80041c2:	613b      	str	r3, [r7, #16]
   return(result);
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1e6      	bne.n	8004198 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80041ca:	e014      	b.n	80041f6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d0:	781a      	ldrb	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	b292      	uxth	r2, r2
 80041d8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80041f6:	bf00      	nop
 80041f8:	373c      	adds	r7, #60	; 0x3c
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004202:	b480      	push	{r7}
 8004204:	b091      	sub	sp, #68	; 0x44
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800420e:	2b21      	cmp	r3, #33	; 0x21
 8004210:	d151      	bne.n	80042b6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004218:	b29b      	uxth	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d132      	bne.n	8004284 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	e853 3f00 	ldrex	r3, [r3]
 800422a:	623b      	str	r3, [r7, #32]
   return(result);
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004232:	63bb      	str	r3, [r7, #56]	; 0x38
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	461a      	mov	r2, r3
 800423a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423c:	633b      	str	r3, [r7, #48]	; 0x30
 800423e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004240:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004244:	e841 2300 	strex	r3, r2, [r1]
 8004248:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800424a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1e6      	bne.n	800421e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	e853 3f00 	ldrex	r3, [r3]
 800425c:	60fb      	str	r3, [r7, #12]
   return(result);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004264:	637b      	str	r3, [r7, #52]	; 0x34
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	461a      	mov	r2, r3
 800426c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426e:	61fb      	str	r3, [r7, #28]
 8004270:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	69b9      	ldr	r1, [r7, #24]
 8004274:	69fa      	ldr	r2, [r7, #28]
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	617b      	str	r3, [r7, #20]
   return(result);
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e6      	bne.n	8004250 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004282:	e018      	b.n	80042b6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004288:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800428a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800428c:	881a      	ldrh	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004296:	b292      	uxth	r2, r2
 8004298:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800429e:	1c9a      	adds	r2, r3, #2
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80042b6:	bf00      	nop
 80042b8:	3744      	adds	r7, #68	; 0x44
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b088      	sub	sp, #32
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	e853 3f00 	ldrex	r3, [r3]
 80042d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042de:	61fb      	str	r3, [r7, #28]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	461a      	mov	r2, r3
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	61bb      	str	r3, [r7, #24]
 80042ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	6979      	ldr	r1, [r7, #20]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	e841 2300 	strex	r3, r2, [r1]
 80042f4:	613b      	str	r3, [r7, #16]
   return(result);
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e6      	bne.n	80042ca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2220      	movs	r2, #32
 8004300:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 fa15 	bl	8004738 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800430e:	bf00      	nop
 8004310:	3720      	adds	r7, #32
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b096      	sub	sp, #88	; 0x58
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004324:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800432c:	2b22      	cmp	r3, #34	; 0x22
 800432e:	f040 8094 	bne.w	800445a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004338:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800433c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004340:	b2d9      	uxtb	r1, r3
 8004342:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004346:	b2da      	uxtb	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434c:	400a      	ands	r2, r1
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004362:	b29b      	uxth	r3, r3
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004374:	b29b      	uxth	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d179      	bne.n	800446e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004382:	e853 3f00 	ldrex	r3, [r3]
 8004386:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800438e:	653b      	str	r3, [r7, #80]	; 0x50
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	461a      	mov	r2, r3
 8004396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004398:	647b      	str	r3, [r7, #68]	; 0x44
 800439a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800439e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043a0:	e841 2300 	strex	r3, r2, [r1]
 80043a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1e6      	bne.n	800437a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3308      	adds	r3, #8
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	623b      	str	r3, [r7, #32]
   return(result);
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	f023 0301 	bic.w	r3, r3, #1
 80043c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3308      	adds	r3, #8
 80043ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043cc:	633a      	str	r2, [r7, #48]	; 0x30
 80043ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043d4:	e841 2300 	strex	r3, r2, [r1]
 80043d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1e5      	bne.n	80043ac <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2220      	movs	r2, #32
 80043e4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d12e      	bne.n	8004452 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	e853 3f00 	ldrex	r3, [r3]
 8004406:	60fb      	str	r3, [r7, #12]
   return(result);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 0310 	bic.w	r3, r3, #16
 800440e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	461a      	mov	r2, r3
 8004416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004418:	61fb      	str	r3, [r7, #28]
 800441a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441c:	69b9      	ldr	r1, [r7, #24]
 800441e:	69fa      	ldr	r2, [r7, #28]
 8004420:	e841 2300 	strex	r3, r2, [r1]
 8004424:	617b      	str	r3, [r7, #20]
   return(result);
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e6      	bne.n	80043fa <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	f003 0310 	and.w	r3, r3, #16
 8004436:	2b10      	cmp	r3, #16
 8004438:	d103      	bne.n	8004442 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2210      	movs	r2, #16
 8004440:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004448:	4619      	mov	r1, r3
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff f92c 	bl	80036a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004450:	e00d      	b.n	800446e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f95e 	bl	8004714 <HAL_UART_RxCpltCallback>
}
 8004458:	e009      	b.n	800446e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	8b1b      	ldrh	r3, [r3, #24]
 8004460:	b29a      	uxth	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0208 	orr.w	r2, r2, #8
 800446a:	b292      	uxth	r2, r2
 800446c:	831a      	strh	r2, [r3, #24]
}
 800446e:	bf00      	nop
 8004470:	3758      	adds	r7, #88	; 0x58
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b096      	sub	sp, #88	; 0x58
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004484:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800448c:	2b22      	cmp	r3, #34	; 0x22
 800448e:	f040 8094 	bne.w	80045ba <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004498:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80044a2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80044a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80044aa:	4013      	ands	r3, r2
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b6:	1c9a      	adds	r2, r3, #2
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	3b01      	subs	r3, #1
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d179      	bne.n	80045ce <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e2:	e853 3f00 	ldrex	r3, [r3]
 80044e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	461a      	mov	r2, r3
 80044f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044f8:	643b      	str	r3, [r7, #64]	; 0x40
 80044fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e6      	bne.n	80044da <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3308      	adds	r3, #8
 8004512:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	e853 3f00 	ldrex	r3, [r3]
 800451a:	61fb      	str	r3, [r7, #28]
   return(result);
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f023 0301 	bic.w	r3, r3, #1
 8004522:	64bb      	str	r3, [r7, #72]	; 0x48
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3308      	adds	r3, #8
 800452a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800452c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800452e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004530:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004534:	e841 2300 	strex	r3, r2, [r1]
 8004538:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e5      	bne.n	800450c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2220      	movs	r2, #32
 8004544:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004550:	2b01      	cmp	r3, #1
 8004552:	d12e      	bne.n	80045b2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	e853 3f00 	ldrex	r3, [r3]
 8004566:	60bb      	str	r3, [r7, #8]
   return(result);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f023 0310 	bic.w	r3, r3, #16
 800456e:	647b      	str	r3, [r7, #68]	; 0x44
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	461a      	mov	r2, r3
 8004576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004578:	61bb      	str	r3, [r7, #24]
 800457a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457c:	6979      	ldr	r1, [r7, #20]
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	e841 2300 	strex	r3, r2, [r1]
 8004584:	613b      	str	r3, [r7, #16]
   return(result);
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e6      	bne.n	800455a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	2b10      	cmp	r3, #16
 8004598:	d103      	bne.n	80045a2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2210      	movs	r2, #16
 80045a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80045a8:	4619      	mov	r1, r3
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7ff f87c 	bl	80036a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045b0:	e00d      	b.n	80045ce <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f8ae 	bl	8004714 <HAL_UART_RxCpltCallback>
}
 80045b8:	e009      	b.n	80045ce <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	8b1b      	ldrh	r3, [r3, #24]
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0208 	orr.w	r2, r2, #8
 80045ca:	b292      	uxth	r2, r2
 80045cc:	831a      	strh	r2, [r3, #24]
}
 80045ce:	bf00      	nop
 80045d0:	3758      	adds	r7, #88	; 0x58
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
	...

080045ec <bsp_mb_slave_init>:

/* public variable ============================================*/
extern UART_HandleTypeDef uart_instance;
extern TIM_HandleTypeDef timer_instance;

void bsp_mb_slave_init(void) {
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
	__mb.uart = &uart_instance;
 80045f0:	4b07      	ldr	r3, [pc, #28]	; (8004610 <bsp_mb_slave_init+0x24>)
 80045f2:	4a08      	ldr	r2, [pc, #32]	; (8004614 <bsp_mb_slave_init+0x28>)
 80045f4:	601a      	str	r2, [r3, #0]
	__mb.timer = &timer_instance;
 80045f6:	4b06      	ldr	r3, [pc, #24]	; (8004610 <bsp_mb_slave_init+0x24>)
 80045f8:	4a07      	ldr	r2, [pc, #28]	; (8004618 <bsp_mb_slave_init+0x2c>)
 80045fa:	605a      	str	r2, [r3, #4]
	mb_slave_init(&__mb, BSP_MB_SLAVE_ID, BSP_MB_SLAVE_SPEED, BSP_MB_TIMER_CLOCK_SOURCE);
 80045fc:	2350      	movs	r3, #80	; 0x50
 80045fe:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004602:	2101      	movs	r1, #1
 8004604:	4802      	ldr	r0, [pc, #8]	; (8004610 <bsp_mb_slave_init+0x24>)
 8004606:	f000 f9db 	bl	80049c0 <mb_slave_init>
}
 800460a:	bf00      	nop
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	200000fc 	.word	0x200000fc
 8004614:	20000074 	.word	0x20000074
 8004618:	20000028 	.word	0x20000028

0800461c <bsp_mb_slave_handle>:

void bsp_mb_slave_handle(void) {
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
	mb_slave_handle(&__mb);
 8004620:	4802      	ldr	r0, [pc, #8]	; (800462c <bsp_mb_slave_handle+0x10>)
 8004622:	f000 fa33 	bl	8004a8c <mb_slave_handle>
}
 8004626:	bf00      	nop
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	200000fc 	.word	0x200000fc

08004630 <bsp_mb_coil_set>:

uint8_t bsp_mb_id_get(void) {
	return BSP_MB_SLAVE_ID;
}

void bsp_mb_coil_set(uint16_t addr, uint8_t status) {
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	460a      	mov	r2, r1
 800463a:	80fb      	strh	r3, [r7, #6]
 800463c:	4613      	mov	r3, r2
 800463e:	717b      	strb	r3, [r7, #5]
	__mb.data.coil.set(&__mb.data.coil, addr, status);
 8004640:	4b05      	ldr	r3, [pc, #20]	; (8004658 <bsp_mb_coil_set+0x28>)
 8004642:	f8d3 3c60 	ldr.w	r3, [r3, #3168]	; 0xc60
 8004646:	797a      	ldrb	r2, [r7, #5]
 8004648:	88f9      	ldrh	r1, [r7, #6]
 800464a:	4804      	ldr	r0, [pc, #16]	; (800465c <bsp_mb_coil_set+0x2c>)
 800464c:	4798      	blx	r3
}
 800464e:	bf00      	nop
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	200000fc 	.word	0x200000fc
 800465c:	20000d54 	.word	0x20000d54

08004660 <bsp_mb_discrete_input_set>:

uint8_t bsp_mb_coil_get(uint16_t addr) {
	return __mb.data.coil.get(&__mb.data.coil, addr);
}

void bsp_mb_discrete_input_set(uint16_t addr, uint8_t status) {
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	4603      	mov	r3, r0
 8004668:	460a      	mov	r2, r1
 800466a:	80fb      	strh	r3, [r7, #6]
 800466c:	4613      	mov	r3, r2
 800466e:	717b      	strb	r3, [r7, #5]
	__mb.data.input.set(&__mb.data.input, addr, status);
 8004670:	4b05      	ldr	r3, [pc, #20]	; (8004688 <bsp_mb_discrete_input_set+0x28>)
 8004672:	f8d3 3c70 	ldr.w	r3, [r3, #3184]	; 0xc70
 8004676:	797a      	ldrb	r2, [r7, #5]
 8004678:	88f9      	ldrh	r1, [r7, #6]
 800467a:	4804      	ldr	r0, [pc, #16]	; (800468c <bsp_mb_discrete_input_set+0x2c>)
 800467c:	4798      	blx	r3
}
 800467e:	bf00      	nop
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	200000fc 	.word	0x200000fc
 800468c:	20000d64 	.word	0x20000d64

08004690 <bsp_mb_input_reg_set>:

uint8_t bsp_mb_discrete_input_get(uint16_t addr) {
	return __mb.data.input.get(&__mb.data.input, addr);
}

void bsp_mb_input_reg_set(uint16_t addr, uint16_t value) {
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	4603      	mov	r3, r0
 8004698:	460a      	mov	r2, r1
 800469a:	80fb      	strh	r3, [r7, #6]
 800469c:	4613      	mov	r3, r2
 800469e:	80bb      	strh	r3, [r7, #4]
	__mb.data.reg_input.set(&__mb.data.reg_input, addr, value);
 80046a0:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <bsp_mb_input_reg_set+0x28>)
 80046a2:	f8d3 3c80 	ldr.w	r3, [r3, #3200]	; 0xc80
 80046a6:	88ba      	ldrh	r2, [r7, #4]
 80046a8:	88f9      	ldrh	r1, [r7, #6]
 80046aa:	4804      	ldr	r0, [pc, #16]	; (80046bc <bsp_mb_input_reg_set+0x2c>)
 80046ac:	4798      	blx	r3
}
 80046ae:	bf00      	nop
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	200000fc 	.word	0x200000fc
 80046bc:	20000d74 	.word	0x20000d74

080046c0 <bsp_mb_holding_reg_set>:

uint16_t bsp_mb_input_reg_get(uint16_t addr) {
	return __mb.data.reg_input.get(&__mb.data.reg_input, addr);
}

void bsp_mb_holding_reg_set(uint16_t addr, uint16_t value) {
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	460a      	mov	r2, r1
 80046ca:	80fb      	strh	r3, [r7, #6]
 80046cc:	4613      	mov	r3, r2
 80046ce:	80bb      	strh	r3, [r7, #4]
	__mb.data.reg_holding.set(&__mb.data.reg_holding, addr, value);
 80046d0:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <bsp_mb_holding_reg_set+0x28>)
 80046d2:	f8d3 3c90 	ldr.w	r3, [r3, #3216]	; 0xc90
 80046d6:	88ba      	ldrh	r2, [r7, #4]
 80046d8:	88f9      	ldrh	r1, [r7, #6]
 80046da:	4804      	ldr	r0, [pc, #16]	; (80046ec <bsp_mb_holding_reg_set+0x2c>)
 80046dc:	4798      	blx	r3
}
 80046de:	bf00      	nop
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	200000fc 	.word	0x200000fc
 80046ec:	20000d84 	.word	0x20000d84

080046f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
	if(__mb.timer == htim)
 80046f8:	4b05      	ldr	r3, [pc, #20]	; (8004710 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d102      	bne.n	8004708 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		_mb_slave_timer_irq(&__mb);
 8004702:	4803      	ldr	r0, [pc, #12]	; (8004710 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004704:	f000 fac6 	bl	8004c94 <_mb_slave_timer_irq>
	}
}
 8004708:	bf00      	nop
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	200000fc 	.word	0x200000fc

08004714 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
	if(__mb.uart == huart)
 800471c:	4b05      	ldr	r3, [pc, #20]	; (8004734 <HAL_UART_RxCpltCallback+0x20>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	429a      	cmp	r2, r3
 8004724:	d102      	bne.n	800472c <HAL_UART_RxCpltCallback+0x18>
	{
		_mb_slave_rx_irq(&__mb);
 8004726:	4803      	ldr	r0, [pc, #12]	; (8004734 <HAL_UART_RxCpltCallback+0x20>)
 8004728:	f000 fa8e 	bl	8004c48 <_mb_slave_rx_irq>
	}
}
 800472c:	bf00      	nop
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	200000fc 	.word	0x200000fc

08004738 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
	if(__mb.uart == huart)
 8004740:	4b05      	ldr	r3, [pc, #20]	; (8004758 <HAL_UART_TxCpltCallback+0x20>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	429a      	cmp	r2, r3
 8004748:	d102      	bne.n	8004750 <HAL_UART_TxCpltCallback+0x18>
	{
		_mb_slave_tx_irq(&__mb);
 800474a:	4803      	ldr	r0, [pc, #12]	; (8004758 <HAL_UART_TxCpltCallback+0x20>)
 800474c:	f000 fa50 	bl	8004bf0 <_mb_slave_tx_irq>
	}
}
 8004750:	bf00      	nop
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	200000fc 	.word	0x200000fc

0800475c <__mb_failure>:
#include "../lib/mb_assert.h"

#include "../lib/mb_stm32_include.h"

void __mb_failure(void)
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004760:	b672      	cpsid	i
}
 8004762:	bf00      	nop
	__disable_irq();
	while(1);
 8004764:	e7fe      	b.n	8004764 <__mb_failure+0x8>
	...

08004768 <mb_buffer_init>:
static mb_pdu_t* _get_data(mb_buffer_t *buf);
static void      _commit_get(mb_buffer_t *buf);
static void      _flush(mb_buffer_t *buf);
static uint8_t   _available(mb_buffer_t *buf);

void mb_buffer_init(mb_buffer_t *buf) {
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <mb_buffer_init+0x12>
 8004776:	f7ff fff1 	bl	800475c <__mb_failure>
	buf->__available = 0;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	709a      	strb	r2, [r3, #2]
	buf->__tail      = 0;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	705a      	strb	r2, [r3, #1]
	buf->__head      = 0;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	701a      	strb	r2, [r3, #0]

	buf->next        = _next;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a0d      	ldr	r2, [pc, #52]	; (80047c4 <mb_buffer_init+0x5c>)
 8004790:	f8c3 2a18 	str.w	r2, [r3, #2584]	; 0xa18
	buf->commit_next = _commit_next;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a0c      	ldr	r2, [pc, #48]	; (80047c8 <mb_buffer_init+0x60>)
 8004798:	f8c3 2a1c 	str.w	r2, [r3, #2588]	; 0xa1c
	buf->get_data    = _get_data;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a0b      	ldr	r2, [pc, #44]	; (80047cc <mb_buffer_init+0x64>)
 80047a0:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20
	buf->commit_get  = _commit_get;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a0a      	ldr	r2, [pc, #40]	; (80047d0 <mb_buffer_init+0x68>)
 80047a8:	f8c3 2a24 	str.w	r2, [r3, #2596]	; 0xa24
	buf->flush       = _flush;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a09      	ldr	r2, [pc, #36]	; (80047d4 <mb_buffer_init+0x6c>)
 80047b0:	f8c3 2a28 	str.w	r2, [r3, #2600]	; 0xa28
	buf->available   = _available;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a08      	ldr	r2, [pc, #32]	; (80047d8 <mb_buffer_init+0x70>)
 80047b8:	f8c3 2a2c 	str.w	r2, [r3, #2604]	; 0xa2c
}
 80047bc:	bf00      	nop
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	080047dd 	.word	0x080047dd
 80047c8:	0800480d 	.word	0x0800480d
 80047cc:	08004865 	.word	0x08004865
 80047d0:	08004895 	.word	0x08004895
 80047d4:	080048e9 	.word	0x080048e9
 80047d8:	08004915 	.word	0x08004915

080047dc <_next>:

static mb_pdu_t* _next(mb_buffer_t *buf) {
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <_next+0x12>
 80047ea:	f7ff ffb7 	bl	800475c <__mb_failure>
	return &buf->__data[buf->__head];
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	461a      	mov	r2, r3
 80047f4:	4613      	mov	r3, r2
 80047f6:	01db      	lsls	r3, r3, #7
 80047f8:	4413      	add	r3, r2
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	4413      	add	r3, r2
 8004800:	3304      	adds	r3, #4
}
 8004802:	4618      	mov	r0, r3
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <_commit_next>:

static void _commit_next(mb_buffer_t *buf) {
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <_commit_next+0x12>
 800481a:	f7ff ff9f 	bl	800475c <__mb_failure>
	if (buf->__available >= MB_BUFFER_SIZE) {
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	789b      	ldrb	r3, [r3, #2]
 8004822:	2b09      	cmp	r3, #9
 8004824:	d817      	bhi.n	8004856 <_commit_next+0x4a>
		mb_log("MB buffer overflow\n");
		return;
	} else {
		buf->__head = (buf->__head + 1) % MB_BUFFER_SIZE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	4b0c      	ldr	r3, [pc, #48]	; (8004860 <_commit_next+0x54>)
 800482e:	fb83 1302 	smull	r1, r3, r3, r2
 8004832:	1099      	asrs	r1, r3, #2
 8004834:	17d3      	asrs	r3, r2, #31
 8004836:	1ac9      	subs	r1, r1, r3
 8004838:	460b      	mov	r3, r1
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	1ad1      	subs	r1, r2, r3
 8004842:	b2ca      	uxtb	r2, r1
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	701a      	strb	r2, [r3, #0]
		buf->__available++;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	789b      	ldrb	r3, [r3, #2]
 800484c:	3301      	adds	r3, #1
 800484e:	b2da      	uxtb	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	709a      	strb	r2, [r3, #2]
 8004854:	e000      	b.n	8004858 <_commit_next+0x4c>
		return;
 8004856:	bf00      	nop
	}
}
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	66666667 	.word	0x66666667

08004864 <_get_data>:

static mb_pdu_t* _get_data(mb_buffer_t *buf) {
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <_get_data+0x12>
 8004872:	f7ff ff73 	bl	800475c <__mb_failure>
	return &buf->__data[buf->__tail];
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	785b      	ldrb	r3, [r3, #1]
 800487a:	461a      	mov	r2, r3
 800487c:	4613      	mov	r3, r2
 800487e:	01db      	lsls	r3, r3, #7
 8004880:	4413      	add	r3, r2
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	4413      	add	r3, r2
 8004888:	3304      	adds	r3, #4
}
 800488a:	4618      	mov	r0, r3
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <_commit_get>:

static void _commit_get(mb_buffer_t *buf) {
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <_commit_get+0x12>
 80048a2:	f7ff ff5b 	bl	800475c <__mb_failure>
	if (buf->__available) {
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	789b      	ldrb	r3, [r3, #2]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d016      	beq.n	80048dc <_commit_get+0x48>
		buf->__tail = (buf->__tail + 1) % MB_BUFFER_SIZE;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	785b      	ldrb	r3, [r3, #1]
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <_commit_get+0x50>)
 80048b6:	fb83 1302 	smull	r1, r3, r3, r2
 80048ba:	1099      	asrs	r1, r3, #2
 80048bc:	17d3      	asrs	r3, r2, #31
 80048be:	1ac9      	subs	r1, r1, r3
 80048c0:	460b      	mov	r3, r1
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	440b      	add	r3, r1
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	1ad1      	subs	r1, r2, r3
 80048ca:	b2ca      	uxtb	r2, r1
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	705a      	strb	r2, [r3, #1]
		buf->__available--;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	789b      	ldrb	r3, [r3, #2]
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	709a      	strb	r2, [r3, #2]
	}
}
 80048dc:	bf00      	nop
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	66666667 	.word	0x66666667

080048e8 <_flush>:

static void _flush(mb_buffer_t *buf) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <_flush+0x12>
 80048f6:	f7ff ff31 	bl	800475c <__mb_failure>
	buf->__tail      = 0;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	705a      	strb	r2, [r3, #1]
	buf->__head      = 0;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	701a      	strb	r2, [r3, #0]
	buf->__available = 0;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	709a      	strb	r2, [r3, #2]
}
 800490c:	bf00      	nop
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <_available>:

static uint8_t _available(mb_buffer_t *buf) {
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <_available+0x12>
 8004922:	f7ff ff1b 	bl	800475c <__mb_failure>
	
	return buf->__available;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	789b      	ldrb	r3, [r3, #2]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <mb_crc_calc>:
 */

#include "../lib/mb_crc.h"

uint16_t mb_crc_calc(uint8_t* data, uint16_t len)
{
 8004932:	b480      	push	{r7}
 8004934:	b087      	sub	sp, #28
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
 800493a:	460b      	mov	r3, r1
 800493c:	807b      	strh	r3, [r7, #2]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 800493e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004942:	617b      	str	r3, [r7, #20]
    for (uint16_t i = 0; i < len; i++)
 8004944:	2300      	movs	r3, #0
 8004946:	827b      	strh	r3, [r7, #18]
 8004948:	e023      	b.n	8004992 <mb_crc_calc+0x60>
    {
        temp = temp ^ data[i];
 800494a:	8a7b      	ldrh	r3, [r7, #18]
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	4413      	add	r3, r2
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	461a      	mov	r2, r3
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	4053      	eors	r3, r2
 8004958:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 1; j <= 8; j++)
 800495a:	2301      	movs	r3, #1
 800495c:	747b      	strb	r3, [r7, #17]
 800495e:	e012      	b.n	8004986 <mb_crc_calc+0x54>
        {
            flag = temp & 0x0001;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	085b      	lsrs	r3, r3, #1
 800496c:	617b      	str	r3, [r7, #20]
            if (flag)
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <mb_crc_calc+0x4e>
                temp ^= 0xA001;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 800497a:	f083 0301 	eor.w	r3, r3, #1
 800497e:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 1; j <= 8; j++)
 8004980:	7c7b      	ldrb	r3, [r7, #17]
 8004982:	3301      	adds	r3, #1
 8004984:	747b      	strb	r3, [r7, #17]
 8004986:	7c7b      	ldrb	r3, [r7, #17]
 8004988:	2b08      	cmp	r3, #8
 800498a:	d9e9      	bls.n	8004960 <mb_crc_calc+0x2e>
    for (uint16_t i = 0; i < len; i++)
 800498c:	8a7b      	ldrh	r3, [r7, #18]
 800498e:	3301      	adds	r3, #1
 8004990:	827b      	strh	r3, [r7, #18]
 8004992:	8a7a      	ldrh	r2, [r7, #18]
 8004994:	887b      	ldrh	r3, [r7, #2]
 8004996:	429a      	cmp	r2, r3
 8004998:	d3d7      	bcc.n	800494a <mb_crc_calc+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	0a1b      	lsrs	r3, r3, #8
 800499e:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	021b      	lsls	r3, r3, #8
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	617b      	str	r3, [r7, #20]

    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	b29b      	uxth	r3, r3
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	371c      	adds	r7, #28
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <mb_slave_init>:
static uint8_t fc_write_single_reg(mb_slave_t* mb, mb_pdu_t* pdu);
static uint8_t fc_write_multi_coil(mb_slave_t* mb, mb_pdu_t* pdu);
static uint8_t fc_write_multi_reg(mb_slave_t* mb, mb_pdu_t* pdu);

mb_return_t mb_slave_init(mb_slave_t* mb, uint8_t sl_addr, uint32_t speed, uint32_t timer_clk_mhz)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	607a      	str	r2, [r7, #4]
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	460b      	mov	r3, r1
 80049ce:	72fb      	strb	r3, [r7, #11]
	mb_assert(mb);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <mb_slave_init+0x1a>
 80049d6:	f7ff fec1 	bl	800475c <__mb_failure>
	mb_assert(mb->uart);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <mb_slave_init+0x26>
 80049e2:	f7ff febb 	bl	800475c <__mb_failure>
	mb_assert(mb->timer);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <mb_slave_init+0x32>
 80049ee:	f7ff feb5 	bl	800475c <__mb_failure>
	mb_log("Speed: %d\n", speed);

	// Check address rule:
	// MODBUS address should in range from 1 to 247
	// NOTE: Check section "2.2 MODBUS Addressing rules" on "Modbus_over_serial_line_V1_02.pdf"
	if(sl_addr < 1 || sl_addr > 247)
 80049f2:	7afb      	ldrb	r3, [r7, #11]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <mb_slave_init+0x3e>
 80049f8:	7afb      	ldrb	r3, [r7, #11]
 80049fa:	2bf7      	cmp	r3, #247	; 0xf7
 80049fc:	d901      	bls.n	8004a02 <mb_slave_init+0x42>
	{
		mb_log("MODBUS error: address invalid: %d\n", sl_addr);
		return MB_FAILURE;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e03b      	b.n	8004a7a <mb_slave_init+0xba>
	}

	ring_buffer_init(&mb->uart_buf);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	3308      	adds	r3, #8
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 ff6e 	bl	80058e8 <ring_buffer_init>
	mb_buffer_init(&mb->buf);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff fea8 	bl	8004768 <mb_buffer_init>
	mb_data_init(&mb->data);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f603 4358 	addw	r3, r3, #3160	; 0xc58
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f001 f858 	bl	8005ad4 <mb_data_init>
	mb->slave_addr = sl_addr;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	7afa      	ldrb	r2, [r7, #11]
 8004a28:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

	// Timer configure
	__HAL_TIM_CLEAR_IT(mb->timer, TIM_IT_UPDATE);						// Clear IRQ pending
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f06f 0201 	mvn.w	r2, #1
 8004a36:	611a      	str	r2, [r3, #16]
	__HAL_TIM_SET_PRESCALER(mb->timer, (timer_clk_mhz - 1));	// Set timer prescaler
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	3a01      	subs	r2, #1
 8004a42:	629a      	str	r2, [r3, #40]	; 0x28
	set_timer_period(mb, speed);
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f000 f99c 	bl	8004d84 <set_timer_period>

	mb->is_init = true;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55

	tx_buf.tail = 0;
 8004a54:	4b0b      	ldr	r3, [pc, #44]	; (8004a84 <mb_slave_init+0xc4>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	805a      	strh	r2, [r3, #2]
	tx_buf.head = 0;
 8004a5a:	4b0a      	ldr	r3, [pc, #40]	; (8004a84 <mb_slave_init+0xc4>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	801a      	strh	r2, [r3, #0]
	tx_len = 0;
 8004a60:	4b09      	ldr	r3, [pc, #36]	; (8004a88 <mb_slave_init+0xc8>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	801a      	strh	r2, [r3, #0]

	// Start receive UART
	HAL_UART_Receive_IT(mb->uart, &mb->uart_rx, 1);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8004a70:	2201      	movs	r2, #1
 8004a72:	4619      	mov	r1, r3
 8004a74:	f7fe fa04 	bl	8002e80 <HAL_UART_Receive_IT>

	return MB_SUCCESS;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	20000d98 	.word	0x20000d98
 8004a88:	20000d94 	.word	0x20000d94

08004a8c <mb_slave_handle>:
//	HAL_UART_Receive_IT(mb->uart, &mb->uart_rx, 1);
//
//	return MB_SUCCESS;
//}

void mb_slave_handle(mb_slave_t *mb) {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
	mb_assert(mb);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <mb_slave_handle+0x12>
 8004a9a:	f7ff fe5f 	bl	800475c <__mb_failure>

	// Reject handle if MODBUS is not initialize
	if(mb->is_init == false){
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 8004aa4:	f083 0301 	eor.w	r3, r3, #1
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f040 8096 	bne.w	8004bdc <mb_slave_handle+0x150>
		return;
	}

	// Handle received data
	if (mb->buf.available(&mb->buf) == 0) {
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	f502 7209 	add.w	r2, r2, #548	; 0x224
 8004abc:	4610      	mov	r0, r2
 8004abe:	4798      	blx	r3
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 808c 	beq.w	8004be0 <mb_slave_handle+0x154>
		return;
	}

	// Check frame PDU data size
	mb_pdu_t* pdu = mb->buf.get_data(&mb->buf);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8d3 3c44 	ldr.w	r3, [r3, #3140]	; 0xc44
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	f502 7209 	add.w	r2, r2, #548	; 0x224
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	4798      	blx	r3
 8004ad8:	60f8      	str	r0, [r7, #12]
	if(pdu->len < 8){
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	881b      	ldrh	r3, [r3, #0]
 8004ade:	2b07      	cmp	r3, #7
 8004ae0:	d808      	bhi.n	8004af4 <mb_slave_handle+0x68>
		mb_log("MODBUS error: bad frame, len = %d", pdu->len);
		mb->buf.commit_get(&mb->buf);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8d3 3c48 	ldr.w	r3, [r3, #3144]	; 0xc48
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	f502 7209 	add.w	r2, r2, #548	; 0x224
 8004aee:	4610      	mov	r0, r2
 8004af0:	4798      	blx	r3
		return;
 8004af2:	e07a      	b.n	8004bea <mb_slave_handle+0x15e>
	}

	// Slave ID
	if(pdu->data[MB_PDU_ID] != mb->slave_addr){
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	789a      	ldrb	r2, [r3, #2]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d170      	bne.n	8004be4 <mb_slave_handle+0x158>
	mb_log("Func code: %d\n", pdu->data[MB_PDU_FUNC]);
	mb_log("Address  : %d\n", (uint16_t)((uint16_t)pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO]));
#endif

	// Verify CRC
	uint16_t crc = (pdu->data[pdu->len - 2] << 8) | pdu->data[pdu->len - 1];
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	3b02      	subs	r3, #2
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	789b      	ldrb	r3, [r3, #2]
 8004b0e:	021b      	lsls	r3, r3, #8
 8004b10:	b21a      	sxth	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	68f9      	ldr	r1, [r7, #12]
 8004b1a:	440b      	add	r3, r1
 8004b1c:	789b      	ldrb	r3, [r3, #2]
 8004b1e:	b21b      	sxth	r3, r3
 8004b20:	4313      	orrs	r3, r2
 8004b22:	b21b      	sxth	r3, r3
 8004b24:	817b      	strh	r3, [r7, #10]
	if(crc != mb_crc_calc(pdu->data, pdu->len - 2))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	1c9a      	adds	r2, r3, #2
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	3b02      	subs	r3, #2
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	4619      	mov	r1, r3
 8004b34:	4610      	mov	r0, r2
 8004b36:	f7ff fefc 	bl	8004932 <mb_crc_calc>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	897b      	ldrh	r3, [r7, #10]
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d151      	bne.n	8004be8 <mb_slave_handle+0x15c>
		mb_log("MODBUS error: CRC invalid\n");
		return;
	}

	// Handle request
	uint8_t err_code = valid_request(mb, pdu);
 8004b44:	68f9      	ldr	r1, [r7, #12]
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f934 	bl	8004db4 <valid_request>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	727b      	strb	r3, [r7, #9]
	if (err_code) {
 8004b50:	7a7b      	ldrb	r3, [r7, #9]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d006      	beq.n	8004b64 <mb_slave_handle+0xd8>
		build_exc(mb, pdu, err_code);
 8004b56:	7a7b      	ldrb	r3, [r7, #9]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	68f9      	ldr	r1, [r7, #12]
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 fb05 	bl	800516c <build_exc>
 8004b62:	e00e      	b.n	8004b82 <mb_slave_handle+0xf6>
	} else {
		err_code = execute_func(mb, pdu);
 8004b64:	68f9      	ldr	r1, [r7, #12]
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fa9c 	bl	80050a4 <execute_func>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	727b      	strb	r3, [r7, #9]
		if (err_code)
 8004b70:	7a7b      	ldrb	r3, [r7, #9]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d005      	beq.n	8004b82 <mb_slave_handle+0xf6>
			build_exc(mb, pdu, err_code);
 8004b76:	7a7b      	ldrb	r3, [r7, #9]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	68f9      	ldr	r1, [r7, #12]
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 faf5 	bl	800516c <build_exc>
	}

	// Response data
	crc = mb_crc_calc(pdu->data, pdu->len - 2);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	1c9a      	adds	r2, r3, #2
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	3b02      	subs	r3, #2
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	4619      	mov	r1, r3
 8004b90:	4610      	mov	r0, r2
 8004b92:	f7ff fece 	bl	8004932 <mb_crc_calc>
 8004b96:	4603      	mov	r3, r0
 8004b98:	817b      	strh	r3, [r7, #10]
	pdu->data[pdu->len - 2] = (uint8_t) (crc >> 8);
 8004b9a:	897b      	ldrh	r3, [r7, #10]
 8004b9c:	0a1b      	lsrs	r3, r3, #8
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	3b02      	subs	r3, #2
 8004ba6:	b2d1      	uxtb	r1, r2
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4413      	add	r3, r2
 8004bac:	460a      	mov	r2, r1
 8004bae:	709a      	strb	r2, [r3, #2]
	pdu->data[pdu->len - 1] = (uint8_t) (crc & 0x00FF);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	897a      	ldrh	r2, [r7, #10]
 8004bb8:	b2d1      	uxtb	r1, r2
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	460a      	mov	r2, r1
 8004bc0:	709a      	strb	r2, [r3, #2]
	set_tx(mb, pdu);
 8004bc2:	68f9      	ldr	r1, [r7, #12]
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 faeb 	bl	80051a0 <set_tx>

	// Commit processed data
	mb->buf.commit_get(&mb->buf);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8d3 3c48 	ldr.w	r3, [r3, #3144]	; 0xc48
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	f502 7209 	add.w	r2, r2, #548	; 0x224
 8004bd6:	4610      	mov	r0, r2
 8004bd8:	4798      	blx	r3
 8004bda:	e006      	b.n	8004bea <mb_slave_handle+0x15e>
		return;
 8004bdc:	bf00      	nop
 8004bde:	e004      	b.n	8004bea <mb_slave_handle+0x15e>
		return;
 8004be0:	bf00      	nop
 8004be2:	e002      	b.n	8004bea <mb_slave_handle+0x15e>
		return;
 8004be4:	bf00      	nop
 8004be6:	e000      	b.n	8004bea <mb_slave_handle+0x15e>
		return;
 8004be8:	bf00      	nop
}
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <_mb_slave_tx_irq>:

void _mb_slave_tx_irq(mb_slave_t* mb)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
	mb_assert(mb);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <_mb_slave_tx_irq+0x12>
 8004bfe:	f7ff fdad 	bl	800475c <__mb_failure>
	tx_buf.tail = (tx_buf.tail + tx_len) % UART_TX_BUF_SIZE;
 8004c02:	4b0e      	ldr	r3, [pc, #56]	; (8004c3c <_mb_slave_tx_irq+0x4c>)
 8004c04:	885b      	ldrh	r3, [r3, #2]
 8004c06:	461a      	mov	r2, r3
 8004c08:	4b0d      	ldr	r3, [pc, #52]	; (8004c40 <_mb_slave_tx_irq+0x50>)
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	441a      	add	r2, r3
 8004c10:	4b0c      	ldr	r3, [pc, #48]	; (8004c44 <_mb_slave_tx_irq+0x54>)
 8004c12:	fb83 1302 	smull	r1, r3, r3, r2
 8004c16:	1199      	asrs	r1, r3, #6
 8004c18:	17d3      	asrs	r3, r2, #31
 8004c1a:	1ac9      	subs	r1, r1, r3
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	440b      	add	r3, r1
 8004c22:	01db      	lsls	r3, r3, #7
 8004c24:	1ad1      	subs	r1, r2, r3
 8004c26:	b28a      	uxth	r2, r1
 8004c28:	4b04      	ldr	r3, [pc, #16]	; (8004c3c <_mb_slave_tx_irq+0x4c>)
 8004c2a:	805a      	strh	r2, [r3, #2]
	start_transmit(mb);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 faf5 	bl	800521c <start_transmit>
}
 8004c32:	bf00      	nop
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20000d98 	.word	0x20000d98
 8004c40:	20000d94 	.word	0x20000d94
 8004c44:	2aaaaaab 	.word	0x2aaaaaab

08004c48 <_mb_slave_rx_irq>:

void _mb_slave_rx_irq(mb_slave_t* mb)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
	mb->uart_buf.add(&mb->uart_buf, mb->uart_rx);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	f102 0008 	add.w	r0, r2, #8
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	f892 2220 	ldrb.w	r2, [r2, #544]	; 0x220
 8004c62:	4611      	mov	r1, r2
 8004c64:	4798      	blx	r3

	// Restart timer
	__HAL_TIM_SET_COUNTER(mb->timer, 0);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(mb->timer);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fd fc31 	bl	80024dc <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(mb->uart, &mb->uart_rx, 1);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6818      	ldr	r0, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8004c84:	2201      	movs	r2, #1
 8004c86:	4619      	mov	r1, r3
 8004c88:	f7fe f8fa 	bl	8002e80 <HAL_UART_Receive_IT>
}
 8004c8c:	bf00      	nop
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <_mb_slave_timer_irq>:

void _mb_slave_timer_irq(mb_slave_t* mb)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
	// Stop receive UART
	HAL_UART_AbortReceive_IT(mb->uart);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7fe f943 	bl	8002f2c <HAL_UART_AbortReceive_IT>
	HAL_TIM_Base_Stop_IT(mb->timer);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fd fc6a 	bl	8002584 <HAL_TIM_Base_Stop_IT>

	// Copy data from buffer to MODBUS packet
	if(mb->uart_buf.overflow)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 320e 	ldrb.w	r3, [r3, #526]	; 0x20e
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d007      	beq.n	8004cca <_mb_slave_timer_irq+0x36>
	{
		mb->uart_buf.flush(&mb->uart_buf);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	3208      	adds	r2, #8
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	4798      	blx	r3
 8004cc8:	e01e      	b.n	8004d08 <_mb_slave_timer_irq+0x74>
	}
	else
	{
		mb_pdu_t *pdu = mb->buf.next(&mb->buf);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f8d3 3c3c 	ldr.w	r3, [r3, #3132]	; 0xc3c
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	f502 7209 	add.w	r2, r2, #548	; 0x224
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	4798      	blx	r3
 8004cda:	60f8      	str	r0, [r7, #12]
		pdu->len = MB_PDU_SIZE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ce2:	801a      	strh	r2, [r3, #0]
		mb->uart_buf.get_data(&mb->uart_buf, pdu->data, &pdu->len);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	f102 0008 	add.w	r0, r2, #8
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	1c91      	adds	r1, r2, #2
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	4798      	blx	r3
		mb->buf.commit_next(&mb->buf);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 3c40 	ldr.w	r3, [r3, #3136]	; 0xc40
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	f502 7209 	add.w	r2, r2, #548	; 0x224
 8004d04:	4610      	mov	r0, r2
 8004d06:	4798      	blx	r3
	}

	// Start receive UART
	HAL_UART_Receive_IT(mb->uart, &mb->uart_rx, 1);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6818      	ldr	r0, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8004d12:	2201      	movs	r2, #1
 8004d14:	4619      	mov	r1, r3
 8004d16:	f7fe f8b3 	bl	8002e80 <HAL_UART_Receive_IT>
}
 8004d1a:	bf00      	nop
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
	...

08004d24 <get_t35>:

static uint32_t get_t35(uint32_t speed) {
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
	mb_assert(speed);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <get_t35+0x12>
 8004d32:	f7ff fd13 	bl	800475c <__mb_failure>

	float f_speed = (1000000.0f / ((float) speed / 8.0f));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	ee07 3a90 	vmov	s15, r3
 8004d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d40:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8004d44:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004d48:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8004d80 <get_t35+0x5c>
 8004d4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d50:	edc7 7a03 	vstr	s15, [r7, #12]
	f_speed = f_speed * 3.5f;
 8004d54:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d58:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8004d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d60:	edc7 7a03 	vstr	s15, [r7, #12]

	mb_log("Get T35: speed = %u, T35 = %u (us)\n", speed, (uint32_t)f_speed);
	return (uint32_t) (f_speed + 1);
 8004d64:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d74:	ee17 3a90 	vmov	r3, s15
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	49742400 	.word	0x49742400

08004d84 <set_timer_period>:
/**
 * @brief Set timer period of 3.5 char transmit time of UART speed
 * @param speed speed of UART
 */
static void set_timer_period(mb_slave_t* mb ,uint32_t speed)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
	uint32_t t35 = get_t35(speed);
 8004d8e:	6838      	ldr	r0, [r7, #0]
 8004d90:	f7ff ffc8 	bl	8004d24 <get_t35>
 8004d94:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(mb->timer, t35 - 1);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	3a01      	subs	r2, #1
 8004da0:	62da      	str	r2, [r3, #44]	; 0x2c
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	3a01      	subs	r2, #1
 8004daa:	60da      	str	r2, [r3, #12]
}
 8004dac:	bf00      	nop
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <valid_request>:

static uint8_t valid_request(mb_slave_t* mb,mb_pdu_t* pdu)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for(i = 0; i < sizeof(mb_support_fc);i++)
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	73fb      	strb	r3, [r7, #15]
 8004dc2:	e009      	b.n	8004dd8 <valid_request+0x24>
	{
		if(pdu->data[MB_PDU_FUNC] == mb_support_fc[i])
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	78da      	ldrb	r2, [r3, #3]
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	499e      	ldr	r1, [pc, #632]	; (8005044 <valid_request+0x290>)
 8004dcc:	5ccb      	ldrb	r3, [r1, r3]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d006      	beq.n	8004de0 <valid_request+0x2c>
	for(i = 0; i < sizeof(mb_support_fc);i++)
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	73fb      	strb	r3, [r7, #15]
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
 8004dda:	2b07      	cmp	r3, #7
 8004ddc:	d9f2      	bls.n	8004dc4 <valid_request+0x10>
 8004dde:	e000      	b.n	8004de2 <valid_request+0x2e>
		break;
 8004de0:	bf00      	nop
	}

	// Function code not support
	if (i >= sizeof(mb_support_fc)) {
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
 8004de4:	2b07      	cmp	r3, #7
 8004de6:	d901      	bls.n	8004dec <valid_request+0x38>
		mb_log("MB function not support\n");
		return MB_EXC_FUNC;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e155      	b.n	8005098 <valid_request+0x2e4>
	}

	uint16_t addr;	// start address
	uint16_t nreg;	// number of reg

	addr = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	791b      	ldrb	r3, [r3, #4]
 8004df0:	021b      	lsls	r3, r3, #8
 8004df2:	b21a      	sxth	r2, r3
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	795b      	ldrb	r3, [r3, #5]
 8004df8:	b21b      	sxth	r3, r3
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	b21b      	sxth	r3, r3
 8004dfe:	81bb      	strh	r3, [r7, #12]
	nreg = pdu->data[MB_PDU_QTY_HI] << 8 | pdu->data[MB_PDU_QTY_LO];
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	799b      	ldrb	r3, [r3, #6]
 8004e04:	021b      	lsls	r3, r3, #8
 8004e06:	b21a      	sxth	r2, r3
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	79db      	ldrb	r3, [r3, #7]
 8004e0c:	b21b      	sxth	r3, r3
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	b21b      	sxth	r3, r3
 8004e12:	817b      	strh	r3, [r7, #10]

	switch(pdu->data[MB_PDU_FUNC])
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	78db      	ldrb	r3, [r3, #3]
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	2b0f      	cmp	r3, #15
 8004e1c:	f200 813b 	bhi.w	8005096 <valid_request+0x2e2>
 8004e20:	a201      	add	r2, pc, #4	; (adr r2, 8004e28 <valid_request+0x74>)
 8004e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e26:	bf00      	nop
 8004e28:	08004e69 	.word	0x08004e69
 8004e2c:	08004ea1 	.word	0x08004ea1
 8004e30:	08004f2b 	.word	0x08004f2b
 8004e34:	08004ed9 	.word	0x08004ed9
 8004e38:	08004fd7 	.word	0x08004fd7
 8004e3c:	08005069 	.word	0x08005069
 8004e40:	08005097 	.word	0x08005097
 8004e44:	08005097 	.word	0x08005097
 8004e48:	08005097 	.word	0x08005097
 8004e4c:	08005097 	.word	0x08005097
 8004e50:	08005097 	.word	0x08005097
 8004e54:	08005097 	.word	0x08005097
 8004e58:	08005097 	.word	0x08005097
 8004e5c:	08005097 	.word	0x08005097
 8004e60:	08004f7d 	.word	0x08004f7d
 8004e64:	08004ff9 	.word	0x08004ff9
	{
	case MB_FC_READ_COIL:
		if (!((nreg >= 1) && (nreg <= mb->data.coil.nbit)))
 8004e68:	897b      	ldrh	r3, [r7, #10]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d005      	beq.n	8004e7a <valid_request+0xc6>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8b3 3c5c 	ldrh.w	r3, [r3, #3164]	; 0xc5c
 8004e74:	897a      	ldrh	r2, [r7, #10]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d901      	bls.n	8004e7e <valid_request+0xca>
			return MB_EXC_ADDR_RANGE;
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	e10c      	b.n	8005098 <valid_request+0x2e4>
		if(!((addr < mb->data.coil.nbit) && ((addr + nreg) <= mb->data.coil.nbit)))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8b3 3c5c 	ldrh.w	r3, [r3, #3164]	; 0xc5c
 8004e84:	89ba      	ldrh	r2, [r7, #12]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d208      	bcs.n	8004e9c <valid_request+0xe8>
 8004e8a:	89ba      	ldrh	r2, [r7, #12]
 8004e8c:	897b      	ldrh	r3, [r7, #10]
 8004e8e:	4413      	add	r3, r2
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	f8b2 2c5c 	ldrh.w	r2, [r2, #3164]	; 0xc5c
 8004e96:	4293      	cmp	r3, r2
 8004e98:	f340 80ee 	ble.w	8005078 <valid_request+0x2c4>
			return MB_EXC_REG_QTY;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e0fb      	b.n	8005098 <valid_request+0x2e4>
		break;
	case MB_FC_READ_DISCRETE_INPUT:
		if (!((nreg >= 1) && (nreg <= mb->data.input.nbit)))
 8004ea0:	897b      	ldrh	r3, [r7, #10]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d005      	beq.n	8004eb2 <valid_request+0xfe>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8b3 3c6c 	ldrh.w	r3, [r3, #3180]	; 0xc6c
 8004eac:	897a      	ldrh	r2, [r7, #10]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d901      	bls.n	8004eb6 <valid_request+0x102>
			return MB_EXC_ADDR_RANGE;
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e0f0      	b.n	8005098 <valid_request+0x2e4>
		if(!((addr < mb->data.input.nbit) && ((addr + nreg) <= mb->data.input.nbit)))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8b3 3c6c 	ldrh.w	r3, [r3, #3180]	; 0xc6c
 8004ebc:	89ba      	ldrh	r2, [r7, #12]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d208      	bcs.n	8004ed4 <valid_request+0x120>
 8004ec2:	89ba      	ldrh	r2, [r7, #12]
 8004ec4:	897b      	ldrh	r3, [r7, #10]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	f8b2 2c6c 	ldrh.w	r2, [r2, #3180]	; 0xc6c
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	f340 80d4 	ble.w	800507c <valid_request+0x2c8>
			return MB_EXC_REG_QTY;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e0df      	b.n	8005098 <valid_request+0x2e4>
		break;
	case MB_FC_READ_INPUT_REG:
		if (mb->data.reg_input.nreg > 0x7D) {
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f8b3 3c7c 	ldrh.w	r3, [r3, #3196]	; 0xc7c
 8004ede:	2b7d      	cmp	r3, #125	; 0x7d
 8004ee0:	d907      	bls.n	8004ef2 <valid_request+0x13e>
			if (!(nreg >= 1 && nreg <= 0x7D))
 8004ee2:	897b      	ldrh	r3, [r7, #10]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d002      	beq.n	8004eee <valid_request+0x13a>
 8004ee8:	897b      	ldrh	r3, [r7, #10]
 8004eea:	2b7d      	cmp	r3, #125	; 0x7d
 8004eec:	d90c      	bls.n	8004f08 <valid_request+0x154>
				return MB_EXC_ADDR_RANGE;
 8004eee:	2302      	movs	r3, #2
 8004ef0:	e0d2      	b.n	8005098 <valid_request+0x2e4>
		} else {
			if (!(nreg >= 1 && nreg <= mb->data.reg_input.nreg))
 8004ef2:	897b      	ldrh	r3, [r7, #10]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d005      	beq.n	8004f04 <valid_request+0x150>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8b3 3c7c 	ldrh.w	r3, [r3, #3196]	; 0xc7c
 8004efe:	897a      	ldrh	r2, [r7, #10]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d901      	bls.n	8004f08 <valid_request+0x154>
				return MB_EXC_ADDR_RANGE;
 8004f04:	2302      	movs	r3, #2
 8004f06:	e0c7      	b.n	8005098 <valid_request+0x2e4>
		}
		if(!((addr < mb->data.reg_input.nreg) && ((addr + nreg ) <= mb->data.reg_input.nreg)))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f8b3 3c7c 	ldrh.w	r3, [r3, #3196]	; 0xc7c
 8004f0e:	89ba      	ldrh	r2, [r7, #12]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d208      	bcs.n	8004f26 <valid_request+0x172>
 8004f14:	89ba      	ldrh	r2, [r7, #12]
 8004f16:	897b      	ldrh	r3, [r7, #10]
 8004f18:	4413      	add	r3, r2
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	f8b2 2c7c 	ldrh.w	r2, [r2, #3196]	; 0xc7c
 8004f20:	4293      	cmp	r3, r2
 8004f22:	f340 80ad 	ble.w	8005080 <valid_request+0x2cc>
			return MB_EXC_REG_QTY;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e0b6      	b.n	8005098 <valid_request+0x2e4>
		break;
	case MB_FC_READ_HOLDING_REG:
		if (mb->data.reg_holding.nreg > 0x7D) {
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8b3 3c8c 	ldrh.w	r3, [r3, #3212]	; 0xc8c
 8004f30:	2b7d      	cmp	r3, #125	; 0x7d
 8004f32:	d907      	bls.n	8004f44 <valid_request+0x190>
			if (!(nreg >= 1 && nreg <= 0x7D))
 8004f34:	897b      	ldrh	r3, [r7, #10]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <valid_request+0x18c>
 8004f3a:	897b      	ldrh	r3, [r7, #10]
 8004f3c:	2b7d      	cmp	r3, #125	; 0x7d
 8004f3e:	d90c      	bls.n	8004f5a <valid_request+0x1a6>
				return MB_EXC_ADDR_RANGE;
 8004f40:	2302      	movs	r3, #2
 8004f42:	e0a9      	b.n	8005098 <valid_request+0x2e4>
		} else {
			if (!((nreg >= 1) && (nreg <= mb->data.reg_holding.nreg)))
 8004f44:	897b      	ldrh	r3, [r7, #10]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d005      	beq.n	8004f56 <valid_request+0x1a2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8b3 3c8c 	ldrh.w	r3, [r3, #3212]	; 0xc8c
 8004f50:	897a      	ldrh	r2, [r7, #10]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d901      	bls.n	8004f5a <valid_request+0x1a6>
				return MB_EXC_ADDR_RANGE;
 8004f56:	2302      	movs	r3, #2
 8004f58:	e09e      	b.n	8005098 <valid_request+0x2e4>
		}
		if(!((addr < mb->data.reg_holding.nreg) && ((addr + nreg ) <= mb->data.reg_holding.nreg)))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f8b3 3c8c 	ldrh.w	r3, [r3, #3212]	; 0xc8c
 8004f60:	89ba      	ldrh	r2, [r7, #12]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d208      	bcs.n	8004f78 <valid_request+0x1c4>
 8004f66:	89ba      	ldrh	r2, [r7, #12]
 8004f68:	897b      	ldrh	r3, [r7, #10]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	f8b2 2c8c 	ldrh.w	r2, [r2, #3212]	; 0xc8c
 8004f72:	4293      	cmp	r3, r2
 8004f74:	f340 8086 	ble.w	8005084 <valid_request+0x2d0>
			return MB_EXC_REG_QTY;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e08d      	b.n	8005098 <valid_request+0x2e4>
		break;
	case MB_FC_WRITE_MULTI_COIL:
	{
		// Get number of byte
		uint8_t nbyte = nreg / 8;
 8004f7c:	897b      	ldrh	r3, [r7, #10]
 8004f7e:	08db      	lsrs	r3, r3, #3
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	73bb      	strb	r3, [r7, #14]
		if(nreg % 8)
 8004f84:	897b      	ldrh	r3, [r7, #10]
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <valid_request+0x1e2>
			nbyte += 1;
 8004f90:	7bbb      	ldrb	r3, [r7, #14]
 8004f92:	3301      	adds	r3, #1
 8004f94:	73bb      	strb	r3, [r7, #14]

		if(!((nreg >= 1) && (nreg <= mb->data.coil.nbit) && (nbyte == pdu->data[MB_PDU_CNT])))
 8004f96:	897b      	ldrh	r3, [r7, #10]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <valid_request+0x1fe>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8b3 3c5c 	ldrh.w	r3, [r3, #3164]	; 0xc5c
 8004fa2:	897a      	ldrh	r2, [r7, #10]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d804      	bhi.n	8004fb2 <valid_request+0x1fe>
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	7a1b      	ldrb	r3, [r3, #8]
 8004fac:	7bba      	ldrb	r2, [r7, #14]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d001      	beq.n	8004fb6 <valid_request+0x202>
			return MB_EXC_REG_QTY;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e070      	b.n	8005098 <valid_request+0x2e4>
		if(!((addr < mb->data.coil.nbit) && ((addr + nreg) <= mb->data.coil.nbit)))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8b3 3c5c 	ldrh.w	r3, [r3, #3164]	; 0xc5c
 8004fbc:	89ba      	ldrh	r2, [r7, #12]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d207      	bcs.n	8004fd2 <valid_request+0x21e>
 8004fc2:	89ba      	ldrh	r2, [r7, #12]
 8004fc4:	897b      	ldrh	r3, [r7, #10]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	f8b2 2c5c 	ldrh.w	r2, [r2, #3164]	; 0xc5c
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	dd5a      	ble.n	8005088 <valid_request+0x2d4>
			return MB_EXC_ADDR_RANGE;
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	e060      	b.n	8005098 <valid_request+0x2e4>
		break;
	}
	case MB_FC_WRITE_SINGLE_COIL:
		if(!((nreg == 0x0000) || (nreg == 0xFF00)))
 8004fd6:	897b      	ldrh	r3, [r7, #10]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d005      	beq.n	8004fe8 <valid_request+0x234>
 8004fdc:	897b      	ldrh	r3, [r7, #10]
 8004fde:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8004fe2:	d001      	beq.n	8004fe8 <valid_request+0x234>
			return MB_EXC_REG_QTY;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e057      	b.n	8005098 <valid_request+0x2e4>
		if(!(addr < mb->data.coil.nbit))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8b3 3c5c 	ldrh.w	r3, [r3, #3164]	; 0xc5c
 8004fee:	89ba      	ldrh	r2, [r7, #12]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d34b      	bcc.n	800508c <valid_request+0x2d8>
			return MB_EXC_ADDR_RANGE;
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e04f      	b.n	8005098 <valid_request+0x2e4>
		break;
	case MB_FC_WRITE_MULTI_REG:
		if(mb->data.reg_holding.nreg < 0x7B) {
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8b3 3c8c 	ldrh.w	r3, [r3, #3212]	; 0xc8c
 8004ffe:	2b7a      	cmp	r3, #122	; 0x7a
 8005000:	d811      	bhi.n	8005026 <valid_request+0x272>
			if (!((nreg >= 1) && (nreg <= mb->data.reg_holding.nreg) && (pdu->data[MB_PDU_CNT] == nreg * 2)))
 8005002:	897b      	ldrh	r3, [r7, #10]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00c      	beq.n	8005022 <valid_request+0x26e>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8b3 3c8c 	ldrh.w	r3, [r3, #3212]	; 0xc8c
 800500e:	897a      	ldrh	r2, [r7, #10]
 8005010:	429a      	cmp	r2, r3
 8005012:	d806      	bhi.n	8005022 <valid_request+0x26e>
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	7a1b      	ldrb	r3, [r3, #8]
 8005018:	461a      	mov	r2, r3
 800501a:	897b      	ldrh	r3, [r7, #10]
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	429a      	cmp	r2, r3
 8005020:	d012      	beq.n	8005048 <valid_request+0x294>
				return MB_EXC_REG_QTY;
 8005022:	2303      	movs	r3, #3
 8005024:	e038      	b.n	8005098 <valid_request+0x2e4>
		} else {
			if (!((nreg >= 1) && (nreg <= 0x7B) && (pdu->data[MB_PDU_CNT] == nreg * 2)))
 8005026:	897b      	ldrh	r3, [r7, #10]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d009      	beq.n	8005040 <valid_request+0x28c>
 800502c:	897b      	ldrh	r3, [r7, #10]
 800502e:	2b7b      	cmp	r3, #123	; 0x7b
 8005030:	d806      	bhi.n	8005040 <valid_request+0x28c>
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	7a1b      	ldrb	r3, [r3, #8]
 8005036:	461a      	mov	r2, r3
 8005038:	897b      	ldrh	r3, [r7, #10]
 800503a:	005b      	lsls	r3, r3, #1
 800503c:	429a      	cmp	r2, r3
 800503e:	d003      	beq.n	8005048 <valid_request+0x294>
				return MB_EXC_REG_QTY;
 8005040:	2303      	movs	r3, #3
 8005042:	e029      	b.n	8005098 <valid_request+0x2e4>
 8005044:	08005e20 	.word	0x08005e20
		}
		if(!((addr < mb->data.reg_holding.nreg) && ((addr + nreg) <= mb->data.reg_holding.nreg)))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8b3 3c8c 	ldrh.w	r3, [r3, #3212]	; 0xc8c
 800504e:	89ba      	ldrh	r2, [r7, #12]
 8005050:	429a      	cmp	r2, r3
 8005052:	d207      	bcs.n	8005064 <valid_request+0x2b0>
 8005054:	89ba      	ldrh	r2, [r7, #12]
 8005056:	897b      	ldrh	r3, [r7, #10]
 8005058:	4413      	add	r3, r2
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	f8b2 2c8c 	ldrh.w	r2, [r2, #3212]	; 0xc8c
 8005060:	4293      	cmp	r3, r2
 8005062:	dd15      	ble.n	8005090 <valid_request+0x2dc>
			return MB_EXC_ADDR_RANGE;
 8005064:	2302      	movs	r3, #2
 8005066:	e017      	b.n	8005098 <valid_request+0x2e4>
		break;
	case MB_FC_WRITE_SINGLE_REG:
		if(!(addr <= mb->data.reg_holding.nreg))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8b3 3c8c 	ldrh.w	r3, [r3, #3212]	; 0xc8c
 800506e:	89ba      	ldrh	r2, [r7, #12]
 8005070:	429a      	cmp	r2, r3
 8005072:	d90f      	bls.n	8005094 <valid_request+0x2e0>
			return MB_EXC_ADDR_RANGE;
 8005074:	2302      	movs	r3, #2
 8005076:	e00f      	b.n	8005098 <valid_request+0x2e4>
		break;
 8005078:	bf00      	nop
 800507a:	e00c      	b.n	8005096 <valid_request+0x2e2>
		break;
 800507c:	bf00      	nop
 800507e:	e00a      	b.n	8005096 <valid_request+0x2e2>
		break;
 8005080:	bf00      	nop
 8005082:	e008      	b.n	8005096 <valid_request+0x2e2>
		break;
 8005084:	bf00      	nop
 8005086:	e006      	b.n	8005096 <valid_request+0x2e2>
		break;
 8005088:	bf00      	nop
 800508a:	e004      	b.n	8005096 <valid_request+0x2e2>
		break;
 800508c:	bf00      	nop
 800508e:	e002      	b.n	8005096 <valid_request+0x2e2>
		break;
 8005090:	bf00      	nop
 8005092:	e000      	b.n	8005096 <valid_request+0x2e2>
		break;
 8005094:	bf00      	nop
	}

	return 0;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <execute_func>:

static uint8_t execute_func(mb_slave_t* mb, mb_pdu_t* pdu)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
	switch (pdu->data[MB_PDU_FUNC]) {
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	78db      	ldrb	r3, [r3, #3]
 80050b2:	3b01      	subs	r3, #1
 80050b4:	2b0f      	cmp	r3, #15
 80050b6:	d853      	bhi.n	8005160 <execute_func+0xbc>
 80050b8:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <execute_func+0x1c>)
 80050ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050be:	bf00      	nop
 80050c0:	08005101 	.word	0x08005101
 80050c4:	0800510d 	.word	0x0800510d
 80050c8:	08005119 	.word	0x08005119
 80050cc:	08005125 	.word	0x08005125
 80050d0:	08005131 	.word	0x08005131
 80050d4:	0800513d 	.word	0x0800513d
 80050d8:	08005161 	.word	0x08005161
 80050dc:	08005161 	.word	0x08005161
 80050e0:	08005161 	.word	0x08005161
 80050e4:	08005161 	.word	0x08005161
 80050e8:	08005161 	.word	0x08005161
 80050ec:	08005161 	.word	0x08005161
 80050f0:	08005161 	.word	0x08005161
 80050f4:	08005161 	.word	0x08005161
 80050f8:	08005149 	.word	0x08005149
 80050fc:	08005155 	.word	0x08005155
	case MB_FC_READ_COIL:
		return fc_read_coil(mb, pdu);
 8005100:	6839      	ldr	r1, [r7, #0]
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f8c2 	bl	800528c <fc_read_coil>
 8005108:	4603      	mov	r3, r0
 800510a:	e02b      	b.n	8005164 <execute_func+0xc0>
	case MB_FC_READ_DISCRETE_INPUT:
		return fc_read_input(mb, pdu);
 800510c:	6839      	ldr	r1, [r7, #0]
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f946 	bl	80053a0 <fc_read_input>
 8005114:	4603      	mov	r3, r0
 8005116:	e025      	b.n	8005164 <execute_func+0xc0>
	case MB_FC_READ_HOLDING_REG:
		return fc_read_reg_hodling(mb, pdu);
 8005118:	6839      	ldr	r1, [r7, #0]
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 fa35 	bl	800558a <fc_read_reg_hodling>
 8005120:	4603      	mov	r3, r0
 8005122:	e01f      	b.n	8005164 <execute_func+0xc0>
	case MB_FC_READ_INPUT_REG:
		return fc_read_reg_input(mb, pdu);
 8005124:	6839      	ldr	r1, [r7, #0]
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f9c4 	bl	80054b4 <fc_read_reg_input>
 800512c:	4603      	mov	r3, r0
 800512e:	e019      	b.n	8005164 <execute_func+0xc0>
	case MB_FC_WRITE_SINGLE_COIL:
		return fc_write_single_coil(mb, pdu);
 8005130:	6839      	ldr	r1, [r7, #0]
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fa94 	bl	8005660 <fc_write_single_coil>
 8005138:	4603      	mov	r3, r0
 800513a:	e013      	b.n	8005164 <execute_func+0xc0>
	case MB_FC_WRITE_SINGLE_REG:
		return fc_write_single_reg(mb, pdu);
 800513c:	6839      	ldr	r1, [r7, #0]
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fac8 	bl	80056d4 <fc_write_single_reg>
 8005144:	4603      	mov	r3, r0
 8005146:	e00d      	b.n	8005164 <execute_func+0xc0>
	case MB_FC_WRITE_MULTI_COIL:
		return fc_write_multi_coil(mb, pdu);
 8005148:	6839      	ldr	r1, [r7, #0]
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 faef 	bl	800572e <fc_write_multi_coil>
 8005150:	4603      	mov	r3, r0
 8005152:	e007      	b.n	8005164 <execute_func+0xc0>
	case MB_FC_WRITE_MULTI_REG:
		return fc_write_multi_reg(mb, pdu);
 8005154:	6839      	ldr	r1, [r7, #0]
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 fb5a 	bl	8005810 <fc_write_multi_reg>
 800515c:	4603      	mov	r3, r0
 800515e:	e001      	b.n	8005164 <execute_func+0xc0>
	default:
		break;
 8005160:	bf00      	nop
	}
	return 0;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <build_exc>:

static void build_exc(mb_slave_t* mb, mb_pdu_t* pdu, uint8_t code)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	4613      	mov	r3, r2
 8005178:	71fb      	strb	r3, [r7, #7]
	 * | 1  | 1  |   1      |  2  |
	 * +----+----+----------+-----+
	 * len = 5
	 */

	pdu->data[MB_PDU_FUNC] = pdu->data[MB_PDU_FUNC] + 0x80;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	78db      	ldrb	r3, [r3, #3]
 800517e:	3b80      	subs	r3, #128	; 0x80
 8005180:	b2da      	uxtb	r2, r3
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	70da      	strb	r2, [r3, #3]
	pdu->data[2] = code;
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	79fa      	ldrb	r2, [r7, #7]
 800518a:	711a      	strb	r2, [r3, #4]
	pdu->len = 5;
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2205      	movs	r2, #5
 8005190:	801a      	strh	r2, [r3, #0]

	mb_log("EXC code: %d\n", pdu->data[MB_PDU_FUNC]);
}
 8005192:	bf00      	nop
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
	...

080051a0 <set_tx>:

static void set_tx(mb_slave_t* mb, mb_pdu_t* pdu)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
	}
	mb_log("\n");
#endif

	// Copy data to tx buffer
	for (uint16_t i = 0; i < pdu->len; i++) {
 80051aa:	2300      	movs	r3, #0
 80051ac:	81fb      	strh	r3, [r7, #14]
 80051ae:	e025      	b.n	80051fc <set_tx+0x5c>
		tx_buf.data[tx_buf.head] = pdu->data[i];
 80051b0:	89fb      	ldrh	r3, [r7, #14]
 80051b2:	4a18      	ldr	r2, [pc, #96]	; (8005214 <set_tx+0x74>)
 80051b4:	8812      	ldrh	r2, [r2, #0]
 80051b6:	4611      	mov	r1, r2
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	4413      	add	r3, r2
 80051bc:	789a      	ldrb	r2, [r3, #2]
 80051be:	4b15      	ldr	r3, [pc, #84]	; (8005214 <set_tx+0x74>)
 80051c0:	440b      	add	r3, r1
 80051c2:	711a      	strb	r2, [r3, #4]
		tx_buf.head = (tx_buf.head + 1) % UART_TX_BUF_SIZE;
 80051c4:	4b13      	ldr	r3, [pc, #76]	; (8005214 <set_tx+0x74>)
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	4b13      	ldr	r3, [pc, #76]	; (8005218 <set_tx+0x78>)
 80051cc:	fb83 1302 	smull	r1, r3, r3, r2
 80051d0:	1199      	asrs	r1, r3, #6
 80051d2:	17d3      	asrs	r3, r2, #31
 80051d4:	1ac9      	subs	r1, r1, r3
 80051d6:	460b      	mov	r3, r1
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	440b      	add	r3, r1
 80051dc:	01db      	lsls	r3, r3, #7
 80051de:	1ad1      	subs	r1, r2, r3
 80051e0:	b28a      	uxth	r2, r1
 80051e2:	4b0c      	ldr	r3, [pc, #48]	; (8005214 <set_tx+0x74>)
 80051e4:	801a      	strh	r2, [r3, #0]
		mb_assert(tx_buf.head != tx_buf.tail);
 80051e6:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <set_tx+0x74>)
 80051e8:	881a      	ldrh	r2, [r3, #0]
 80051ea:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <set_tx+0x74>)
 80051ec:	885b      	ldrh	r3, [r3, #2]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d101      	bne.n	80051f6 <set_tx+0x56>
 80051f2:	f7ff fab3 	bl	800475c <__mb_failure>
	for (uint16_t i = 0; i < pdu->len; i++) {
 80051f6:	89fb      	ldrh	r3, [r7, #14]
 80051f8:	3301      	adds	r3, #1
 80051fa:	81fb      	strh	r3, [r7, #14]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	881b      	ldrh	r3, [r3, #0]
 8005200:	89fa      	ldrh	r2, [r7, #14]
 8005202:	429a      	cmp	r2, r3
 8005204:	d3d4      	bcc.n	80051b0 <set_tx+0x10>
	}

	start_transmit(mb);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f808 	bl	800521c <start_transmit>
}
 800520c:	bf00      	nop
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	20000d98 	.word	0x20000d98
 8005218:	2aaaaaab 	.word	0x2aaaaaab

0800521c <start_transmit>:

static void start_transmit(mb_slave_t* mb) {
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
	if (tx_buf.tail == tx_buf.head)
 8005224:	4b17      	ldr	r3, [pc, #92]	; (8005284 <start_transmit+0x68>)
 8005226:	885a      	ldrh	r2, [r3, #2]
 8005228:	4b16      	ldr	r3, [pc, #88]	; (8005284 <start_transmit+0x68>)
 800522a:	881b      	ldrh	r3, [r3, #0]
 800522c:	429a      	cmp	r2, r3
 800522e:	d024      	beq.n	800527a <start_transmit+0x5e>
		return;

	if (tx_buf.tail < tx_buf.head) {
 8005230:	4b14      	ldr	r3, [pc, #80]	; (8005284 <start_transmit+0x68>)
 8005232:	885a      	ldrh	r2, [r3, #2]
 8005234:	4b13      	ldr	r3, [pc, #76]	; (8005284 <start_transmit+0x68>)
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d208      	bcs.n	800524e <start_transmit+0x32>
		tx_len = tx_buf.head - tx_buf.tail;
 800523c:	4b11      	ldr	r3, [pc, #68]	; (8005284 <start_transmit+0x68>)
 800523e:	881a      	ldrh	r2, [r3, #0]
 8005240:	4b10      	ldr	r3, [pc, #64]	; (8005284 <start_transmit+0x68>)
 8005242:	885b      	ldrh	r3, [r3, #2]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	b29a      	uxth	r2, r3
 8005248:	4b0f      	ldr	r3, [pc, #60]	; (8005288 <start_transmit+0x6c>)
 800524a:	801a      	strh	r2, [r3, #0]
 800524c:	e006      	b.n	800525c <start_transmit+0x40>
	} else {
		tx_len = UART_TX_BUF_SIZE - tx_buf.tail;
 800524e:	4b0d      	ldr	r3, [pc, #52]	; (8005284 <start_transmit+0x68>)
 8005250:	885b      	ldrh	r3, [r3, #2]
 8005252:	f5c3 73c0 	rsb	r3, r3, #384	; 0x180
 8005256:	b29a      	uxth	r2, r3
 8005258:	4b0b      	ldr	r3, [pc, #44]	; (8005288 <start_transmit+0x6c>)
 800525a:	801a      	strh	r2, [r3, #0]
	}

	HAL_UART_Transmit_IT(mb->uart, &tx_buf.data[tx_buf.tail], tx_len);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6818      	ldr	r0, [r3, #0]
 8005260:	4b08      	ldr	r3, [pc, #32]	; (8005284 <start_transmit+0x68>)
 8005262:	885b      	ldrh	r3, [r3, #2]
 8005264:	461a      	mov	r2, r3
 8005266:	4b07      	ldr	r3, [pc, #28]	; (8005284 <start_transmit+0x68>)
 8005268:	4413      	add	r3, r2
 800526a:	3304      	adds	r3, #4
 800526c:	4a06      	ldr	r2, [pc, #24]	; (8005288 <start_transmit+0x6c>)
 800526e:	8812      	ldrh	r2, [r2, #0]
 8005270:	b292      	uxth	r2, r2
 8005272:	4619      	mov	r1, r3
 8005274:	f7fd fd96 	bl	8002da4 <HAL_UART_Transmit_IT>
 8005278:	e000      	b.n	800527c <start_transmit+0x60>
		return;
 800527a:	bf00      	nop
}
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	20000d98 	.word	0x20000d98
 8005288:	20000d94 	.word	0x20000d94

0800528c <fc_read_coil>:

static uint8_t fc_read_coil(mb_slave_t* mb, mb_pdu_t* pdu)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2  |  2  |
	 * +----+----+------+-----+-----+
	 * len = 8
	 */

	if(pdu->len < 8)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	2b07      	cmp	r3, #7
 800529c:	d801      	bhi.n	80052a2 <fc_read_coil+0x16>
		return MB_EXC_EXECUTE;
 800529e:	2304      	movs	r3, #4
 80052a0:	e07a      	b.n	8005398 <fc_read_coil+0x10c>

	uint16_t addr = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	791b      	ldrb	r3, [r3, #4]
 80052a6:	021b      	lsls	r3, r3, #8
 80052a8:	b21a      	sxth	r2, r3
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	795b      	ldrb	r3, [r3, #5]
 80052ae:	b21b      	sxth	r3, r3
 80052b0:	4313      	orrs	r3, r2
 80052b2:	b21b      	sxth	r3, r3
 80052b4:	82bb      	strh	r3, [r7, #20]
	uint16_t qty  = pdu->data[MB_PDU_QTY_HI] << 8 | pdu->data[MB_PDU_QTY_LO];
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	799b      	ldrb	r3, [r3, #6]
 80052ba:	021b      	lsls	r3, r3, #8
 80052bc:	b21a      	sxth	r2, r3
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	79db      	ldrb	r3, [r3, #7]
 80052c2:	b21b      	sxth	r3, r3
 80052c4:	4313      	orrs	r3, r2
 80052c6:	b21b      	sxth	r3, r3
 80052c8:	827b      	strh	r3, [r7, #18]
	 * +----+----+-----+------+-----+
	 * | 1  |  1 |  1  |  n   |  2  |
	 * +----+----+-----+------+-----+
	 */

	pdu->data[2] = qty / 8;
 80052ca:	8a7b      	ldrh	r3, [r7, #18]
 80052cc:	08db      	lsrs	r3, r3, #3
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	711a      	strb	r2, [r3, #4]
	if(qty % 8)
 80052d6:	8a7b      	ldrh	r3, [r7, #18]
 80052d8:	f003 0307 	and.w	r3, r3, #7
 80052dc:	b29b      	uxth	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d005      	beq.n	80052ee <fc_read_coil+0x62>
		pdu->data[2] += 1;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	791b      	ldrb	r3, [r3, #4]
 80052e6:	3301      	adds	r3, #1
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	711a      	strb	r2, [r3, #4]

	uint8_t* data = &pdu->data[3];
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	3305      	adds	r3, #5
 80052f2:	60fb      	str	r3, [r7, #12]
	memset(data, 0x00, pdu->data[2]);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	791b      	ldrb	r3, [r3, #4]
 80052f8:	461a      	mov	r2, r3
 80052fa:	2100      	movs	r1, #0
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f000 fd57 	bl	8005db0 <memset>

	for(uint16_t i = 0; i < qty; i++)
 8005302:	2300      	movs	r3, #0
 8005304:	82fb      	strh	r3, [r7, #22]
 8005306:	e03b      	b.n	8005380 <fc_read_coil+0xf4>
	{
		uint8_t ibyte = i / 8;
 8005308:	8afb      	ldrh	r3, [r7, #22]
 800530a:	08db      	lsrs	r3, r3, #3
 800530c:	b29b      	uxth	r3, r3
 800530e:	72fb      	strb	r3, [r7, #11]
		uint8_t ibit  = i % 8;
 8005310:	8afb      	ldrh	r3, [r7, #22]
 8005312:	b2db      	uxtb	r3, r3
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	72bb      	strb	r3, [r7, #10]
		uint8_t val   = 1 << ibit;
 800531a:	7abb      	ldrb	r3, [r7, #10]
 800531c:	2201      	movs	r2, #1
 800531e:	fa02 f303 	lsl.w	r3, r2, r3
 8005322:	727b      	strb	r3, [r7, #9]

		if(mb->data.coil.get(&mb->data.coil, addr + i))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8d3 3c64 	ldr.w	r3, [r3, #3172]	; 0xc64
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	f602 4058 	addw	r0, r2, #3160	; 0xc58
 8005330:	8ab9      	ldrh	r1, [r7, #20]
 8005332:	8afa      	ldrh	r2, [r7, #22]
 8005334:	440a      	add	r2, r1
 8005336:	b292      	uxth	r2, r2
 8005338:	4611      	mov	r1, r2
 800533a:	4798      	blx	r3
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00b      	beq.n	800535a <fc_read_coil+0xce>
			data[ibyte] = data[ibyte] | val;
 8005342:	7afb      	ldrb	r3, [r7, #11]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4413      	add	r3, r2
 8005348:	7819      	ldrb	r1, [r3, #0]
 800534a:	7afb      	ldrb	r3, [r7, #11]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	4413      	add	r3, r2
 8005350:	7a7a      	ldrb	r2, [r7, #9]
 8005352:	430a      	orrs	r2, r1
 8005354:	b2d2      	uxtb	r2, r2
 8005356:	701a      	strb	r2, [r3, #0]
 8005358:	e00f      	b.n	800537a <fc_read_coil+0xee>
		else
			data[ibyte] = data[ibyte] & (~val);
 800535a:	7afb      	ldrb	r3, [r7, #11]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	4413      	add	r3, r2
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	b25a      	sxtb	r2, r3
 8005364:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8005368:	43db      	mvns	r3, r3
 800536a:	b25b      	sxtb	r3, r3
 800536c:	4013      	ands	r3, r2
 800536e:	b259      	sxtb	r1, r3
 8005370:	7afb      	ldrb	r3, [r7, #11]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	4413      	add	r3, r2
 8005376:	b2ca      	uxtb	r2, r1
 8005378:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < qty; i++)
 800537a:	8afb      	ldrh	r3, [r7, #22]
 800537c:	3301      	adds	r3, #1
 800537e:	82fb      	strh	r3, [r7, #22]
 8005380:	8afa      	ldrh	r2, [r7, #22]
 8005382:	8a7b      	ldrh	r3, [r7, #18]
 8005384:	429a      	cmp	r2, r3
 8005386:	d3bf      	bcc.n	8005308 <fc_read_coil+0x7c>
	}

	pdu->len = pdu->data[2] + 5;	// include CRC
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	791b      	ldrb	r3, [r3, #4]
 800538c:	b29b      	uxth	r3, r3
 800538e:	3305      	adds	r3, #5
 8005390:	b29a      	uxth	r2, r3
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	801a      	strh	r2, [r3, #0]
	return 0;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3718      	adds	r7, #24
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <fc_read_input>:

static uint8_t fc_read_input(mb_slave_t* mb, mb_pdu_t* pdu)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2  |  2  |
	 * +----+----+------+-----+-----+
	 * len = 8
	 */

	if(pdu->len < 8)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	2b07      	cmp	r3, #7
 80053b0:	d801      	bhi.n	80053b6 <fc_read_input+0x16>
		return MB_EXC_EXECUTE;
 80053b2:	2304      	movs	r3, #4
 80053b4:	e07a      	b.n	80054ac <fc_read_input+0x10c>

	uint16_t addr = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	791b      	ldrb	r3, [r3, #4]
 80053ba:	021b      	lsls	r3, r3, #8
 80053bc:	b21a      	sxth	r2, r3
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	795b      	ldrb	r3, [r3, #5]
 80053c2:	b21b      	sxth	r3, r3
 80053c4:	4313      	orrs	r3, r2
 80053c6:	b21b      	sxth	r3, r3
 80053c8:	82bb      	strh	r3, [r7, #20]
	uint16_t qty  = pdu->data[MB_PDU_QTY_HI] << 8 | pdu->data[MB_PDU_QTY_LO];
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	799b      	ldrb	r3, [r3, #6]
 80053ce:	021b      	lsls	r3, r3, #8
 80053d0:	b21a      	sxth	r2, r3
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	79db      	ldrb	r3, [r3, #7]
 80053d6:	b21b      	sxth	r3, r3
 80053d8:	4313      	orrs	r3, r2
 80053da:	b21b      	sxth	r3, r3
 80053dc:	827b      	strh	r3, [r7, #18]
	 * +----+----+-----+------+-----+
	 * | 1  |  1 |  1  |  n   |  2  |
	 * +----+----+-----+------+-----+
	 */

	pdu->data[2] = qty / 8;
 80053de:	8a7b      	ldrh	r3, [r7, #18]
 80053e0:	08db      	lsrs	r3, r3, #3
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	711a      	strb	r2, [r3, #4]
	if(qty % 8)
 80053ea:	8a7b      	ldrh	r3, [r7, #18]
 80053ec:	f003 0307 	and.w	r3, r3, #7
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d005      	beq.n	8005402 <fc_read_input+0x62>
		pdu->data[2] += 1;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	791b      	ldrb	r3, [r3, #4]
 80053fa:	3301      	adds	r3, #1
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	711a      	strb	r2, [r3, #4]

	uint8_t* data = &pdu->data[3];
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	3305      	adds	r3, #5
 8005406:	60fb      	str	r3, [r7, #12]
	memset(data, 0x00, pdu->data[2]);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	791b      	ldrb	r3, [r3, #4]
 800540c:	461a      	mov	r2, r3
 800540e:	2100      	movs	r1, #0
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 fccd 	bl	8005db0 <memset>

	for(uint16_t i = 0; i < qty; i++)
 8005416:	2300      	movs	r3, #0
 8005418:	82fb      	strh	r3, [r7, #22]
 800541a:	e03b      	b.n	8005494 <fc_read_input+0xf4>
	{
		uint8_t ibyte = i / 8;
 800541c:	8afb      	ldrh	r3, [r7, #22]
 800541e:	08db      	lsrs	r3, r3, #3
 8005420:	b29b      	uxth	r3, r3
 8005422:	72fb      	strb	r3, [r7, #11]
		uint8_t ibit  = i % 8;
 8005424:	8afb      	ldrh	r3, [r7, #22]
 8005426:	b2db      	uxtb	r3, r3
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	72bb      	strb	r3, [r7, #10]
		uint8_t val   = 1 << ibit;
 800542e:	7abb      	ldrb	r3, [r7, #10]
 8005430:	2201      	movs	r2, #1
 8005432:	fa02 f303 	lsl.w	r3, r2, r3
 8005436:	727b      	strb	r3, [r7, #9]

		if(mb->data.coil.get(&mb->data.input, addr + i))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 3c64 	ldr.w	r3, [r3, #3172]	; 0xc64
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	f602 4068 	addw	r0, r2, #3176	; 0xc68
 8005444:	8ab9      	ldrh	r1, [r7, #20]
 8005446:	8afa      	ldrh	r2, [r7, #22]
 8005448:	440a      	add	r2, r1
 800544a:	b292      	uxth	r2, r2
 800544c:	4611      	mov	r1, r2
 800544e:	4798      	blx	r3
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00b      	beq.n	800546e <fc_read_input+0xce>
			data[ibyte] = data[ibyte] | val;
 8005456:	7afb      	ldrb	r3, [r7, #11]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4413      	add	r3, r2
 800545c:	7819      	ldrb	r1, [r3, #0]
 800545e:	7afb      	ldrb	r3, [r7, #11]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	4413      	add	r3, r2
 8005464:	7a7a      	ldrb	r2, [r7, #9]
 8005466:	430a      	orrs	r2, r1
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	701a      	strb	r2, [r3, #0]
 800546c:	e00f      	b.n	800548e <fc_read_input+0xee>
		else
			data[ibyte] = data[ibyte] & (~val);
 800546e:	7afb      	ldrb	r3, [r7, #11]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	4413      	add	r3, r2
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	b25a      	sxtb	r2, r3
 8005478:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800547c:	43db      	mvns	r3, r3
 800547e:	b25b      	sxtb	r3, r3
 8005480:	4013      	ands	r3, r2
 8005482:	b259      	sxtb	r1, r3
 8005484:	7afb      	ldrb	r3, [r7, #11]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	4413      	add	r3, r2
 800548a:	b2ca      	uxtb	r2, r1
 800548c:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < qty; i++)
 800548e:	8afb      	ldrh	r3, [r7, #22]
 8005490:	3301      	adds	r3, #1
 8005492:	82fb      	strh	r3, [r7, #22]
 8005494:	8afa      	ldrh	r2, [r7, #22]
 8005496:	8a7b      	ldrh	r3, [r7, #18]
 8005498:	429a      	cmp	r2, r3
 800549a:	d3bf      	bcc.n	800541c <fc_read_input+0x7c>
	}

	pdu->len = pdu->data[2] + 5;	// include CRC
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	791b      	ldrb	r3, [r3, #4]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	3305      	adds	r3, #5
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	801a      	strh	r2, [r3, #0]
	return 0;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <fc_read_reg_input>:

static uint8_t fc_read_reg_input(mb_slave_t* mb, mb_pdu_t* pdu)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2  |  2  |
	 * +----+----+------+-----+-----+
	 * len = 8
	 */

	if(pdu->len < 8)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	2b07      	cmp	r3, #7
 80054c4:	d801      	bhi.n	80054ca <fc_read_reg_input+0x16>
		return MB_EXC_EXECUTE;
 80054c6:	2304      	movs	r3, #4
 80054c8:	e05b      	b.n	8005582 <fc_read_reg_input+0xce>

	uint16_t addr = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	791b      	ldrb	r3, [r3, #4]
 80054ce:	021b      	lsls	r3, r3, #8
 80054d0:	b21a      	sxth	r2, r3
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	795b      	ldrb	r3, [r3, #5]
 80054d6:	b21b      	sxth	r3, r3
 80054d8:	4313      	orrs	r3, r2
 80054da:	b21b      	sxth	r3, r3
 80054dc:	827b      	strh	r3, [r7, #18]
	uint16_t qty  = pdu->data[MB_PDU_QTY_HI] << 8 | pdu->data[MB_PDU_QTY_LO];
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	799b      	ldrb	r3, [r3, #6]
 80054e2:	021b      	lsls	r3, r3, #8
 80054e4:	b21a      	sxth	r2, r3
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	79db      	ldrb	r3, [r3, #7]
 80054ea:	b21b      	sxth	r3, r3
 80054ec:	4313      	orrs	r3, r2
 80054ee:	b21b      	sxth	r3, r3
 80054f0:	823b      	strh	r3, [r7, #16]
	 * +----+----+-----+------+-----+
	 * | 1  |  1 |  1  |  n   |  2  |
	 * +----+----+-----+------+-----+
	 */

	pdu->data[2] = qty * 2;
 80054f2:	8a3b      	ldrh	r3, [r7, #16]
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	711a      	strb	r2, [r3, #4]
	uint8_t* data = &pdu->data[3];
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	3305      	adds	r3, #5
 8005502:	60fb      	str	r3, [r7, #12]
	memset(data, 0x00, pdu->data[2]);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	791b      	ldrb	r3, [r3, #4]
 8005508:	461a      	mov	r2, r3
 800550a:	2100      	movs	r1, #0
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 fc4f 	bl	8005db0 <memset>

	uint16_t data_index = 0;
 8005512:	2300      	movs	r3, #0
 8005514:	82fb      	strh	r3, [r7, #22]
	for(uint8_t i = 0; i < qty; i++)
 8005516:	2300      	movs	r3, #0
 8005518:	757b      	strb	r3, [r7, #21]
 800551a:	e025      	b.n	8005568 <fc_read_reg_input+0xb4>
	{
		uint16_t value     = mb->data.reg_input.get(&mb->data.reg_input, addr + i);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 3c84 	ldr.w	r3, [r3, #3204]	; 0xc84
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	f602 4078 	addw	r0, r2, #3192	; 0xc78
 8005528:	7d7a      	ldrb	r2, [r7, #21]
 800552a:	b291      	uxth	r1, r2
 800552c:	8a7a      	ldrh	r2, [r7, #18]
 800552e:	440a      	add	r2, r1
 8005530:	b292      	uxth	r2, r2
 8005532:	4611      	mov	r1, r2
 8005534:	4798      	blx	r3
 8005536:	4603      	mov	r3, r0
 8005538:	817b      	strh	r3, [r7, #10]
		data[data_index++] = value >> 8;
 800553a:	897b      	ldrh	r3, [r7, #10]
 800553c:	0a1b      	lsrs	r3, r3, #8
 800553e:	b29a      	uxth	r2, r3
 8005540:	8afb      	ldrh	r3, [r7, #22]
 8005542:	1c59      	adds	r1, r3, #1
 8005544:	82f9      	strh	r1, [r7, #22]
 8005546:	4619      	mov	r1, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	440b      	add	r3, r1
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	701a      	strb	r2, [r3, #0]
		data[data_index++] = (uint8_t)value;
 8005550:	8afb      	ldrh	r3, [r7, #22]
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	82fa      	strh	r2, [r7, #22]
 8005556:	461a      	mov	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4413      	add	r3, r2
 800555c:	897a      	ldrh	r2, [r7, #10]
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < qty; i++)
 8005562:	7d7b      	ldrb	r3, [r7, #21]
 8005564:	3301      	adds	r3, #1
 8005566:	757b      	strb	r3, [r7, #21]
 8005568:	7d7b      	ldrb	r3, [r7, #21]
 800556a:	b29b      	uxth	r3, r3
 800556c:	8a3a      	ldrh	r2, [r7, #16]
 800556e:	429a      	cmp	r2, r3
 8005570:	d8d4      	bhi.n	800551c <fc_read_reg_input+0x68>
	}

	pdu->len = pdu->data[2] + 5;	// include CRC
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	791b      	ldrb	r3, [r3, #4]
 8005576:	b29b      	uxth	r3, r3
 8005578:	3305      	adds	r3, #5
 800557a:	b29a      	uxth	r2, r3
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	801a      	strh	r2, [r3, #0]
	return 0;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <fc_read_reg_hodling>:

static uint8_t fc_read_reg_hodling(mb_slave_t* mb, mb_pdu_t* pdu)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b086      	sub	sp, #24
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
 8005592:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2  |  2  |
	 * +----+----+------+-----+-----+
	 * len = 8
	 */

	if(pdu->len < 8)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	2b07      	cmp	r3, #7
 800559a:	d801      	bhi.n	80055a0 <fc_read_reg_hodling+0x16>
		return MB_EXC_EXECUTE;
 800559c:	2304      	movs	r3, #4
 800559e:	e05b      	b.n	8005658 <fc_read_reg_hodling+0xce>

	uint16_t addr = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	791b      	ldrb	r3, [r3, #4]
 80055a4:	021b      	lsls	r3, r3, #8
 80055a6:	b21a      	sxth	r2, r3
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	795b      	ldrb	r3, [r3, #5]
 80055ac:	b21b      	sxth	r3, r3
 80055ae:	4313      	orrs	r3, r2
 80055b0:	b21b      	sxth	r3, r3
 80055b2:	827b      	strh	r3, [r7, #18]
	uint16_t qty  = pdu->data[MB_PDU_QTY_HI] << 8 | pdu->data[MB_PDU_QTY_LO];
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	799b      	ldrb	r3, [r3, #6]
 80055b8:	021b      	lsls	r3, r3, #8
 80055ba:	b21a      	sxth	r2, r3
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	79db      	ldrb	r3, [r3, #7]
 80055c0:	b21b      	sxth	r3, r3
 80055c2:	4313      	orrs	r3, r2
 80055c4:	b21b      	sxth	r3, r3
 80055c6:	823b      	strh	r3, [r7, #16]
	 * +----+----+-----+------+-----+
	 * | 1  |  1 |  1  |  n   |  2  |
	 * +----+----+-----+------+-----+
	 */

	uint16_t idata = 0;
 80055c8:	2300      	movs	r3, #0
 80055ca:	82fb      	strh	r3, [r7, #22]
	uint8_t* data       = &pdu->data[3];
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	3305      	adds	r3, #5
 80055d0:	60fb      	str	r3, [r7, #12]

	pdu->data[2]  = qty * 2;
 80055d2:	8a3b      	ldrh	r3, [r7, #16]
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	711a      	strb	r2, [r3, #4]
	memset(data, 0x00, pdu->data[2]);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	791b      	ldrb	r3, [r3, #4]
 80055e2:	461a      	mov	r2, r3
 80055e4:	2100      	movs	r1, #0
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 fbe2 	bl	8005db0 <memset>

	for(uint8_t i = 0; i < qty; i++)
 80055ec:	2300      	movs	r3, #0
 80055ee:	757b      	strb	r3, [r7, #21]
 80055f0:	e025      	b.n	800563e <fc_read_reg_hodling+0xb4>
	{
		uint16_t value = mb->data.reg_holding.get(&mb->data.reg_holding, addr + i);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8d3 3c94 	ldr.w	r3, [r3, #3220]	; 0xc94
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	f602 4088 	addw	r0, r2, #3208	; 0xc88
 80055fe:	7d7a      	ldrb	r2, [r7, #21]
 8005600:	b291      	uxth	r1, r2
 8005602:	8a7a      	ldrh	r2, [r7, #18]
 8005604:	440a      	add	r2, r1
 8005606:	b292      	uxth	r2, r2
 8005608:	4611      	mov	r1, r2
 800560a:	4798      	blx	r3
 800560c:	4603      	mov	r3, r0
 800560e:	817b      	strh	r3, [r7, #10]
		data[idata++] = (uint8_t)(value >> 8);
 8005610:	897b      	ldrh	r3, [r7, #10]
 8005612:	0a1b      	lsrs	r3, r3, #8
 8005614:	b29a      	uxth	r2, r3
 8005616:	8afb      	ldrh	r3, [r7, #22]
 8005618:	1c59      	adds	r1, r3, #1
 800561a:	82f9      	strh	r1, [r7, #22]
 800561c:	4619      	mov	r1, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	440b      	add	r3, r1
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	701a      	strb	r2, [r3, #0]
		data[idata++] = (uint8_t)(value);
 8005626:	8afb      	ldrh	r3, [r7, #22]
 8005628:	1c5a      	adds	r2, r3, #1
 800562a:	82fa      	strh	r2, [r7, #22]
 800562c:	461a      	mov	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4413      	add	r3, r2
 8005632:	897a      	ldrh	r2, [r7, #10]
 8005634:	b2d2      	uxtb	r2, r2
 8005636:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < qty; i++)
 8005638:	7d7b      	ldrb	r3, [r7, #21]
 800563a:	3301      	adds	r3, #1
 800563c:	757b      	strb	r3, [r7, #21]
 800563e:	7d7b      	ldrb	r3, [r7, #21]
 8005640:	b29b      	uxth	r3, r3
 8005642:	8a3a      	ldrh	r2, [r7, #16]
 8005644:	429a      	cmp	r2, r3
 8005646:	d8d4      	bhi.n	80055f2 <fc_read_reg_hodling+0x68>
	}

	pdu->len = pdu->data[2] + 5;	// include CRC
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	791b      	ldrb	r3, [r3, #4]
 800564c:	b29b      	uxth	r3, r3
 800564e:	3305      	adds	r3, #5
 8005650:	b29a      	uxth	r2, r3
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	801a      	strh	r2, [r3, #0]
	return 0;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3718      	adds	r7, #24
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <fc_write_single_coil>:

static uint8_t fc_write_single_coil(mb_slave_t* mb, mb_pdu_t* pdu)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2    |  2  |
	 * +----+----+------+-------+-----+
	 * len = 8
	 */

	if(pdu->len < 8)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	2b07      	cmp	r3, #7
 8005670:	d801      	bhi.n	8005676 <fc_write_single_coil+0x16>
		return MB_EXC_EXECUTE;
 8005672:	2304      	movs	r3, #4
 8005674:	e02a      	b.n	80056cc <fc_write_single_coil+0x6c>

	uint16_t addr  = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	791b      	ldrb	r3, [r3, #4]
 800567a:	021b      	lsls	r3, r3, #8
 800567c:	b21a      	sxth	r2, r3
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	795b      	ldrb	r3, [r3, #5]
 8005682:	b21b      	sxth	r3, r3
 8005684:	4313      	orrs	r3, r2
 8005686:	b21b      	sxth	r3, r3
 8005688:	81fb      	strh	r3, [r7, #14]
	uint16_t value = pdu->data[MB_PDU_QTY_HI]  << 8 | pdu->data[MB_PDU_QTY_LO];
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	799b      	ldrb	r3, [r3, #6]
 800568e:	021b      	lsls	r3, r3, #8
 8005690:	b21a      	sxth	r2, r3
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	79db      	ldrb	r3, [r3, #7]
 8005696:	b21b      	sxth	r3, r3
 8005698:	4313      	orrs	r3, r2
 800569a:	b21b      	sxth	r3, r3
 800569c:	81bb      	strh	r3, [r7, #12]
	 * | 1  | 1  |   2  |  2    |  2  |
	 * +----+----+------+-------+-----+
	 * len = 8
	 */

	if (value == 0x00000)
 800569e:	89bb      	ldrh	r3, [r7, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d109      	bne.n	80056b8 <fc_write_single_coil+0x58>
		mb->data.coil.set(&mb->data.coil, addr, 0);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 3c60 	ldr.w	r3, [r3, #3168]	; 0xc60
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	f602 4058 	addw	r0, r2, #3160	; 0xc58
 80056b0:	89f9      	ldrh	r1, [r7, #14]
 80056b2:	2200      	movs	r2, #0
 80056b4:	4798      	blx	r3
 80056b6:	e008      	b.n	80056ca <fc_write_single_coil+0x6a>
	else
		mb->data.coil.set(&mb->data.coil, addr, 1);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 3c60 	ldr.w	r3, [r3, #3168]	; 0xc60
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	f602 4058 	addw	r0, r2, #3160	; 0xc58
 80056c4:	89f9      	ldrh	r1, [r7, #14]
 80056c6:	2201      	movs	r2, #1
 80056c8:	4798      	blx	r3

	return 0;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <fc_write_single_reg>:

static uint8_t fc_write_single_reg(mb_slave_t* mb, mb_pdu_t* pdu)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2    |  2  |
	 * +----+----+------+-------+-----+
	 * len = 8
	 */

	if(pdu->len < 8)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	2b07      	cmp	r3, #7
 80056e4:	d801      	bhi.n	80056ea <fc_write_single_reg+0x16>
		return MB_EXC_EXECUTE;
 80056e6:	2304      	movs	r3, #4
 80056e8:	e01d      	b.n	8005726 <fc_write_single_reg+0x52>

	uint16_t addr  = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	791b      	ldrb	r3, [r3, #4]
 80056ee:	021b      	lsls	r3, r3, #8
 80056f0:	b21a      	sxth	r2, r3
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	795b      	ldrb	r3, [r3, #5]
 80056f6:	b21b      	sxth	r3, r3
 80056f8:	4313      	orrs	r3, r2
 80056fa:	b21b      	sxth	r3, r3
 80056fc:	81fb      	strh	r3, [r7, #14]
	uint16_t value = pdu->data[MB_PDU_QTY_HI]  << 8 | pdu->data[MB_PDU_QTY_LO];
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	799b      	ldrb	r3, [r3, #6]
 8005702:	021b      	lsls	r3, r3, #8
 8005704:	b21a      	sxth	r2, r3
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	79db      	ldrb	r3, [r3, #7]
 800570a:	b21b      	sxth	r3, r3
 800570c:	4313      	orrs	r3, r2
 800570e:	b21b      	sxth	r3, r3
 8005710:	81bb      	strh	r3, [r7, #12]
	 * | 1  | 1  |   2  |  2    |  2  |
	 * +----+----+------+-------+-----+
	 * len = 8
	 */

	mb->data.reg_holding.set(&mb->data.reg_holding, addr, value);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 3c90 	ldr.w	r3, [r3, #3216]	; 0xc90
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	f602 4088 	addw	r0, r2, #3208	; 0xc88
 800571e:	89ba      	ldrh	r2, [r7, #12]
 8005720:	89f9      	ldrh	r1, [r7, #14]
 8005722:	4798      	blx	r3

	return 0;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <fc_write_multi_coil>:

static uint8_t fc_write_multi_coil(mb_slave_t* mb, mb_pdu_t* pdu)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b086      	sub	sp, #24
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2  |  1  |   N  |  2  |
	 * +----+----+------+-----+-----+------+-----+
	 * len_min = 10
	 */

	if(pdu->len < 10)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	2b09      	cmp	r3, #9
 800573e:	d801      	bhi.n	8005744 <fc_write_multi_coil+0x16>
		return MB_EXC_EXECUTE;
 8005740:	2304      	movs	r3, #4
 8005742:	e061      	b.n	8005808 <fc_write_multi_coil+0xda>

	uint16_t addr  = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	791b      	ldrb	r3, [r3, #4]
 8005748:	021b      	lsls	r3, r3, #8
 800574a:	b21a      	sxth	r2, r3
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	795b      	ldrb	r3, [r3, #5]
 8005750:	b21b      	sxth	r3, r3
 8005752:	4313      	orrs	r3, r2
 8005754:	b21b      	sxth	r3, r3
 8005756:	82bb      	strh	r3, [r7, #20]
	uint16_t qty   = pdu->data[MB_PDU_QTY_HI]  << 8 | pdu->data[MB_PDU_QTY_LO];
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	799b      	ldrb	r3, [r3, #6]
 800575c:	021b      	lsls	r3, r3, #8
 800575e:	b21a      	sxth	r2, r3
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	79db      	ldrb	r3, [r3, #7]
 8005764:	b21b      	sxth	r3, r3
 8005766:	4313      	orrs	r3, r2
 8005768:	b21b      	sxth	r3, r3
 800576a:	827b      	strh	r3, [r7, #18]
	uint8_t  b_cnt = pdu->data[MB_PDU_CNT];
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	7a1b      	ldrb	r3, [r3, #8]
 8005770:	747b      	strb	r3, [r7, #17]

	uint8_t _cnt = qty / 8;
 8005772:	8a7b      	ldrh	r3, [r7, #18]
 8005774:	08db      	lsrs	r3, r3, #3
 8005776:	b29b      	uxth	r3, r3
 8005778:	75fb      	strb	r3, [r7, #23]
	if(qty % 8)
 800577a:	8a7b      	ldrh	r3, [r7, #18]
 800577c:	f003 0307 	and.w	r3, r3, #7
 8005780:	b29b      	uxth	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <fc_write_multi_coil+0x5e>
		_cnt += 1;
 8005786:	7dfb      	ldrb	r3, [r7, #23]
 8005788:	3301      	adds	r3, #1
 800578a:	75fb      	strb	r3, [r7, #23]

	if (((b_cnt + 9) != pdu->len) || (_cnt != b_cnt))
 800578c:	7c7b      	ldrb	r3, [r7, #17]
 800578e:	3309      	adds	r3, #9
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	8812      	ldrh	r2, [r2, #0]
 8005794:	4293      	cmp	r3, r2
 8005796:	d103      	bne.n	80057a0 <fc_write_multi_coil+0x72>
 8005798:	7dfa      	ldrb	r2, [r7, #23]
 800579a:	7c7b      	ldrb	r3, [r7, #17]
 800579c:	429a      	cmp	r2, r3
 800579e:	d001      	beq.n	80057a4 <fc_write_multi_coil+0x76>
		return MB_EXC_EXECUTE;
 80057a0:	2304      	movs	r3, #4
 80057a2:	e031      	b.n	8005808 <fc_write_multi_coil+0xda>

	uint8_t* data = &pdu->data[7];
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	3309      	adds	r3, #9
 80057a8:	60fb      	str	r3, [r7, #12]
	for(uint8_t i  = 0; i < qty; i++)
 80057aa:	2300      	movs	r3, #0
 80057ac:	75bb      	strb	r3, [r7, #22]
 80057ae:	e022      	b.n	80057f6 <fc_write_multi_coil+0xc8>
	{
		uint8_t ibyte = i / 8;
 80057b0:	7dbb      	ldrb	r3, [r7, #22]
 80057b2:	08db      	lsrs	r3, r3, #3
 80057b4:	72fb      	strb	r3, [r7, #11]
		uint8_t ibit  = i % 8;
 80057b6:	7dbb      	ldrb	r3, [r7, #22]
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	72bb      	strb	r3, [r7, #10]

		uint8_t status = (data[ibyte] >> ibit) & 0x01;
 80057be:	7afb      	ldrb	r3, [r7, #11]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	4413      	add	r3, r2
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	461a      	mov	r2, r3
 80057c8:	7abb      	ldrb	r3, [r7, #10]
 80057ca:	fa42 f303 	asr.w	r3, r2, r3
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	727b      	strb	r3, [r7, #9]
		mb->data.coil.set(&mb->data.coil, addr + i, status);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 3c60 	ldr.w	r3, [r3, #3168]	; 0xc60
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	f602 4058 	addw	r0, r2, #3160	; 0xc58
 80057e2:	7dba      	ldrb	r2, [r7, #22]
 80057e4:	b291      	uxth	r1, r2
 80057e6:	8aba      	ldrh	r2, [r7, #20]
 80057e8:	440a      	add	r2, r1
 80057ea:	b291      	uxth	r1, r2
 80057ec:	7a7a      	ldrb	r2, [r7, #9]
 80057ee:	4798      	blx	r3
	for(uint8_t i  = 0; i < qty; i++)
 80057f0:	7dbb      	ldrb	r3, [r7, #22]
 80057f2:	3301      	adds	r3, #1
 80057f4:	75bb      	strb	r3, [r7, #22]
 80057f6:	7dbb      	ldrb	r3, [r7, #22]
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	8a7a      	ldrh	r2, [r7, #18]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d8d7      	bhi.n	80057b0 <fc_write_multi_coil+0x82>
	 * | 1  | 1  |   2  |  2  |  2  |
	 * +----+----+------+-----+-----+
	 * len_min = 8
	 */

	pdu->len = 8;	// include CRC
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2208      	movs	r2, #8
 8005804:	801a      	strh	r2, [r3, #0]

	return 0;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3718      	adds	r7, #24
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <fc_write_multi_reg>:

static uint8_t fc_write_multi_reg(mb_slave_t* mb, mb_pdu_t* pdu)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b088      	sub	sp, #32
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2  |  1  |   N  |  2  |
	 * +----+----+------+-----+-----+------+-----+
	 * len_min = 11
	 */

	if(pdu->len < 11)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	2b0a      	cmp	r3, #10
 8005820:	d801      	bhi.n	8005826 <fc_write_multi_reg+0x16>
		return MB_EXC_EXECUTE;
 8005822:	2304      	movs	r3, #4
 8005824:	e05c      	b.n	80058e0 <fc_write_multi_reg+0xd0>

	uint16_t addr  = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	791b      	ldrb	r3, [r3, #4]
 800582a:	021b      	lsls	r3, r3, #8
 800582c:	b21a      	sxth	r2, r3
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	795b      	ldrb	r3, [r3, #5]
 8005832:	b21b      	sxth	r3, r3
 8005834:	4313      	orrs	r3, r2
 8005836:	b21b      	sxth	r3, r3
 8005838:	837b      	strh	r3, [r7, #26]
	uint16_t qty   = pdu->data[MB_PDU_QTY_HI]  << 8 | pdu->data[MB_PDU_QTY_LO];
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	799b      	ldrb	r3, [r3, #6]
 800583e:	021b      	lsls	r3, r3, #8
 8005840:	b21a      	sxth	r2, r3
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	79db      	ldrb	r3, [r3, #7]
 8005846:	b21b      	sxth	r3, r3
 8005848:	4313      	orrs	r3, r2
 800584a:	b21b      	sxth	r3, r3
 800584c:	833b      	strh	r3, [r7, #24]
	uint8_t  b_cnt = pdu->data[MB_PDU_CNT];
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	7a1b      	ldrb	r3, [r3, #8]
 8005852:	75fb      	strb	r3, [r7, #23]

	if ((qty*2 != b_cnt) || ((b_cnt + 9) != pdu->len))
 8005854:	8b3b      	ldrh	r3, [r7, #24]
 8005856:	005a      	lsls	r2, r3, #1
 8005858:	7dfb      	ldrb	r3, [r7, #23]
 800585a:	429a      	cmp	r2, r3
 800585c:	d105      	bne.n	800586a <fc_write_multi_reg+0x5a>
 800585e:	7dfb      	ldrb	r3, [r7, #23]
 8005860:	3309      	adds	r3, #9
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	8812      	ldrh	r2, [r2, #0]
 8005866:	4293      	cmp	r3, r2
 8005868:	d001      	beq.n	800586e <fc_write_multi_reg+0x5e>
		return MB_EXC_EXECUTE;
 800586a:	2304      	movs	r3, #4
 800586c:	e038      	b.n	80058e0 <fc_write_multi_reg+0xd0>

	uint8_t* data = &pdu->data[7];
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	3309      	adds	r3, #9
 8005872:	613b      	str	r3, [r7, #16]
	uint16_t data_index = 0;
 8005874:	2300      	movs	r3, #0
 8005876:	83fb      	strh	r3, [r7, #30]
	for(uint8_t i = 0; i < qty; i++)
 8005878:	2300      	movs	r3, #0
 800587a:	777b      	strb	r3, [r7, #29]
 800587c:	e027      	b.n	80058ce <fc_write_multi_reg+0xbe>
	{
		uint8_t hi = data[data_index++];
 800587e:	8bfb      	ldrh	r3, [r7, #30]
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	83fa      	strh	r2, [r7, #30]
 8005884:	461a      	mov	r2, r3
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	4413      	add	r3, r2
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	73fb      	strb	r3, [r7, #15]
		uint8_t lo = data[data_index++];
 800588e:	8bfb      	ldrh	r3, [r7, #30]
 8005890:	1c5a      	adds	r2, r3, #1
 8005892:	83fa      	strh	r2, [r7, #30]
 8005894:	461a      	mov	r2, r3
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	4413      	add	r3, r2
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	73bb      	strb	r3, [r7, #14]
		uint16_t value = hi << 8 | lo;
 800589e:	7bfb      	ldrb	r3, [r7, #15]
 80058a0:	021b      	lsls	r3, r3, #8
 80058a2:	b21a      	sxth	r2, r3
 80058a4:	7bbb      	ldrb	r3, [r7, #14]
 80058a6:	b21b      	sxth	r3, r3
 80058a8:	4313      	orrs	r3, r2
 80058aa:	b21b      	sxth	r3, r3
 80058ac:	81bb      	strh	r3, [r7, #12]
		mb->data.reg_holding.set(&mb->data.reg_holding, addr + i, value);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8d3 3c90 	ldr.w	r3, [r3, #3216]	; 0xc90
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	f602 4088 	addw	r0, r2, #3208	; 0xc88
 80058ba:	7f7a      	ldrb	r2, [r7, #29]
 80058bc:	b291      	uxth	r1, r2
 80058be:	8b7a      	ldrh	r2, [r7, #26]
 80058c0:	440a      	add	r2, r1
 80058c2:	b291      	uxth	r1, r2
 80058c4:	89ba      	ldrh	r2, [r7, #12]
 80058c6:	4798      	blx	r3
	for(uint8_t i = 0; i < qty; i++)
 80058c8:	7f7b      	ldrb	r3, [r7, #29]
 80058ca:	3301      	adds	r3, #1
 80058cc:	777b      	strb	r3, [r7, #29]
 80058ce:	7f7b      	ldrb	r3, [r7, #29]
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	8b3a      	ldrh	r2, [r7, #24]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d8d2      	bhi.n	800587e <fc_write_multi_reg+0x6e>
	 * | 1  | 1  |   2  |  2  |  2  |
	 * +----+----+------+-----+-----+
	 * len_min = 8
	 */

	pdu->len = 8;	// include CRC
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	2208      	movs	r2, #8
 80058dc:	801a      	strh	r2, [r3, #0]

	return 0;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3720      	adds	r7, #32
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <ring_buffer_init>:
static void     _get(ring_buffer_t *buf, uint8_t *obuf, uint16_t *buf_size);
static void     _flush(ring_buffer_t *buf);
static uint16_t _available(ring_buffer_t *buf);

void ring_buffer_init(ring_buffer_t *buf)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <ring_buffer_init+0x12>
 80058f6:	f7fe ff31 	bl	800475c <__mb_failure>
	buf->__tail      = 0;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	801a      	strh	r2, [r3, #0]
	buf->__head      = 0;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	805a      	strh	r2, [r3, #2]
	buf->__available = 0;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
	buf->overflow    = false;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	buf->add       = _add;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a09      	ldr	r2, [pc, #36]	; (8005940 <ring_buffer_init+0x58>)
 800591a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	buf->get_data  = _get;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a08      	ldr	r2, [pc, #32]	; (8005944 <ring_buffer_init+0x5c>)
 8005922:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	buf->available = _available;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a07      	ldr	r2, [pc, #28]	; (8005948 <ring_buffer_init+0x60>)
 800592a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	buf->flush     = _flush;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a06      	ldr	r2, [pc, #24]	; (800594c <ring_buffer_init+0x64>)
 8005932:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8005936:	bf00      	nop
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	08005951 	.word	0x08005951
 8005944:	08005a05 	.word	0x08005a05
 8005948:	08005abb 	.word	0x08005abb
 800594c:	080059cf 	.word	0x080059cf

08005950 <_add>:

void _add(ring_buffer_t *buf, uint8_t data)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	460b      	mov	r3, r1
 800595a:	70fb      	strb	r3, [r7, #3]
	mb_assert(buf);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <_add+0x16>
 8005962:	f7fe fefb 	bl	800475c <__mb_failure>
	if (buf->overflow)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800596c:	2b00      	cmp	r3, #0
 800596e:	d12a      	bne.n	80059c6 <_add+0x76>
		return;

	buf->__data[buf->__head] = data;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	885b      	ldrh	r3, [r3, #2]
 8005974:	78fa      	ldrb	r2, [r7, #3]
 8005976:	b291      	uxth	r1, r2
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	4413      	add	r3, r2
 800597e:	460a      	mov	r2, r1
 8005980:	809a      	strh	r2, [r3, #4]
	buf->__head = (buf->__head + 1) % RING_BUFFER_SIZE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	885b      	ldrh	r3, [r3, #2]
 8005986:	3301      	adds	r3, #1
 8005988:	425a      	negs	r2, r3
 800598a:	b2db      	uxtb	r3, r3
 800598c:	b2d2      	uxtb	r2, r2
 800598e:	bf58      	it	pl
 8005990:	4253      	negpl	r3, r2
 8005992:	b29a      	uxth	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	805a      	strh	r2, [r3, #2]
	if (buf->__available >= RING_BUFFER_SIZE)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800599e:	2bff      	cmp	r3, #255	; 0xff
 80059a0:	d904      	bls.n	80059ac <_add+0x5c>
	{
		buf->overflow = true;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
 80059aa:	e00d      	b.n	80059c8 <_add+0x78>
		mb_log("Ring buffer overflow\n");
	}
	else
	{
		buf->overflow = false;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		buf->__available++;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 80059ba:	3301      	adds	r3, #1
 80059bc:	b29a      	uxth	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 80059c4:	e000      	b.n	80059c8 <_add+0x78>
		return;
 80059c6:	bf00      	nop
	}
}
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <_flush>:

void _flush(ring_buffer_t *buf)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b082      	sub	sp, #8
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <_flush+0x12>
 80059dc:	f7fe febe 	bl	800475c <__mb_failure>
	buf->__tail      = 0;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	801a      	strh	r2, [r3, #0]
	buf->__head      = 0;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	805a      	strh	r2, [r3, #2]
	buf->__available = 0;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
	buf->overflow    = false;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
}
 80059fc:	bf00      	nop
 80059fe:	3708      	adds	r7, #8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <_get>:

void _get(ring_buffer_t *buf, uint8_t *data, uint16_t *data_size)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
	mb_assert(buf);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <_get+0x16>
 8005a16:	f7fe fea1 	bl	800475c <__mb_failure>
	mb_assert(data);
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <_get+0x20>
 8005a20:	f7fe fe9c 	bl	800475c <__mb_failure>
	mb_assert(*data_size);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <_get+0x2c>
 8005a2c:	f7fe fe96 	bl	800475c <__mb_failure>

	if (buf->__available == 0)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d103      	bne.n	8005a42 <_get+0x3e>
	{
		*data_size = 0;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	801a      	strh	r2, [r3, #0]
		return;
 8005a40:	e038      	b.n	8005ab4 <_get+0xb0>
	}

	uint16_t len;
	len          = (buf->__available < *data_size) ? buf->__available : *data_size;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	881a      	ldrh	r2, [r3, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	bf28      	it	cs
 8005a50:	4613      	movcs	r3, r2
 8005a52:	82bb      	strh	r3, [r7, #20]
	*data_size   = len;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	8aba      	ldrh	r2, [r7, #20]
 8005a58:	801a      	strh	r2, [r3, #0]

	for (uint16_t i = 0; i < len; i++)
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	82fb      	strh	r3, [r7, #22]
 8005a5e:	e018      	b.n	8005a92 <_get+0x8e>
	{
		data[i]     = buf->__data[buf->__tail];
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	4413      	add	r3, r2
 8005a6a:	8899      	ldrh	r1, [r3, #4]
 8005a6c:	8afb      	ldrh	r3, [r7, #22]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	4413      	add	r3, r2
 8005a72:	b2ca      	uxtb	r2, r1
 8005a74:	701a      	strb	r2, [r3, #0]
		buf->__tail = (buf->__tail + 1) % RING_BUFFER_SIZE;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	881b      	ldrh	r3, [r3, #0]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	425a      	negs	r2, r3
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	b2d2      	uxtb	r2, r2
 8005a82:	bf58      	it	pl
 8005a84:	4253      	negpl	r3, r2
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < len; i++)
 8005a8c:	8afb      	ldrh	r3, [r7, #22]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	82fb      	strh	r3, [r7, #22]
 8005a92:	8afa      	ldrh	r2, [r7, #22]
 8005a94:	8abb      	ldrh	r3, [r7, #20]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d3e2      	bcc.n	8005a60 <_get+0x5c>
	}
	buf->__available = buf->__available - len;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f8b3 2204 	ldrh.w	r2, [r3, #516]	; 0x204
 8005aa0:	8abb      	ldrh	r3, [r7, #20]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
	buf->overflow    = false;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
}
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <_available>:

uint16_t _available(ring_buffer_t *buf)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b083      	sub	sp, #12
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
	return buf->__available;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <mb_data_init>:
static uint8_t  input_db[MB_INPUT_NUM/8];
static uint16_t reg_input_db[MB_REG_INPUT_NUM];
static uint16_t reg_holding_db[MB_REG_HOLDING_NUM];

void mb_data_init(mb_data_t* mb_data)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
	mb_assert(mb_data);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <mb_data_init+0x12>
 8005ae2:	f7fe fe3b 	bl	800475c <__mb_failure>

	memset(coil_db       , 0, sizeof(coil_db));
 8005ae6:	2204      	movs	r2, #4
 8005ae8:	2100      	movs	r1, #0
 8005aea:	4818      	ldr	r0, [pc, #96]	; (8005b4c <mb_data_init+0x78>)
 8005aec:	f000 f960 	bl	8005db0 <memset>
	memset(input_db      , 0, sizeof(input_db));
 8005af0:	2204      	movs	r2, #4
 8005af2:	2100      	movs	r1, #0
 8005af4:	4816      	ldr	r0, [pc, #88]	; (8005b50 <mb_data_init+0x7c>)
 8005af6:	f000 f95b 	bl	8005db0 <memset>
	memset(reg_input_db  , 0, sizeof(reg_input_db));
 8005afa:	2240      	movs	r2, #64	; 0x40
 8005afc:	2100      	movs	r1, #0
 8005afe:	4815      	ldr	r0, [pc, #84]	; (8005b54 <mb_data_init+0x80>)
 8005b00:	f000 f956 	bl	8005db0 <memset>
	memset(reg_holding_db, 0, sizeof(reg_holding_db));
 8005b04:	2240      	movs	r2, #64	; 0x40
 8005b06:	2100      	movs	r1, #0
 8005b08:	4813      	ldr	r0, [pc, #76]	; (8005b58 <mb_data_init+0x84>)
 8005b0a:	f000 f951 	bl	8005db0 <memset>

	mb_data_bit_init(&mb_data->coil       , coil_db       , MB_COIL_NUM);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2220      	movs	r2, #32
 8005b12:	490e      	ldr	r1, [pc, #56]	; (8005b4c <mb_data_init+0x78>)
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 f821 	bl	8005b5c <mb_data_bit_init>
	mb_data_bit_init(&mb_data->input      , input_db      , MB_INPUT_NUM);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	3310      	adds	r3, #16
 8005b1e:	2220      	movs	r2, #32
 8005b20:	490b      	ldr	r1, [pc, #44]	; (8005b50 <mb_data_init+0x7c>)
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 f81a 	bl	8005b5c <mb_data_bit_init>
	mb_data_reg_init(&mb_data->reg_input  , reg_input_db  , MB_REG_INPUT_NUM);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	3320      	adds	r3, #32
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	4909      	ldr	r1, [pc, #36]	; (8005b54 <mb_data_init+0x80>)
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 f8b3 	bl	8005c9c <mb_data_reg_init>
	mb_data_reg_init(&mb_data->reg_holding, reg_holding_db, MB_REG_HOLDING_NUM);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3330      	adds	r3, #48	; 0x30
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	4906      	ldr	r1, [pc, #24]	; (8005b58 <mb_data_init+0x84>)
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 f8ac 	bl	8005c9c <mb_data_reg_init>
}
 8005b44:	bf00      	nop
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	20000f1c 	.word	0x20000f1c
 8005b50:	20000f20 	.word	0x20000f20
 8005b54:	20000f24 	.word	0x20000f24
 8005b58:	20000f64 	.word	0x20000f64

08005b5c <mb_data_bit_init>:

uint8_t _get_bit(mb_data_bit_t *bit, uint16_t addr);
void _set_bit(mb_data_bit_t *bit, uint16_t addr, uint8_t status);

void mb_data_bit_init(mb_data_bit_t *bit, uint8_t *data, uint16_t n_bit)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	4613      	mov	r3, r2
 8005b68:	80fb      	strh	r3, [r7, #6]
	mb_assert(bit);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <mb_data_bit_init+0x18>
 8005b70:	f7fe fdf4 	bl	800475c <__mb_failure>
	mb_assert(data);
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <mb_data_bit_init+0x22>
 8005b7a:	f7fe fdef 	bl	800475c <__mb_failure>
	mb_assert(n_bit);
 8005b7e:	88fb      	ldrh	r3, [r7, #6]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <mb_data_bit_init+0x2c>
 8005b84:	f7fe fdea 	bl	800475c <__mb_failure>

	bit->data = data;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	601a      	str	r2, [r3, #0]
	bit->nbit = n_bit;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	88fa      	ldrh	r2, [r7, #6]
 8005b92:	809a      	strh	r2, [r3, #4]
	bit->get  = _get_bit;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4a04      	ldr	r2, [pc, #16]	; (8005ba8 <mb_data_bit_init+0x4c>)
 8005b98:	60da      	str	r2, [r3, #12]
	bit->set  = _set_bit;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4a03      	ldr	r2, [pc, #12]	; (8005bac <mb_data_bit_init+0x50>)
 8005b9e:	609a      	str	r2, [r3, #8]
}
 8005ba0:	bf00      	nop
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	08005bb1 	.word	0x08005bb1
 8005bac:	08005c09 	.word	0x08005c09

08005bb0 <_get_bit>:

uint8_t _get_bit(mb_data_bit_t *bit, uint16_t addr)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	807b      	strh	r3, [r7, #2]
	mb_assert(bit);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <_get_bit+0x16>
 8005bc2:	f7fe fdcb 	bl	800475c <__mb_failure>
	mb_assert(addr < bit->nbit);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	889b      	ldrh	r3, [r3, #4]
 8005bca:	887a      	ldrh	r2, [r7, #2]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d301      	bcc.n	8005bd4 <_get_bit+0x24>
 8005bd0:	f7fe fdc4 	bl	800475c <__mb_failure>

	uint8_t byte_index = addr / 8;
 8005bd4:	887b      	ldrh	r3, [r7, #2]
 8005bd6:	08db      	lsrs	r3, r3, #3
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	73fb      	strb	r3, [r7, #15]
	uint8_t bit_index  = addr % 8;
 8005bdc:	887b      	ldrh	r3, [r7, #2]
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	f003 0307 	and.w	r3, r3, #7
 8005be4:	73bb      	strb	r3, [r7, #14]

	return (uint8_t)((bit->data[byte_index] >> bit_index) & 0x01);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	7bfb      	ldrb	r3, [r7, #15]
 8005bec:	4413      	add	r3, r2
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	7bbb      	ldrb	r3, [r7, #14]
 8005bf4:	fa42 f303 	asr.w	r3, r2, r3
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	b2db      	uxtb	r3, r3
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <_set_bit>:

void _set_bit(mb_data_bit_t *bit, uint16_t addr, uint8_t status)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	807b      	strh	r3, [r7, #2]
 8005c14:	4613      	mov	r3, r2
 8005c16:	707b      	strb	r3, [r7, #1]
	mb_assert(bit);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <_set_bit+0x1a>
 8005c1e:	f7fe fd9d 	bl	800475c <__mb_failure>
	mb_assert(addr < bit->nbit);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	889b      	ldrh	r3, [r3, #4]
 8005c26:	887a      	ldrh	r2, [r7, #2]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d301      	bcc.n	8005c30 <_set_bit+0x28>
 8005c2c:	f7fe fd96 	bl	800475c <__mb_failure>

	uint8_t byte_index = addr / 8;
 8005c30:	887b      	ldrh	r3, [r7, #2]
 8005c32:	08db      	lsrs	r3, r3, #3
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	73fb      	strb	r3, [r7, #15]
	uint8_t bit_index  = addr % 8;
 8005c38:	887b      	ldrh	r3, [r7, #2]
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	f003 0307 	and.w	r3, r3, #7
 8005c40:	73bb      	strb	r3, [r7, #14]

	uint8_t val = 1 << bit_index;
 8005c42:	7bbb      	ldrb	r3, [r7, #14]
 8005c44:	2201      	movs	r2, #1
 8005c46:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4a:	737b      	strb	r3, [r7, #13]
	if (status)
 8005c4c:	787b      	ldrb	r3, [r7, #1]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00d      	beq.n	8005c6e <_set_bit+0x66>
		bit->data[byte_index] = (uint8_t)(bit->data[byte_index] | val);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	7bfb      	ldrb	r3, [r7, #15]
 8005c58:	4413      	add	r3, r2
 8005c5a:	7819      	ldrb	r1, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
 8005c62:	4413      	add	r3, r2
 8005c64:	7b7a      	ldrb	r2, [r7, #13]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	b2d2      	uxtb	r2, r2
 8005c6a:	701a      	strb	r2, [r3, #0]
	else
		bit->data[byte_index] = (uint8_t)(bit->data[byte_index] & (~val));
}
 8005c6c:	e011      	b.n	8005c92 <_set_bit+0x8a>
		bit->data[byte_index] = (uint8_t)(bit->data[byte_index] & (~val));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
 8005c74:	4413      	add	r3, r2
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	b25a      	sxtb	r2, r3
 8005c7a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005c7e:	43db      	mvns	r3, r3
 8005c80:	b25b      	sxtb	r3, r3
 8005c82:	4013      	ands	r3, r2
 8005c84:	b259      	sxtb	r1, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	7bfb      	ldrb	r3, [r7, #15]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	b2ca      	uxtb	r2, r1
 8005c90:	701a      	strb	r2, [r3, #0]
}
 8005c92:	bf00      	nop
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
	...

08005c9c <mb_data_reg_init>:

static void     _reg_set(mb_data_reg_t* reg, uint16_t addr, uint16_t value);
static uint16_t _reg_get(mb_data_reg_t* reg, uint16_t addr);

void mb_data_reg_init(mb_data_reg_t* reg, uint16_t* data, uint16_t nreg)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	80fb      	strh	r3, [r7, #6]
	mb_assert(reg);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <mb_data_reg_init+0x18>
 8005cb0:	f7fe fd54 	bl	800475c <__mb_failure>
	mb_assert(data);
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <mb_data_reg_init+0x22>
 8005cba:	f7fe fd4f 	bl	800475c <__mb_failure>
	mb_assert(nreg);
 8005cbe:	88fb      	ldrh	r3, [r7, #6]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <mb_data_reg_init+0x2c>
 8005cc4:	f7fe fd4a 	bl	800475c <__mb_failure>

	reg->data = data;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	601a      	str	r2, [r3, #0]
	reg->nreg = nreg;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	88fa      	ldrh	r2, [r7, #6]
 8005cd2:	809a      	strh	r2, [r3, #4]
	reg->get  = _reg_get;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4a04      	ldr	r2, [pc, #16]	; (8005ce8 <mb_data_reg_init+0x4c>)
 8005cd8:	60da      	str	r2, [r3, #12]
	reg->set  = _reg_set;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4a03      	ldr	r2, [pc, #12]	; (8005cec <mb_data_reg_init+0x50>)
 8005cde:	609a      	str	r2, [r3, #8]
}
 8005ce0:	bf00      	nop
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	08005d2f 	.word	0x08005d2f
 8005cec:	08005cf1 	.word	0x08005cf1

08005cf0 <_reg_set>:

static void _reg_set(mb_data_reg_t *reg, uint16_t addr, uint16_t value) {
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	807b      	strh	r3, [r7, #2]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	803b      	strh	r3, [r7, #0]
	mb_assert(reg);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <_reg_set+0x1a>
 8005d06:	f7fe fd29 	bl	800475c <__mb_failure>
	mb_assert(addr < reg->nreg);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	889b      	ldrh	r3, [r3, #4]
 8005d0e:	887a      	ldrh	r2, [r7, #2]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d301      	bcc.n	8005d18 <_reg_set+0x28>
 8005d14:	f7fe fd22 	bl	800475c <__mb_failure>
	reg->data[addr] = value;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	887b      	ldrh	r3, [r7, #2]
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	4413      	add	r3, r2
 8005d22:	883a      	ldrh	r2, [r7, #0]
 8005d24:	801a      	strh	r2, [r3, #0]
}
 8005d26:	bf00      	nop
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <_reg_get>:

static uint16_t _reg_get(mb_data_reg_t *reg, uint16_t addr) {
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b082      	sub	sp, #8
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
 8005d36:	460b      	mov	r3, r1
 8005d38:	807b      	strh	r3, [r7, #2]
	mb_assert(reg);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <_reg_get+0x16>
 8005d40:	f7fe fd0c 	bl	800475c <__mb_failure>
	mb_assert(addr < reg->nreg);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	889b      	ldrh	r3, [r3, #4]
 8005d48:	887a      	ldrh	r2, [r7, #2]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d301      	bcc.n	8005d52 <_reg_get+0x24>
 8005d4e:	f7fe fd05 	bl	800475c <__mb_failure>
	
	return reg->data[addr];
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	887b      	ldrh	r3, [r7, #2]
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	4413      	add	r3, r2
 8005d5c:	881b      	ldrh	r3, [r3, #0]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
	...

08005d68 <__libc_init_array>:
 8005d68:	b570      	push	{r4, r5, r6, lr}
 8005d6a:	4d0d      	ldr	r5, [pc, #52]	; (8005da0 <__libc_init_array+0x38>)
 8005d6c:	4c0d      	ldr	r4, [pc, #52]	; (8005da4 <__libc_init_array+0x3c>)
 8005d6e:	1b64      	subs	r4, r4, r5
 8005d70:	10a4      	asrs	r4, r4, #2
 8005d72:	2600      	movs	r6, #0
 8005d74:	42a6      	cmp	r6, r4
 8005d76:	d109      	bne.n	8005d8c <__libc_init_array+0x24>
 8005d78:	4d0b      	ldr	r5, [pc, #44]	; (8005da8 <__libc_init_array+0x40>)
 8005d7a:	4c0c      	ldr	r4, [pc, #48]	; (8005dac <__libc_init_array+0x44>)
 8005d7c:	f000 f820 	bl	8005dc0 <_init>
 8005d80:	1b64      	subs	r4, r4, r5
 8005d82:	10a4      	asrs	r4, r4, #2
 8005d84:	2600      	movs	r6, #0
 8005d86:	42a6      	cmp	r6, r4
 8005d88:	d105      	bne.n	8005d96 <__libc_init_array+0x2e>
 8005d8a:	bd70      	pop	{r4, r5, r6, pc}
 8005d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d90:	4798      	blx	r3
 8005d92:	3601      	adds	r6, #1
 8005d94:	e7ee      	b.n	8005d74 <__libc_init_array+0xc>
 8005d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d9a:	4798      	blx	r3
 8005d9c:	3601      	adds	r6, #1
 8005d9e:	e7f2      	b.n	8005d86 <__libc_init_array+0x1e>
 8005da0:	08005e30 	.word	0x08005e30
 8005da4:	08005e30 	.word	0x08005e30
 8005da8:	08005e30 	.word	0x08005e30
 8005dac:	08005e34 	.word	0x08005e34

08005db0 <memset>:
 8005db0:	4402      	add	r2, r0
 8005db2:	4603      	mov	r3, r0
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d100      	bne.n	8005dba <memset+0xa>
 8005db8:	4770      	bx	lr
 8005dba:	f803 1b01 	strb.w	r1, [r3], #1
 8005dbe:	e7f9      	b.n	8005db4 <memset+0x4>

08005dc0 <_init>:
 8005dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc2:	bf00      	nop
 8005dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dc6:	bc08      	pop	{r3}
 8005dc8:	469e      	mov	lr, r3
 8005dca:	4770      	bx	lr

08005dcc <_fini>:
 8005dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dce:	bf00      	nop
 8005dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd2:	bc08      	pop	{r3}
 8005dd4:	469e      	mov	lr, r3
 8005dd6:	4770      	bx	lr
