
nucleo-l432kc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bd4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08006d60  08006d60  00016d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f30  08006f30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006f30  08006f30  00016f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f38  08006f38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f38  08006f38  00016f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f3c  08006f3c  00016f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006f40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003294  2000000c  08006f4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200032a0  08006f4c  000232a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001763c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037a3  00000000  00000000  00037678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  0003ae20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001240  00000000  00000000  0003c1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000228b9  00000000  00000000  0003d438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000194c5  00000000  00000000  0005fcf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdb18  00000000  00000000  000791b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00146cce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f84  00000000  00000000  00146d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08006d48 	.word	0x08006d48

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08006d48 	.word	0x08006d48

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 030c 	add.w	r3, r7, #12
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	4b1d      	ldr	r3, [pc, #116]	; (800055c <MX_GPIO_Init+0x8c>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	4a1c      	ldr	r2, [pc, #112]	; (800055c <MX_GPIO_Init+0x8c>)
 80004ec:	f043 0304 	orr.w	r3, r3, #4
 80004f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004f2:	4b1a      	ldr	r3, [pc, #104]	; (800055c <MX_GPIO_Init+0x8c>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	f003 0304 	and.w	r3, r3, #4
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fe:	4b17      	ldr	r3, [pc, #92]	; (800055c <MX_GPIO_Init+0x8c>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	4a16      	ldr	r2, [pc, #88]	; (800055c <MX_GPIO_Init+0x8c>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800050a:	4b14      	ldr	r3, [pc, #80]	; (800055c <MX_GPIO_Init+0x8c>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <MX_GPIO_Init+0x8c>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	4a10      	ldr	r2, [pc, #64]	; (800055c <MX_GPIO_Init+0x8c>)
 800051c:	f043 0302 	orr.w	r3, r3, #2
 8000520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <MX_GPIO_Init+0x8c>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	f003 0302 	and.w	r3, r3, #2
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	2108      	movs	r1, #8
 8000532:	480b      	ldr	r0, [pc, #44]	; (8000560 <MX_GPIO_Init+0x90>)
 8000534:	f000 fed4 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000538:	2308      	movs	r3, #8
 800053a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053c:	2301      	movs	r3, #1
 800053e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000544:	2300      	movs	r3, #0
 8000546:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	4619      	mov	r1, r3
 800054e:	4804      	ldr	r0, [pc, #16]	; (8000560 <MX_GPIO_Init+0x90>)
 8000550:	f000 fd5c 	bl	800100c <HAL_GPIO_Init>

}
 8000554:	bf00      	nop
 8000556:	3720      	adds	r7, #32
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40021000 	.word	0x40021000
 8000560:	48000400 	.word	0x48000400

08000564 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000568:	f000 fb4b 	bl	8000c02 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800056c:	f000 f80f 	bl	800058e <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000570:	f7ff ffae 	bl	80004d0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000574:	f000 fa2a 	bl	80009cc <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8000578:	f000 f934 	bl	80007e4 <MX_TIM2_Init>
	MX_TIM7_Init();
 800057c:	f000 f980 	bl	8000880 <MX_TIM7_Init>
	MX_USART1_UART_Init();
 8000580:	f000 f9f4 	bl	800096c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	modbus_slave_example_init();
 8000584:	f000 f859 	bl	800063a <modbus_slave_example_init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		modbus_slave_example_run();
 8000588:	f000 f89d 	bl	80006c6 <modbus_slave_example_run>
 800058c:	e7fc      	b.n	8000588 <main+0x24>

0800058e <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	b096      	sub	sp, #88	; 0x58
 8000592:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	2244      	movs	r2, #68	; 0x44
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f006 fbcb 	bl	8006d38 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a2:	463b      	mov	r3, r7
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005b4:	f000 feda 	bl	800136c <HAL_PWREx_ControlVoltageScaling>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x34>
	{
		Error_Handler();
 80005be:	f000 f837 	bl	8000630 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c2:	2302      	movs	r3, #2
 80005c4:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ca:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005cc:	2310      	movs	r3, #16
 80005ce:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d0:	2302      	movs	r3, #2
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d4:	2302      	movs	r3, #2
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80005d8:	2301      	movs	r3, #1
 80005da:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80005dc:	230a      	movs	r3, #10
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005e0:	2307      	movs	r3, #7
 80005e2:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 ff11 	bl	8001418 <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x72>
	{
		Error_Handler();
 80005fc:	f000 f818 	bl	8000630 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000600:	230f      	movs	r3, #15
 8000602:	603b      	str	r3, [r7, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000604:	2303      	movs	r3, #3
 8000606:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000614:	463b      	mov	r3, r7
 8000616:	2104      	movs	r1, #4
 8000618:	4618      	mov	r0, r3
 800061a:	f001 fb11 	bl	8001c40 <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000624:	f000 f804 	bl	8000630 <Error_Handler>
	}
}
 8000628:	bf00      	nop
 800062a:	3758      	adds	r7, #88	; 0x58
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000634:	b672      	cpsid	i
}
 8000636:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000638:	e7fe      	b.n	8000638 <Error_Handler+0x8>

0800063a <modbus_slave_example_init>:
 */

#include "../../lib/bsp_mb_slave.h"

void modbus_slave_example_init(void)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	af00      	add	r7, sp, #0
	bsp_mb_slave_init();
 800063e:	f004 f8eb 	bl	8004818 <bsp_mb_slave_init>

	// Update coil status
	bsp_mb_coil_set(0, 1);
 8000642:	2101      	movs	r1, #1
 8000644:	2000      	movs	r0, #0
 8000646:	f004 f92b 	bl	80048a0 <bsp_mb_coil_set>
	bsp_mb_coil_set(1, 0);
 800064a:	2100      	movs	r1, #0
 800064c:	2001      	movs	r0, #1
 800064e:	f004 f927 	bl	80048a0 <bsp_mb_coil_set>
	bsp_mb_coil_set(2, 1);
 8000652:	2101      	movs	r1, #1
 8000654:	2002      	movs	r0, #2
 8000656:	f004 f923 	bl	80048a0 <bsp_mb_coil_set>
	bsp_mb_coil_set(3, 0);
 800065a:	2100      	movs	r1, #0
 800065c:	2003      	movs	r0, #3
 800065e:	f004 f91f 	bl	80048a0 <bsp_mb_coil_set>

	// Update input register
	bsp_mb_discrete_input_set(0, 0);
 8000662:	2100      	movs	r1, #0
 8000664:	2000      	movs	r0, #0
 8000666:	f004 f931 	bl	80048cc <bsp_mb_discrete_input_set>
	bsp_mb_discrete_input_set(1, 1);
 800066a:	2101      	movs	r1, #1
 800066c:	2001      	movs	r0, #1
 800066e:	f004 f92d 	bl	80048cc <bsp_mb_discrete_input_set>
	bsp_mb_discrete_input_set(2, 0);
 8000672:	2100      	movs	r1, #0
 8000674:	2002      	movs	r0, #2
 8000676:	f004 f929 	bl	80048cc <bsp_mb_discrete_input_set>
	bsp_mb_discrete_input_set(3, 1);
 800067a:	2101      	movs	r1, #1
 800067c:	2003      	movs	r0, #3
 800067e:	f004 f925 	bl	80048cc <bsp_mb_discrete_input_set>

	// Update input register
	bsp_mb_input_reg_set(0, 1);
 8000682:	2101      	movs	r1, #1
 8000684:	2000      	movs	r0, #0
 8000686:	f004 f937 	bl	80048f8 <bsp_mb_input_reg_set>
	bsp_mb_input_reg_set(1, 2);
 800068a:	2102      	movs	r1, #2
 800068c:	2001      	movs	r0, #1
 800068e:	f004 f933 	bl	80048f8 <bsp_mb_input_reg_set>
	bsp_mb_input_reg_set(2, 3);
 8000692:	2103      	movs	r1, #3
 8000694:	2002      	movs	r0, #2
 8000696:	f004 f92f 	bl	80048f8 <bsp_mb_input_reg_set>
	bsp_mb_input_reg_set(3, 4);
 800069a:	2104      	movs	r1, #4
 800069c:	2003      	movs	r0, #3
 800069e:	f004 f92b 	bl	80048f8 <bsp_mb_input_reg_set>

	// Update holding register
	bsp_mb_holding_reg_set(0, 5);
 80006a2:	2105      	movs	r1, #5
 80006a4:	2000      	movs	r0, #0
 80006a6:	f004 f93d 	bl	8004924 <bsp_mb_holding_reg_set>
	bsp_mb_holding_reg_set(1, 6);
 80006aa:	2106      	movs	r1, #6
 80006ac:	2001      	movs	r0, #1
 80006ae:	f004 f939 	bl	8004924 <bsp_mb_holding_reg_set>
	bsp_mb_holding_reg_set(2, 7);
 80006b2:	2107      	movs	r1, #7
 80006b4:	2002      	movs	r0, #2
 80006b6:	f004 f935 	bl	8004924 <bsp_mb_holding_reg_set>
	bsp_mb_holding_reg_set(3, 8);
 80006ba:	2108      	movs	r1, #8
 80006bc:	2003      	movs	r0, #3
 80006be:	f004 f931 	bl	8004924 <bsp_mb_holding_reg_set>
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <modbus_slave_example_run>:

void modbus_slave_example_run(void)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	af00      	add	r7, sp, #0
	bsp_mb_slave_handle();
 80006ca:	f004 f8dd 	bl	8004888 <bsp_mb_slave_handle>
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <HAL_MspInit+0x44>)
 80006dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006de:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <HAL_MspInit+0x44>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6613      	str	r3, [r2, #96]	; 0x60
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <HAL_MspInit+0x44>)
 80006e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_MspInit+0x44>)
 80006f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f6:	4a08      	ldr	r2, [pc, #32]	; (8000718 <HAL_MspInit+0x44>)
 80006f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fc:	6593      	str	r3, [r2, #88]	; 0x58
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_MspInit+0x44>)
 8000700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000

0800071c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <NMI_Handler+0x4>

08000722 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000726:	e7fe      	b.n	8000726 <HardFault_Handler+0x4>

08000728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800072c:	e7fe      	b.n	800072c <MemManage_Handler+0x4>

0800072e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <BusFault_Handler+0x4>

08000734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <UsageFault_Handler+0x4>

0800073a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr

08000748 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr

08000756 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000768:	f000 faa0 	bl	8000cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}

08000770 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000774:	4802      	ldr	r0, [pc, #8]	; (8000780 <TIM2_IRQHandler+0x10>)
 8000776:	f002 f84a 	bl	800280e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000028 	.word	0x20000028

08000784 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000788:	4802      	ldr	r0, [pc, #8]	; (8000794 <USART1_IRQHandler+0x10>)
 800078a:	f002 fdad 	bl	80032e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200000c0 	.word	0x200000c0

08000798 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800079c:	4802      	ldr	r0, [pc, #8]	; (80007a8 <USART2_IRQHandler+0x10>)
 800079e:	f002 fda3 	bl	80032e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000144 	.word	0x20000144

080007ac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80007b0:	4802      	ldr	r0, [pc, #8]	; (80007bc <TIM7_IRQHandler+0x10>)
 80007b2:	f002 f82c 	bl	800280e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000074 	.word	0x20000074

080007c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <SystemInit+0x20>)
 80007c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ca:	4a05      	ldr	r2, [pc, #20]	; (80007e0 <SystemInit+0x20>)
 80007cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ea:	f107 0310 	add.w	r3, r7, #16
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000802:	4b1e      	ldr	r3, [pc, #120]	; (800087c <MX_TIM2_Init+0x98>)
 8000804:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000808:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80;
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_TIM2_Init+0x98>)
 800080c:	2250      	movs	r2, #80	; 0x50
 800080e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000810:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_TIM2_Init+0x98>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_TIM2_Init+0x98>)
 8000818:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800081c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081e:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_TIM2_Init+0x98>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_TIM2_Init+0x98>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800082a:	4814      	ldr	r0, [pc, #80]	; (800087c <MX_TIM2_Init+0x98>)
 800082c:	f001 ff14 	bl	8002658 <HAL_TIM_Base_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000836:	f7ff fefb 	bl	8000630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	4619      	mov	r1, r3
 8000846:	480d      	ldr	r0, [pc, #52]	; (800087c <MX_TIM2_Init+0x98>)
 8000848:	f002 f900 	bl	8002a4c <HAL_TIM_ConfigClockSource>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000852:	f7ff feed 	bl	8000630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	4619      	mov	r1, r3
 8000862:	4806      	ldr	r0, [pc, #24]	; (800087c <MX_TIM2_Init+0x98>)
 8000864:	f002 fae2 	bl	8002e2c <HAL_TIMEx_MasterConfigSynchronization>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800086e:	f7ff fedf 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	3720      	adds	r7, #32
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000028 	.word	0x20000028

08000880 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_TIM7_Init+0x64>)
 8000892:	4a15      	ldr	r2, [pc, #84]	; (80008e8 <MX_TIM7_Init+0x68>)
 8000894:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 80;
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_TIM7_Init+0x64>)
 8000898:	2250      	movs	r2, #80	; 0x50
 800089a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_TIM7_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 30;
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <MX_TIM7_Init+0x64>)
 80008a4:	221e      	movs	r2, #30
 80008a6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_TIM7_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80008ae:	480d      	ldr	r0, [pc, #52]	; (80008e4 <MX_TIM7_Init+0x64>)
 80008b0:	f001 fed2 	bl	8002658 <HAL_TIM_Base_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80008ba:	f7ff feb9 	bl	8000630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	4806      	ldr	r0, [pc, #24]	; (80008e4 <MX_TIM7_Init+0x64>)
 80008cc:	f002 faae 	bl	8002e2c <HAL_TIMEx_MasterConfigSynchronization>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80008d6:	f7ff feab 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000074 	.word	0x20000074
 80008e8:	40001400 	.word	0x40001400

080008ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008fc:	d114      	bne.n	8000928 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008fe:	4b19      	ldr	r3, [pc, #100]	; (8000964 <HAL_TIM_Base_MspInit+0x78>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000902:	4a18      	ldr	r2, [pc, #96]	; (8000964 <HAL_TIM_Base_MspInit+0x78>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6593      	str	r3, [r2, #88]	; 0x58
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <HAL_TIM_Base_MspInit+0x78>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	201c      	movs	r0, #28
 800091c:	f000 fac1 	bl	8000ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000920:	201c      	movs	r0, #28
 8000922:	f000 fada 	bl	8000eda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000926:	e018      	b.n	800095a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <HAL_TIM_Base_MspInit+0x7c>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d113      	bne.n	800095a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <HAL_TIM_Base_MspInit+0x78>)
 8000934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <HAL_TIM_Base_MspInit+0x78>)
 8000938:	f043 0320 	orr.w	r3, r3, #32
 800093c:	6593      	str	r3, [r2, #88]	; 0x58
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <HAL_TIM_Base_MspInit+0x78>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	f003 0320 	and.w	r3, r3, #32
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2100      	movs	r1, #0
 800094e:	2037      	movs	r0, #55	; 0x37
 8000950:	f000 faa7 	bl	8000ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000954:	2037      	movs	r0, #55	; 0x37
 8000956:	f000 fac0 	bl	8000eda <HAL_NVIC_EnableIRQ>
}
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000
 8000968:	40001400 	.word	0x40001400

0800096c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 8000972:	4a15      	ldr	r2, [pc, #84]	; (80009c8 <MX_USART1_UART_Init+0x5c>)
 8000974:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 8000978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800097c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 80009b0:	f002 fac0 	bl	8002f34 <HAL_UART_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009ba:	f7ff fe39 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200000c0 	.word	0x200000c0
 80009c8:	40013800 	.word	0x40013800

080009cc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_USART2_UART_Init+0x58>)
 80009d2:	4a15      	ldr	r2, [pc, #84]	; (8000a28 <MX_USART2_UART_Init+0x5c>)
 80009d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009d6:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <MX_USART2_UART_Init+0x58>)
 80009d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_USART2_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_USART2_UART_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_USART2_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_USART2_UART_Init+0x58>)
 80009f2:	220c      	movs	r2, #12
 80009f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_USART2_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_USART2_UART_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_USART2_UART_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_USART2_UART_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_USART2_UART_Init+0x58>)
 8000a10:	f002 fa90 	bl	8002f34 <HAL_UART_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a1a:	f7ff fe09 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000144 	.word	0x20000144
 8000a28:	40004400 	.word	0x40004400

08000a2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b0a0      	sub	sp, #128	; 0x80
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a44:	f107 0318 	add.w	r3, r7, #24
 8000a48:	2254      	movs	r2, #84	; 0x54
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f006 f973 	bl	8006d38 <memset>
  if(uartHandle->Instance==USART1)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a52      	ldr	r2, [pc, #328]	; (8000ba0 <HAL_UART_MspInit+0x174>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d146      	bne.n	8000aea <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a60:	2300      	movs	r3, #0
 8000a62:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a64:	f107 0318 	add.w	r3, r7, #24
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f001 fb0d 	bl	8002088 <HAL_RCCEx_PeriphCLKConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a74:	f7ff fddc 	bl	8000630 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a78:	4b4a      	ldr	r3, [pc, #296]	; (8000ba4 <HAL_UART_MspInit+0x178>)
 8000a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a7c:	4a49      	ldr	r2, [pc, #292]	; (8000ba4 <HAL_UART_MspInit+0x178>)
 8000a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a82:	6613      	str	r3, [r2, #96]	; 0x60
 8000a84:	4b47      	ldr	r3, [pc, #284]	; (8000ba4 <HAL_UART_MspInit+0x178>)
 8000a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8c:	617b      	str	r3, [r7, #20]
 8000a8e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a90:	4b44      	ldr	r3, [pc, #272]	; (8000ba4 <HAL_UART_MspInit+0x178>)
 8000a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a94:	4a43      	ldr	r2, [pc, #268]	; (8000ba4 <HAL_UART_MspInit+0x178>)
 8000a96:	f043 0302 	orr.w	r3, r3, #2
 8000a9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9c:	4b41      	ldr	r3, [pc, #260]	; (8000ba4 <HAL_UART_MspInit+0x178>)
 8000a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa0:	f003 0302 	and.w	r3, r3, #2
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000aa8:	23c0      	movs	r3, #192	; 0xc0
 8000aaa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ab8:	2307      	movs	r3, #7
 8000aba:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4839      	ldr	r0, [pc, #228]	; (8000ba8 <HAL_UART_MspInit+0x17c>)
 8000ac4:	f000 faa2 	bl	800100c <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB6);
 8000ac8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000acc:	f000 fc20 	bl	8001310 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 8000ad0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ad4:	f000 fc1c 	bl	8001310 <HAL_I2CEx_EnableFastModePlus>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2100      	movs	r1, #0
 8000adc:	2025      	movs	r0, #37	; 0x25
 8000ade:	f000 f9e0 	bl	8000ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ae2:	2025      	movs	r0, #37	; 0x25
 8000ae4:	f000 f9f9 	bl	8000eda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ae8:	e055      	b.n	8000b96 <HAL_UART_MspInit+0x16a>
  else if(uartHandle->Instance==USART2)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a2f      	ldr	r2, [pc, #188]	; (8000bac <HAL_UART_MspInit+0x180>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d150      	bne.n	8000b96 <HAL_UART_MspInit+0x16a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000af4:	2302      	movs	r3, #2
 8000af6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000afc:	f107 0318 	add.w	r3, r7, #24
 8000b00:	4618      	mov	r0, r3
 8000b02:	f001 fac1 	bl	8002088 <HAL_RCCEx_PeriphCLKConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8000b0c:	f7ff fd90 	bl	8000630 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b10:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <HAL_UART_MspInit+0x178>)
 8000b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b14:	4a23      	ldr	r2, [pc, #140]	; (8000ba4 <HAL_UART_MspInit+0x178>)
 8000b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b1c:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <HAL_UART_MspInit+0x178>)
 8000b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <HAL_UART_MspInit+0x178>)
 8000b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ba4 <HAL_UART_MspInit+0x178>)
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <HAL_UART_MspInit+0x178>)
 8000b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b40:	2304      	movs	r3, #4
 8000b42:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b50:	2307      	movs	r3, #7
 8000b52:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000b54:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5e:	f000 fa55 	bl	800100c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000b62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b66:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000b74:	2303      	movs	r3, #3
 8000b76:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b82:	f000 fa43 	bl	800100c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2026      	movs	r0, #38	; 0x26
 8000b8c:	f000 f989 	bl	8000ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b90:	2026      	movs	r0, #38	; 0x26
 8000b92:	f000 f9a2 	bl	8000eda <HAL_NVIC_EnableIRQ>
}
 8000b96:	bf00      	nop
 8000b98:	3780      	adds	r7, #128	; 0x80
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40013800 	.word	0x40013800
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	48000400 	.word	0x48000400
 8000bac:	40004400 	.word	0x40004400

08000bb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bb4:	f7ff fe04 	bl	80007c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb8:	480c      	ldr	r0, [pc, #48]	; (8000bec <LoopForever+0x6>)
  ldr r1, =_edata
 8000bba:	490d      	ldr	r1, [pc, #52]	; (8000bf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	; (8000bf4 <LoopForever+0xe>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd0:	4c0a      	ldr	r4, [pc, #40]	; (8000bfc <LoopForever+0x16>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bde:	f006 f879 	bl	8006cd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000be2:	f7ff fcbf 	bl	8000564 <main>

08000be6 <LoopForever>:

LoopForever:
    b LoopForever
 8000be6:	e7fe      	b.n	8000be6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000be8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bf4:	08006f40 	.word	0x08006f40
  ldr r2, =_sbss
 8000bf8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bfc:	200032a0 	.word	0x200032a0

08000c00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC1_IRQHandler>

08000c02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f000 f93d 	bl	8000e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c12:	2000      	movs	r0, #0
 8000c14:	f000 f80e 	bl	8000c34 <HAL_InitTick>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d002      	beq.n	8000c24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	71fb      	strb	r3, [r7, #7]
 8000c22:	e001      	b.n	8000c28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c24:	f7ff fd56 	bl	80006d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c28:	79fb      	ldrb	r3, [r7, #7]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <HAL_InitTick+0x6c>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d023      	beq.n	8000c90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <HAL_InitTick+0x70>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <HAL_InitTick+0x6c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4619      	mov	r1, r3
 8000c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 f949 	bl	8000ef6 <HAL_SYSTICK_Config>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d10f      	bne.n	8000c8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b0f      	cmp	r3, #15
 8000c6e:	d809      	bhi.n	8000c84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c70:	2200      	movs	r2, #0
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295
 8000c78:	f000 f913 	bl	8000ea2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <HAL_InitTick+0x74>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	e007      	b.n	8000c94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	73fb      	strb	r3, [r7, #15]
 8000c88:	e004      	b.n	8000c94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	73fb      	strb	r3, [r7, #15]
 8000c8e:	e001      	b.n	8000c94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	20000004 	.word	0x20000004

08000cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x20>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_IncTick+0x24>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <HAL_IncTick+0x24>)
 8000cbe:	6013      	str	r3, [r2, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	200001c8 	.word	0x200001c8

08000cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <HAL_GetTick+0x14>)
 8000cda:	681b      	ldr	r3, [r3, #0]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	200001c8 	.word	0x200001c8

08000cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <__NVIC_SetPriorityGrouping+0x44>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1e:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <__NVIC_SetPriorityGrouping+0x44>)
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	60d3      	str	r3, [r2, #12]
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <__NVIC_GetPriorityGrouping+0x18>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	0a1b      	lsrs	r3, r3, #8
 8000d3e:	f003 0307 	and.w	r3, r3, #7
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	db0b      	blt.n	8000d7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	f003 021f 	and.w	r2, r3, #31
 8000d68:	4907      	ldr	r1, [pc, #28]	; (8000d88 <__NVIC_EnableIRQ+0x38>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	095b      	lsrs	r3, r3, #5
 8000d70:	2001      	movs	r0, #1
 8000d72:	fa00 f202 	lsl.w	r2, r0, r2
 8000d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000e100 	.word	0xe000e100

08000d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	6039      	str	r1, [r7, #0]
 8000d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	db0a      	blt.n	8000db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	490c      	ldr	r1, [pc, #48]	; (8000dd8 <__NVIC_SetPriority+0x4c>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	0112      	lsls	r2, r2, #4
 8000dac:	b2d2      	uxtb	r2, r2
 8000dae:	440b      	add	r3, r1
 8000db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db4:	e00a      	b.n	8000dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4908      	ldr	r1, [pc, #32]	; (8000ddc <__NVIC_SetPriority+0x50>)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	f003 030f 	and.w	r3, r3, #15
 8000dc2:	3b04      	subs	r3, #4
 8000dc4:	0112      	lsls	r2, r2, #4
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	440b      	add	r3, r1
 8000dca:	761a      	strb	r2, [r3, #24]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000e100 	.word	0xe000e100
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	; 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f1c3 0307 	rsb	r3, r3, #7
 8000dfa:	2b04      	cmp	r3, #4
 8000dfc:	bf28      	it	cs
 8000dfe:	2304      	movcs	r3, #4
 8000e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3304      	adds	r3, #4
 8000e06:	2b06      	cmp	r3, #6
 8000e08:	d902      	bls.n	8000e10 <NVIC_EncodePriority+0x30>
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3b03      	subs	r3, #3
 8000e0e:	e000      	b.n	8000e12 <NVIC_EncodePriority+0x32>
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	f04f 32ff 	mov.w	r2, #4294967295
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	401a      	ands	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e28:	f04f 31ff 	mov.w	r1, #4294967295
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e32:	43d9      	mvns	r1, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	4313      	orrs	r3, r2
         );
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3724      	adds	r7, #36	; 0x24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e58:	d301      	bcc.n	8000e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00f      	b.n	8000e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <SysTick_Config+0x40>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e66:	210f      	movs	r1, #15
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f7ff ff8e 	bl	8000d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <SysTick_Config+0x40>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <SysTick_Config+0x40>)
 8000e78:	2207      	movs	r2, #7
 8000e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	e000e010 	.word	0xe000e010

08000e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff ff29 	bl	8000cec <__NVIC_SetPriorityGrouping>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b086      	sub	sp, #24
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
 8000eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb4:	f7ff ff3e 	bl	8000d34 <__NVIC_GetPriorityGrouping>
 8000eb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	6978      	ldr	r0, [r7, #20]
 8000ec0:	f7ff ff8e 	bl	8000de0 <NVIC_EncodePriority>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff5d 	bl	8000d8c <__NVIC_SetPriority>
}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff31 	bl	8000d50 <__NVIC_EnableIRQ>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ffa2 	bl	8000e48 <SysTick_Config>
 8000f04:	4603      	mov	r3, r0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b085      	sub	sp, #20
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d008      	beq.n	8000f38 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2204      	movs	r2, #4
 8000f2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e022      	b.n	8000f7e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f022 020e 	bic.w	r2, r2, #14
 8000f46:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f022 0201 	bic.w	r2, r2, #1
 8000f56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5c:	f003 021c 	and.w	r2, r3, #28
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	2101      	movs	r1, #1
 8000f66:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b084      	sub	sp, #16
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d005      	beq.n	8000fae <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	73fb      	strb	r3, [r7, #15]
 8000fac:	e029      	b.n	8001002 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 020e 	bic.w	r2, r2, #14
 8000fbc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f022 0201 	bic.w	r2, r2, #1
 8000fcc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	f003 021c 	and.w	r2, r3, #28
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	2101      	movs	r1, #1
 8000fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	4798      	blx	r3
    }
  }
  return status;
 8001002:	7bfb      	ldrb	r3, [r7, #15]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800100c:	b480      	push	{r7}
 800100e:	b087      	sub	sp, #28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101a:	e148      	b.n	80012ae <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	2101      	movs	r1, #1
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	fa01 f303 	lsl.w	r3, r1, r3
 8001028:	4013      	ands	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2b00      	cmp	r3, #0
 8001030:	f000 813a 	beq.w	80012a8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	2b01      	cmp	r3, #1
 800103e:	d005      	beq.n	800104c <HAL_GPIO_Init+0x40>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d130      	bne.n	80010ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2203      	movs	r2, #3
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	68da      	ldr	r2, [r3, #12]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001082:	2201      	movs	r2, #1
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	091b      	lsrs	r3, r3, #4
 8001098:	f003 0201 	and.w	r2, r3, #1
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d017      	beq.n	80010ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	2203      	movs	r2, #3
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d123      	bne.n	800113e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	08da      	lsrs	r2, r3, #3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3208      	adds	r2, #8
 80010fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001102:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	691a      	ldr	r2, [r3, #16]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	08da      	lsrs	r2, r3, #3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3208      	adds	r2, #8
 8001138:	6939      	ldr	r1, [r7, #16]
 800113a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0203 	and.w	r2, r3, #3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 8094 	beq.w	80012a8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001180:	4b52      	ldr	r3, [pc, #328]	; (80012cc <HAL_GPIO_Init+0x2c0>)
 8001182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001184:	4a51      	ldr	r2, [pc, #324]	; (80012cc <HAL_GPIO_Init+0x2c0>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6613      	str	r3, [r2, #96]	; 0x60
 800118c:	4b4f      	ldr	r3, [pc, #316]	; (80012cc <HAL_GPIO_Init+0x2c0>)
 800118e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001198:	4a4d      	ldr	r2, [pc, #308]	; (80012d0 <HAL_GPIO_Init+0x2c4>)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	089b      	lsrs	r3, r3, #2
 800119e:	3302      	adds	r3, #2
 80011a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	220f      	movs	r2, #15
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011c2:	d00d      	beq.n	80011e0 <HAL_GPIO_Init+0x1d4>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a43      	ldr	r2, [pc, #268]	; (80012d4 <HAL_GPIO_Init+0x2c8>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d007      	beq.n	80011dc <HAL_GPIO_Init+0x1d0>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a42      	ldr	r2, [pc, #264]	; (80012d8 <HAL_GPIO_Init+0x2cc>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d101      	bne.n	80011d8 <HAL_GPIO_Init+0x1cc>
 80011d4:	2302      	movs	r3, #2
 80011d6:	e004      	b.n	80011e2 <HAL_GPIO_Init+0x1d6>
 80011d8:	2307      	movs	r3, #7
 80011da:	e002      	b.n	80011e2 <HAL_GPIO_Init+0x1d6>
 80011dc:	2301      	movs	r3, #1
 80011de:	e000      	b.n	80011e2 <HAL_GPIO_Init+0x1d6>
 80011e0:	2300      	movs	r3, #0
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	f002 0203 	and.w	r2, r2, #3
 80011e8:	0092      	lsls	r2, r2, #2
 80011ea:	4093      	lsls	r3, r2
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011f2:	4937      	ldr	r1, [pc, #220]	; (80012d0 <HAL_GPIO_Init+0x2c4>)
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	3302      	adds	r3, #2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001200:	4b36      	ldr	r3, [pc, #216]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	43db      	mvns	r3, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001224:	4a2d      	ldr	r2, [pc, #180]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800122a:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	43db      	mvns	r3, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4313      	orrs	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800124e:	4a23      	ldr	r2, [pc, #140]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	43db      	mvns	r3, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001278:	4a18      	ldr	r2, [pc, #96]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012a2:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	3301      	adds	r3, #1
 80012ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	fa22 f303 	lsr.w	r3, r2, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f47f aeaf 	bne.w	800101c <HAL_GPIO_Init+0x10>
  }
}
 80012be:	bf00      	nop
 80012c0:	bf00      	nop
 80012c2:	371c      	adds	r7, #28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40010000 	.word	0x40010000
 80012d4:	48000400 	.word	0x48000400
 80012d8:	48000800 	.word	0x48000800
 80012dc:	40010400 	.word	0x40010400

080012e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	807b      	strh	r3, [r7, #2]
 80012ec:	4613      	mov	r3, r2
 80012ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f0:	787b      	ldrb	r3, [r7, #1]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012f6:	887a      	ldrh	r2, [r7, #2]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012fc:	e002      	b.n	8001304 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012fe:	887a      	ldrh	r2, [r7, #2]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800131a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131c:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	6613      	str	r3, [r2, #96]	; 0x60
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	4905      	ldr	r1, [pc, #20]	; (800134c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4313      	orrs	r3, r2
 800133a:	604b      	str	r3, [r1, #4]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	40021000 	.word	0x40021000
 800134c:	40010000 	.word	0x40010000

08001350 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <HAL_PWREx_GetVoltageRange+0x18>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40007000 	.word	0x40007000

0800136c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800137a:	d130      	bne.n	80013de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800137c:	4b23      	ldr	r3, [pc, #140]	; (800140c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001388:	d038      	beq.n	80013fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800138a:	4b20      	ldr	r3, [pc, #128]	; (800140c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001392:	4a1e      	ldr	r2, [pc, #120]	; (800140c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001394:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001398:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800139a:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2232      	movs	r2, #50	; 0x32
 80013a0:	fb02 f303 	mul.w	r3, r2, r3
 80013a4:	4a1b      	ldr	r2, [pc, #108]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013a6:	fba2 2303 	umull	r2, r3, r2, r3
 80013aa:	0c9b      	lsrs	r3, r3, #18
 80013ac:	3301      	adds	r3, #1
 80013ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013b0:	e002      	b.n	80013b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	3b01      	subs	r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013c4:	d102      	bne.n	80013cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1f2      	bne.n	80013b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013cc:	4b0f      	ldr	r3, [pc, #60]	; (800140c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d8:	d110      	bne.n	80013fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e00f      	b.n	80013fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ea:	d007      	beq.n	80013fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013ec:	4b07      	ldr	r3, [pc, #28]	; (800140c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013f4:	4a05      	ldr	r2, [pc, #20]	; (800140c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40007000 	.word	0x40007000
 8001410:	20000000 	.word	0x20000000
 8001414:	431bde83 	.word	0x431bde83

08001418 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d102      	bne.n	800142c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	f000 bc02 	b.w	8001c30 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800142c:	4b96      	ldr	r3, [pc, #600]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 030c 	and.w	r3, r3, #12
 8001434:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001436:	4b94      	ldr	r3, [pc, #592]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0310 	and.w	r3, r3, #16
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 80e4 	beq.w	8001616 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d007      	beq.n	8001464 <HAL_RCC_OscConfig+0x4c>
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	2b0c      	cmp	r3, #12
 8001458:	f040 808b 	bne.w	8001572 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	2b01      	cmp	r3, #1
 8001460:	f040 8087 	bne.w	8001572 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001464:	4b88      	ldr	r3, [pc, #544]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_RCC_OscConfig+0x64>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e3d9      	b.n	8001c30 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a1a      	ldr	r2, [r3, #32]
 8001480:	4b81      	ldr	r3, [pc, #516]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0308 	and.w	r3, r3, #8
 8001488:	2b00      	cmp	r3, #0
 800148a:	d004      	beq.n	8001496 <HAL_RCC_OscConfig+0x7e>
 800148c:	4b7e      	ldr	r3, [pc, #504]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001494:	e005      	b.n	80014a2 <HAL_RCC_OscConfig+0x8a>
 8001496:	4b7c      	ldr	r3, [pc, #496]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 8001498:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800149c:	091b      	lsrs	r3, r3, #4
 800149e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d223      	bcs.n	80014ee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 fd8c 	bl	8001fc8 <RCC_SetFlashLatencyFromMSIRange>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e3ba      	b.n	8001c30 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ba:	4b73      	ldr	r3, [pc, #460]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a72      	ldr	r2, [pc, #456]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80014c0:	f043 0308 	orr.w	r3, r3, #8
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	4b70      	ldr	r3, [pc, #448]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	496d      	ldr	r1, [pc, #436]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014d8:	4b6b      	ldr	r3, [pc, #428]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	4968      	ldr	r1, [pc, #416]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	604b      	str	r3, [r1, #4]
 80014ec:	e025      	b.n	800153a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ee:	4b66      	ldr	r3, [pc, #408]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a65      	ldr	r2, [pc, #404]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80014f4:	f043 0308 	orr.w	r3, r3, #8
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	4b63      	ldr	r3, [pc, #396]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	4960      	ldr	r1, [pc, #384]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 8001508:	4313      	orrs	r3, r2
 800150a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800150c:	4b5e      	ldr	r3, [pc, #376]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69db      	ldr	r3, [r3, #28]
 8001518:	021b      	lsls	r3, r3, #8
 800151a:	495b      	ldr	r1, [pc, #364]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d109      	bne.n	800153a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	4618      	mov	r0, r3
 800152c:	f000 fd4c 	bl	8001fc8 <RCC_SetFlashLatencyFromMSIRange>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e37a      	b.n	8001c30 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800153a:	f000 fc81 	bl	8001e40 <HAL_RCC_GetSysClockFreq>
 800153e:	4602      	mov	r2, r0
 8001540:	4b51      	ldr	r3, [pc, #324]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	091b      	lsrs	r3, r3, #4
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	4950      	ldr	r1, [pc, #320]	; (800168c <HAL_RCC_OscConfig+0x274>)
 800154c:	5ccb      	ldrb	r3, [r1, r3]
 800154e:	f003 031f 	and.w	r3, r3, #31
 8001552:	fa22 f303 	lsr.w	r3, r2, r3
 8001556:	4a4e      	ldr	r2, [pc, #312]	; (8001690 <HAL_RCC_OscConfig+0x278>)
 8001558:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800155a:	4b4e      	ldr	r3, [pc, #312]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fb68 	bl	8000c34 <HAL_InitTick>
 8001564:	4603      	mov	r3, r0
 8001566:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d052      	beq.n	8001614 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	e35e      	b.n	8001c30 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d032      	beq.n	80015e0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800157a:	4b43      	ldr	r3, [pc, #268]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a42      	ldr	r2, [pc, #264]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001586:	f7ff fba5 	bl	8000cd4 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800158e:	f7ff fba1 	bl	8000cd4 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e347      	b.n	8001c30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015a0:	4b39      	ldr	r3, [pc, #228]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0f0      	beq.n	800158e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ac:	4b36      	ldr	r3, [pc, #216]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a35      	ldr	r2, [pc, #212]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80015b2:	f043 0308 	orr.w	r3, r3, #8
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b33      	ldr	r3, [pc, #204]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	4930      	ldr	r1, [pc, #192]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ca:	4b2f      	ldr	r3, [pc, #188]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	492b      	ldr	r1, [pc, #172]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	604b      	str	r3, [r1, #4]
 80015de:	e01a      	b.n	8001616 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015e0:	4b29      	ldr	r3, [pc, #164]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a28      	ldr	r2, [pc, #160]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80015e6:	f023 0301 	bic.w	r3, r3, #1
 80015ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015ec:	f7ff fb72 	bl	8000cd4 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015f4:	f7ff fb6e 	bl	8000cd4 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e314      	b.n	8001c30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001606:	4b20      	ldr	r3, [pc, #128]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x1dc>
 8001612:	e000      	b.n	8001616 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001614:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d073      	beq.n	800170a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	2b08      	cmp	r3, #8
 8001626:	d005      	beq.n	8001634 <HAL_RCC_OscConfig+0x21c>
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	2b0c      	cmp	r3, #12
 800162c:	d10e      	bne.n	800164c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	2b03      	cmp	r3, #3
 8001632:	d10b      	bne.n	800164c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d063      	beq.n	8001708 <HAL_RCC_OscConfig+0x2f0>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d15f      	bne.n	8001708 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e2f1      	b.n	8001c30 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001654:	d106      	bne.n	8001664 <HAL_RCC_OscConfig+0x24c>
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a0b      	ldr	r2, [pc, #44]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 800165c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e025      	b.n	80016b0 <HAL_RCC_OscConfig+0x298>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800166c:	d114      	bne.n	8001698 <HAL_RCC_OscConfig+0x280>
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a05      	ldr	r2, [pc, #20]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 8001674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	4b03      	ldr	r3, [pc, #12]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a02      	ldr	r2, [pc, #8]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 8001680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e013      	b.n	80016b0 <HAL_RCC_OscConfig+0x298>
 8001688:	40021000 	.word	0x40021000
 800168c:	08006ebc 	.word	0x08006ebc
 8001690:	20000000 	.word	0x20000000
 8001694:	20000004 	.word	0x20000004
 8001698:	4ba0      	ldr	r3, [pc, #640]	; (800191c <HAL_RCC_OscConfig+0x504>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a9f      	ldr	r2, [pc, #636]	; (800191c <HAL_RCC_OscConfig+0x504>)
 800169e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	4b9d      	ldr	r3, [pc, #628]	; (800191c <HAL_RCC_OscConfig+0x504>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a9c      	ldr	r2, [pc, #624]	; (800191c <HAL_RCC_OscConfig+0x504>)
 80016aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d013      	beq.n	80016e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b8:	f7ff fb0c 	bl	8000cd4 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c0:	f7ff fb08 	bl	8000cd4 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b64      	cmp	r3, #100	; 0x64
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e2ae      	b.n	8001c30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016d2:	4b92      	ldr	r3, [pc, #584]	; (800191c <HAL_RCC_OscConfig+0x504>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x2a8>
 80016de:	e014      	b.n	800170a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e0:	f7ff faf8 	bl	8000cd4 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e8:	f7ff faf4 	bl	8000cd4 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b64      	cmp	r3, #100	; 0x64
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e29a      	b.n	8001c30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016fa:	4b88      	ldr	r3, [pc, #544]	; (800191c <HAL_RCC_OscConfig+0x504>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x2d0>
 8001706:	e000      	b.n	800170a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d060      	beq.n	80017d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	2b04      	cmp	r3, #4
 800171a:	d005      	beq.n	8001728 <HAL_RCC_OscConfig+0x310>
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	2b0c      	cmp	r3, #12
 8001720:	d119      	bne.n	8001756 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	2b02      	cmp	r3, #2
 8001726:	d116      	bne.n	8001756 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001728:	4b7c      	ldr	r3, [pc, #496]	; (800191c <HAL_RCC_OscConfig+0x504>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_RCC_OscConfig+0x328>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e277      	b.n	8001c30 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001740:	4b76      	ldr	r3, [pc, #472]	; (800191c <HAL_RCC_OscConfig+0x504>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	061b      	lsls	r3, r3, #24
 800174e:	4973      	ldr	r1, [pc, #460]	; (800191c <HAL_RCC_OscConfig+0x504>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001754:	e040      	b.n	80017d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d023      	beq.n	80017a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800175e:	4b6f      	ldr	r3, [pc, #444]	; (800191c <HAL_RCC_OscConfig+0x504>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a6e      	ldr	r2, [pc, #440]	; (800191c <HAL_RCC_OscConfig+0x504>)
 8001764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176a:	f7ff fab3 	bl	8000cd4 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001772:	f7ff faaf 	bl	8000cd4 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e255      	b.n	8001c30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001784:	4b65      	ldr	r3, [pc, #404]	; (800191c <HAL_RCC_OscConfig+0x504>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0f0      	beq.n	8001772 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001790:	4b62      	ldr	r3, [pc, #392]	; (800191c <HAL_RCC_OscConfig+0x504>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	061b      	lsls	r3, r3, #24
 800179e:	495f      	ldr	r1, [pc, #380]	; (800191c <HAL_RCC_OscConfig+0x504>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]
 80017a4:	e018      	b.n	80017d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017a6:	4b5d      	ldr	r3, [pc, #372]	; (800191c <HAL_RCC_OscConfig+0x504>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a5c      	ldr	r2, [pc, #368]	; (800191c <HAL_RCC_OscConfig+0x504>)
 80017ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b2:	f7ff fa8f 	bl	8000cd4 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ba:	f7ff fa8b 	bl	8000cd4 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e231      	b.n	8001c30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017cc:	4b53      	ldr	r3, [pc, #332]	; (800191c <HAL_RCC_OscConfig+0x504>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f0      	bne.n	80017ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d03c      	beq.n	800185e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d01c      	beq.n	8001826 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ec:	4b4b      	ldr	r3, [pc, #300]	; (800191c <HAL_RCC_OscConfig+0x504>)
 80017ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f2:	4a4a      	ldr	r2, [pc, #296]	; (800191c <HAL_RCC_OscConfig+0x504>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fc:	f7ff fa6a 	bl	8000cd4 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001804:	f7ff fa66 	bl	8000cd4 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e20c      	b.n	8001c30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001816:	4b41      	ldr	r3, [pc, #260]	; (800191c <HAL_RCC_OscConfig+0x504>)
 8001818:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0ef      	beq.n	8001804 <HAL_RCC_OscConfig+0x3ec>
 8001824:	e01b      	b.n	800185e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001826:	4b3d      	ldr	r3, [pc, #244]	; (800191c <HAL_RCC_OscConfig+0x504>)
 8001828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800182c:	4a3b      	ldr	r2, [pc, #236]	; (800191c <HAL_RCC_OscConfig+0x504>)
 800182e:	f023 0301 	bic.w	r3, r3, #1
 8001832:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001836:	f7ff fa4d 	bl	8000cd4 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800183e:	f7ff fa49 	bl	8000cd4 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e1ef      	b.n	8001c30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001850:	4b32      	ldr	r3, [pc, #200]	; (800191c <HAL_RCC_OscConfig+0x504>)
 8001852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1ef      	bne.n	800183e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 80a6 	beq.w	80019b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800186c:	2300      	movs	r3, #0
 800186e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001870:	4b2a      	ldr	r3, [pc, #168]	; (800191c <HAL_RCC_OscConfig+0x504>)
 8001872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10d      	bne.n	8001898 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800187c:	4b27      	ldr	r3, [pc, #156]	; (800191c <HAL_RCC_OscConfig+0x504>)
 800187e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001880:	4a26      	ldr	r2, [pc, #152]	; (800191c <HAL_RCC_OscConfig+0x504>)
 8001882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001886:	6593      	str	r3, [r2, #88]	; 0x58
 8001888:	4b24      	ldr	r3, [pc, #144]	; (800191c <HAL_RCC_OscConfig+0x504>)
 800188a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001894:	2301      	movs	r3, #1
 8001896:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001898:	4b21      	ldr	r3, [pc, #132]	; (8001920 <HAL_RCC_OscConfig+0x508>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d118      	bne.n	80018d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018a4:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <HAL_RCC_OscConfig+0x508>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a1d      	ldr	r2, [pc, #116]	; (8001920 <HAL_RCC_OscConfig+0x508>)
 80018aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018b0:	f7ff fa10 	bl	8000cd4 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b8:	f7ff fa0c 	bl	8000cd4 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e1b2      	b.n	8001c30 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_RCC_OscConfig+0x508>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d108      	bne.n	80018f0 <HAL_RCC_OscConfig+0x4d8>
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <HAL_RCC_OscConfig+0x504>)
 80018e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e4:	4a0d      	ldr	r2, [pc, #52]	; (800191c <HAL_RCC_OscConfig+0x504>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018ee:	e029      	b.n	8001944 <HAL_RCC_OscConfig+0x52c>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b05      	cmp	r3, #5
 80018f6:	d115      	bne.n	8001924 <HAL_RCC_OscConfig+0x50c>
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <HAL_RCC_OscConfig+0x504>)
 80018fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fe:	4a07      	ldr	r2, [pc, #28]	; (800191c <HAL_RCC_OscConfig+0x504>)
 8001900:	f043 0304 	orr.w	r3, r3, #4
 8001904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <HAL_RCC_OscConfig+0x504>)
 800190a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190e:	4a03      	ldr	r2, [pc, #12]	; (800191c <HAL_RCC_OscConfig+0x504>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001918:	e014      	b.n	8001944 <HAL_RCC_OscConfig+0x52c>
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000
 8001920:	40007000 	.word	0x40007000
 8001924:	4b9a      	ldr	r3, [pc, #616]	; (8001b90 <HAL_RCC_OscConfig+0x778>)
 8001926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192a:	4a99      	ldr	r2, [pc, #612]	; (8001b90 <HAL_RCC_OscConfig+0x778>)
 800192c:	f023 0301 	bic.w	r3, r3, #1
 8001930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001934:	4b96      	ldr	r3, [pc, #600]	; (8001b90 <HAL_RCC_OscConfig+0x778>)
 8001936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800193a:	4a95      	ldr	r2, [pc, #596]	; (8001b90 <HAL_RCC_OscConfig+0x778>)
 800193c:	f023 0304 	bic.w	r3, r3, #4
 8001940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d016      	beq.n	800197a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194c:	f7ff f9c2 	bl	8000cd4 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001952:	e00a      	b.n	800196a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001954:	f7ff f9be 	bl	8000cd4 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001962:	4293      	cmp	r3, r2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e162      	b.n	8001c30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800196a:	4b89      	ldr	r3, [pc, #548]	; (8001b90 <HAL_RCC_OscConfig+0x778>)
 800196c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0ed      	beq.n	8001954 <HAL_RCC_OscConfig+0x53c>
 8001978:	e015      	b.n	80019a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197a:	f7ff f9ab 	bl	8000cd4 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001980:	e00a      	b.n	8001998 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001982:	f7ff f9a7 	bl	8000cd4 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001990:	4293      	cmp	r3, r2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e14b      	b.n	8001c30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001998:	4b7d      	ldr	r3, [pc, #500]	; (8001b90 <HAL_RCC_OscConfig+0x778>)
 800199a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1ed      	bne.n	8001982 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019a6:	7ffb      	ldrb	r3, [r7, #31]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d105      	bne.n	80019b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ac:	4b78      	ldr	r3, [pc, #480]	; (8001b90 <HAL_RCC_OscConfig+0x778>)
 80019ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b0:	4a77      	ldr	r2, [pc, #476]	; (8001b90 <HAL_RCC_OscConfig+0x778>)
 80019b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0320 	and.w	r3, r3, #32
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d03c      	beq.n	8001a3e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d01c      	beq.n	8001a06 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019cc:	4b70      	ldr	r3, [pc, #448]	; (8001b90 <HAL_RCC_OscConfig+0x778>)
 80019ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019d2:	4a6f      	ldr	r2, [pc, #444]	; (8001b90 <HAL_RCC_OscConfig+0x778>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019dc:	f7ff f97a 	bl	8000cd4 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019e4:	f7ff f976 	bl	8000cd4 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e11c      	b.n	8001c30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019f6:	4b66      	ldr	r3, [pc, #408]	; (8001b90 <HAL_RCC_OscConfig+0x778>)
 80019f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0ef      	beq.n	80019e4 <HAL_RCC_OscConfig+0x5cc>
 8001a04:	e01b      	b.n	8001a3e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a06:	4b62      	ldr	r3, [pc, #392]	; (8001b90 <HAL_RCC_OscConfig+0x778>)
 8001a08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a0c:	4a60      	ldr	r2, [pc, #384]	; (8001b90 <HAL_RCC_OscConfig+0x778>)
 8001a0e:	f023 0301 	bic.w	r3, r3, #1
 8001a12:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a16:	f7ff f95d 	bl	8000cd4 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a1e:	f7ff f959 	bl	8000cd4 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e0ff      	b.n	8001c30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a30:	4b57      	ldr	r3, [pc, #348]	; (8001b90 <HAL_RCC_OscConfig+0x778>)
 8001a32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1ef      	bne.n	8001a1e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 80f3 	beq.w	8001c2e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	f040 80c9 	bne.w	8001be4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a52:	4b4f      	ldr	r3, [pc, #316]	; (8001b90 <HAL_RCC_OscConfig+0x778>)
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f003 0203 	and.w	r2, r3, #3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d12c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a70:	3b01      	subs	r3, #1
 8001a72:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d123      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a82:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d11b      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a92:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d113      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa2:	085b      	lsrs	r3, r3, #1
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d109      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	085b      	lsrs	r3, r3, #1
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d06b      	beq.n	8001b98 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	2b0c      	cmp	r3, #12
 8001ac4:	d062      	beq.n	8001b8c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ac6:	4b32      	ldr	r3, [pc, #200]	; (8001b90 <HAL_RCC_OscConfig+0x778>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e0ac      	b.n	8001c30 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ad6:	4b2e      	ldr	r3, [pc, #184]	; (8001b90 <HAL_RCC_OscConfig+0x778>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a2d      	ldr	r2, [pc, #180]	; (8001b90 <HAL_RCC_OscConfig+0x778>)
 8001adc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ae0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ae2:	f7ff f8f7 	bl	8000cd4 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aea:	f7ff f8f3 	bl	8000cd4 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e099      	b.n	8001c30 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001afc:	4b24      	ldr	r3, [pc, #144]	; (8001b90 <HAL_RCC_OscConfig+0x778>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1f0      	bne.n	8001aea <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b08:	4b21      	ldr	r3, [pc, #132]	; (8001b90 <HAL_RCC_OscConfig+0x778>)
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <HAL_RCC_OscConfig+0x77c>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b18:	3a01      	subs	r2, #1
 8001b1a:	0112      	lsls	r2, r2, #4
 8001b1c:	4311      	orrs	r1, r2
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b22:	0212      	lsls	r2, r2, #8
 8001b24:	4311      	orrs	r1, r2
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b2a:	0852      	lsrs	r2, r2, #1
 8001b2c:	3a01      	subs	r2, #1
 8001b2e:	0552      	lsls	r2, r2, #21
 8001b30:	4311      	orrs	r1, r2
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b36:	0852      	lsrs	r2, r2, #1
 8001b38:	3a01      	subs	r2, #1
 8001b3a:	0652      	lsls	r2, r2, #25
 8001b3c:	4311      	orrs	r1, r2
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b42:	06d2      	lsls	r2, r2, #27
 8001b44:	430a      	orrs	r2, r1
 8001b46:	4912      	ldr	r1, [pc, #72]	; (8001b90 <HAL_RCC_OscConfig+0x778>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b4c:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <HAL_RCC_OscConfig+0x778>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a0f      	ldr	r2, [pc, #60]	; (8001b90 <HAL_RCC_OscConfig+0x778>)
 8001b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b58:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <HAL_RCC_OscConfig+0x778>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	4a0c      	ldr	r2, [pc, #48]	; (8001b90 <HAL_RCC_OscConfig+0x778>)
 8001b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b64:	f7ff f8b6 	bl	8000cd4 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7ff f8b2 	bl	8000cd4 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e058      	b.n	8001c30 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b7e:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <HAL_RCC_OscConfig+0x778>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b8a:	e050      	b.n	8001c2e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e04f      	b.n	8001c30 <HAL_RCC_OscConfig+0x818>
 8001b90:	40021000 	.word	0x40021000
 8001b94:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b98:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <HAL_RCC_OscConfig+0x820>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d144      	bne.n	8001c2e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ba4:	4b24      	ldr	r3, [pc, #144]	; (8001c38 <HAL_RCC_OscConfig+0x820>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a23      	ldr	r2, [pc, #140]	; (8001c38 <HAL_RCC_OscConfig+0x820>)
 8001baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bb0:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <HAL_RCC_OscConfig+0x820>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	4a20      	ldr	r2, [pc, #128]	; (8001c38 <HAL_RCC_OscConfig+0x820>)
 8001bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bbc:	f7ff f88a 	bl	8000cd4 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc4:	f7ff f886 	bl	8000cd4 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e02c      	b.n	8001c30 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd6:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <HAL_RCC_OscConfig+0x820>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x7ac>
 8001be2:	e024      	b.n	8001c2e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	2b0c      	cmp	r3, #12
 8001be8:	d01f      	beq.n	8001c2a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bea:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <HAL_RCC_OscConfig+0x820>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <HAL_RCC_OscConfig+0x820>)
 8001bf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf6:	f7ff f86d 	bl	8000cd4 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfe:	f7ff f869 	bl	8000cd4 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e00f      	b.n	8001c30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_RCC_OscConfig+0x820>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f0      	bne.n	8001bfe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_RCC_OscConfig+0x820>)
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	4905      	ldr	r1, [pc, #20]	; (8001c38 <HAL_RCC_OscConfig+0x820>)
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_RCC_OscConfig+0x824>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	60cb      	str	r3, [r1, #12]
 8001c28:	e001      	b.n	8001c2e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3720      	adds	r7, #32
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	feeefffc 	.word	0xfeeefffc

08001c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0e7      	b.n	8001e24 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c54:	4b75      	ldr	r3, [pc, #468]	; (8001e2c <HAL_RCC_ClockConfig+0x1ec>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d910      	bls.n	8001c84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c62:	4b72      	ldr	r3, [pc, #456]	; (8001e2c <HAL_RCC_ClockConfig+0x1ec>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f023 0207 	bic.w	r2, r3, #7
 8001c6a:	4970      	ldr	r1, [pc, #448]	; (8001e2c <HAL_RCC_ClockConfig+0x1ec>)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c72:	4b6e      	ldr	r3, [pc, #440]	; (8001e2c <HAL_RCC_ClockConfig+0x1ec>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0cf      	b.n	8001e24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d010      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	4b66      	ldr	r3, [pc, #408]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d908      	bls.n	8001cb2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca0:	4b63      	ldr	r3, [pc, #396]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	4960      	ldr	r1, [pc, #384]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d04c      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d107      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cc6:	4b5a      	ldr	r3, [pc, #360]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d121      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e0a6      	b.n	8001e24 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d107      	bne.n	8001cee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cde:	4b54      	ldr	r3, [pc, #336]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d115      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e09a      	b.n	8001e24 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d107      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cf6:	4b4e      	ldr	r3, [pc, #312]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d109      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e08e      	b.n	8001e24 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d06:	4b4a      	ldr	r3, [pc, #296]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e086      	b.n	8001e24 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d16:	4b46      	ldr	r3, [pc, #280]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f023 0203 	bic.w	r2, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	4943      	ldr	r1, [pc, #268]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d28:	f7fe ffd4 	bl	8000cd4 <HAL_GetTick>
 8001d2c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2e:	e00a      	b.n	8001d46 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d30:	f7fe ffd0 	bl	8000cd4 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e06e      	b.n	8001e24 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d46:	4b3a      	ldr	r3, [pc, #232]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 020c 	and.w	r2, r3, #12
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d1eb      	bne.n	8001d30 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d010      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	4b31      	ldr	r3, [pc, #196]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d208      	bcs.n	8001d86 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d74:	4b2e      	ldr	r3, [pc, #184]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	492b      	ldr	r1, [pc, #172]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d86:	4b29      	ldr	r3, [pc, #164]	; (8001e2c <HAL_RCC_ClockConfig+0x1ec>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d210      	bcs.n	8001db6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d94:	4b25      	ldr	r3, [pc, #148]	; (8001e2c <HAL_RCC_ClockConfig+0x1ec>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f023 0207 	bic.w	r2, r3, #7
 8001d9c:	4923      	ldr	r1, [pc, #140]	; (8001e2c <HAL_RCC_ClockConfig+0x1ec>)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da4:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <HAL_RCC_ClockConfig+0x1ec>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d001      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e036      	b.n	8001e24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d008      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc2:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	4918      	ldr	r1, [pc, #96]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d009      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001de0:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4910      	ldr	r1, [pc, #64]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001df4:	f000 f824 	bl	8001e40 <HAL_RCC_GetSysClockFreq>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	091b      	lsrs	r3, r3, #4
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	490b      	ldr	r1, [pc, #44]	; (8001e34 <HAL_RCC_ClockConfig+0x1f4>)
 8001e06:	5ccb      	ldrb	r3, [r1, r3]
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e10:	4a09      	ldr	r2, [pc, #36]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001e12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e14:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <HAL_RCC_ClockConfig+0x1fc>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe ff0b 	bl	8000c34 <HAL_InitTick>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e22:	7afb      	ldrb	r3, [r7, #11]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40022000 	.word	0x40022000
 8001e30:	40021000 	.word	0x40021000
 8001e34:	08006ebc 	.word	0x08006ebc
 8001e38:	20000000 	.word	0x20000000
 8001e3c:	20000004 	.word	0x20000004

08001e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b089      	sub	sp, #36	; 0x24
 8001e44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e4e:	4b3e      	ldr	r3, [pc, #248]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 030c 	and.w	r3, r3, #12
 8001e56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e58:	4b3b      	ldr	r3, [pc, #236]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <HAL_RCC_GetSysClockFreq+0x34>
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	2b0c      	cmp	r3, #12
 8001e6c:	d121      	bne.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d11e      	bne.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e74:	4b34      	ldr	r3, [pc, #208]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d107      	bne.n	8001e90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e80:	4b31      	ldr	r3, [pc, #196]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e86:	0a1b      	lsrs	r3, r3, #8
 8001e88:	f003 030f 	and.w	r3, r3, #15
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	e005      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e90:	4b2d      	ldr	r3, [pc, #180]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	091b      	lsrs	r3, r3, #4
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e9c:	4a2b      	ldr	r2, [pc, #172]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10d      	bne.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eb0:	e00a      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d102      	bne.n	8001ebe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001eb8:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x110>)
 8001eba:	61bb      	str	r3, [r7, #24]
 8001ebc:	e004      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ec4:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ec6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	2b0c      	cmp	r3, #12
 8001ecc:	d134      	bne.n	8001f38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ece:	4b1e      	ldr	r3, [pc, #120]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d003      	beq.n	8001ee6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d003      	beq.n	8001eec <HAL_RCC_GetSysClockFreq+0xac>
 8001ee4:	e005      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ee6:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ee8:	617b      	str	r3, [r7, #20]
      break;
 8001eea:	e005      	b.n	8001ef8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001eec:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x114>)
 8001eee:	617b      	str	r3, [r7, #20]
      break;
 8001ef0:	e002      	b.n	8001ef8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	617b      	str	r3, [r7, #20]
      break;
 8001ef6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ef8:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	3301      	adds	r3, #1
 8001f04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f06:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	0a1b      	lsrs	r3, r3, #8
 8001f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	fb03 f202 	mul.w	r2, r3, r2
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f1e:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	0e5b      	lsrs	r3, r3, #25
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	3301      	adds	r3, #1
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f38:	69bb      	ldr	r3, [r7, #24]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3724      	adds	r7, #36	; 0x24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	08006ed4 	.word	0x08006ed4
 8001f50:	00f42400 	.word	0x00f42400
 8001f54:	016e3600 	.word	0x016e3600

08001f58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f5c:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	20000000 	.word	0x20000000

08001f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f74:	f7ff fff0 	bl	8001f58 <HAL_RCC_GetHCLKFreq>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	0a1b      	lsrs	r3, r3, #8
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	4904      	ldr	r1, [pc, #16]	; (8001f98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f86:	5ccb      	ldrb	r3, [r1, r3]
 8001f88:	f003 031f 	and.w	r3, r3, #31
 8001f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40021000 	.word	0x40021000
 8001f98:	08006ecc 	.word	0x08006ecc

08001f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fa0:	f7ff ffda 	bl	8001f58 <HAL_RCC_GetHCLKFreq>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	0adb      	lsrs	r3, r3, #11
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	4904      	ldr	r1, [pc, #16]	; (8001fc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fb2:	5ccb      	ldrb	r3, [r1, r3]
 8001fb4:	f003 031f 	and.w	r3, r3, #31
 8001fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	08006ecc 	.word	0x08006ecc

08001fc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fd4:	4b2a      	ldr	r3, [pc, #168]	; (8002080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fe0:	f7ff f9b6 	bl	8001350 <HAL_PWREx_GetVoltageRange>
 8001fe4:	6178      	str	r0, [r7, #20]
 8001fe6:	e014      	b.n	8002012 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fe8:	4b25      	ldr	r3, [pc, #148]	; (8002080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fec:	4a24      	ldr	r2, [pc, #144]	; (8002080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ff4:	4b22      	ldr	r3, [pc, #136]	; (8002080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002000:	f7ff f9a6 	bl	8001350 <HAL_PWREx_GetVoltageRange>
 8002004:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002006:	4b1e      	ldr	r3, [pc, #120]	; (8002080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200a:	4a1d      	ldr	r2, [pc, #116]	; (8002080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800200c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002010:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002018:	d10b      	bne.n	8002032 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b80      	cmp	r3, #128	; 0x80
 800201e:	d919      	bls.n	8002054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2ba0      	cmp	r3, #160	; 0xa0
 8002024:	d902      	bls.n	800202c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002026:	2302      	movs	r3, #2
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	e013      	b.n	8002054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800202c:	2301      	movs	r3, #1
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	e010      	b.n	8002054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b80      	cmp	r3, #128	; 0x80
 8002036:	d902      	bls.n	800203e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002038:	2303      	movs	r3, #3
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	e00a      	b.n	8002054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b80      	cmp	r3, #128	; 0x80
 8002042:	d102      	bne.n	800204a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002044:	2302      	movs	r3, #2
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	e004      	b.n	8002054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b70      	cmp	r3, #112	; 0x70
 800204e:	d101      	bne.n	8002054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002050:	2301      	movs	r3, #1
 8002052:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002054:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f023 0207 	bic.w	r2, r3, #7
 800205c:	4909      	ldr	r1, [pc, #36]	; (8002084 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002064:	4b07      	ldr	r3, [pc, #28]	; (8002084 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	429a      	cmp	r2, r3
 8002070:	d001      	beq.n	8002076 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000
 8002084:	40022000 	.word	0x40022000

08002088 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002090:	2300      	movs	r3, #0
 8002092:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002094:	2300      	movs	r3, #0
 8002096:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d031      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020ac:	d01a      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80020ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020b2:	d814      	bhi.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d009      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80020b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020bc:	d10f      	bne.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80020be:	4b5d      	ldr	r3, [pc, #372]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	4a5c      	ldr	r2, [pc, #368]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020ca:	e00c      	b.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3304      	adds	r3, #4
 80020d0:	2100      	movs	r1, #0
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 f9ce 	bl	8002474 <RCCEx_PLLSAI1_Config>
 80020d8:	4603      	mov	r3, r0
 80020da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020dc:	e003      	b.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	74fb      	strb	r3, [r7, #19]
      break;
 80020e2:	e000      	b.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80020e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020e6:	7cfb      	ldrb	r3, [r7, #19]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10b      	bne.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020ec:	4b51      	ldr	r3, [pc, #324]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fa:	494e      	ldr	r1, [pc, #312]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002102:	e001      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002104:	7cfb      	ldrb	r3, [r7, #19]
 8002106:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 809e 	beq.w	8002252 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002116:	2300      	movs	r3, #0
 8002118:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800211a:	4b46      	ldr	r3, [pc, #280]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800211c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800212a:	2300      	movs	r3, #0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00d      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002130:	4b40      	ldr	r3, [pc, #256]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002134:	4a3f      	ldr	r2, [pc, #252]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213a:	6593      	str	r3, [r2, #88]	; 0x58
 800213c:	4b3d      	ldr	r3, [pc, #244]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800213e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002148:	2301      	movs	r3, #1
 800214a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800214c:	4b3a      	ldr	r3, [pc, #232]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a39      	ldr	r2, [pc, #228]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002156:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002158:	f7fe fdbc 	bl	8000cd4 <HAL_GetTick>
 800215c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800215e:	e009      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002160:	f7fe fdb8 	bl	8000cd4 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d902      	bls.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	74fb      	strb	r3, [r7, #19]
        break;
 8002172:	e005      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002174:	4b30      	ldr	r3, [pc, #192]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0ef      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002180:	7cfb      	ldrb	r3, [r7, #19]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d15a      	bne.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002186:	4b2b      	ldr	r3, [pc, #172]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002190:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d01e      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d019      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021a2:	4b24      	ldr	r3, [pc, #144]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021ae:	4b21      	ldr	r3, [pc, #132]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b4:	4a1f      	ldr	r2, [pc, #124]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021be:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c4:	4a1b      	ldr	r2, [pc, #108]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021ce:	4a19      	ldr	r2, [pc, #100]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d016      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7fe fd78 	bl	8000cd4 <HAL_GetTick>
 80021e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021e6:	e00b      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e8:	f7fe fd74 	bl	8000cd4 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d902      	bls.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	74fb      	strb	r3, [r7, #19]
            break;
 80021fe:	e006      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002200:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0ec      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800220e:	7cfb      	ldrb	r3, [r7, #19]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10b      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002214:	4b07      	ldr	r3, [pc, #28]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002222:	4904      	ldr	r1, [pc, #16]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800222a:	e009      	b.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800222c:	7cfb      	ldrb	r3, [r7, #19]
 800222e:	74bb      	strb	r3, [r7, #18]
 8002230:	e006      	b.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000
 8002238:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800223c:	7cfb      	ldrb	r3, [r7, #19]
 800223e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002240:	7c7b      	ldrb	r3, [r7, #17]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d105      	bne.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002246:	4b8a      	ldr	r3, [pc, #552]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224a:	4a89      	ldr	r2, [pc, #548]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800224c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002250:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00a      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800225e:	4b84      	ldr	r3, [pc, #528]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002264:	f023 0203 	bic.w	r2, r3, #3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4980      	ldr	r1, [pc, #512]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800226e:	4313      	orrs	r3, r2
 8002270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00a      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002280:	4b7b      	ldr	r3, [pc, #492]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002286:	f023 020c 	bic.w	r2, r3, #12
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	4978      	ldr	r1, [pc, #480]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002290:	4313      	orrs	r3, r2
 8002292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0320 	and.w	r3, r3, #32
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00a      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022a2:	4b73      	ldr	r3, [pc, #460]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b0:	496f      	ldr	r1, [pc, #444]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00a      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022c4:	4b6a      	ldr	r3, [pc, #424]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d2:	4967      	ldr	r1, [pc, #412]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00a      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022e6:	4b62      	ldr	r3, [pc, #392]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f4:	495e      	ldr	r1, [pc, #376]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00a      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002308:	4b59      	ldr	r3, [pc, #356]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002316:	4956      	ldr	r1, [pc, #344]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002318:	4313      	orrs	r3, r2
 800231a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00a      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800232a:	4b51      	ldr	r3, [pc, #324]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800232c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002330:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	494d      	ldr	r1, [pc, #308]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800233a:	4313      	orrs	r3, r2
 800233c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d028      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800234c:	4b48      	ldr	r3, [pc, #288]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800234e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002352:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	4945      	ldr	r1, [pc, #276]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800235c:	4313      	orrs	r3, r2
 800235e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800236a:	d106      	bne.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800236c:	4b40      	ldr	r3, [pc, #256]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	4a3f      	ldr	r2, [pc, #252]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002372:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002376:	60d3      	str	r3, [r2, #12]
 8002378:	e011      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002382:	d10c      	bne.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3304      	adds	r3, #4
 8002388:	2101      	movs	r1, #1
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f872 	bl	8002474 <RCCEx_PLLSAI1_Config>
 8002390:	4603      	mov	r3, r0
 8002392:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002394:	7cfb      	ldrb	r3, [r7, #19]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800239a:	7cfb      	ldrb	r3, [r7, #19]
 800239c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d028      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023aa:	4b31      	ldr	r3, [pc, #196]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b8:	492d      	ldr	r1, [pc, #180]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023c8:	d106      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ca:	4b29      	ldr	r3, [pc, #164]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	4a28      	ldr	r2, [pc, #160]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023d4:	60d3      	str	r3, [r2, #12]
 80023d6:	e011      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023e0:	d10c      	bne.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3304      	adds	r3, #4
 80023e6:	2101      	movs	r1, #1
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 f843 	bl	8002474 <RCCEx_PLLSAI1_Config>
 80023ee:	4603      	mov	r3, r0
 80023f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023f2:	7cfb      	ldrb	r3, [r7, #19]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80023f8:	7cfb      	ldrb	r3, [r7, #19]
 80023fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d01c      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002408:	4b19      	ldr	r3, [pc, #100]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800240a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002416:	4916      	ldr	r1, [pc, #88]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002422:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002426:	d10c      	bne.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3304      	adds	r3, #4
 800242c:	2102      	movs	r1, #2
 800242e:	4618      	mov	r0, r3
 8002430:	f000 f820 	bl	8002474 <RCCEx_PLLSAI1_Config>
 8002434:	4603      	mov	r3, r0
 8002436:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002438:	7cfb      	ldrb	r3, [r7, #19]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800243e:	7cfb      	ldrb	r3, [r7, #19]
 8002440:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00a      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800244e:	4b08      	ldr	r3, [pc, #32]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002454:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245c:	4904      	ldr	r1, [pc, #16]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002464:	7cbb      	ldrb	r3, [r7, #18]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40021000 	.word	0x40021000

08002474 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002482:	4b74      	ldr	r3, [pc, #464]	; (8002654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d018      	beq.n	80024c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800248e:	4b71      	ldr	r3, [pc, #452]	; (8002654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	f003 0203 	and.w	r2, r3, #3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d10d      	bne.n	80024ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
       ||
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d009      	beq.n	80024ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024a6:	4b6b      	ldr	r3, [pc, #428]	; (8002654 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	091b      	lsrs	r3, r3, #4
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
       ||
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d047      	beq.n	800254a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	73fb      	strb	r3, [r7, #15]
 80024be:	e044      	b.n	800254a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d018      	beq.n	80024fa <RCCEx_PLLSAI1_Config+0x86>
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d825      	bhi.n	8002518 <RCCEx_PLLSAI1_Config+0xa4>
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d002      	beq.n	80024d6 <RCCEx_PLLSAI1_Config+0x62>
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d009      	beq.n	80024e8 <RCCEx_PLLSAI1_Config+0x74>
 80024d4:	e020      	b.n	8002518 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024d6:	4b5f      	ldr	r3, [pc, #380]	; (8002654 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d11d      	bne.n	800251e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024e6:	e01a      	b.n	800251e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024e8:	4b5a      	ldr	r3, [pc, #360]	; (8002654 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d116      	bne.n	8002522 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024f8:	e013      	b.n	8002522 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024fa:	4b56      	ldr	r3, [pc, #344]	; (8002654 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10f      	bne.n	8002526 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002506:	4b53      	ldr	r3, [pc, #332]	; (8002654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d109      	bne.n	8002526 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002516:	e006      	b.n	8002526 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	73fb      	strb	r3, [r7, #15]
      break;
 800251c:	e004      	b.n	8002528 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800251e:	bf00      	nop
 8002520:	e002      	b.n	8002528 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002522:	bf00      	nop
 8002524:	e000      	b.n	8002528 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002526:	bf00      	nop
    }

    if(status == HAL_OK)
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10d      	bne.n	800254a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800252e:	4b49      	ldr	r3, [pc, #292]	; (8002654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6819      	ldr	r1, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	3b01      	subs	r3, #1
 8002540:	011b      	lsls	r3, r3, #4
 8002542:	430b      	orrs	r3, r1
 8002544:	4943      	ldr	r1, [pc, #268]	; (8002654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002546:	4313      	orrs	r3, r2
 8002548:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d17c      	bne.n	800264a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002550:	4b40      	ldr	r3, [pc, #256]	; (8002654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a3f      	ldr	r2, [pc, #252]	; (8002654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002556:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800255a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800255c:	f7fe fbba 	bl	8000cd4 <HAL_GetTick>
 8002560:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002562:	e009      	b.n	8002578 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002564:	f7fe fbb6 	bl	8000cd4 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d902      	bls.n	8002578 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	73fb      	strb	r3, [r7, #15]
        break;
 8002576:	e005      	b.n	8002584 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002578:	4b36      	ldr	r3, [pc, #216]	; (8002654 <RCCEx_PLLSAI1_Config+0x1e0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1ef      	bne.n	8002564 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d15f      	bne.n	800264a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d110      	bne.n	80025b2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002590:	4b30      	ldr	r3, [pc, #192]	; (8002654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002598:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6892      	ldr	r2, [r2, #8]
 80025a0:	0211      	lsls	r1, r2, #8
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68d2      	ldr	r2, [r2, #12]
 80025a6:	06d2      	lsls	r2, r2, #27
 80025a8:	430a      	orrs	r2, r1
 80025aa:	492a      	ldr	r1, [pc, #168]	; (8002654 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	610b      	str	r3, [r1, #16]
 80025b0:	e027      	b.n	8002602 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d112      	bne.n	80025de <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025b8:	4b26      	ldr	r3, [pc, #152]	; (8002654 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80025c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6892      	ldr	r2, [r2, #8]
 80025c8:	0211      	lsls	r1, r2, #8
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6912      	ldr	r2, [r2, #16]
 80025ce:	0852      	lsrs	r2, r2, #1
 80025d0:	3a01      	subs	r2, #1
 80025d2:	0552      	lsls	r2, r2, #21
 80025d4:	430a      	orrs	r2, r1
 80025d6:	491f      	ldr	r1, [pc, #124]	; (8002654 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	610b      	str	r3, [r1, #16]
 80025dc:	e011      	b.n	8002602 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025de:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80025e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6892      	ldr	r2, [r2, #8]
 80025ee:	0211      	lsls	r1, r2, #8
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6952      	ldr	r2, [r2, #20]
 80025f4:	0852      	lsrs	r2, r2, #1
 80025f6:	3a01      	subs	r2, #1
 80025f8:	0652      	lsls	r2, r2, #25
 80025fa:	430a      	orrs	r2, r1
 80025fc:	4915      	ldr	r1, [pc, #84]	; (8002654 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002602:	4b14      	ldr	r3, [pc, #80]	; (8002654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a13      	ldr	r2, [pc, #76]	; (8002654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002608:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800260c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260e:	f7fe fb61 	bl	8000cd4 <HAL_GetTick>
 8002612:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002614:	e009      	b.n	800262a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002616:	f7fe fb5d 	bl	8000cd4 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d902      	bls.n	800262a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	73fb      	strb	r3, [r7, #15]
          break;
 8002628:	e005      	b.n	8002636 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800262a:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <RCCEx_PLLSAI1_Config+0x1e0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0ef      	beq.n	8002616 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002636:	7bfb      	ldrb	r3, [r7, #15]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d106      	bne.n	800264a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800263c:	4b05      	ldr	r3, [pc, #20]	; (8002654 <RCCEx_PLLSAI1_Config+0x1e0>)
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	4903      	ldr	r1, [pc, #12]	; (8002654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002646:	4313      	orrs	r3, r2
 8002648:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800264a:	7bfb      	ldrb	r3, [r7, #15]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40021000 	.word	0x40021000

08002658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e049      	b.n	80026fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d106      	bne.n	8002684 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7fe f934 	bl	80008ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2202      	movs	r2, #2
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3304      	adds	r3, #4
 8002694:	4619      	mov	r1, r3
 8002696:	4610      	mov	r0, r2
 8002698:	f000 faca 	bl	8002c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b01      	cmp	r3, #1
 800271a:	d001      	beq.n	8002720 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e03b      	b.n	8002798 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0201 	orr.w	r2, r2, #1
 8002736:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a19      	ldr	r2, [pc, #100]	; (80027a4 <HAL_TIM_Base_Start_IT+0x9c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d009      	beq.n	8002756 <HAL_TIM_Base_Start_IT+0x4e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800274a:	d004      	beq.n	8002756 <HAL_TIM_Base_Start_IT+0x4e>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a15      	ldr	r2, [pc, #84]	; (80027a8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d115      	bne.n	8002782 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	4b13      	ldr	r3, [pc, #76]	; (80027ac <HAL_TIM_Base_Start_IT+0xa4>)
 800275e:	4013      	ands	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2b06      	cmp	r3, #6
 8002766:	d015      	beq.n	8002794 <HAL_TIM_Base_Start_IT+0x8c>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800276e:	d011      	beq.n	8002794 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0201 	orr.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002780:	e008      	b.n	8002794 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f042 0201 	orr.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	e000      	b.n	8002796 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002794:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	40012c00 	.word	0x40012c00
 80027a8:	40014000 	.word	0x40014000
 80027ac:	00010007 	.word	0x00010007

080027b0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0201 	bic.w	r2, r2, #1
 80027c6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6a1a      	ldr	r2, [r3, #32]
 80027ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10f      	bne.n	80027f8 <HAL_TIM_Base_Stop_IT+0x48>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6a1a      	ldr	r2, [r3, #32]
 80027de:	f240 4344 	movw	r3, #1092	; 0x444
 80027e2:	4013      	ands	r3, r2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d107      	bne.n	80027f8 <HAL_TIM_Base_Stop_IT+0x48>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0201 	bic.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b02      	cmp	r3, #2
 8002822:	d122      	bne.n	800286a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b02      	cmp	r3, #2
 8002830:	d11b      	bne.n	800286a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f06f 0202 	mvn.w	r2, #2
 800283a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f9ce 	bl	8002bf2 <HAL_TIM_IC_CaptureCallback>
 8002856:	e005      	b.n	8002864 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f9c0 	bl	8002bde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f9d1 	bl	8002c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b04      	cmp	r3, #4
 8002876:	d122      	bne.n	80028be <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	2b04      	cmp	r3, #4
 8002884:	d11b      	bne.n	80028be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f06f 0204 	mvn.w	r2, #4
 800288e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f9a4 	bl	8002bf2 <HAL_TIM_IC_CaptureCallback>
 80028aa:	e005      	b.n	80028b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f996 	bl	8002bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f9a7 	bl	8002c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d122      	bne.n	8002912 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	2b08      	cmp	r3, #8
 80028d8:	d11b      	bne.n	8002912 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f06f 0208 	mvn.w	r2, #8
 80028e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2204      	movs	r2, #4
 80028e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f97a 	bl	8002bf2 <HAL_TIM_IC_CaptureCallback>
 80028fe:	e005      	b.n	800290c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f96c 	bl	8002bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f97d 	bl	8002c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	2b10      	cmp	r3, #16
 800291e:	d122      	bne.n	8002966 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f003 0310 	and.w	r3, r3, #16
 800292a:	2b10      	cmp	r3, #16
 800292c:	d11b      	bne.n	8002966 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f06f 0210 	mvn.w	r2, #16
 8002936:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2208      	movs	r2, #8
 800293c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f950 	bl	8002bf2 <HAL_TIM_IC_CaptureCallback>
 8002952:	e005      	b.n	8002960 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f942 	bl	8002bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f953 	bl	8002c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b01      	cmp	r3, #1
 8002972:	d10e      	bne.n	8002992 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b01      	cmp	r3, #1
 8002980:	d107      	bne.n	8002992 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f06f 0201 	mvn.w	r2, #1
 800298a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f001 ffdf 	bl	8004950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299c:	2b80      	cmp	r3, #128	; 0x80
 800299e:	d10e      	bne.n	80029be <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029aa:	2b80      	cmp	r3, #128	; 0x80
 80029ac:	d107      	bne.n	80029be <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 faa7 	bl	8002f0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029cc:	d10e      	bne.n	80029ec <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d8:	2b80      	cmp	r3, #128	; 0x80
 80029da:	d107      	bne.n	80029ec <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80029e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 fa9a 	bl	8002f20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f6:	2b40      	cmp	r3, #64	; 0x40
 80029f8:	d10e      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a04:	2b40      	cmp	r3, #64	; 0x40
 8002a06:	d107      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f901 	bl	8002c1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	2b20      	cmp	r3, #32
 8002a24:	d10e      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b20      	cmp	r3, #32
 8002a32:	d107      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0220 	mvn.w	r2, #32
 8002a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 fa5a 	bl	8002ef8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a44:	bf00      	nop
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_TIM_ConfigClockSource+0x1c>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e0b6      	b.n	8002bd6 <HAL_TIM_ConfigClockSource+0x18a>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aa4:	d03e      	beq.n	8002b24 <HAL_TIM_ConfigClockSource+0xd8>
 8002aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aaa:	f200 8087 	bhi.w	8002bbc <HAL_TIM_ConfigClockSource+0x170>
 8002aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab2:	f000 8086 	beq.w	8002bc2 <HAL_TIM_ConfigClockSource+0x176>
 8002ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aba:	d87f      	bhi.n	8002bbc <HAL_TIM_ConfigClockSource+0x170>
 8002abc:	2b70      	cmp	r3, #112	; 0x70
 8002abe:	d01a      	beq.n	8002af6 <HAL_TIM_ConfigClockSource+0xaa>
 8002ac0:	2b70      	cmp	r3, #112	; 0x70
 8002ac2:	d87b      	bhi.n	8002bbc <HAL_TIM_ConfigClockSource+0x170>
 8002ac4:	2b60      	cmp	r3, #96	; 0x60
 8002ac6:	d050      	beq.n	8002b6a <HAL_TIM_ConfigClockSource+0x11e>
 8002ac8:	2b60      	cmp	r3, #96	; 0x60
 8002aca:	d877      	bhi.n	8002bbc <HAL_TIM_ConfigClockSource+0x170>
 8002acc:	2b50      	cmp	r3, #80	; 0x50
 8002ace:	d03c      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0xfe>
 8002ad0:	2b50      	cmp	r3, #80	; 0x50
 8002ad2:	d873      	bhi.n	8002bbc <HAL_TIM_ConfigClockSource+0x170>
 8002ad4:	2b40      	cmp	r3, #64	; 0x40
 8002ad6:	d058      	beq.n	8002b8a <HAL_TIM_ConfigClockSource+0x13e>
 8002ad8:	2b40      	cmp	r3, #64	; 0x40
 8002ada:	d86f      	bhi.n	8002bbc <HAL_TIM_ConfigClockSource+0x170>
 8002adc:	2b30      	cmp	r3, #48	; 0x30
 8002ade:	d064      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x15e>
 8002ae0:	2b30      	cmp	r3, #48	; 0x30
 8002ae2:	d86b      	bhi.n	8002bbc <HAL_TIM_ConfigClockSource+0x170>
 8002ae4:	2b20      	cmp	r3, #32
 8002ae6:	d060      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x15e>
 8002ae8:	2b20      	cmp	r3, #32
 8002aea:	d867      	bhi.n	8002bbc <HAL_TIM_ConfigClockSource+0x170>
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d05c      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x15e>
 8002af0:	2b10      	cmp	r3, #16
 8002af2:	d05a      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x15e>
 8002af4:	e062      	b.n	8002bbc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	6899      	ldr	r1, [r3, #8]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f000 f971 	bl	8002dec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	609a      	str	r2, [r3, #8]
      break;
 8002b22:	e04f      	b.n	8002bc4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6818      	ldr	r0, [r3, #0]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	6899      	ldr	r1, [r3, #8]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f000 f95a 	bl	8002dec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b46:	609a      	str	r2, [r3, #8]
      break;
 8002b48:	e03c      	b.n	8002bc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6859      	ldr	r1, [r3, #4]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	461a      	mov	r2, r3
 8002b58:	f000 f8ce 	bl	8002cf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2150      	movs	r1, #80	; 0x50
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 f927 	bl	8002db6 <TIM_ITRx_SetConfig>
      break;
 8002b68:	e02c      	b.n	8002bc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	6859      	ldr	r1, [r3, #4]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	461a      	mov	r2, r3
 8002b78:	f000 f8ed 	bl	8002d56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2160      	movs	r1, #96	; 0x60
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 f917 	bl	8002db6 <TIM_ITRx_SetConfig>
      break;
 8002b88:	e01c      	b.n	8002bc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	6859      	ldr	r1, [r3, #4]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	461a      	mov	r2, r3
 8002b98:	f000 f8ae 	bl	8002cf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2140      	movs	r1, #64	; 0x40
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 f907 	bl	8002db6 <TIM_ITRx_SetConfig>
      break;
 8002ba8:	e00c      	b.n	8002bc4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	f000 f8fe 	bl	8002db6 <TIM_ITRx_SetConfig>
      break;
 8002bba:	e003      	b.n	8002bc4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc0:	e000      	b.n	8002bc4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002bc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
	...

08002c30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a2a      	ldr	r2, [pc, #168]	; (8002cec <TIM_Base_SetConfig+0xbc>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d003      	beq.n	8002c50 <TIM_Base_SetConfig+0x20>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c4e:	d108      	bne.n	8002c62 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a21      	ldr	r2, [pc, #132]	; (8002cec <TIM_Base_SetConfig+0xbc>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00b      	beq.n	8002c82 <TIM_Base_SetConfig+0x52>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c70:	d007      	beq.n	8002c82 <TIM_Base_SetConfig+0x52>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a1e      	ldr	r2, [pc, #120]	; (8002cf0 <TIM_Base_SetConfig+0xc0>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d003      	beq.n	8002c82 <TIM_Base_SetConfig+0x52>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a1d      	ldr	r2, [pc, #116]	; (8002cf4 <TIM_Base_SetConfig+0xc4>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d108      	bne.n	8002c94 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a0c      	ldr	r2, [pc, #48]	; (8002cec <TIM_Base_SetConfig+0xbc>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d007      	beq.n	8002cd0 <TIM_Base_SetConfig+0xa0>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a0b      	ldr	r2, [pc, #44]	; (8002cf0 <TIM_Base_SetConfig+0xc0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d003      	beq.n	8002cd0 <TIM_Base_SetConfig+0xa0>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a0a      	ldr	r2, [pc, #40]	; (8002cf4 <TIM_Base_SetConfig+0xc4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d103      	bne.n	8002cd8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	615a      	str	r2, [r3, #20]
}
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40012c00 	.word	0x40012c00
 8002cf0:	40014000 	.word	0x40014000
 8002cf4:	40014400 	.word	0x40014400

08002cf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	f023 0201 	bic.w	r2, r3, #1
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f023 030a 	bic.w	r3, r3, #10
 8002d34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	621a      	str	r2, [r3, #32]
}
 8002d4a:	bf00      	nop
 8002d4c:	371c      	adds	r7, #28
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b087      	sub	sp, #28
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	f023 0210 	bic.w	r2, r3, #16
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	031b      	lsls	r3, r3, #12
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	621a      	str	r2, [r3, #32]
}
 8002daa:	bf00      	nop
 8002dac:	371c      	adds	r7, #28
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b085      	sub	sp, #20
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f043 0307 	orr.w	r3, r3, #7
 8002dd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	609a      	str	r2, [r3, #8]
}
 8002de0:	bf00      	nop
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
 8002df8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	021a      	lsls	r2, r3, #8
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	609a      	str	r2, [r3, #8]
}
 8002e20:	bf00      	nop
 8002e22:	371c      	adds	r7, #28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e04f      	b.n	8002ee4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a21      	ldr	r2, [pc, #132]	; (8002ef0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d108      	bne.n	8002e80 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002e74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a14      	ldr	r2, [pc, #80]	; (8002ef0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d009      	beq.n	8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eac:	d004      	beq.n	8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a10      	ldr	r2, [pc, #64]	; (8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d10c      	bne.n	8002ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ebe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	40012c00 	.word	0x40012c00
 8002ef4:	40014000 	.word	0x40014000

08002ef8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e040      	b.n	8002fc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fd fd68 	bl	8000a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2224      	movs	r2, #36	; 0x24
 8002f60:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0201 	bic.w	r2, r2, #1
 8002f70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fcba 	bl	80038ec <UART_SetConfig>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e022      	b.n	8002fc8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 feda 	bl	8003d44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 ff61 	bl	8003e88 <UART_CheckIdleState>
 8002fc6:	4603      	mov	r3, r0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b08b      	sub	sp, #44	; 0x2c
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	d156      	bne.n	8003094 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <HAL_UART_Transmit_IT+0x22>
 8002fec:	88fb      	ldrh	r3, [r7, #6]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e04f      	b.n	8003096 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_UART_Transmit_IT+0x34>
 8003000:	2302      	movs	r3, #2
 8003002:	e048      	b.n	8003096 <HAL_UART_Transmit_IT+0xc6>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	88fa      	ldrh	r2, [r7, #6]
 8003016:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	88fa      	ldrh	r2, [r7, #6]
 800301e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2221      	movs	r2, #33	; 0x21
 8003034:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800303e:	d107      	bne.n	8003050 <HAL_UART_Transmit_IT+0x80>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d103      	bne.n	8003050 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4a16      	ldr	r2, [pc, #88]	; (80030a4 <HAL_UART_Transmit_IT+0xd4>)
 800304c:	669a      	str	r2, [r3, #104]	; 0x68
 800304e:	e002      	b.n	8003056 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4a15      	ldr	r2, [pc, #84]	; (80030a8 <HAL_UART_Transmit_IT+0xd8>)
 8003054:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	e853 3f00 	ldrex	r3, [r3]
 800306a:	613b      	str	r3, [r7, #16]
   return(result);
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003072:	627b      	str	r3, [r7, #36]	; 0x24
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	623b      	str	r3, [r7, #32]
 800307e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003080:	69f9      	ldr	r1, [r7, #28]
 8003082:	6a3a      	ldr	r2, [r7, #32]
 8003084:	e841 2300 	strex	r3, r2, [r1]
 8003088:	61bb      	str	r3, [r7, #24]
   return(result);
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1e6      	bne.n	800305e <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	e000      	b.n	8003096 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003094:	2302      	movs	r3, #2
  }
}
 8003096:	4618      	mov	r0, r3
 8003098:	372c      	adds	r7, #44	; 0x2c
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	0800442f 	.word	0x0800442f
 80030a8:	08004377 	.word	0x08004377

080030ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	; 0x28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	4613      	mov	r3, r2
 80030b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030be:	2b20      	cmp	r3, #32
 80030c0:	d142      	bne.n	8003148 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <HAL_UART_Receive_IT+0x22>
 80030c8:	88fb      	ldrh	r3, [r7, #6]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e03b      	b.n	800314a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_UART_Receive_IT+0x34>
 80030dc:	2302      	movs	r3, #2
 80030de:	e034      	b.n	800314a <HAL_UART_Receive_IT+0x9e>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a18      	ldr	r2, [pc, #96]	; (8003154 <HAL_UART_Receive_IT+0xa8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d01f      	beq.n	8003138 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d018      	beq.n	8003138 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	e853 3f00 	ldrex	r3, [r3]
 8003112:	613b      	str	r3, [r7, #16]
   return(result);
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	461a      	mov	r2, r3
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	623b      	str	r3, [r7, #32]
 8003126:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003128:	69f9      	ldr	r1, [r7, #28]
 800312a:	6a3a      	ldr	r2, [r7, #32]
 800312c:	e841 2300 	strex	r3, r2, [r1]
 8003130:	61bb      	str	r3, [r7, #24]
   return(result);
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1e6      	bne.n	8003106 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003138:	88fb      	ldrh	r3, [r7, #6]
 800313a:	461a      	mov	r2, r3
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 ffb0 	bl	80040a4 <UART_Start_Receive_IT>
 8003144:	4603      	mov	r3, r0
 8003146:	e000      	b.n	800314a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003148:	2302      	movs	r3, #2
  }
}
 800314a:	4618      	mov	r0, r3
 800314c:	3728      	adds	r7, #40	; 0x28
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40008000 	.word	0x40008000

08003158 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b09a      	sub	sp, #104	; 0x68
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003168:	e853 3f00 	ldrex	r3, [r3]
 800316c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800316e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003170:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003174:	667b      	str	r3, [r7, #100]	; 0x64
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800317e:	657b      	str	r3, [r7, #84]	; 0x54
 8003180:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003182:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003184:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003186:	e841 2300 	strex	r3, r2, [r1]
 800318a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800318c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1e6      	bne.n	8003160 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	3308      	adds	r3, #8
 8003198:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800319c:	e853 3f00 	ldrex	r3, [r3]
 80031a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	f023 0301 	bic.w	r3, r3, #1
 80031a8:	663b      	str	r3, [r7, #96]	; 0x60
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	3308      	adds	r3, #8
 80031b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031b2:	643a      	str	r2, [r7, #64]	; 0x40
 80031b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80031b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031ba:	e841 2300 	strex	r3, r2, [r1]
 80031be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80031c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1e5      	bne.n	8003192 <HAL_UART_AbortReceive_IT+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d118      	bne.n	8003200 <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	e853 3f00 	ldrex	r3, [r3]
 80031da:	61fb      	str	r3, [r7, #28]
   return(result);
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f023 0310 	bic.w	r3, r3, #16
 80031e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	461a      	mov	r2, r3
 80031ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ee:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f4:	e841 2300 	strex	r3, r2, [r1]
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1e6      	bne.n	80031ce <HAL_UART_AbortReceive_IT+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320a:	2b40      	cmp	r3, #64	; 0x40
 800320c:	d150      	bne.n	80032b0 <HAL_UART_AbortReceive_IT+0x158>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3308      	adds	r3, #8
 8003214:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	e853 3f00 	ldrex	r3, [r3]
 800321c:	60bb      	str	r3, [r7, #8]
   return(result);
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003224:	65bb      	str	r3, [r7, #88]	; 0x58
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	3308      	adds	r3, #8
 800322c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800322e:	61ba      	str	r2, [r7, #24]
 8003230:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003232:	6979      	ldr	r1, [r7, #20]
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	e841 2300 	strex	r3, r2, [r1]
 800323a:	613b      	str	r3, [r7, #16]
   return(result);
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1e5      	bne.n	800320e <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003246:	2b00      	cmp	r3, #0
 8003248:	d013      	beq.n	8003272 <HAL_UART_AbortReceive_IT+0x11a>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324e:	4a25      	ldr	r2, [pc, #148]	; (80032e4 <HAL_UART_AbortReceive_IT+0x18c>)
 8003250:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003256:	4618      	mov	r0, r3
 8003258:	f7fd fe97 	bl	8000f8a <HAL_DMA_Abort_IT>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d03a      	beq.n	80032d8 <HAL_UART_AbortReceive_IT+0x180>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800326c:	4610      	mov	r0, r2
 800326e:	4798      	blx	r3
 8003270:	e032      	b.n	80032d8 <HAL_UART_AbortReceive_IT+0x180>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	220f      	movs	r2, #15
 8003286:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	8b1b      	ldrh	r3, [r3, #24]
 800328e:	b29a      	uxth	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 0208 	orr.w	r2, r2, #8
 8003298:	b292      	uxth	r2, r2
 800329a:	831a      	strh	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 fb09 	bl	80038c0 <HAL_UART_AbortReceiveCpltCallback>
 80032ae:	e013      	b.n	80032d8 <HAL_UART_AbortReceive_IT+0x180>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	220f      	movs	r2, #15
 80032c4:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2220      	movs	r2, #32
 80032ca:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 faf4 	bl	80038c0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3768      	adds	r7, #104	; 0x68
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	0800432b 	.word	0x0800432b

080032e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b0ba      	sub	sp, #232	; 0xe8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800330e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003312:	f640 030f 	movw	r3, #2063	; 0x80f
 8003316:	4013      	ands	r3, r2
 8003318:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800331c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003320:	2b00      	cmp	r3, #0
 8003322:	d115      	bne.n	8003350 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003328:	f003 0320 	and.w	r3, r3, #32
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00f      	beq.n	8003350 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003334:	f003 0320 	and.w	r3, r3, #32
 8003338:	2b00      	cmp	r3, #0
 800333a:	d009      	beq.n	8003350 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 82a6 	beq.w	8003892 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	4798      	blx	r3
      }
      return;
 800334e:	e2a0      	b.n	8003892 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003350:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 8117 	beq.w	8003588 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800335a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d106      	bne.n	8003374 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003366:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800336a:	4b85      	ldr	r3, [pc, #532]	; (8003580 <HAL_UART_IRQHandler+0x298>)
 800336c:	4013      	ands	r3, r2
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 810a 	beq.w	8003588 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d011      	beq.n	80033a4 <HAL_UART_IRQHandler+0xbc>
 8003380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00b      	beq.n	80033a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2201      	movs	r2, #1
 8003392:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800339a:	f043 0201 	orr.w	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d011      	beq.n	80033d4 <HAL_UART_IRQHandler+0xec>
 80033b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00b      	beq.n	80033d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2202      	movs	r2, #2
 80033c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033ca:	f043 0204 	orr.w	r2, r3, #4
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d011      	beq.n	8003404 <HAL_UART_IRQHandler+0x11c>
 80033e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00b      	beq.n	8003404 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2204      	movs	r2, #4
 80033f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033fa:	f043 0202 	orr.w	r2, r3, #2
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d017      	beq.n	8003440 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	2b00      	cmp	r3, #0
 800341a:	d105      	bne.n	8003428 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800341c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003420:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00b      	beq.n	8003440 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2208      	movs	r2, #8
 800342e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003436:	f043 0208 	orr.w	r2, r3, #8
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003448:	2b00      	cmp	r3, #0
 800344a:	d012      	beq.n	8003472 <HAL_UART_IRQHandler+0x18a>
 800344c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003450:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00c      	beq.n	8003472 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003460:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003468:	f043 0220 	orr.w	r2, r3, #32
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 820c 	beq.w	8003896 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800347e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00d      	beq.n	80034a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800348a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800348e:	f003 0320 	and.w	r3, r3, #32
 8003492:	2b00      	cmp	r3, #0
 8003494:	d007      	beq.n	80034a6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ba:	2b40      	cmp	r3, #64	; 0x40
 80034bc:	d005      	beq.n	80034ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80034be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d04f      	beq.n	800356a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 feb4 	bl	8004238 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034da:	2b40      	cmp	r3, #64	; 0x40
 80034dc:	d141      	bne.n	8003562 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3308      	adds	r3, #8
 80034e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034ec:	e853 3f00 	ldrex	r3, [r3]
 80034f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80034f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	3308      	adds	r3, #8
 8003506:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800350a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800350e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003512:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003516:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800351a:	e841 2300 	strex	r3, r2, [r1]
 800351e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003522:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1d9      	bne.n	80034de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352e:	2b00      	cmp	r3, #0
 8003530:	d013      	beq.n	800355a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	4a13      	ldr	r2, [pc, #76]	; (8003584 <HAL_UART_IRQHandler+0x29c>)
 8003538:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353e:	4618      	mov	r0, r3
 8003540:	f7fd fd23 	bl	8000f8a <HAL_DMA_Abort_IT>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d017      	beq.n	800357a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003554:	4610      	mov	r0, r2
 8003556:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003558:	e00f      	b.n	800357a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f9a6 	bl	80038ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003560:	e00b      	b.n	800357a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f9a2 	bl	80038ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003568:	e007      	b.n	800357a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f99e 	bl	80038ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003578:	e18d      	b.n	8003896 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800357a:	bf00      	nop
    return;
 800357c:	e18b      	b.n	8003896 <HAL_UART_IRQHandler+0x5ae>
 800357e:	bf00      	nop
 8003580:	04000120 	.word	0x04000120
 8003584:	080042ff 	.word	0x080042ff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800358c:	2b01      	cmp	r3, #1
 800358e:	f040 8146 	bne.w	800381e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 813f 	beq.w	800381e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80035a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035a4:	f003 0310 	and.w	r3, r3, #16
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 8138 	beq.w	800381e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2210      	movs	r2, #16
 80035b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c0:	2b40      	cmp	r3, #64	; 0x40
 80035c2:	f040 80b4 	bne.w	800372e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 815f 	beq.w	800389a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80035e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035e6:	429a      	cmp	r2, r3
 80035e8:	f080 8157 	bcs.w	800389a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b00      	cmp	r3, #0
 8003604:	f040 8085 	bne.w	8003712 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003610:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003614:	e853 3f00 	ldrex	r3, [r3]
 8003618:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800361c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003624:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	461a      	mov	r2, r3
 800362e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003632:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003636:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800363e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003642:	e841 2300 	strex	r3, r2, [r1]
 8003646:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800364a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1da      	bne.n	8003608 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3308      	adds	r3, #8
 8003658:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800365c:	e853 3f00 	ldrex	r3, [r3]
 8003660:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003662:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3308      	adds	r3, #8
 8003672:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003676:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800367a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800367e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003682:	e841 2300 	strex	r3, r2, [r1]
 8003686:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1e1      	bne.n	8003652 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	3308      	adds	r3, #8
 8003694:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003696:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003698:	e853 3f00 	ldrex	r3, [r3]
 800369c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800369e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	3308      	adds	r3, #8
 80036ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80036b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80036b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036ba:	e841 2300 	strex	r3, r2, [r1]
 80036be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80036c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1e3      	bne.n	800368e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2220      	movs	r2, #32
 80036ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036da:	e853 3f00 	ldrex	r3, [r3]
 80036de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80036e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e2:	f023 0310 	bic.w	r3, r3, #16
 80036e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80036f6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036fc:	e841 2300 	strex	r3, r2, [r1]
 8003700:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1e4      	bne.n	80036d2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370c:	4618      	mov	r0, r3
 800370e:	f7fd fbfe 	bl	8000f0e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800371e:	b29b      	uxth	r3, r3
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	b29b      	uxth	r3, r3
 8003724:	4619      	mov	r1, r3
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f8d4 	bl	80038d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800372c:	e0b5      	b.n	800389a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800373a:	b29b      	uxth	r3, r3
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 80a7 	beq.w	800389e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003750:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80a2 	beq.w	800389e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003762:	e853 3f00 	ldrex	r3, [r3]
 8003766:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800376a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800376e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800377c:	647b      	str	r3, [r7, #68]	; 0x44
 800377e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003780:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003782:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003784:	e841 2300 	strex	r3, r2, [r1]
 8003788:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800378a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1e4      	bne.n	800375a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3308      	adds	r3, #8
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	e853 3f00 	ldrex	r3, [r3]
 800379e:	623b      	str	r3, [r7, #32]
   return(result);
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	f023 0301 	bic.w	r3, r3, #1
 80037a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	3308      	adds	r3, #8
 80037b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80037b4:	633a      	str	r2, [r7, #48]	; 0x30
 80037b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037bc:	e841 2300 	strex	r3, r2, [r1]
 80037c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1e3      	bne.n	8003790 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	e853 3f00 	ldrex	r3, [r3]
 80037e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0310 	bic.w	r3, r3, #16
 80037ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037fc:	61fb      	str	r3, [r7, #28]
 80037fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003800:	69b9      	ldr	r1, [r7, #24]
 8003802:	69fa      	ldr	r2, [r7, #28]
 8003804:	e841 2300 	strex	r3, r2, [r1]
 8003808:	617b      	str	r3, [r7, #20]
   return(result);
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1e4      	bne.n	80037da <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003810:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003814:	4619      	mov	r1, r3
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f85c 	bl	80038d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800381c:	e03f      	b.n	800389e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800381e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00e      	beq.n	8003848 <HAL_UART_IRQHandler+0x560>
 800382a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800382e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d008      	beq.n	8003848 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800383e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 ffde 	bl	8004802 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003846:	e02d      	b.n	80038a4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800384c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00e      	beq.n	8003872 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003864:	2b00      	cmp	r3, #0
 8003866:	d01c      	beq.n	80038a2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
    }
    return;
 8003870:	e017      	b.n	80038a2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	d012      	beq.n	80038a4 <HAL_UART_IRQHandler+0x5bc>
 800387e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00c      	beq.n	80038a4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fe2f 	bl	80044ee <UART_EndTransmit_IT>
    return;
 8003890:	e008      	b.n	80038a4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003892:	bf00      	nop
 8003894:	e006      	b.n	80038a4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003896:	bf00      	nop
 8003898:	e004      	b.n	80038a4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800389a:	bf00      	nop
 800389c:	e002      	b.n	80038a4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800389e:	bf00      	nop
 80038a0:	e000      	b.n	80038a4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80038a2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80038a4:	37e8      	adds	r7, #232	; 0xe8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop

080038ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038f0:	b08a      	sub	sp, #40	; 0x28
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	431a      	orrs	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	431a      	orrs	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	4313      	orrs	r3, r2
 8003912:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	4bb4      	ldr	r3, [pc, #720]	; (8003bec <UART_SetConfig+0x300>)
 800391c:	4013      	ands	r3, r2
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	6812      	ldr	r2, [r2, #0]
 8003922:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003924:	430b      	orrs	r3, r1
 8003926:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4aa9      	ldr	r2, [pc, #676]	; (8003bf0 <UART_SetConfig+0x304>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d004      	beq.n	8003958 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003954:	4313      	orrs	r3, r2
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003968:	430a      	orrs	r2, r1
 800396a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4aa0      	ldr	r2, [pc, #640]	; (8003bf4 <UART_SetConfig+0x308>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d126      	bne.n	80039c4 <UART_SetConfig+0xd8>
 8003976:	4ba0      	ldr	r3, [pc, #640]	; (8003bf8 <UART_SetConfig+0x30c>)
 8003978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397c:	f003 0303 	and.w	r3, r3, #3
 8003980:	2b03      	cmp	r3, #3
 8003982:	d81b      	bhi.n	80039bc <UART_SetConfig+0xd0>
 8003984:	a201      	add	r2, pc, #4	; (adr r2, 800398c <UART_SetConfig+0xa0>)
 8003986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398a:	bf00      	nop
 800398c:	0800399d 	.word	0x0800399d
 8003990:	080039ad 	.word	0x080039ad
 8003994:	080039a5 	.word	0x080039a5
 8003998:	080039b5 	.word	0x080039b5
 800399c:	2301      	movs	r3, #1
 800399e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039a2:	e080      	b.n	8003aa6 <UART_SetConfig+0x1ba>
 80039a4:	2302      	movs	r3, #2
 80039a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039aa:	e07c      	b.n	8003aa6 <UART_SetConfig+0x1ba>
 80039ac:	2304      	movs	r3, #4
 80039ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039b2:	e078      	b.n	8003aa6 <UART_SetConfig+0x1ba>
 80039b4:	2308      	movs	r3, #8
 80039b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ba:	e074      	b.n	8003aa6 <UART_SetConfig+0x1ba>
 80039bc:	2310      	movs	r3, #16
 80039be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039c2:	e070      	b.n	8003aa6 <UART_SetConfig+0x1ba>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a8c      	ldr	r2, [pc, #560]	; (8003bfc <UART_SetConfig+0x310>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d138      	bne.n	8003a40 <UART_SetConfig+0x154>
 80039ce:	4b8a      	ldr	r3, [pc, #552]	; (8003bf8 <UART_SetConfig+0x30c>)
 80039d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d4:	f003 030c 	and.w	r3, r3, #12
 80039d8:	2b0c      	cmp	r3, #12
 80039da:	d82d      	bhi.n	8003a38 <UART_SetConfig+0x14c>
 80039dc:	a201      	add	r2, pc, #4	; (adr r2, 80039e4 <UART_SetConfig+0xf8>)
 80039de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e2:	bf00      	nop
 80039e4:	08003a19 	.word	0x08003a19
 80039e8:	08003a39 	.word	0x08003a39
 80039ec:	08003a39 	.word	0x08003a39
 80039f0:	08003a39 	.word	0x08003a39
 80039f4:	08003a29 	.word	0x08003a29
 80039f8:	08003a39 	.word	0x08003a39
 80039fc:	08003a39 	.word	0x08003a39
 8003a00:	08003a39 	.word	0x08003a39
 8003a04:	08003a21 	.word	0x08003a21
 8003a08:	08003a39 	.word	0x08003a39
 8003a0c:	08003a39 	.word	0x08003a39
 8003a10:	08003a39 	.word	0x08003a39
 8003a14:	08003a31 	.word	0x08003a31
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a1e:	e042      	b.n	8003aa6 <UART_SetConfig+0x1ba>
 8003a20:	2302      	movs	r3, #2
 8003a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a26:	e03e      	b.n	8003aa6 <UART_SetConfig+0x1ba>
 8003a28:	2304      	movs	r3, #4
 8003a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a2e:	e03a      	b.n	8003aa6 <UART_SetConfig+0x1ba>
 8003a30:	2308      	movs	r3, #8
 8003a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a36:	e036      	b.n	8003aa6 <UART_SetConfig+0x1ba>
 8003a38:	2310      	movs	r3, #16
 8003a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a3e:	e032      	b.n	8003aa6 <UART_SetConfig+0x1ba>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a6a      	ldr	r2, [pc, #424]	; (8003bf0 <UART_SetConfig+0x304>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d12a      	bne.n	8003aa0 <UART_SetConfig+0x1b4>
 8003a4a:	4b6b      	ldr	r3, [pc, #428]	; (8003bf8 <UART_SetConfig+0x30c>)
 8003a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a58:	d01a      	beq.n	8003a90 <UART_SetConfig+0x1a4>
 8003a5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a5e:	d81b      	bhi.n	8003a98 <UART_SetConfig+0x1ac>
 8003a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a64:	d00c      	beq.n	8003a80 <UART_SetConfig+0x194>
 8003a66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a6a:	d815      	bhi.n	8003a98 <UART_SetConfig+0x1ac>
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <UART_SetConfig+0x18c>
 8003a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a74:	d008      	beq.n	8003a88 <UART_SetConfig+0x19c>
 8003a76:	e00f      	b.n	8003a98 <UART_SetConfig+0x1ac>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a7e:	e012      	b.n	8003aa6 <UART_SetConfig+0x1ba>
 8003a80:	2302      	movs	r3, #2
 8003a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a86:	e00e      	b.n	8003aa6 <UART_SetConfig+0x1ba>
 8003a88:	2304      	movs	r3, #4
 8003a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a8e:	e00a      	b.n	8003aa6 <UART_SetConfig+0x1ba>
 8003a90:	2308      	movs	r3, #8
 8003a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a96:	e006      	b.n	8003aa6 <UART_SetConfig+0x1ba>
 8003a98:	2310      	movs	r3, #16
 8003a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a9e:	e002      	b.n	8003aa6 <UART_SetConfig+0x1ba>
 8003aa0:	2310      	movs	r3, #16
 8003aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a51      	ldr	r2, [pc, #324]	; (8003bf0 <UART_SetConfig+0x304>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d17a      	bne.n	8003ba6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ab0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d824      	bhi.n	8003b02 <UART_SetConfig+0x216>
 8003ab8:	a201      	add	r2, pc, #4	; (adr r2, 8003ac0 <UART_SetConfig+0x1d4>)
 8003aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abe:	bf00      	nop
 8003ac0:	08003ae5 	.word	0x08003ae5
 8003ac4:	08003b03 	.word	0x08003b03
 8003ac8:	08003aed 	.word	0x08003aed
 8003acc:	08003b03 	.word	0x08003b03
 8003ad0:	08003af3 	.word	0x08003af3
 8003ad4:	08003b03 	.word	0x08003b03
 8003ad8:	08003b03 	.word	0x08003b03
 8003adc:	08003b03 	.word	0x08003b03
 8003ae0:	08003afb 	.word	0x08003afb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ae4:	f7fe fa44 	bl	8001f70 <HAL_RCC_GetPCLK1Freq>
 8003ae8:	61f8      	str	r0, [r7, #28]
        break;
 8003aea:	e010      	b.n	8003b0e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aec:	4b44      	ldr	r3, [pc, #272]	; (8003c00 <UART_SetConfig+0x314>)
 8003aee:	61fb      	str	r3, [r7, #28]
        break;
 8003af0:	e00d      	b.n	8003b0e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003af2:	f7fe f9a5 	bl	8001e40 <HAL_RCC_GetSysClockFreq>
 8003af6:	61f8      	str	r0, [r7, #28]
        break;
 8003af8:	e009      	b.n	8003b0e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003afe:	61fb      	str	r3, [r7, #28]
        break;
 8003b00:	e005      	b.n	8003b0e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 8107 	beq.w	8003d24 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	4413      	add	r3, r2
 8003b20:	69fa      	ldr	r2, [r7, #28]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d305      	bcc.n	8003b32 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b2c:	69fa      	ldr	r2, [r7, #28]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d903      	bls.n	8003b3a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b38:	e0f4      	b.n	8003d24 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	461c      	mov	r4, r3
 8003b40:	4615      	mov	r5, r2
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	022b      	lsls	r3, r5, #8
 8003b4c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003b50:	0222      	lsls	r2, r4, #8
 8003b52:	68f9      	ldr	r1, [r7, #12]
 8003b54:	6849      	ldr	r1, [r1, #4]
 8003b56:	0849      	lsrs	r1, r1, #1
 8003b58:	2000      	movs	r0, #0
 8003b5a:	4688      	mov	r8, r1
 8003b5c:	4681      	mov	r9, r0
 8003b5e:	eb12 0a08 	adds.w	sl, r2, r8
 8003b62:	eb43 0b09 	adc.w	fp, r3, r9
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	603b      	str	r3, [r7, #0]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b74:	4650      	mov	r0, sl
 8003b76:	4659      	mov	r1, fp
 8003b78:	f7fc fb28 	bl	80001cc <__aeabi_uldivmod>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4613      	mov	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b8a:	d308      	bcc.n	8003b9e <UART_SetConfig+0x2b2>
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b92:	d204      	bcs.n	8003b9e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	60da      	str	r2, [r3, #12]
 8003b9c:	e0c2      	b.n	8003d24 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ba4:	e0be      	b.n	8003d24 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bae:	d16a      	bne.n	8003c86 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003bb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d834      	bhi.n	8003c22 <UART_SetConfig+0x336>
 8003bb8:	a201      	add	r2, pc, #4	; (adr r2, 8003bc0 <UART_SetConfig+0x2d4>)
 8003bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbe:	bf00      	nop
 8003bc0:	08003be5 	.word	0x08003be5
 8003bc4:	08003c05 	.word	0x08003c05
 8003bc8:	08003c0d 	.word	0x08003c0d
 8003bcc:	08003c23 	.word	0x08003c23
 8003bd0:	08003c13 	.word	0x08003c13
 8003bd4:	08003c23 	.word	0x08003c23
 8003bd8:	08003c23 	.word	0x08003c23
 8003bdc:	08003c23 	.word	0x08003c23
 8003be0:	08003c1b 	.word	0x08003c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003be4:	f7fe f9c4 	bl	8001f70 <HAL_RCC_GetPCLK1Freq>
 8003be8:	61f8      	str	r0, [r7, #28]
        break;
 8003bea:	e020      	b.n	8003c2e <UART_SetConfig+0x342>
 8003bec:	efff69f3 	.word	0xefff69f3
 8003bf0:	40008000 	.word	0x40008000
 8003bf4:	40013800 	.word	0x40013800
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	40004400 	.word	0x40004400
 8003c00:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c04:	f7fe f9ca 	bl	8001f9c <HAL_RCC_GetPCLK2Freq>
 8003c08:	61f8      	str	r0, [r7, #28]
        break;
 8003c0a:	e010      	b.n	8003c2e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c0c:	4b4c      	ldr	r3, [pc, #304]	; (8003d40 <UART_SetConfig+0x454>)
 8003c0e:	61fb      	str	r3, [r7, #28]
        break;
 8003c10:	e00d      	b.n	8003c2e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c12:	f7fe f915 	bl	8001e40 <HAL_RCC_GetSysClockFreq>
 8003c16:	61f8      	str	r0, [r7, #28]
        break;
 8003c18:	e009      	b.n	8003c2e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c1e:	61fb      	str	r3, [r7, #28]
        break;
 8003c20:	e005      	b.n	8003c2e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d077      	beq.n	8003d24 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	005a      	lsls	r2, r3, #1
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	085b      	lsrs	r3, r3, #1
 8003c3e:	441a      	add	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c48:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	2b0f      	cmp	r3, #15
 8003c4e:	d916      	bls.n	8003c7e <UART_SetConfig+0x392>
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c56:	d212      	bcs.n	8003c7e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	f023 030f 	bic.w	r3, r3, #15
 8003c60:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	085b      	lsrs	r3, r3, #1
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	8afb      	ldrh	r3, [r7, #22]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	8afa      	ldrh	r2, [r7, #22]
 8003c7a:	60da      	str	r2, [r3, #12]
 8003c7c:	e052      	b.n	8003d24 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c84:	e04e      	b.n	8003d24 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d827      	bhi.n	8003cde <UART_SetConfig+0x3f2>
 8003c8e:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <UART_SetConfig+0x3a8>)
 8003c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c94:	08003cb9 	.word	0x08003cb9
 8003c98:	08003cc1 	.word	0x08003cc1
 8003c9c:	08003cc9 	.word	0x08003cc9
 8003ca0:	08003cdf 	.word	0x08003cdf
 8003ca4:	08003ccf 	.word	0x08003ccf
 8003ca8:	08003cdf 	.word	0x08003cdf
 8003cac:	08003cdf 	.word	0x08003cdf
 8003cb0:	08003cdf 	.word	0x08003cdf
 8003cb4:	08003cd7 	.word	0x08003cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cb8:	f7fe f95a 	bl	8001f70 <HAL_RCC_GetPCLK1Freq>
 8003cbc:	61f8      	str	r0, [r7, #28]
        break;
 8003cbe:	e014      	b.n	8003cea <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cc0:	f7fe f96c 	bl	8001f9c <HAL_RCC_GetPCLK2Freq>
 8003cc4:	61f8      	str	r0, [r7, #28]
        break;
 8003cc6:	e010      	b.n	8003cea <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cc8:	4b1d      	ldr	r3, [pc, #116]	; (8003d40 <UART_SetConfig+0x454>)
 8003cca:	61fb      	str	r3, [r7, #28]
        break;
 8003ccc:	e00d      	b.n	8003cea <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cce:	f7fe f8b7 	bl	8001e40 <HAL_RCC_GetSysClockFreq>
 8003cd2:	61f8      	str	r0, [r7, #28]
        break;
 8003cd4:	e009      	b.n	8003cea <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cda:	61fb      	str	r3, [r7, #28]
        break;
 8003cdc:	e005      	b.n	8003cea <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ce8:	bf00      	nop
    }

    if (pclk != 0U)
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d019      	beq.n	8003d24 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	085a      	lsrs	r2, r3, #1
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	441a      	add	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d02:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	2b0f      	cmp	r3, #15
 8003d08:	d909      	bls.n	8003d1e <UART_SetConfig+0x432>
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d10:	d205      	bcs.n	8003d1e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60da      	str	r2, [r3, #12]
 8003d1c:	e002      	b.n	8003d24 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3728      	adds	r7, #40	; 0x28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d3e:	bf00      	nop
 8003d40:	00f42400 	.word	0x00f42400

08003d44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00a      	beq.n	8003d6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00a      	beq.n	8003db2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	f003 0310 	and.w	r3, r3, #16
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00a      	beq.n	8003df6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	f003 0320 	and.w	r3, r3, #32
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d01a      	beq.n	8003e5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e42:	d10a      	bne.n	8003e5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	605a      	str	r2, [r3, #4]
  }
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e98:	f7fc ff1c 	bl	8000cd4 <HAL_GetTick>
 8003e9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d10e      	bne.n	8003eca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f82d 	bl	8003f1a <UART_WaitOnFlagUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e023      	b.n	8003f12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b04      	cmp	r3, #4
 8003ed6:	d10e      	bne.n	8003ef6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ed8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f817 	bl	8003f1a <UART_WaitOnFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e00d      	b.n	8003f12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2220      	movs	r2, #32
 8003f00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b09c      	sub	sp, #112	; 0x70
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	60f8      	str	r0, [r7, #12]
 8003f22:	60b9      	str	r1, [r7, #8]
 8003f24:	603b      	str	r3, [r7, #0]
 8003f26:	4613      	mov	r3, r2
 8003f28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f2a:	e0a5      	b.n	8004078 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f32:	f000 80a1 	beq.w	8004078 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f36:	f7fc fecd 	bl	8000cd4 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d302      	bcc.n	8003f4c <UART_WaitOnFlagUntilTimeout+0x32>
 8003f46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d13e      	bne.n	8003fca <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f54:	e853 3f00 	ldrex	r3, [r3]
 8003f58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f60:	667b      	str	r3, [r7, #100]	; 0x64
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f6c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f72:	e841 2300 	strex	r3, r2, [r1]
 8003f76:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1e6      	bne.n	8003f4c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3308      	adds	r3, #8
 8003f84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f88:	e853 3f00 	ldrex	r3, [r3]
 8003f8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f90:	f023 0301 	bic.w	r3, r3, #1
 8003f94:	663b      	str	r3, [r7, #96]	; 0x60
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3308      	adds	r3, #8
 8003f9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f9e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003fa0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003fa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fa6:	e841 2300 	strex	r3, r2, [r1]
 8003faa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1e5      	bne.n	8003f7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e067      	b.n	800409a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d04f      	beq.n	8004078 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fe6:	d147      	bne.n	8004078 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ff0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffa:	e853 3f00 	ldrex	r3, [r3]
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004006:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004010:	637b      	str	r3, [r7, #52]	; 0x34
 8004012:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004014:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004018:	e841 2300 	strex	r3, r2, [r1]
 800401c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800401e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1e6      	bne.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3308      	adds	r3, #8
 800402a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	e853 3f00 	ldrex	r3, [r3]
 8004032:	613b      	str	r3, [r7, #16]
   return(result);
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f023 0301 	bic.w	r3, r3, #1
 800403a:	66bb      	str	r3, [r7, #104]	; 0x68
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3308      	adds	r3, #8
 8004042:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004044:	623a      	str	r2, [r7, #32]
 8004046:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004048:	69f9      	ldr	r1, [r7, #28]
 800404a:	6a3a      	ldr	r2, [r7, #32]
 800404c:	e841 2300 	strex	r3, r2, [r1]
 8004050:	61bb      	str	r3, [r7, #24]
   return(result);
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1e5      	bne.n	8004024 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2220      	movs	r2, #32
 800405c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2220      	movs	r2, #32
 8004062:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2220      	movs	r2, #32
 8004068:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e010      	b.n	800409a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	69da      	ldr	r2, [r3, #28]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	4013      	ands	r3, r2
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	429a      	cmp	r2, r3
 8004086:	bf0c      	ite	eq
 8004088:	2301      	moveq	r3, #1
 800408a:	2300      	movne	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	461a      	mov	r2, r3
 8004090:	79fb      	ldrb	r3, [r7, #7]
 8004092:	429a      	cmp	r2, r3
 8004094:	f43f af4a 	beq.w	8003f2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3770      	adds	r7, #112	; 0x70
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b097      	sub	sp, #92	; 0x5c
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	4613      	mov	r3, r2
 80040b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	88fa      	ldrh	r2, [r7, #6]
 80040bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	88fa      	ldrh	r2, [r7, #6]
 80040c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d6:	d10e      	bne.n	80040f6 <UART_Start_Receive_IT+0x52>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d105      	bne.n	80040ec <UART_Start_Receive_IT+0x48>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80040e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040ea:	e02d      	b.n	8004148 <UART_Start_Receive_IT+0xa4>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	22ff      	movs	r2, #255	; 0xff
 80040f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040f4:	e028      	b.n	8004148 <UART_Start_Receive_IT+0xa4>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10d      	bne.n	800411a <UART_Start_Receive_IT+0x76>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d104      	bne.n	8004110 <UART_Start_Receive_IT+0x6c>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	22ff      	movs	r2, #255	; 0xff
 800410a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800410e:	e01b      	b.n	8004148 <UART_Start_Receive_IT+0xa4>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	227f      	movs	r2, #127	; 0x7f
 8004114:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004118:	e016      	b.n	8004148 <UART_Start_Receive_IT+0xa4>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004122:	d10d      	bne.n	8004140 <UART_Start_Receive_IT+0x9c>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d104      	bne.n	8004136 <UART_Start_Receive_IT+0x92>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	227f      	movs	r2, #127	; 0x7f
 8004130:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004134:	e008      	b.n	8004148 <UART_Start_Receive_IT+0xa4>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	223f      	movs	r2, #63	; 0x3f
 800413a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800413e:	e003      	b.n	8004148 <UART_Start_Receive_IT+0xa4>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2222      	movs	r2, #34	; 0x22
 8004154:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	3308      	adds	r3, #8
 800415c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004160:	e853 3f00 	ldrex	r3, [r3]
 8004164:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	657b      	str	r3, [r7, #84]	; 0x54
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3308      	adds	r3, #8
 8004174:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004176:	64ba      	str	r2, [r7, #72]	; 0x48
 8004178:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800417c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800417e:	e841 2300 	strex	r3, r2, [r1]
 8004182:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1e5      	bne.n	8004156 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004192:	d107      	bne.n	80041a4 <UART_Start_Receive_IT+0x100>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d103      	bne.n	80041a4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4a24      	ldr	r2, [pc, #144]	; (8004230 <UART_Start_Receive_IT+0x18c>)
 80041a0:	665a      	str	r2, [r3, #100]	; 0x64
 80041a2:	e002      	b.n	80041aa <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4a23      	ldr	r2, [pc, #140]	; (8004234 <UART_Start_Receive_IT+0x190>)
 80041a8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d019      	beq.n	80041ee <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c2:	e853 3f00 	ldrex	r3, [r3]
 80041c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80041ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	461a      	mov	r2, r3
 80041d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d8:	637b      	str	r3, [r7, #52]	; 0x34
 80041da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041e0:	e841 2300 	strex	r3, r2, [r1]
 80041e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e6      	bne.n	80041ba <UART_Start_Receive_IT+0x116>
 80041ec:	e018      	b.n	8004220 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	e853 3f00 	ldrex	r3, [r3]
 80041fa:	613b      	str	r3, [r7, #16]
   return(result);
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f043 0320 	orr.w	r3, r3, #32
 8004202:	653b      	str	r3, [r7, #80]	; 0x50
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	461a      	mov	r2, r3
 800420a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800420c:	623b      	str	r3, [r7, #32]
 800420e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	69f9      	ldr	r1, [r7, #28]
 8004212:	6a3a      	ldr	r2, [r7, #32]
 8004214:	e841 2300 	strex	r3, r2, [r1]
 8004218:	61bb      	str	r3, [r7, #24]
   return(result);
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e6      	bne.n	80041ee <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	375c      	adds	r7, #92	; 0x5c
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	080046a3 	.word	0x080046a3
 8004234:	08004543 	.word	0x08004543

08004238 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004238:	b480      	push	{r7}
 800423a:	b095      	sub	sp, #84	; 0x54
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004248:	e853 3f00 	ldrex	r3, [r3]
 800424c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800424e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004250:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004254:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800425e:	643b      	str	r3, [r7, #64]	; 0x40
 8004260:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004262:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004264:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004266:	e841 2300 	strex	r3, r2, [r1]
 800426a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800426c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e6      	bne.n	8004240 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3308      	adds	r3, #8
 8004278:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	61fb      	str	r3, [r7, #28]
   return(result);
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	f023 0301 	bic.w	r3, r3, #1
 8004288:	64bb      	str	r3, [r7, #72]	; 0x48
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3308      	adds	r3, #8
 8004290:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004292:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004294:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004296:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e5      	bne.n	8004272 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d118      	bne.n	80042e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	e853 3f00 	ldrex	r3, [r3]
 80042ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f023 0310 	bic.w	r3, r3, #16
 80042c2:	647b      	str	r3, [r7, #68]	; 0x44
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042cc:	61bb      	str	r3, [r7, #24]
 80042ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	6979      	ldr	r1, [r7, #20]
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	e841 2300 	strex	r3, r2, [r1]
 80042d8:	613b      	str	r3, [r7, #16]
   return(result);
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e6      	bne.n	80042ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2220      	movs	r2, #32
 80042e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80042f2:	bf00      	nop
 80042f4:	3754      	adds	r7, #84	; 0x54
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b084      	sub	sp, #16
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f7ff fac5 	bl	80038ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004322:	bf00      	nop
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b084      	sub	sp, #16
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004336:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	220f      	movs	r2, #15
 8004346:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	8b1b      	ldrh	r3, [r3, #24]
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0208 	orr.w	r2, r2, #8
 8004358:	b292      	uxth	r2, r2
 800435a:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2220      	movs	r2, #32
 8004360:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f7ff faa9 	bl	80038c0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800436e:	bf00      	nop
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004376:	b480      	push	{r7}
 8004378:	b08f      	sub	sp, #60	; 0x3c
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004382:	2b21      	cmp	r3, #33	; 0x21
 8004384:	d14d      	bne.n	8004422 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d132      	bne.n	80043f8 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	e853 3f00 	ldrex	r3, [r3]
 800439e:	61fb      	str	r3, [r7, #28]
   return(result);
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043a6:	637b      	str	r3, [r7, #52]	; 0x34
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	461a      	mov	r2, r3
 80043ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043b2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043b8:	e841 2300 	strex	r3, r2, [r1]
 80043bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e6      	bne.n	8004392 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	e853 3f00 	ldrex	r3, [r3]
 80043d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043d8:	633b      	str	r3, [r7, #48]	; 0x30
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e2:	61bb      	str	r3, [r7, #24]
 80043e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e6:	6979      	ldr	r1, [r7, #20]
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	e841 2300 	strex	r3, r2, [r1]
 80043ee:	613b      	str	r3, [r7, #16]
   return(result);
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1e6      	bne.n	80043c4 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80043f6:	e014      	b.n	8004422 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043fc:	781a      	ldrb	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	b292      	uxth	r2, r2
 8004404:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004422:	bf00      	nop
 8004424:	373c      	adds	r7, #60	; 0x3c
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800442e:	b480      	push	{r7}
 8004430:	b091      	sub	sp, #68	; 0x44
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800443a:	2b21      	cmp	r3, #33	; 0x21
 800443c:	d151      	bne.n	80044e2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d132      	bne.n	80044b0 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	e853 3f00 	ldrex	r3, [r3]
 8004456:	623b      	str	r3, [r7, #32]
   return(result);
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800445e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004468:	633b      	str	r3, [r7, #48]	; 0x30
 800446a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800446e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004470:	e841 2300 	strex	r3, r2, [r1]
 8004474:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e6      	bne.n	800444a <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	60fb      	str	r3, [r7, #12]
   return(result);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004490:	637b      	str	r3, [r7, #52]	; 0x34
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800449a:	61fb      	str	r3, [r7, #28]
 800449c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449e:	69b9      	ldr	r1, [r7, #24]
 80044a0:	69fa      	ldr	r2, [r7, #28]
 80044a2:	e841 2300 	strex	r3, r2, [r1]
 80044a6:	617b      	str	r3, [r7, #20]
   return(result);
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1e6      	bne.n	800447c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80044ae:	e018      	b.n	80044e2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80044b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b8:	881a      	ldrh	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044c2:	b292      	uxth	r2, r2
 80044c4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ca:	1c9a      	adds	r2, r3, #2
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80044e2:	bf00      	nop
 80044e4:	3744      	adds	r7, #68	; 0x44
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b088      	sub	sp, #32
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	e853 3f00 	ldrex	r3, [r3]
 8004502:	60bb      	str	r3, [r7, #8]
   return(result);
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800450a:	61fb      	str	r3, [r7, #28]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	461a      	mov	r2, r3
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	61bb      	str	r3, [r7, #24]
 8004516:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004518:	6979      	ldr	r1, [r7, #20]
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	e841 2300 	strex	r3, r2, [r1]
 8004520:	613b      	str	r3, [r7, #16]
   return(result);
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1e6      	bne.n	80044f6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2220      	movs	r2, #32
 800452c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 fa47 	bl	80049c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800453a:	bf00      	nop
 800453c:	3720      	adds	r7, #32
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b096      	sub	sp, #88	; 0x58
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004550:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004558:	2b22      	cmp	r3, #34	; 0x22
 800455a:	f040 8094 	bne.w	8004686 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004564:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004568:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800456c:	b2d9      	uxtb	r1, r3
 800456e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004572:	b2da      	uxtb	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004578:	400a      	ands	r2, r1
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800458e:	b29b      	uxth	r3, r3
 8004590:	3b01      	subs	r3, #1
 8004592:	b29a      	uxth	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d179      	bne.n	800469a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ae:	e853 3f00 	ldrex	r3, [r3]
 80045b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045ba:	653b      	str	r3, [r7, #80]	; 0x50
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	461a      	mov	r2, r3
 80045c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c4:	647b      	str	r3, [r7, #68]	; 0x44
 80045c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045cc:	e841 2300 	strex	r3, r2, [r1]
 80045d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1e6      	bne.n	80045a6 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	3308      	adds	r3, #8
 80045de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	e853 3f00 	ldrex	r3, [r3]
 80045e6:	623b      	str	r3, [r7, #32]
   return(result);
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	f023 0301 	bic.w	r3, r3, #1
 80045ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3308      	adds	r3, #8
 80045f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045f8:	633a      	str	r2, [r7, #48]	; 0x30
 80045fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004600:	e841 2300 	strex	r3, r2, [r1]
 8004604:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1e5      	bne.n	80045d8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800461c:	2b01      	cmp	r3, #1
 800461e:	d12e      	bne.n	800467e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	e853 3f00 	ldrex	r3, [r3]
 8004632:	60fb      	str	r3, [r7, #12]
   return(result);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0310 	bic.w	r3, r3, #16
 800463a:	64bb      	str	r3, [r7, #72]	; 0x48
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	461a      	mov	r2, r3
 8004642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004644:	61fb      	str	r3, [r7, #28]
 8004646:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004648:	69b9      	ldr	r1, [r7, #24]
 800464a:	69fa      	ldr	r2, [r7, #28]
 800464c:	e841 2300 	strex	r3, r2, [r1]
 8004650:	617b      	str	r3, [r7, #20]
   return(result);
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1e6      	bne.n	8004626 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	f003 0310 	and.w	r3, r3, #16
 8004662:	2b10      	cmp	r3, #16
 8004664:	d103      	bne.n	800466e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2210      	movs	r2, #16
 800466c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004674:	4619      	mov	r1, r3
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7ff f92c 	bl	80038d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800467c:	e00d      	b.n	800469a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f984 	bl	800498c <HAL_UART_RxCpltCallback>
}
 8004684:	e009      	b.n	800469a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	8b1b      	ldrh	r3, [r3, #24]
 800468c:	b29a      	uxth	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0208 	orr.w	r2, r2, #8
 8004696:	b292      	uxth	r2, r2
 8004698:	831a      	strh	r2, [r3, #24]
}
 800469a:	bf00      	nop
 800469c:	3758      	adds	r7, #88	; 0x58
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b096      	sub	sp, #88	; 0x58
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046b0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046b8:	2b22      	cmp	r3, #34	; 0x22
 80046ba:	f040 8094 	bne.w	80047e6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80046c4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046cc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80046ce:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80046d2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80046d6:	4013      	ands	r3, r2
 80046d8:	b29a      	uxth	r2, r3
 80046da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e2:	1c9a      	adds	r2, r3, #2
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	3b01      	subs	r3, #1
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004700:	b29b      	uxth	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d179      	bne.n	80047fa <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470e:	e853 3f00 	ldrex	r3, [r3]
 8004712:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004716:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800471a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	461a      	mov	r2, r3
 8004722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004724:	643b      	str	r3, [r7, #64]	; 0x40
 8004726:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004728:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800472a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800472c:	e841 2300 	strex	r3, r2, [r1]
 8004730:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1e6      	bne.n	8004706 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3308      	adds	r3, #8
 800473e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	e853 3f00 	ldrex	r3, [r3]
 8004746:	61fb      	str	r3, [r7, #28]
   return(result);
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f023 0301 	bic.w	r3, r3, #1
 800474e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	3308      	adds	r3, #8
 8004756:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004758:	62fa      	str	r2, [r7, #44]	; 0x2c
 800475a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800475e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004760:	e841 2300 	strex	r3, r2, [r1]
 8004764:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1e5      	bne.n	8004738 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2220      	movs	r2, #32
 8004770:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800477c:	2b01      	cmp	r3, #1
 800477e:	d12e      	bne.n	80047de <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	e853 3f00 	ldrex	r3, [r3]
 8004792:	60bb      	str	r3, [r7, #8]
   return(result);
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f023 0310 	bic.w	r3, r3, #16
 800479a:	647b      	str	r3, [r7, #68]	; 0x44
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	461a      	mov	r2, r3
 80047a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047a4:	61bb      	str	r3, [r7, #24]
 80047a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a8:	6979      	ldr	r1, [r7, #20]
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	e841 2300 	strex	r3, r2, [r1]
 80047b0:	613b      	str	r3, [r7, #16]
   return(result);
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1e6      	bne.n	8004786 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	f003 0310 	and.w	r3, r3, #16
 80047c2:	2b10      	cmp	r3, #16
 80047c4:	d103      	bne.n	80047ce <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2210      	movs	r2, #16
 80047cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047d4:	4619      	mov	r1, r3
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7ff f87c 	bl	80038d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047dc:	e00d      	b.n	80047fa <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f8d4 	bl	800498c <HAL_UART_RxCpltCallback>
}
 80047e4:	e009      	b.n	80047fa <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	8b1b      	ldrh	r3, [r3, #24]
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0208 	orr.w	r2, r2, #8
 80047f6:	b292      	uxth	r2, r2
 80047f8:	831a      	strh	r2, [r3, #24]
}
 80047fa:	bf00      	nop
 80047fc:	3758      	adds	r7, #88	; 0x58
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
	...

08004818 <bsp_mb_slave_init>:
extern UART_HandleTypeDef uart_instance_main;
extern UART_HandleTypeDef uart_instance_hmi;
extern TIM_HandleTypeDef timer_instance_main;
extern TIM_HandleTypeDef timer_instance_hmi;

void bsp_mb_slave_init(void) {
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af02      	add	r7, sp, #8
	__slave[BSP_MODBUS_SLAVE_MAIN].uart  = &uart_instance_main;
 800481e:	4b13      	ldr	r3, [pc, #76]	; (800486c <bsp_mb_slave_init+0x54>)
 8004820:	4a13      	ldr	r2, [pc, #76]	; (8004870 <bsp_mb_slave_init+0x58>)
 8004822:	601a      	str	r2, [r3, #0]
	__slave[BSP_MODBUS_SLAVE_HMI].uart   = &uart_instance_hmi;
 8004824:	4b11      	ldr	r3, [pc, #68]	; (800486c <bsp_mb_slave_init+0x54>)
 8004826:	4a13      	ldr	r2, [pc, #76]	; (8004874 <bsp_mb_slave_init+0x5c>)
 8004828:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
	__slave[BSP_MODBUS_SLAVE_MAIN].timer = &timer_instance_main;
 800482c:	4b0f      	ldr	r3, [pc, #60]	; (800486c <bsp_mb_slave_init+0x54>)
 800482e:	4a12      	ldr	r2, [pc, #72]	; (8004878 <bsp_mb_slave_init+0x60>)
 8004830:	605a      	str	r2, [r3, #4]
	__slave[BSP_MODBUS_SLAVE_HMI].timer  = &timer_instance_hmi;
 8004832:	4b0e      	ldr	r3, [pc, #56]	; (800486c <bsp_mb_slave_init+0x54>)
 8004834:	4a11      	ldr	r2, [pc, #68]	; (800487c <bsp_mb_slave_init+0x64>)
 8004836:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60

	mb_data_init(&__mb_data);
 800483a:	4811      	ldr	r0, [pc, #68]	; (8004880 <bsp_mb_slave_init+0x68>)
 800483c:	f001 fb8c 	bl	8005f58 <mb_data_init>

	mb_slave_init(&__slave[BSP_MODBUS_SLAVE_MAIN], &__mb_data, BSP_MB_SLAVE_ID, BSP_MB_SLAVE_SPEED, BSP_MB_TIMER_CLOCK_SOURCE);
 8004840:	2350      	movs	r3, #80	; 0x50
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8004848:	2201      	movs	r2, #1
 800484a:	490d      	ldr	r1, [pc, #52]	; (8004880 <bsp_mb_slave_init+0x68>)
 800484c:	4807      	ldr	r0, [pc, #28]	; (800486c <bsp_mb_slave_init+0x54>)
 800484e:	f000 fa0f 	bl	8004c70 <mb_slave_init>
	mb_slave_init(&__slave[BSP_MODBUS_SLAVE_HMI], &__mb_data, BSP_MB_SLAVE_ID, BSP_MB_SLAVE_SPEED, BSP_MB_TIMER_CLOCK_SOURCE);
 8004852:	2350      	movs	r3, #80	; 0x50
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800485a:	2201      	movs	r2, #1
 800485c:	4908      	ldr	r1, [pc, #32]	; (8004880 <bsp_mb_slave_init+0x68>)
 800485e:	4809      	ldr	r0, [pc, #36]	; (8004884 <bsp_mb_slave_init+0x6c>)
 8004860:	f000 fa06 	bl	8004c70 <mb_slave_init>
}
 8004864:	bf00      	nop
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20000210 	.word	0x20000210
 8004870:	200000c0 	.word	0x200000c0
 8004874:	20000144 	.word	0x20000144
 8004878:	20000028 	.word	0x20000028
 800487c:	20000074 	.word	0x20000074
 8004880:	200001cc 	.word	0x200001cc
 8004884:	20000e6c 	.word	0x20000e6c

08004888 <bsp_mb_slave_handle>:

void bsp_mb_slave_handle(void) {
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
	mb_slave_handle(&__slave[BSP_MODBUS_SLAVE_MAIN]);
 800488c:	4803      	ldr	r0, [pc, #12]	; (800489c <bsp_mb_slave_handle+0x14>)
 800488e:	f000 fa79 	bl	8004d84 <mb_slave_handle>
	mb_slave_handle(&__slave[BSP_MODBUS_SLAVE_MAIN]);
 8004892:	4802      	ldr	r0, [pc, #8]	; (800489c <bsp_mb_slave_handle+0x14>)
 8004894:	f000 fa76 	bl	8004d84 <mb_slave_handle>
}
 8004898:	bf00      	nop
 800489a:	bd80      	pop	{r7, pc}
 800489c:	20000210 	.word	0x20000210

080048a0 <bsp_mb_coil_set>:

uint8_t bsp_mb_id_get(void) {
	return BSP_MB_SLAVE_ID;
}

void bsp_mb_coil_set(uint16_t addr, uint8_t status) {
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	4603      	mov	r3, r0
 80048a8:	460a      	mov	r2, r1
 80048aa:	80fb      	strh	r3, [r7, #6]
 80048ac:	4613      	mov	r3, r2
 80048ae:	717b      	strb	r3, [r7, #5]
	__mb_data.coil.set(&__mb_data.coil, addr, status);
 80048b0:	4b04      	ldr	r3, [pc, #16]	; (80048c4 <bsp_mb_coil_set+0x24>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	797a      	ldrb	r2, [r7, #5]
 80048b6:	88f9      	ldrh	r1, [r7, #6]
 80048b8:	4803      	ldr	r0, [pc, #12]	; (80048c8 <bsp_mb_coil_set+0x28>)
 80048ba:	4798      	blx	r3
}
 80048bc:	bf00      	nop
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	200001cc 	.word	0x200001cc
 80048c8:	200001d0 	.word	0x200001d0

080048cc <bsp_mb_discrete_input_set>:

uint8_t bsp_mb_coil_get(uint16_t addr) {
	return __mb_data.coil.get(&__mb_data.coil, addr);
}

void bsp_mb_discrete_input_set(uint16_t addr, uint8_t status) {
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4603      	mov	r3, r0
 80048d4:	460a      	mov	r2, r1
 80048d6:	80fb      	strh	r3, [r7, #6]
 80048d8:	4613      	mov	r3, r2
 80048da:	717b      	strb	r3, [r7, #5]
	__mb_data.input.set(&__mb_data.input, addr, status);
 80048dc:	4b04      	ldr	r3, [pc, #16]	; (80048f0 <bsp_mb_discrete_input_set+0x24>)
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	797a      	ldrb	r2, [r7, #5]
 80048e2:	88f9      	ldrh	r1, [r7, #6]
 80048e4:	4803      	ldr	r0, [pc, #12]	; (80048f4 <bsp_mb_discrete_input_set+0x28>)
 80048e6:	4798      	blx	r3
}
 80048e8:	bf00      	nop
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	200001cc 	.word	0x200001cc
 80048f4:	200001e0 	.word	0x200001e0

080048f8 <bsp_mb_input_reg_set>:

uint8_t bsp_mb_discrete_input_get(uint16_t addr) {
	return __mb_data.input.get(&__mb_data.input, addr);
}

void bsp_mb_input_reg_set(uint16_t addr, uint16_t value) {
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	4603      	mov	r3, r0
 8004900:	460a      	mov	r2, r1
 8004902:	80fb      	strh	r3, [r7, #6]
 8004904:	4613      	mov	r3, r2
 8004906:	80bb      	strh	r3, [r7, #4]
	__mb_data.reg_input.set(&__mb_data.reg_input, addr, value);
 8004908:	4b04      	ldr	r3, [pc, #16]	; (800491c <bsp_mb_input_reg_set+0x24>)
 800490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490c:	88ba      	ldrh	r2, [r7, #4]
 800490e:	88f9      	ldrh	r1, [r7, #6]
 8004910:	4803      	ldr	r0, [pc, #12]	; (8004920 <bsp_mb_input_reg_set+0x28>)
 8004912:	4798      	blx	r3
}
 8004914:	bf00      	nop
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	200001cc 	.word	0x200001cc
 8004920:	200001f0 	.word	0x200001f0

08004924 <bsp_mb_holding_reg_set>:

uint16_t bsp_mb_input_reg_get(uint16_t addr) {
	return __mb_data.reg_input.get(&__mb_data.reg_input, addr);
}

void bsp_mb_holding_reg_set(uint16_t addr, uint16_t value) {
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	4603      	mov	r3, r0
 800492c:	460a      	mov	r2, r1
 800492e:	80fb      	strh	r3, [r7, #6]
 8004930:	4613      	mov	r3, r2
 8004932:	80bb      	strh	r3, [r7, #4]
	__mb_data.reg_holding.set(&__mb_data.reg_holding, addr, value);
 8004934:	4b04      	ldr	r3, [pc, #16]	; (8004948 <bsp_mb_holding_reg_set+0x24>)
 8004936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004938:	88ba      	ldrh	r2, [r7, #4]
 800493a:	88f9      	ldrh	r1, [r7, #6]
 800493c:	4803      	ldr	r0, [pc, #12]	; (800494c <bsp_mb_holding_reg_set+0x28>)
 800493e:	4798      	blx	r3
}
 8004940:	bf00      	nop
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	200001cc 	.word	0x200001cc
 800494c:	20000200 	.word	0x20000200

08004950 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
	if(htim == __slave[BSP_MODBUS_SLAVE_MAIN].timer)
 8004958:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	429a      	cmp	r2, r3
 8004960:	d103      	bne.n	800496a <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		_mb_slave_timer_irq(&__slave[BSP_MODBUS_SLAVE_MAIN]);
 8004962:	4808      	ldr	r0, [pc, #32]	; (8004984 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8004964:	f000 fb5e 	bl	8005024 <_mb_slave_timer_irq>
		return;
 8004968:	e009      	b.n	800497e <HAL_TIM_PeriodElapsedCallback+0x2e>
	}

	if(htim == __slave[BSP_MODBUS_SLAVE_HMI].timer)
 800496a:	4b06      	ldr	r3, [pc, #24]	; (8004984 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800496c:	f8d3 3c60 	ldr.w	r3, [r3, #3168]	; 0xc60
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	429a      	cmp	r2, r3
 8004974:	d103      	bne.n	800497e <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		_mb_slave_timer_irq(&__slave[BSP_MODBUS_SLAVE_HMI]);
 8004976:	4804      	ldr	r0, [pc, #16]	; (8004988 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004978:	f000 fb54 	bl	8005024 <_mb_slave_timer_irq>
		return;
 800497c:	bf00      	nop
	}
}
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	20000210 	.word	0x20000210
 8004988:	20000e6c 	.word	0x20000e6c

0800498c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
	if(huart == __slave[BSP_MODBUS_SLAVE_MAIN].uart)
 8004994:	4b0a      	ldr	r3, [pc, #40]	; (80049c0 <HAL_UART_RxCpltCallback+0x34>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	429a      	cmp	r2, r3
 800499c:	d103      	bne.n	80049a6 <HAL_UART_RxCpltCallback+0x1a>
	{
		_mb_slave_rx_irq(&__slave[BSP_MODBUS_SLAVE_MAIN]);
 800499e:	4808      	ldr	r0, [pc, #32]	; (80049c0 <HAL_UART_RxCpltCallback+0x34>)
 80049a0:	f000 fb1a 	bl	8004fd8 <_mb_slave_rx_irq>
		return;
 80049a4:	e009      	b.n	80049ba <HAL_UART_RxCpltCallback+0x2e>
	}

	if(huart == __slave[BSP_MODBUS_SLAVE_HMI].uart)
 80049a6:	4b06      	ldr	r3, [pc, #24]	; (80049c0 <HAL_UART_RxCpltCallback+0x34>)
 80049a8:	f8d3 3c5c 	ldr.w	r3, [r3, #3164]	; 0xc5c
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d103      	bne.n	80049ba <HAL_UART_RxCpltCallback+0x2e>
	{
		_mb_slave_rx_irq(&__slave[BSP_MODBUS_SLAVE_HMI]);
 80049b2:	4804      	ldr	r0, [pc, #16]	; (80049c4 <HAL_UART_RxCpltCallback+0x38>)
 80049b4:	f000 fb10 	bl	8004fd8 <_mb_slave_rx_irq>
		return;
 80049b8:	bf00      	nop
	}
}
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	20000210 	.word	0x20000210
 80049c4:	20000e6c 	.word	0x20000e6c

080049c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
	if(huart == __slave[BSP_MODBUS_SLAVE_MAIN].uart)
 80049d0:	4b0a      	ldr	r3, [pc, #40]	; (80049fc <HAL_UART_TxCpltCallback+0x34>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d103      	bne.n	80049e2 <HAL_UART_TxCpltCallback+0x1a>
	{
		_mb_slave_tx_irq(&__slave[BSP_MODBUS_SLAVE_MAIN]);
 80049da:	4808      	ldr	r0, [pc, #32]	; (80049fc <HAL_UART_TxCpltCallback+0x34>)
 80049dc:	f000 fad0 	bl	8004f80 <_mb_slave_tx_irq>
		return;
 80049e0:	e009      	b.n	80049f6 <HAL_UART_TxCpltCallback+0x2e>
	}

	if(huart == __slave[BSP_MODBUS_SLAVE_HMI].uart)
 80049e2:	4b06      	ldr	r3, [pc, #24]	; (80049fc <HAL_UART_TxCpltCallback+0x34>)
 80049e4:	f8d3 3c5c 	ldr.w	r3, [r3, #3164]	; 0xc5c
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d103      	bne.n	80049f6 <HAL_UART_TxCpltCallback+0x2e>
	{
		_mb_slave_tx_irq(&__slave[BSP_MODBUS_SLAVE_HMI]);
 80049ee:	4804      	ldr	r0, [pc, #16]	; (8004a00 <HAL_UART_TxCpltCallback+0x38>)
 80049f0:	f000 fac6 	bl	8004f80 <_mb_slave_tx_irq>
		return;
 80049f4:	bf00      	nop
	}
}
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	20000210 	.word	0x20000210
 8004a00:	20000e6c 	.word	0x20000e6c

08004a04 <__mb_failure>:

#include "mb_assert.h"
#include "mb_stm32_include.h"

void __mb_failure(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004a08:	b672      	cpsid	i
}
 8004a0a:	bf00      	nop
	__disable_irq();
	while(1);
 8004a0c:	e7fe      	b.n	8004a0c <__mb_failure+0x8>
	...

08004a10 <mb_buffer_init>:
static mb_pdu_t* _get_data(mb_buffer_t *buf);
static void      _commit_get(mb_buffer_t *buf);
static void      _flush(mb_buffer_t *buf);
static uint8_t   _available(mb_buffer_t *buf);

void mb_buffer_init(mb_buffer_t *buf) {
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <mb_buffer_init+0x12>
 8004a1e:	f7ff fff1 	bl	8004a04 <__mb_failure>
	buf->__available = 0;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	709a      	strb	r2, [r3, #2]
	buf->__tail      = 0;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	705a      	strb	r2, [r3, #1]
	buf->__head      = 0;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	701a      	strb	r2, [r3, #0]

	buf->next        = _next;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a0d      	ldr	r2, [pc, #52]	; (8004a6c <mb_buffer_init+0x5c>)
 8004a38:	f8c3 2a18 	str.w	r2, [r3, #2584]	; 0xa18
	buf->commit_next = _commit_next;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a0c      	ldr	r2, [pc, #48]	; (8004a70 <mb_buffer_init+0x60>)
 8004a40:	f8c3 2a1c 	str.w	r2, [r3, #2588]	; 0xa1c
	buf->get_data    = _get_data;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a0b      	ldr	r2, [pc, #44]	; (8004a74 <mb_buffer_init+0x64>)
 8004a48:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20
	buf->commit_get  = _commit_get;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a0a      	ldr	r2, [pc, #40]	; (8004a78 <mb_buffer_init+0x68>)
 8004a50:	f8c3 2a24 	str.w	r2, [r3, #2596]	; 0xa24
	buf->flush       = _flush;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a09      	ldr	r2, [pc, #36]	; (8004a7c <mb_buffer_init+0x6c>)
 8004a58:	f8c3 2a28 	str.w	r2, [r3, #2600]	; 0xa28
	buf->available   = _available;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a08      	ldr	r2, [pc, #32]	; (8004a80 <mb_buffer_init+0x70>)
 8004a60:	f8c3 2a2c 	str.w	r2, [r3, #2604]	; 0xa2c
}
 8004a64:	bf00      	nop
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	08004a85 	.word	0x08004a85
 8004a70:	08004ab5 	.word	0x08004ab5
 8004a74:	08004b15 	.word	0x08004b15
 8004a78:	08004b45 	.word	0x08004b45
 8004a7c:	08004b99 	.word	0x08004b99
 8004a80:	08004bc5 	.word	0x08004bc5

08004a84 <_next>:

static mb_pdu_t* _next(mb_buffer_t *buf) {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <_next+0x12>
 8004a92:	f7ff ffb7 	bl	8004a04 <__mb_failure>
	return &buf->__data[buf->__head];
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	01db      	lsls	r3, r3, #7
 8004aa0:	4413      	add	r3, r2
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	3304      	adds	r3, #4
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <_commit_next>:

static void _commit_next(mb_buffer_t *buf) {
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <_commit_next+0x12>
 8004ac2:	f7ff ff9f 	bl	8004a04 <__mb_failure>
	if (buf->__available >= MB_BUFFER_SIZE) {
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	789b      	ldrb	r3, [r3, #2]
 8004aca:	2b09      	cmp	r3, #9
 8004acc:	d904      	bls.n	8004ad8 <_commit_next+0x24>
		mb_log("MB buffer overflow\n");
 8004ace:	490f      	ldr	r1, [pc, #60]	; (8004b0c <_commit_next+0x58>)
 8004ad0:	2000      	movs	r0, #0
 8004ad2:	f002 f8e7 	bl	8006ca4 <SEGGER_RTT_printf>
		return;
 8004ad6:	e016      	b.n	8004b06 <_commit_next+0x52>
	} else {
		buf->__head = (buf->__head + 1) % MB_BUFFER_SIZE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	4b0c      	ldr	r3, [pc, #48]	; (8004b10 <_commit_next+0x5c>)
 8004ae0:	fb83 1302 	smull	r1, r3, r3, r2
 8004ae4:	1099      	asrs	r1, r3, #2
 8004ae6:	17d3      	asrs	r3, r2, #31
 8004ae8:	1ac9      	subs	r1, r1, r3
 8004aea:	460b      	mov	r3, r1
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	440b      	add	r3, r1
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	1ad1      	subs	r1, r2, r3
 8004af4:	b2ca      	uxtb	r2, r1
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	701a      	strb	r2, [r3, #0]
		buf->__available++;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	789b      	ldrb	r3, [r3, #2]
 8004afe:	3301      	adds	r3, #1
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	709a      	strb	r2, [r3, #2]
	}
}
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	08006d60 	.word	0x08006d60
 8004b10:	66666667 	.word	0x66666667

08004b14 <_get_data>:

static mb_pdu_t* _get_data(mb_buffer_t *buf) {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <_get_data+0x12>
 8004b22:	f7ff ff6f 	bl	8004a04 <__mb_failure>
	return &buf->__data[buf->__tail];
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	785b      	ldrb	r3, [r3, #1]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	01db      	lsls	r3, r3, #7
 8004b30:	4413      	add	r3, r2
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	4413      	add	r3, r2
 8004b38:	3304      	adds	r3, #4
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
	...

08004b44 <_commit_get>:

static void _commit_get(mb_buffer_t *buf) {
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <_commit_get+0x12>
 8004b52:	f7ff ff57 	bl	8004a04 <__mb_failure>
	if (buf->__available) {
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	789b      	ldrb	r3, [r3, #2]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d016      	beq.n	8004b8c <_commit_get+0x48>
		buf->__tail = (buf->__tail + 1) % MB_BUFFER_SIZE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	785b      	ldrb	r3, [r3, #1]
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <_commit_get+0x50>)
 8004b66:	fb83 1302 	smull	r1, r3, r3, r2
 8004b6a:	1099      	asrs	r1, r3, #2
 8004b6c:	17d3      	asrs	r3, r2, #31
 8004b6e:	1ac9      	subs	r1, r1, r3
 8004b70:	460b      	mov	r3, r1
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	1ad1      	subs	r1, r2, r3
 8004b7a:	b2ca      	uxtb	r2, r1
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	705a      	strb	r2, [r3, #1]
		buf->__available--;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	789b      	ldrb	r3, [r3, #2]
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	709a      	strb	r2, [r3, #2]
	}
}
 8004b8c:	bf00      	nop
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	66666667 	.word	0x66666667

08004b98 <_flush>:

static void _flush(mb_buffer_t *buf) {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <_flush+0x12>
 8004ba6:	f7ff ff2d 	bl	8004a04 <__mb_failure>
	buf->__tail      = 0;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	705a      	strb	r2, [r3, #1]
	buf->__head      = 0;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	701a      	strb	r2, [r3, #0]
	buf->__available = 0;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	709a      	strb	r2, [r3, #2]
}
 8004bbc:	bf00      	nop
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <_available>:

static uint8_t _available(mb_buffer_t *buf) {
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <_available+0x12>
 8004bd2:	f7ff ff17 	bl	8004a04 <__mb_failure>
	
	return buf->__available;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	789b      	ldrb	r3, [r3, #2]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <mb_crc_calc>:
 */

#include "mb_crc.h"

uint16_t mb_crc_calc(uint8_t* data, uint16_t len)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b087      	sub	sp, #28
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	460b      	mov	r3, r1
 8004bec:	807b      	strh	r3, [r7, #2]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8004bee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bf2:	617b      	str	r3, [r7, #20]
    for (uint16_t i = 0; i < len; i++)
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	827b      	strh	r3, [r7, #18]
 8004bf8:	e023      	b.n	8004c42 <mb_crc_calc+0x60>
    {
        temp = temp ^ data[i];
 8004bfa:	8a7b      	ldrh	r3, [r7, #18]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	4413      	add	r3, r2
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	461a      	mov	r2, r3
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	4053      	eors	r3, r2
 8004c08:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 1; j <= 8; j++)
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	747b      	strb	r3, [r7, #17]
 8004c0e:	e012      	b.n	8004c36 <mb_crc_calc+0x54>
        {
            flag = temp & 0x0001;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	085b      	lsrs	r3, r3, #1
 8004c1c:	617b      	str	r3, [r7, #20]
            if (flag)
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d005      	beq.n	8004c30 <mb_crc_calc+0x4e>
                temp ^= 0xA001;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 8004c2a:	f083 0301 	eor.w	r3, r3, #1
 8004c2e:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 1; j <= 8; j++)
 8004c30:	7c7b      	ldrb	r3, [r7, #17]
 8004c32:	3301      	adds	r3, #1
 8004c34:	747b      	strb	r3, [r7, #17]
 8004c36:	7c7b      	ldrb	r3, [r7, #17]
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d9e9      	bls.n	8004c10 <mb_crc_calc+0x2e>
    for (uint16_t i = 0; i < len; i++)
 8004c3c:	8a7b      	ldrh	r3, [r7, #18]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	827b      	strh	r3, [r7, #18]
 8004c42:	8a7a      	ldrh	r2, [r7, #18]
 8004c44:	887b      	ldrh	r3, [r7, #2]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d3d7      	bcc.n	8004bfa <mb_crc_calc+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	0a1b      	lsrs	r3, r3, #8
 8004c4e:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	021b      	lsls	r3, r3, #8
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	617b      	str	r3, [r7, #20]

    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	b29b      	uxth	r3, r3
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	371c      	adds	r7, #28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <mb_slave_init>:
static uint8_t fc_write_single_reg(mb_slave_t* mb, mb_pdu_t* pdu);
static uint8_t fc_write_multi_coil(mb_slave_t* mb, mb_pdu_t* pdu);
static uint8_t fc_write_multi_reg(mb_slave_t* mb, mb_pdu_t* pdu);

mb_return_t mb_slave_init(mb_slave_t* mb, mb_data_t* data, uint8_t sl_addr, uint32_t speed, uint32_t timer_clk_mhz)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	603b      	str	r3, [r7, #0]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	71fb      	strb	r3, [r7, #7]
	mb_assert(mb);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <mb_slave_init+0x1a>
 8004c86:	f7ff febd 	bl	8004a04 <__mb_failure>
	mb_assert(mb->uart);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <mb_slave_init+0x26>
 8004c92:	f7ff feb7 	bl	8004a04 <__mb_failure>
	mb_assert(mb->timer);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <mb_slave_init+0x32>
 8004c9e:	f7ff feb1 	bl	8004a04 <__mb_failure>
	mb_assert(mb_data_is_init(mb->data));
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f001 f9a3 	bl	8005ff4 <mb_data_is_init>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <mb_slave_init+0x48>
 8004cb4:	f7ff fea6 	bl	8004a04 <__mb_failure>

	mb_log_init();
 8004cb8:	2300      	movs	r3, #0
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	f001 fc3e 	bl	8006544 <SEGGER_RTT_ConfigUpBuffer>
	mb_log("MODBUS init\n");
 8004cc8:	492a      	ldr	r1, [pc, #168]	; (8004d74 <mb_slave_init+0x104>)
 8004cca:	2000      	movs	r0, #0
 8004ccc:	f001 ffea 	bl	8006ca4 <SEGGER_RTT_printf>
	mb_log("Speed: %d\n", speed);
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	4929      	ldr	r1, [pc, #164]	; (8004d78 <mb_slave_init+0x108>)
 8004cd4:	2000      	movs	r0, #0
 8004cd6:	f001 ffe5 	bl	8006ca4 <SEGGER_RTT_printf>

	// Check address rule:
	// MODBUS address should in range from 1 to 247
	// NOTE: Check section "2.2 MODBUS Addressing rules" on "Modbus_over_serial_line_V1_02.pdf"
	if(sl_addr < 1 || sl_addr > 247)
 8004cda:	79fb      	ldrb	r3, [r7, #7]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <mb_slave_init+0x76>
 8004ce0:	79fb      	ldrb	r3, [r7, #7]
 8004ce2:	2bf7      	cmp	r3, #247	; 0xf7
 8004ce4:	d907      	bls.n	8004cf6 <mb_slave_init+0x86>
	{
		mb_log("MODBUS error: address invalid: %d\n", sl_addr);
 8004ce6:	79fb      	ldrb	r3, [r7, #7]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4924      	ldr	r1, [pc, #144]	; (8004d7c <mb_slave_init+0x10c>)
 8004cec:	2000      	movs	r0, #0
 8004cee:	f001 ffd9 	bl	8006ca4 <SEGGER_RTT_printf>
		return MB_FAILURE;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e039      	b.n	8004d6a <mb_slave_init+0xfa>
	}

	ring_buffer_init(&mb->uart_buf);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	3308      	adds	r3, #8
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f001 f82e 	bl	8005d5c <ring_buffer_init>
	mb_buffer_init(&mb->buf);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7ff fe82 	bl	8004a10 <mb_buffer_init>

	// Set instance
	mb->data = data;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	f8c3 2c58 	str.w	r2, [r3, #3160]	; 0xc58
	mb->slave_addr = sl_addr;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	79fa      	ldrb	r2, [r7, #7]
 8004d18:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

	// Timer configure
	__HAL_TIM_CLEAR_IT(mb->timer, TIM_IT_UPDATE);						// Clear IRQ pending
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f06f 0201 	mvn.w	r2, #1
 8004d26:	611a      	str	r2, [r3, #16]
	__HAL_TIM_SET_PRESCALER(mb->timer, (timer_clk_mhz - 1));	// Set timer prescaler
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	3a01      	subs	r2, #1
 8004d32:	629a      	str	r2, [r3, #40]	; 0x28
	set_timer_period(mb, speed);
 8004d34:	6839      	ldr	r1, [r7, #0]
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 f9fa 	bl	8005130 <set_timer_period>

	mb->is_init = true;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55

	tx_buf.tail   = 0;
 8004d44:	4b0e      	ldr	r3, [pc, #56]	; (8004d80 <mb_slave_init+0x110>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	80da      	strh	r2, [r3, #6]
	tx_buf.head   = 0;
 8004d4a:	4b0d      	ldr	r3, [pc, #52]	; (8004d80 <mb_slave_init+0x110>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	809a      	strh	r2, [r3, #4]
	tx_buf.tx_len = 0;
 8004d50:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <mb_slave_init+0x110>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	805a      	strh	r2, [r3, #2]

	// Start receive UART
	HAL_UART_Receive_IT(mb->uart, &mb->uart_rx, 1);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8004d60:	2201      	movs	r2, #1
 8004d62:	4619      	mov	r1, r3
 8004d64:	f7fe f9a2 	bl	80030ac <HAL_UART_Receive_IT>

	return MB_SUCCESS;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	08006d74 	.word	0x08006d74
 8004d78:	08006d84 	.word	0x08006d84
 8004d7c:	08006d90 	.word	0x08006d90
 8004d80:	20001ac8 	.word	0x20001ac8

08004d84 <mb_slave_handle>:
	}

	return MB_SUCCESS;
}

void mb_slave_handle(mb_slave_t *mb) {
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
	mb_assert(mb);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <mb_slave_handle+0x12>
 8004d92:	f7ff fe37 	bl	8004a04 <__mb_failure>

	// Reject handle if MODBUS is not initialize
	if(mb->is_init == false){
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 8004d9c:	f083 0301 	eor.w	r3, r3, #1
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f040 80d6 	bne.w	8004f54 <mb_slave_handle+0x1d0>
		return;
	}

	// Handle received data
	if (mb->buf.available(&mb->buf) == 0) {
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	f502 7209 	add.w	r2, r2, #548	; 0x224
 8004db4:	4610      	mov	r0, r2
 8004db6:	4798      	blx	r3
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 80cc 	beq.w	8004f58 <mb_slave_handle+0x1d4>
		return;
	}

	// Check frame PDU data size
	mb_pdu_t* pdu = mb->buf.get_data(&mb->buf);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8d3 3c44 	ldr.w	r3, [r3, #3140]	; 0xc44
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	f502 7209 	add.w	r2, r2, #548	; 0x224
 8004dcc:	4610      	mov	r0, r2
 8004dce:	4798      	blx	r3
 8004dd0:	6138      	str	r0, [r7, #16]
	if(pdu->len < 8){
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	2b07      	cmp	r3, #7
 8004dd8:	d80f      	bhi.n	8004dfa <mb_slave_handle+0x76>
		mb_log("MODBUS error: bad frame, len = %d", pdu->len);
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	461a      	mov	r2, r3
 8004de0:	4960      	ldr	r1, [pc, #384]	; (8004f64 <mb_slave_handle+0x1e0>)
 8004de2:	2000      	movs	r0, #0
 8004de4:	f001 ff5e 	bl	8006ca4 <SEGGER_RTT_printf>
		mb->buf.commit_get(&mb->buf);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 3c48 	ldr.w	r3, [r3, #3144]	; 0xc48
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	f502 7209 	add.w	r2, r2, #548	; 0x224
 8004df4:	4610      	mov	r0, r2
 8004df6:	4798      	blx	r3
		return;
 8004df8:	e0b1      	b.n	8004f5e <mb_slave_handle+0x1da>
	}

	// Slave ID
	if(pdu->data[MB_PDU_ID] != mb->slave_addr){
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	789a      	ldrb	r2, [r3, #2]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8004e04:	429a      	cmp	r2, r3
 8004e06:	f040 80a9 	bne.w	8004f5c <mb_slave_handle+0x1d8>
		return;
	}

#ifdef MB_LOG
	mb_log("Request: ");
 8004e0a:	4957      	ldr	r1, [pc, #348]	; (8004f68 <mb_slave_handle+0x1e4>)
 8004e0c:	2000      	movs	r0, #0
 8004e0e:	f001 ff49 	bl	8006ca4 <SEGGER_RTT_printf>
	for(uint8_t i = 0; i < pdu->len; i++)
 8004e12:	2300      	movs	r3, #0
 8004e14:	75fb      	strb	r3, [r7, #23]
 8004e16:	e00b      	b.n	8004e30 <mb_slave_handle+0xac>
	{
		mb_log("%02x ", pdu->data[i]);
 8004e18:	7dfb      	ldrb	r3, [r7, #23]
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	789b      	ldrb	r3, [r3, #2]
 8004e20:	461a      	mov	r2, r3
 8004e22:	4952      	ldr	r1, [pc, #328]	; (8004f6c <mb_slave_handle+0x1e8>)
 8004e24:	2000      	movs	r0, #0
 8004e26:	f001 ff3d 	bl	8006ca4 <SEGGER_RTT_printf>
	for(uint8_t i = 0; i < pdu->len; i++)
 8004e2a:	7dfb      	ldrb	r3, [r7, #23]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	75fb      	strb	r3, [r7, #23]
 8004e30:	7dfb      	ldrb	r3, [r7, #23]
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d3ed      	bcc.n	8004e18 <mb_slave_handle+0x94>
	}
	mb_log("\n");
 8004e3c:	494c      	ldr	r1, [pc, #304]	; (8004f70 <mb_slave_handle+0x1ec>)
 8004e3e:	2000      	movs	r0, #0
 8004e40:	f001 ff30 	bl	8006ca4 <SEGGER_RTT_printf>
	mb_log("Func code: %d\n", pdu->data[MB_PDU_FUNC]);
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	78db      	ldrb	r3, [r3, #3]
 8004e48:	461a      	mov	r2, r3
 8004e4a:	494a      	ldr	r1, [pc, #296]	; (8004f74 <mb_slave_handle+0x1f0>)
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	f001 ff29 	bl	8006ca4 <SEGGER_RTT_printf>
	mb_log("Address  : %d\n", (uint16_t)((uint16_t)pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO]));
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	791b      	ldrb	r3, [r3, #4]
 8004e56:	021b      	lsls	r3, r3, #8
 8004e58:	b21a      	sxth	r2, r3
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	795b      	ldrb	r3, [r3, #5]
 8004e5e:	b21b      	sxth	r3, r3
 8004e60:	4313      	orrs	r3, r2
 8004e62:	b21b      	sxth	r3, r3
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	461a      	mov	r2, r3
 8004e68:	4943      	ldr	r1, [pc, #268]	; (8004f78 <mb_slave_handle+0x1f4>)
 8004e6a:	2000      	movs	r0, #0
 8004e6c:	f001 ff1a 	bl	8006ca4 <SEGGER_RTT_printf>
#endif

	// Verify CRC
	uint16_t crc = (pdu->data[pdu->len - 2] << 8) | pdu->data[pdu->len - 1];
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	3b02      	subs	r3, #2
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4413      	add	r3, r2
 8004e7a:	789b      	ldrb	r3, [r3, #2]
 8004e7c:	021b      	lsls	r3, r3, #8
 8004e7e:	b21a      	sxth	r2, r3
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	3b01      	subs	r3, #1
 8004e86:	6939      	ldr	r1, [r7, #16]
 8004e88:	440b      	add	r3, r1
 8004e8a:	789b      	ldrb	r3, [r3, #2]
 8004e8c:	b21b      	sxth	r3, r3
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	b21b      	sxth	r3, r3
 8004e92:	81fb      	strh	r3, [r7, #14]
	if(crc != mb_crc_calc(pdu->data, pdu->len - 2))
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1c9a      	adds	r2, r3, #2
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	3b02      	subs	r3, #2
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	f7ff fe9d 	bl	8004be2 <mb_crc_calc>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	461a      	mov	r2, r3
 8004eac:	89fb      	ldrh	r3, [r7, #14]
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d004      	beq.n	8004ebc <mb_slave_handle+0x138>
	{
		mb_log("MODBUS error: CRC invalid\n");
 8004eb2:	4932      	ldr	r1, [pc, #200]	; (8004f7c <mb_slave_handle+0x1f8>)
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	f001 fef5 	bl	8006ca4 <SEGGER_RTT_printf>
		return;
 8004eba:	e050      	b.n	8004f5e <mb_slave_handle+0x1da>
	}

	// Handle request
	uint8_t err_code = valid_request(mb, pdu);
 8004ebc:	6939      	ldr	r1, [r7, #16]
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f94e 	bl	8005160 <valid_request>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	737b      	strb	r3, [r7, #13]
	if (err_code) {
 8004ec8:	7b7b      	ldrb	r3, [r7, #13]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d006      	beq.n	8004edc <mb_slave_handle+0x158>
		build_exc(mb, pdu, err_code);
 8004ece:	7b7b      	ldrb	r3, [r7, #13]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6939      	ldr	r1, [r7, #16]
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 fb3b 	bl	8005550 <build_exc>
 8004eda:	e00e      	b.n	8004efa <mb_slave_handle+0x176>
	} else {
		err_code = execute_func(mb, pdu);
 8004edc:	6939      	ldr	r1, [r7, #16]
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 fad2 	bl	8005488 <execute_func>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	737b      	strb	r3, [r7, #13]
		if (err_code)
 8004ee8:	7b7b      	ldrb	r3, [r7, #13]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d005      	beq.n	8004efa <mb_slave_handle+0x176>
			build_exc(mb, pdu, err_code);
 8004eee:	7b7b      	ldrb	r3, [r7, #13]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	6939      	ldr	r1, [r7, #16]
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fb2b 	bl	8005550 <build_exc>
	}

	// Response data
	crc = mb_crc_calc(pdu->data, pdu->len - 2);
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1c9a      	adds	r2, r3, #2
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	3b02      	subs	r3, #2
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	4619      	mov	r1, r3
 8004f08:	4610      	mov	r0, r2
 8004f0a:	f7ff fe6a 	bl	8004be2 <mb_crc_calc>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	81fb      	strh	r3, [r7, #14]
	pdu->data[pdu->len - 2] = (uint8_t) (crc >> 8);
 8004f12:	89fb      	ldrh	r3, [r7, #14]
 8004f14:	0a1b      	lsrs	r3, r3, #8
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	3b02      	subs	r3, #2
 8004f1e:	b2d1      	uxtb	r1, r2
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4413      	add	r3, r2
 8004f24:	460a      	mov	r2, r1
 8004f26:	709a      	strb	r2, [r3, #2]
	pdu->data[pdu->len - 1] = (uint8_t) (crc & 0x00FF);
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	89fa      	ldrh	r2, [r7, #14]
 8004f30:	b2d1      	uxtb	r1, r2
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4413      	add	r3, r2
 8004f36:	460a      	mov	r2, r1
 8004f38:	709a      	strb	r2, [r3, #2]
	set_tx(mb, pdu);
 8004f3a:	6939      	ldr	r1, [r7, #16]
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 fb27 	bl	8005590 <set_tx>

	// Commit processed data
	mb->buf.commit_get(&mb->buf);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8d3 3c48 	ldr.w	r3, [r3, #3144]	; 0xc48
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	f502 7209 	add.w	r2, r2, #548	; 0x224
 8004f4e:	4610      	mov	r0, r2
 8004f50:	4798      	blx	r3
 8004f52:	e004      	b.n	8004f5e <mb_slave_handle+0x1da>
		return;
 8004f54:	bf00      	nop
 8004f56:	e002      	b.n	8004f5e <mb_slave_handle+0x1da>
		return;
 8004f58:	bf00      	nop
 8004f5a:	e000      	b.n	8004f5e <mb_slave_handle+0x1da>
		return;
 8004f5c:	bf00      	nop
}
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	08006dc4 	.word	0x08006dc4
 8004f68:	08006de8 	.word	0x08006de8
 8004f6c:	08006df4 	.word	0x08006df4
 8004f70:	08006dfc 	.word	0x08006dfc
 8004f74:	08006e00 	.word	0x08006e00
 8004f78:	08006e10 	.word	0x08006e10
 8004f7c:	08006e20 	.word	0x08006e20

08004f80 <_mb_slave_tx_irq>:

void _mb_slave_tx_irq(mb_slave_t* mb)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	mb_assert(mb);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <_mb_slave_tx_irq+0x12>
 8004f8e:	f7ff fd39 	bl	8004a04 <__mb_failure>
	tx_buf.tail  = (tx_buf.tail + tx_buf.tx_len) % UART_TX_BUF_SIZE;
 8004f92:	4b0f      	ldr	r3, [pc, #60]	; (8004fd0 <_mb_slave_tx_irq+0x50>)
 8004f94:	88db      	ldrh	r3, [r3, #6]
 8004f96:	461a      	mov	r2, r3
 8004f98:	4b0d      	ldr	r3, [pc, #52]	; (8004fd0 <_mb_slave_tx_irq+0x50>)
 8004f9a:	885b      	ldrh	r3, [r3, #2]
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	441a      	add	r2, r3
 8004fa0:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <_mb_slave_tx_irq+0x54>)
 8004fa2:	fb83 1302 	smull	r1, r3, r3, r2
 8004fa6:	1199      	asrs	r1, r3, #6
 8004fa8:	17d3      	asrs	r3, r2, #31
 8004faa:	1ac9      	subs	r1, r1, r3
 8004fac:	460b      	mov	r3, r1
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	440b      	add	r3, r1
 8004fb2:	01db      	lsls	r3, r3, #7
 8004fb4:	1ad1      	subs	r1, r2, r3
 8004fb6:	b28a      	uxth	r2, r1
 8004fb8:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <_mb_slave_tx_irq+0x50>)
 8004fba:	80da      	strh	r2, [r3, #6]
	tx_buf.on_tx = false;
 8004fbc:	4b04      	ldr	r3, [pc, #16]	; (8004fd0 <_mb_slave_tx_irq+0x50>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	701a      	strb	r2, [r3, #0]
	start_transmit(mb);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fb4c 	bl	8005660 <start_transmit>
}
 8004fc8:	bf00      	nop
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	20001ac8 	.word	0x20001ac8
 8004fd4:	2aaaaaab 	.word	0x2aaaaaab

08004fd8 <_mb_slave_rx_irq>:

void _mb_slave_rx_irq(mb_slave_t* mb)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
	mb->uart_buf.add(&mb->uart_buf, mb->uart_rx);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	f102 0008 	add.w	r0, r2, #8
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	f892 2220 	ldrb.w	r2, [r2, #544]	; 0x220
 8004ff2:	4611      	mov	r1, r2
 8004ff4:	4798      	blx	r3

	// Restart timer
	__HAL_TIM_SET_COUNTER(mb->timer, 0);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(mb->timer);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	4618      	mov	r0, r3
 8005006:	f7fd fb7f 	bl	8002708 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(mb->uart, &mb->uart_rx, 1);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6818      	ldr	r0, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8005014:	2201      	movs	r2, #1
 8005016:	4619      	mov	r1, r3
 8005018:	f7fe f848 	bl	80030ac <HAL_UART_Receive_IT>
}
 800501c:	bf00      	nop
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <_mb_slave_timer_irq>:

void _mb_slave_timer_irq(mb_slave_t* mb)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
	// Stop receive UART
	HAL_UART_AbortReceive_IT(mb->uart);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4618      	mov	r0, r3
 8005032:	f7fe f891 	bl	8003158 <HAL_UART_AbortReceive_IT>
	HAL_TIM_Base_Stop_IT(mb->timer);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	4618      	mov	r0, r3
 800503c:	f7fd fbb8 	bl	80027b0 <HAL_TIM_Base_Stop_IT>

	// Copy data from buffer to MODBUS packet
	if(mb->uart_buf.overflow)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 320e 	ldrb.w	r3, [r3, #526]	; 0x20e
 8005046:	2b00      	cmp	r3, #0
 8005048:	d007      	beq.n	800505a <_mb_slave_timer_irq+0x36>
	{
		mb->uart_buf.flush(&mb->uart_buf);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	3208      	adds	r2, #8
 8005054:	4610      	mov	r0, r2
 8005056:	4798      	blx	r3
 8005058:	e01e      	b.n	8005098 <_mb_slave_timer_irq+0x74>
	}
	else
	{
		mb_pdu_t *pdu = mb->buf.next(&mb->buf);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8d3 3c3c 	ldr.w	r3, [r3, #3132]	; 0xc3c
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	f502 7209 	add.w	r2, r2, #548	; 0x224
 8005066:	4610      	mov	r0, r2
 8005068:	4798      	blx	r3
 800506a:	60f8      	str	r0, [r7, #12]
		pdu->len = MB_PDU_SIZE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005072:	801a      	strh	r2, [r3, #0]
		mb->uart_buf.get_data(&mb->uart_buf, pdu->data, &pdu->len);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	f102 0008 	add.w	r0, r2, #8
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	1c91      	adds	r1, r2, #2
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4798      	blx	r3
		mb->buf.commit_next(&mb->buf);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8d3 3c40 	ldr.w	r3, [r3, #3136]	; 0xc40
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	f502 7209 	add.w	r2, r2, #548	; 0x224
 8005094:	4610      	mov	r0, r2
 8005096:	4798      	blx	r3
	}

	// Start receive UART
	HAL_UART_Receive_IT(mb->uart, &mb->uart_rx, 1);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6818      	ldr	r0, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80050a2:	2201      	movs	r2, #1
 80050a4:	4619      	mov	r1, r3
 80050a6:	f7fe f801 	bl	80030ac <HAL_UART_Receive_IT>
}
 80050aa:	bf00      	nop
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
	...

080050b4 <get_t35>:

static uint32_t get_t35(uint32_t speed) {
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
	mb_assert(speed);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <get_t35+0x12>
 80050c2:	f7ff fc9f 	bl	8004a04 <__mb_failure>

	float f_speed = (1000000.0f / ((float) speed / 8.0f));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	ee07 3a90 	vmov	s15, r3
 80050cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d0:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80050d4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80050d8:	eddf 6a13 	vldr	s13, [pc, #76]	; 8005128 <get_t35+0x74>
 80050dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050e0:	edc7 7a03 	vstr	s15, [r7, #12]
	f_speed = f_speed * 3.5f;
 80050e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80050e8:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 80050ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050f0:	edc7 7a03 	vstr	s15, [r7, #12]

	mb_log("Get T35: speed = %u, T35 = %u (us)\n", speed, (uint32_t)f_speed);
 80050f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80050f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050fc:	ee17 3a90 	vmov	r3, s15
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	490a      	ldr	r1, [pc, #40]	; (800512c <get_t35+0x78>)
 8005104:	2000      	movs	r0, #0
 8005106:	f001 fdcd 	bl	8006ca4 <SEGGER_RTT_printf>
	return (uint32_t) (f_speed + 1);
 800510a:	edd7 7a03 	vldr	s15, [r7, #12]
 800510e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005112:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800511a:	ee17 3a90 	vmov	r3, s15
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	49742400 	.word	0x49742400
 800512c:	08006e3c 	.word	0x08006e3c

08005130 <set_timer_period>:
/**
 * @brief Set timer period of 3.5 char transmit time of UART speed
 * @param speed speed of UART
 */
static void set_timer_period(mb_slave_t* mb ,uint32_t speed)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
	uint32_t t35 = get_t35(speed);
 800513a:	6838      	ldr	r0, [r7, #0]
 800513c:	f7ff ffba 	bl	80050b4 <get_t35>
 8005140:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(mb->timer, t35 - 1);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	3a01      	subs	r2, #1
 800514c:	62da      	str	r2, [r3, #44]	; 0x2c
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	3a01      	subs	r2, #1
 8005156:	60da      	str	r2, [r3, #12]
}
 8005158:	bf00      	nop
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <valid_request>:

static uint8_t valid_request(mb_slave_t* mb,mb_pdu_t* pdu)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for(i = 0; i < sizeof(mb_support_fc);i++)
 800516a:	2300      	movs	r3, #0
 800516c:	73fb      	strb	r3, [r7, #15]
 800516e:	e009      	b.n	8005184 <valid_request+0x24>
	{
		if(pdu->data[MB_PDU_FUNC] == mb_support_fc[i])
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	78da      	ldrb	r2, [r3, #3]
 8005174:	7bfb      	ldrb	r3, [r7, #15]
 8005176:	4996      	ldr	r1, [pc, #600]	; (80053d0 <valid_request+0x270>)
 8005178:	5ccb      	ldrb	r3, [r1, r3]
 800517a:	429a      	cmp	r2, r3
 800517c:	d006      	beq.n	800518c <valid_request+0x2c>
	for(i = 0; i < sizeof(mb_support_fc);i++)
 800517e:	7bfb      	ldrb	r3, [r7, #15]
 8005180:	3301      	adds	r3, #1
 8005182:	73fb      	strb	r3, [r7, #15]
 8005184:	7bfb      	ldrb	r3, [r7, #15]
 8005186:	2b07      	cmp	r3, #7
 8005188:	d9f2      	bls.n	8005170 <valid_request+0x10>
 800518a:	e000      	b.n	800518e <valid_request+0x2e>
		break;
 800518c:	bf00      	nop
	}

	// Function code not support
	if (i >= sizeof(mb_support_fc)) {
 800518e:	7bfb      	ldrb	r3, [r7, #15]
 8005190:	2b07      	cmp	r3, #7
 8005192:	d905      	bls.n	80051a0 <valid_request+0x40>
		mb_log("MB function not support\n");
 8005194:	498f      	ldr	r1, [pc, #572]	; (80053d4 <valid_request+0x274>)
 8005196:	2000      	movs	r0, #0
 8005198:	f001 fd84 	bl	8006ca4 <SEGGER_RTT_printf>
		return MB_EXC_FUNC;
 800519c:	2301      	movs	r3, #1
 800519e:	e16e      	b.n	800547e <valid_request+0x31e>
	}

	uint16_t addr;	// start address
	uint16_t nreg;	// number of reg

	addr = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	791b      	ldrb	r3, [r3, #4]
 80051a4:	021b      	lsls	r3, r3, #8
 80051a6:	b21a      	sxth	r2, r3
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	795b      	ldrb	r3, [r3, #5]
 80051ac:	b21b      	sxth	r3, r3
 80051ae:	4313      	orrs	r3, r2
 80051b0:	b21b      	sxth	r3, r3
 80051b2:	81bb      	strh	r3, [r7, #12]
	nreg = pdu->data[MB_PDU_QTY_HI] << 8 | pdu->data[MB_PDU_QTY_LO];
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	799b      	ldrb	r3, [r3, #6]
 80051b8:	021b      	lsls	r3, r3, #8
 80051ba:	b21a      	sxth	r2, r3
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	79db      	ldrb	r3, [r3, #7]
 80051c0:	b21b      	sxth	r3, r3
 80051c2:	4313      	orrs	r3, r2
 80051c4:	b21b      	sxth	r3, r3
 80051c6:	817b      	strh	r3, [r7, #10]

	switch(pdu->data[MB_PDU_FUNC])
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	78db      	ldrb	r3, [r3, #3]
 80051cc:	3b01      	subs	r3, #1
 80051ce:	2b0f      	cmp	r3, #15
 80051d0:	f200 8154 	bhi.w	800547c <valid_request+0x31c>
 80051d4:	a201      	add	r2, pc, #4	; (adr r2, 80051dc <valid_request+0x7c>)
 80051d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051da:	bf00      	nop
 80051dc:	0800521d 	.word	0x0800521d
 80051e0:	0800525b 	.word	0x0800525b
 80051e4:	080052f3 	.word	0x080052f3
 80051e8:	08005299 	.word	0x08005299
 80051ec:	080053ad 	.word	0x080053ad
 80051f0:	0800544d 	.word	0x0800544d
 80051f4:	0800547d 	.word	0x0800547d
 80051f8:	0800547d 	.word	0x0800547d
 80051fc:	0800547d 	.word	0x0800547d
 8005200:	0800547d 	.word	0x0800547d
 8005204:	0800547d 	.word	0x0800547d
 8005208:	0800547d 	.word	0x0800547d
 800520c:	0800547d 	.word	0x0800547d
 8005210:	0800547d 	.word	0x0800547d
 8005214:	0800534d 	.word	0x0800534d
 8005218:	080053d9 	.word	0x080053d9
	{
	case MB_FC_READ_COIL:
		if (!((nreg >= 1) && (nreg <= mb->data->coil.nbit)))
 800521c:	897b      	ldrh	r3, [r7, #10]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d006      	beq.n	8005230 <valid_request+0xd0>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005228:	891b      	ldrh	r3, [r3, #8]
 800522a:	897a      	ldrh	r2, [r7, #10]
 800522c:	429a      	cmp	r2, r3
 800522e:	d901      	bls.n	8005234 <valid_request+0xd4>
			return MB_EXC_ADDR_RANGE;
 8005230:	2302      	movs	r3, #2
 8005232:	e124      	b.n	800547e <valid_request+0x31e>
		if(!((addr < mb->data->coil.nbit) && ((addr + nreg) <= mb->data->coil.nbit)))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 800523a:	891b      	ldrh	r3, [r3, #8]
 800523c:	89ba      	ldrh	r2, [r7, #12]
 800523e:	429a      	cmp	r2, r3
 8005240:	d209      	bcs.n	8005256 <valid_request+0xf6>
 8005242:	89ba      	ldrh	r2, [r7, #12]
 8005244:	897b      	ldrh	r3, [r7, #10]
 8005246:	4413      	add	r3, r2
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 800524e:	8912      	ldrh	r2, [r2, #8]
 8005250:	4293      	cmp	r3, r2
 8005252:	f340 8104 	ble.w	800545e <valid_request+0x2fe>
			return MB_EXC_REG_QTY;
 8005256:	2303      	movs	r3, #3
 8005258:	e111      	b.n	800547e <valid_request+0x31e>
		break;
	case MB_FC_READ_DISCRETE_INPUT:
		if (!((nreg >= 1) && (nreg <= mb->data->input.nbit)))
 800525a:	897b      	ldrh	r3, [r7, #10]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d006      	beq.n	800526e <valid_request+0x10e>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005266:	8b1b      	ldrh	r3, [r3, #24]
 8005268:	897a      	ldrh	r2, [r7, #10]
 800526a:	429a      	cmp	r2, r3
 800526c:	d901      	bls.n	8005272 <valid_request+0x112>
			return MB_EXC_ADDR_RANGE;
 800526e:	2302      	movs	r3, #2
 8005270:	e105      	b.n	800547e <valid_request+0x31e>
		if(!((addr < mb->data->input.nbit) && ((addr + nreg) <= mb->data->input.nbit)))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005278:	8b1b      	ldrh	r3, [r3, #24]
 800527a:	89ba      	ldrh	r2, [r7, #12]
 800527c:	429a      	cmp	r2, r3
 800527e:	d209      	bcs.n	8005294 <valid_request+0x134>
 8005280:	89ba      	ldrh	r2, [r7, #12]
 8005282:	897b      	ldrh	r3, [r7, #10]
 8005284:	4413      	add	r3, r2
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 800528c:	8b12      	ldrh	r2, [r2, #24]
 800528e:	4293      	cmp	r3, r2
 8005290:	f340 80e7 	ble.w	8005462 <valid_request+0x302>
			return MB_EXC_REG_QTY;
 8005294:	2303      	movs	r3, #3
 8005296:	e0f2      	b.n	800547e <valid_request+0x31e>
		break;
	case MB_FC_READ_INPUT_REG:
		if (mb->data->reg_input.nreg > 0x7D) {
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 800529e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a0:	2b7d      	cmp	r3, #125	; 0x7d
 80052a2:	d907      	bls.n	80052b4 <valid_request+0x154>
			if (!(nreg >= 1 && nreg <= 0x7D))
 80052a4:	897b      	ldrh	r3, [r7, #10]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <valid_request+0x150>
 80052aa:	897b      	ldrh	r3, [r7, #10]
 80052ac:	2b7d      	cmp	r3, #125	; 0x7d
 80052ae:	d90d      	bls.n	80052cc <valid_request+0x16c>
				return MB_EXC_ADDR_RANGE;
 80052b0:	2302      	movs	r3, #2
 80052b2:	e0e4      	b.n	800547e <valid_request+0x31e>
		} else {
			if (!(nreg >= 1 && nreg <= mb->data->reg_input.nreg))
 80052b4:	897b      	ldrh	r3, [r7, #10]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d006      	beq.n	80052c8 <valid_request+0x168>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 80052c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c2:	897a      	ldrh	r2, [r7, #10]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d901      	bls.n	80052cc <valid_request+0x16c>
				return MB_EXC_ADDR_RANGE;
 80052c8:	2302      	movs	r3, #2
 80052ca:	e0d8      	b.n	800547e <valid_request+0x31e>
		}
		if(!((addr < mb->data->reg_input.nreg) && ((addr + nreg ) <= mb->data->reg_input.nreg)))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 80052d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d4:	89ba      	ldrh	r2, [r7, #12]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d209      	bcs.n	80052ee <valid_request+0x18e>
 80052da:	89ba      	ldrh	r2, [r7, #12]
 80052dc:	897b      	ldrh	r3, [r7, #10]
 80052de:	4413      	add	r3, r2
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 80052e6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80052e8:	4293      	cmp	r3, r2
 80052ea:	f340 80bc 	ble.w	8005466 <valid_request+0x306>
			return MB_EXC_REG_QTY;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e0c5      	b.n	800547e <valid_request+0x31e>
		break;
	case MB_FC_READ_HOLDING_REG:
		if (mb->data->reg_holding.nreg > 0x7D) {
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 80052f8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80052fa:	2b7d      	cmp	r3, #125	; 0x7d
 80052fc:	d907      	bls.n	800530e <valid_request+0x1ae>
			if (!(nreg >= 1 && nreg <= 0x7D))
 80052fe:	897b      	ldrh	r3, [r7, #10]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <valid_request+0x1aa>
 8005304:	897b      	ldrh	r3, [r7, #10]
 8005306:	2b7d      	cmp	r3, #125	; 0x7d
 8005308:	d90d      	bls.n	8005326 <valid_request+0x1c6>
				return MB_EXC_ADDR_RANGE;
 800530a:	2302      	movs	r3, #2
 800530c:	e0b7      	b.n	800547e <valid_request+0x31e>
		} else {
			if (!((nreg >= 1) && (nreg <= mb->data->reg_holding.nreg)))
 800530e:	897b      	ldrh	r3, [r7, #10]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d006      	beq.n	8005322 <valid_request+0x1c2>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 800531a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800531c:	897a      	ldrh	r2, [r7, #10]
 800531e:	429a      	cmp	r2, r3
 8005320:	d901      	bls.n	8005326 <valid_request+0x1c6>
				return MB_EXC_ADDR_RANGE;
 8005322:	2302      	movs	r3, #2
 8005324:	e0ab      	b.n	800547e <valid_request+0x31e>
		}
		if(!((addr < mb->data->reg_holding.nreg) && ((addr + nreg ) <= mb->data->reg_holding.nreg)))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 800532c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800532e:	89ba      	ldrh	r2, [r7, #12]
 8005330:	429a      	cmp	r2, r3
 8005332:	d209      	bcs.n	8005348 <valid_request+0x1e8>
 8005334:	89ba      	ldrh	r2, [r7, #12]
 8005336:	897b      	ldrh	r3, [r7, #10]
 8005338:	4413      	add	r3, r2
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 8005340:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8005342:	4293      	cmp	r3, r2
 8005344:	f340 8091 	ble.w	800546a <valid_request+0x30a>
			return MB_EXC_REG_QTY;
 8005348:	2303      	movs	r3, #3
 800534a:	e098      	b.n	800547e <valid_request+0x31e>
		break;
	case MB_FC_WRITE_MULTI_COIL:
	{
		// Get number of byte
		uint8_t nbyte = nreg / 8;
 800534c:	897b      	ldrh	r3, [r7, #10]
 800534e:	08db      	lsrs	r3, r3, #3
 8005350:	b29b      	uxth	r3, r3
 8005352:	73bb      	strb	r3, [r7, #14]
		if(nreg % 8)
 8005354:	897b      	ldrh	r3, [r7, #10]
 8005356:	f003 0307 	and.w	r3, r3, #7
 800535a:	b29b      	uxth	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <valid_request+0x206>
			nbyte += 1;
 8005360:	7bbb      	ldrb	r3, [r7, #14]
 8005362:	3301      	adds	r3, #1
 8005364:	73bb      	strb	r3, [r7, #14]

		if(!((nreg >= 1) && (nreg <= mb->data->coil.nbit) && (nbyte == pdu->data[MB_PDU_CNT])))
 8005366:	897b      	ldrh	r3, [r7, #10]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00b      	beq.n	8005384 <valid_request+0x224>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005372:	891b      	ldrh	r3, [r3, #8]
 8005374:	897a      	ldrh	r2, [r7, #10]
 8005376:	429a      	cmp	r2, r3
 8005378:	d804      	bhi.n	8005384 <valid_request+0x224>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	7a1b      	ldrb	r3, [r3, #8]
 800537e:	7bba      	ldrb	r2, [r7, #14]
 8005380:	429a      	cmp	r2, r3
 8005382:	d001      	beq.n	8005388 <valid_request+0x228>
			return MB_EXC_REG_QTY;
 8005384:	2303      	movs	r3, #3
 8005386:	e07a      	b.n	800547e <valid_request+0x31e>
		if(!((addr < mb->data->coil.nbit) && ((addr + nreg) <= mb->data->coil.nbit)))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 800538e:	891b      	ldrh	r3, [r3, #8]
 8005390:	89ba      	ldrh	r2, [r7, #12]
 8005392:	429a      	cmp	r2, r3
 8005394:	d208      	bcs.n	80053a8 <valid_request+0x248>
 8005396:	89ba      	ldrh	r2, [r7, #12]
 8005398:	897b      	ldrh	r3, [r7, #10]
 800539a:	4413      	add	r3, r2
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 80053a2:	8912      	ldrh	r2, [r2, #8]
 80053a4:	4293      	cmp	r3, r2
 80053a6:	dd62      	ble.n	800546e <valid_request+0x30e>
			return MB_EXC_ADDR_RANGE;
 80053a8:	2302      	movs	r3, #2
 80053aa:	e068      	b.n	800547e <valid_request+0x31e>
		break;
	}
	case MB_FC_WRITE_SINGLE_COIL:
		if(!((nreg == 0x0000) || (nreg == 0xFF00)))
 80053ac:	897b      	ldrh	r3, [r7, #10]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d005      	beq.n	80053be <valid_request+0x25e>
 80053b2:	897b      	ldrh	r3, [r7, #10]
 80053b4:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 80053b8:	d001      	beq.n	80053be <valid_request+0x25e>
			return MB_EXC_REG_QTY;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e05f      	b.n	800547e <valid_request+0x31e>
		if(!(addr < mb->data->coil.nbit))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 80053c4:	891b      	ldrh	r3, [r3, #8]
 80053c6:	89ba      	ldrh	r2, [r7, #12]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d352      	bcc.n	8005472 <valid_request+0x312>
			return MB_EXC_ADDR_RANGE;
 80053cc:	2302      	movs	r3, #2
 80053ce:	e056      	b.n	800547e <valid_request+0x31e>
 80053d0:	08006f04 	.word	0x08006f04
 80053d4:	08006e60 	.word	0x08006e60
		break;
	case MB_FC_WRITE_MULTI_REG:
		if(mb->data->reg_holding.nreg < 0x7B) {
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 80053de:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80053e0:	2b7a      	cmp	r3, #122	; 0x7a
 80053e2:	d812      	bhi.n	800540a <valid_request+0x2aa>
			if (!((nreg >= 1) && (nreg <= mb->data->reg_holding.nreg) && (pdu->data[MB_PDU_CNT] == nreg * 2)))
 80053e4:	897b      	ldrh	r3, [r7, #10]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00d      	beq.n	8005406 <valid_request+0x2a6>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 80053f0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80053f2:	897a      	ldrh	r2, [r7, #10]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d806      	bhi.n	8005406 <valid_request+0x2a6>
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	7a1b      	ldrb	r3, [r3, #8]
 80053fc:	461a      	mov	r2, r3
 80053fe:	897b      	ldrh	r3, [r7, #10]
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	429a      	cmp	r2, r3
 8005404:	d010      	beq.n	8005428 <valid_request+0x2c8>
				return MB_EXC_REG_QTY;
 8005406:	2303      	movs	r3, #3
 8005408:	e039      	b.n	800547e <valid_request+0x31e>
		} else {
			if (!((nreg >= 1) && (nreg <= 0x7B) && (pdu->data[MB_PDU_CNT] == nreg * 2)))
 800540a:	897b      	ldrh	r3, [r7, #10]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d009      	beq.n	8005424 <valid_request+0x2c4>
 8005410:	897b      	ldrh	r3, [r7, #10]
 8005412:	2b7b      	cmp	r3, #123	; 0x7b
 8005414:	d806      	bhi.n	8005424 <valid_request+0x2c4>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	7a1b      	ldrb	r3, [r3, #8]
 800541a:	461a      	mov	r2, r3
 800541c:	897b      	ldrh	r3, [r7, #10]
 800541e:	005b      	lsls	r3, r3, #1
 8005420:	429a      	cmp	r2, r3
 8005422:	d001      	beq.n	8005428 <valid_request+0x2c8>
				return MB_EXC_REG_QTY;
 8005424:	2303      	movs	r3, #3
 8005426:	e02a      	b.n	800547e <valid_request+0x31e>
		}
		if(!((addr < mb->data->reg_holding.nreg) && ((addr + nreg) <= mb->data->reg_holding.nreg)))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 800542e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005430:	89ba      	ldrh	r2, [r7, #12]
 8005432:	429a      	cmp	r2, r3
 8005434:	d208      	bcs.n	8005448 <valid_request+0x2e8>
 8005436:	89ba      	ldrh	r2, [r7, #12]
 8005438:	897b      	ldrh	r3, [r7, #10]
 800543a:	4413      	add	r3, r2
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 8005442:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8005444:	4293      	cmp	r3, r2
 8005446:	dd16      	ble.n	8005476 <valid_request+0x316>
			return MB_EXC_ADDR_RANGE;
 8005448:	2302      	movs	r3, #2
 800544a:	e018      	b.n	800547e <valid_request+0x31e>
		break;
	case MB_FC_WRITE_SINGLE_REG:
		if(!(addr <= mb->data->reg_holding.nreg))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005452:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005454:	89ba      	ldrh	r2, [r7, #12]
 8005456:	429a      	cmp	r2, r3
 8005458:	d90f      	bls.n	800547a <valid_request+0x31a>
			return MB_EXC_ADDR_RANGE;
 800545a:	2302      	movs	r3, #2
 800545c:	e00f      	b.n	800547e <valid_request+0x31e>
		break;
 800545e:	bf00      	nop
 8005460:	e00c      	b.n	800547c <valid_request+0x31c>
		break;
 8005462:	bf00      	nop
 8005464:	e00a      	b.n	800547c <valid_request+0x31c>
		break;
 8005466:	bf00      	nop
 8005468:	e008      	b.n	800547c <valid_request+0x31c>
		break;
 800546a:	bf00      	nop
 800546c:	e006      	b.n	800547c <valid_request+0x31c>
		break;
 800546e:	bf00      	nop
 8005470:	e004      	b.n	800547c <valid_request+0x31c>
		break;
 8005472:	bf00      	nop
 8005474:	e002      	b.n	800547c <valid_request+0x31c>
		break;
 8005476:	bf00      	nop
 8005478:	e000      	b.n	800547c <valid_request+0x31c>
		break;
 800547a:	bf00      	nop
	}

	return 0;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop

08005488 <execute_func>:

static uint8_t execute_func(mb_slave_t* mb, mb_pdu_t* pdu)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
	switch (pdu->data[MB_PDU_FUNC]) {
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	78db      	ldrb	r3, [r3, #3]
 8005496:	3b01      	subs	r3, #1
 8005498:	2b0f      	cmp	r3, #15
 800549a:	d853      	bhi.n	8005544 <execute_func+0xbc>
 800549c:	a201      	add	r2, pc, #4	; (adr r2, 80054a4 <execute_func+0x1c>)
 800549e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a2:	bf00      	nop
 80054a4:	080054e5 	.word	0x080054e5
 80054a8:	080054f1 	.word	0x080054f1
 80054ac:	080054fd 	.word	0x080054fd
 80054b0:	08005509 	.word	0x08005509
 80054b4:	08005515 	.word	0x08005515
 80054b8:	08005521 	.word	0x08005521
 80054bc:	08005545 	.word	0x08005545
 80054c0:	08005545 	.word	0x08005545
 80054c4:	08005545 	.word	0x08005545
 80054c8:	08005545 	.word	0x08005545
 80054cc:	08005545 	.word	0x08005545
 80054d0:	08005545 	.word	0x08005545
 80054d4:	08005545 	.word	0x08005545
 80054d8:	08005545 	.word	0x08005545
 80054dc:	0800552d 	.word	0x0800552d
 80054e0:	08005539 	.word	0x08005539
	case MB_FC_READ_COIL:
		return fc_read_coil(mb, pdu);
 80054e4:	6839      	ldr	r1, [r7, #0]
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f8f2 	bl	80056d0 <fc_read_coil>
 80054ec:	4603      	mov	r3, r0
 80054ee:	e02b      	b.n	8005548 <execute_func+0xc0>
	case MB_FC_READ_DISCRETE_INPUT:
		return fc_read_input(mb, pdu);
 80054f0:	6839      	ldr	r1, [r7, #0]
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f978 	bl	80057e8 <fc_read_input>
 80054f8:	4603      	mov	r3, r0
 80054fa:	e025      	b.n	8005548 <execute_func+0xc0>
	case MB_FC_READ_HOLDING_REG:
		return fc_read_reg_hodling(mb, pdu);
 80054fc:	6839      	ldr	r1, [r7, #0]
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fa6d 	bl	80059de <fc_read_reg_hodling>
 8005504:	4603      	mov	r3, r0
 8005506:	e01f      	b.n	8005548 <execute_func+0xc0>
	case MB_FC_READ_INPUT_REG:
		return fc_read_reg_input(mb, pdu);
 8005508:	6839      	ldr	r1, [r7, #0]
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f9f9 	bl	8005902 <fc_read_reg_input>
 8005510:	4603      	mov	r3, r0
 8005512:	e019      	b.n	8005548 <execute_func+0xc0>
	case MB_FC_WRITE_SINGLE_COIL:
		return fc_write_single_coil(mb, pdu);
 8005514:	6839      	ldr	r1, [r7, #0]
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 facf 	bl	8005aba <fc_write_single_coil>
 800551c:	4603      	mov	r3, r0
 800551e:	e013      	b.n	8005548 <execute_func+0xc0>
	case MB_FC_WRITE_SINGLE_REG:
		return fc_write_single_reg(mb, pdu);
 8005520:	6839      	ldr	r1, [r7, #0]
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 fb07 	bl	8005b36 <fc_write_single_reg>
 8005528:	4603      	mov	r3, r0
 800552a:	e00d      	b.n	8005548 <execute_func+0xc0>
	case MB_FC_WRITE_MULTI_COIL:
		return fc_write_multi_coil(mb, pdu);
 800552c:	6839      	ldr	r1, [r7, #0]
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fb31 	bl	8005b96 <fc_write_multi_coil>
 8005534:	4603      	mov	r3, r0
 8005536:	e007      	b.n	8005548 <execute_func+0xc0>
	case MB_FC_WRITE_MULTI_REG:
		return fc_write_multi_reg(mb, pdu);
 8005538:	6839      	ldr	r1, [r7, #0]
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 fb9e 	bl	8005c7c <fc_write_multi_reg>
 8005540:	4603      	mov	r3, r0
 8005542:	e001      	b.n	8005548 <execute_func+0xc0>
	default:
		break;
 8005544:	bf00      	nop
	}
	return 0;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3708      	adds	r7, #8
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <build_exc>:

static void build_exc(mb_slave_t* mb, mb_pdu_t* pdu, uint8_t code)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	4613      	mov	r3, r2
 800555c:	71fb      	strb	r3, [r7, #7]
	 * | 1  | 1  |   1      |  2  |
	 * +----+----+----------+-----+
	 * len = 5
	 */

	pdu->data[MB_PDU_FUNC] = pdu->data[MB_PDU_FUNC] + 0x80;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	78db      	ldrb	r3, [r3, #3]
 8005562:	3b80      	subs	r3, #128	; 0x80
 8005564:	b2da      	uxtb	r2, r3
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	70da      	strb	r2, [r3, #3]
	pdu->data[2] = code;
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	79fa      	ldrb	r2, [r7, #7]
 800556e:	711a      	strb	r2, [r3, #4]
	pdu->len = 5;
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2205      	movs	r2, #5
 8005574:	801a      	strh	r2, [r3, #0]

	mb_log("EXC code: %d\n", pdu->data[MB_PDU_FUNC]);
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	78db      	ldrb	r3, [r3, #3]
 800557a:	461a      	mov	r2, r3
 800557c:	4903      	ldr	r1, [pc, #12]	; (800558c <build_exc+0x3c>)
 800557e:	2000      	movs	r0, #0
 8005580:	f001 fb90 	bl	8006ca4 <SEGGER_RTT_printf>
}
 8005584:	bf00      	nop
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	08006e7c 	.word	0x08006e7c

08005590 <set_tx>:

static void set_tx(mb_slave_t* mb, mb_pdu_t* pdu)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
#ifdef MB_LOG
	mb_log("Response: ");
 800559a:	492c      	ldr	r1, [pc, #176]	; (800564c <set_tx+0xbc>)
 800559c:	2000      	movs	r0, #0
 800559e:	f001 fb81 	bl	8006ca4 <SEGGER_RTT_printf>
	for(uint16_t i = 0; i < pdu->len; i++)
 80055a2:	2300      	movs	r3, #0
 80055a4:	81fb      	strh	r3, [r7, #14]
 80055a6:	e00b      	b.n	80055c0 <set_tx+0x30>
	{
		mb_log("%02x ", pdu->data[i]);
 80055a8:	89fb      	ldrh	r3, [r7, #14]
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	4413      	add	r3, r2
 80055ae:	789b      	ldrb	r3, [r3, #2]
 80055b0:	461a      	mov	r2, r3
 80055b2:	4927      	ldr	r1, [pc, #156]	; (8005650 <set_tx+0xc0>)
 80055b4:	2000      	movs	r0, #0
 80055b6:	f001 fb75 	bl	8006ca4 <SEGGER_RTT_printf>
	for(uint16_t i = 0; i < pdu->len; i++)
 80055ba:	89fb      	ldrh	r3, [r7, #14]
 80055bc:	3301      	adds	r3, #1
 80055be:	81fb      	strh	r3, [r7, #14]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	89fa      	ldrh	r2, [r7, #14]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d3ee      	bcc.n	80055a8 <set_tx+0x18>
	}
	mb_log("\n");
 80055ca:	4922      	ldr	r1, [pc, #136]	; (8005654 <set_tx+0xc4>)
 80055cc:	2000      	movs	r0, #0
 80055ce:	f001 fb69 	bl	8006ca4 <SEGGER_RTT_printf>
#endif

	// Copy data to tx buffer
	for (uint16_t i = 0; i < pdu->len; i++) {
 80055d2:	2300      	movs	r3, #0
 80055d4:	81bb      	strh	r3, [r7, #12]
 80055d6:	e025      	b.n	8005624 <set_tx+0x94>
		tx_buf.data[tx_buf.head] = pdu->data[i];
 80055d8:	89bb      	ldrh	r3, [r7, #12]
 80055da:	4a1f      	ldr	r2, [pc, #124]	; (8005658 <set_tx+0xc8>)
 80055dc:	8892      	ldrh	r2, [r2, #4]
 80055de:	4611      	mov	r1, r2
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	4413      	add	r3, r2
 80055e4:	789a      	ldrb	r2, [r3, #2]
 80055e6:	4b1c      	ldr	r3, [pc, #112]	; (8005658 <set_tx+0xc8>)
 80055e8:	440b      	add	r3, r1
 80055ea:	721a      	strb	r2, [r3, #8]
		tx_buf.head = (tx_buf.head + 1) % UART_TX_BUF_SIZE;
 80055ec:	4b1a      	ldr	r3, [pc, #104]	; (8005658 <set_tx+0xc8>)
 80055ee:	889b      	ldrh	r3, [r3, #4]
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	4b1a      	ldr	r3, [pc, #104]	; (800565c <set_tx+0xcc>)
 80055f4:	fb83 1302 	smull	r1, r3, r3, r2
 80055f8:	1199      	asrs	r1, r3, #6
 80055fa:	17d3      	asrs	r3, r2, #31
 80055fc:	1ac9      	subs	r1, r1, r3
 80055fe:	460b      	mov	r3, r1
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	440b      	add	r3, r1
 8005604:	01db      	lsls	r3, r3, #7
 8005606:	1ad1      	subs	r1, r2, r3
 8005608:	b28a      	uxth	r2, r1
 800560a:	4b13      	ldr	r3, [pc, #76]	; (8005658 <set_tx+0xc8>)
 800560c:	809a      	strh	r2, [r3, #4]
		mb_assert(tx_buf.head != tx_buf.tail);
 800560e:	4b12      	ldr	r3, [pc, #72]	; (8005658 <set_tx+0xc8>)
 8005610:	889a      	ldrh	r2, [r3, #4]
 8005612:	4b11      	ldr	r3, [pc, #68]	; (8005658 <set_tx+0xc8>)
 8005614:	88db      	ldrh	r3, [r3, #6]
 8005616:	429a      	cmp	r2, r3
 8005618:	d101      	bne.n	800561e <set_tx+0x8e>
 800561a:	f7ff f9f3 	bl	8004a04 <__mb_failure>
	for (uint16_t i = 0; i < pdu->len; i++) {
 800561e:	89bb      	ldrh	r3, [r7, #12]
 8005620:	3301      	adds	r3, #1
 8005622:	81bb      	strh	r3, [r7, #12]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	881b      	ldrh	r3, [r3, #0]
 8005628:	89ba      	ldrh	r2, [r7, #12]
 800562a:	429a      	cmp	r2, r3
 800562c:	d3d4      	bcc.n	80055d8 <set_tx+0x48>
	}

	if (!tx_buf.on_tx) {
 800562e:	4b0a      	ldr	r3, [pc, #40]	; (8005658 <set_tx+0xc8>)
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	b2db      	uxtb	r3, r3
 8005634:	f083 0301 	eor.w	r3, r3, #1
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <set_tx+0xb4>
		start_transmit(mb);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f80e 	bl	8005660 <start_transmit>
	}
}
 8005644:	bf00      	nop
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	08006e8c 	.word	0x08006e8c
 8005650:	08006df4 	.word	0x08006df4
 8005654:	08006dfc 	.word	0x08006dfc
 8005658:	20001ac8 	.word	0x20001ac8
 800565c:	2aaaaaab 	.word	0x2aaaaaab

08005660 <start_transmit>:

static void start_transmit(mb_slave_t* mb) {
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
	if (tx_buf.tail == tx_buf.head)
 8005668:	4b18      	ldr	r3, [pc, #96]	; (80056cc <start_transmit+0x6c>)
 800566a:	88da      	ldrh	r2, [r3, #6]
 800566c:	4b17      	ldr	r3, [pc, #92]	; (80056cc <start_transmit+0x6c>)
 800566e:	889b      	ldrh	r3, [r3, #4]
 8005670:	429a      	cmp	r2, r3
 8005672:	d026      	beq.n	80056c2 <start_transmit+0x62>
		return;

	if (tx_buf.tail < tx_buf.head) {
 8005674:	4b15      	ldr	r3, [pc, #84]	; (80056cc <start_transmit+0x6c>)
 8005676:	88da      	ldrh	r2, [r3, #6]
 8005678:	4b14      	ldr	r3, [pc, #80]	; (80056cc <start_transmit+0x6c>)
 800567a:	889b      	ldrh	r3, [r3, #4]
 800567c:	429a      	cmp	r2, r3
 800567e:	d208      	bcs.n	8005692 <start_transmit+0x32>
		tx_buf.tx_len = tx_buf.head - tx_buf.tail;
 8005680:	4b12      	ldr	r3, [pc, #72]	; (80056cc <start_transmit+0x6c>)
 8005682:	889a      	ldrh	r2, [r3, #4]
 8005684:	4b11      	ldr	r3, [pc, #68]	; (80056cc <start_transmit+0x6c>)
 8005686:	88db      	ldrh	r3, [r3, #6]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	b29a      	uxth	r2, r3
 800568c:	4b0f      	ldr	r3, [pc, #60]	; (80056cc <start_transmit+0x6c>)
 800568e:	805a      	strh	r2, [r3, #2]
 8005690:	e006      	b.n	80056a0 <start_transmit+0x40>
	} else {
		tx_buf.tx_len = UART_TX_BUF_SIZE - tx_buf.tail;
 8005692:	4b0e      	ldr	r3, [pc, #56]	; (80056cc <start_transmit+0x6c>)
 8005694:	88db      	ldrh	r3, [r3, #6]
 8005696:	f5c3 73c0 	rsb	r3, r3, #384	; 0x180
 800569a:	b29a      	uxth	r2, r3
 800569c:	4b0b      	ldr	r3, [pc, #44]	; (80056cc <start_transmit+0x6c>)
 800569e:	805a      	strh	r2, [r3, #2]
	}

	tx_buf.on_tx = true;
 80056a0:	4b0a      	ldr	r3, [pc, #40]	; (80056cc <start_transmit+0x6c>)
 80056a2:	2201      	movs	r2, #1
 80056a4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(mb->uart, &tx_buf.data[tx_buf.tail], tx_buf.tx_len);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6818      	ldr	r0, [r3, #0]
 80056aa:	4b08      	ldr	r3, [pc, #32]	; (80056cc <start_transmit+0x6c>)
 80056ac:	88db      	ldrh	r3, [r3, #6]
 80056ae:	3308      	adds	r3, #8
 80056b0:	4a06      	ldr	r2, [pc, #24]	; (80056cc <start_transmit+0x6c>)
 80056b2:	4413      	add	r3, r2
 80056b4:	4a05      	ldr	r2, [pc, #20]	; (80056cc <start_transmit+0x6c>)
 80056b6:	8852      	ldrh	r2, [r2, #2]
 80056b8:	b292      	uxth	r2, r2
 80056ba:	4619      	mov	r1, r3
 80056bc:	f7fd fc88 	bl	8002fd0 <HAL_UART_Transmit_IT>
 80056c0:	e000      	b.n	80056c4 <start_transmit+0x64>
		return;
 80056c2:	bf00      	nop
}
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	20001ac8 	.word	0x20001ac8

080056d0 <fc_read_coil>:

static uint8_t fc_read_coil(mb_slave_t* mb, mb_pdu_t* pdu)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2  |  2  |
	 * +----+----+------+-----+-----+
	 * len = 8
	 */

	if(pdu->len < 8)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	881b      	ldrh	r3, [r3, #0]
 80056de:	2b07      	cmp	r3, #7
 80056e0:	d801      	bhi.n	80056e6 <fc_read_coil+0x16>
		return MB_EXC_EXECUTE;
 80056e2:	2304      	movs	r3, #4
 80056e4:	e07c      	b.n	80057e0 <fc_read_coil+0x110>

	uint16_t addr = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	791b      	ldrb	r3, [r3, #4]
 80056ea:	021b      	lsls	r3, r3, #8
 80056ec:	b21a      	sxth	r2, r3
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	795b      	ldrb	r3, [r3, #5]
 80056f2:	b21b      	sxth	r3, r3
 80056f4:	4313      	orrs	r3, r2
 80056f6:	b21b      	sxth	r3, r3
 80056f8:	82bb      	strh	r3, [r7, #20]
	uint16_t qty  = pdu->data[MB_PDU_QTY_HI] << 8 | pdu->data[MB_PDU_QTY_LO];
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	799b      	ldrb	r3, [r3, #6]
 80056fe:	021b      	lsls	r3, r3, #8
 8005700:	b21a      	sxth	r2, r3
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	79db      	ldrb	r3, [r3, #7]
 8005706:	b21b      	sxth	r3, r3
 8005708:	4313      	orrs	r3, r2
 800570a:	b21b      	sxth	r3, r3
 800570c:	827b      	strh	r3, [r7, #18]
	 * +----+----+-----+------+-----+
	 * | 1  |  1 |  1  |  n   |  2  |
	 * +----+----+-----+------+-----+
	 */

	pdu->data[2] = qty / 8;
 800570e:	8a7b      	ldrh	r3, [r7, #18]
 8005710:	08db      	lsrs	r3, r3, #3
 8005712:	b29b      	uxth	r3, r3
 8005714:	b2da      	uxtb	r2, r3
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	711a      	strb	r2, [r3, #4]
	if(qty % 8)
 800571a:	8a7b      	ldrh	r3, [r7, #18]
 800571c:	f003 0307 	and.w	r3, r3, #7
 8005720:	b29b      	uxth	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d005      	beq.n	8005732 <fc_read_coil+0x62>
		pdu->data[2] += 1;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	791b      	ldrb	r3, [r3, #4]
 800572a:	3301      	adds	r3, #1
 800572c:	b2da      	uxtb	r2, r3
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	711a      	strb	r2, [r3, #4]

	uint8_t* data = &pdu->data[3];
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	3305      	adds	r3, #5
 8005736:	60fb      	str	r3, [r7, #12]
	memset(data, 0x00, pdu->data[2]);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	791b      	ldrb	r3, [r3, #4]
 800573c:	461a      	mov	r2, r3
 800573e:	2100      	movs	r1, #0
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f001 faf9 	bl	8006d38 <memset>

	for(uint16_t i = 0; i < qty; i++)
 8005746:	2300      	movs	r3, #0
 8005748:	82fb      	strh	r3, [r7, #22]
 800574a:	e03d      	b.n	80057c8 <fc_read_coil+0xf8>
	{
		uint8_t ibyte = i / 8;
 800574c:	8afb      	ldrh	r3, [r7, #22]
 800574e:	08db      	lsrs	r3, r3, #3
 8005750:	b29b      	uxth	r3, r3
 8005752:	72fb      	strb	r3, [r7, #11]
		uint8_t ibit  = i % 8;
 8005754:	8afb      	ldrh	r3, [r7, #22]
 8005756:	b2db      	uxtb	r3, r3
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	72bb      	strb	r3, [r7, #10]
		uint8_t val   = 1 << ibit;
 800575e:	7abb      	ldrb	r3, [r7, #10]
 8005760:	2201      	movs	r2, #1
 8005762:	fa02 f303 	lsl.w	r3, r2, r3
 8005766:	727b      	strb	r3, [r7, #9]

		if(mb->data->coil.get(&mb->data->coil, addr + i))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 8005776:	1d10      	adds	r0, r2, #4
 8005778:	8ab9      	ldrh	r1, [r7, #20]
 800577a:	8afa      	ldrh	r2, [r7, #22]
 800577c:	440a      	add	r2, r1
 800577e:	b292      	uxth	r2, r2
 8005780:	4611      	mov	r1, r2
 8005782:	4798      	blx	r3
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00b      	beq.n	80057a2 <fc_read_coil+0xd2>
			data[ibyte] = data[ibyte] | val;
 800578a:	7afb      	ldrb	r3, [r7, #11]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	4413      	add	r3, r2
 8005790:	7819      	ldrb	r1, [r3, #0]
 8005792:	7afb      	ldrb	r3, [r7, #11]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	4413      	add	r3, r2
 8005798:	7a7a      	ldrb	r2, [r7, #9]
 800579a:	430a      	orrs	r2, r1
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	701a      	strb	r2, [r3, #0]
 80057a0:	e00f      	b.n	80057c2 <fc_read_coil+0xf2>
		else
			data[ibyte] = data[ibyte] & (~val);
 80057a2:	7afb      	ldrb	r3, [r7, #11]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	4413      	add	r3, r2
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	b25a      	sxtb	r2, r3
 80057ac:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80057b0:	43db      	mvns	r3, r3
 80057b2:	b25b      	sxtb	r3, r3
 80057b4:	4013      	ands	r3, r2
 80057b6:	b259      	sxtb	r1, r3
 80057b8:	7afb      	ldrb	r3, [r7, #11]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	4413      	add	r3, r2
 80057be:	b2ca      	uxtb	r2, r1
 80057c0:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < qty; i++)
 80057c2:	8afb      	ldrh	r3, [r7, #22]
 80057c4:	3301      	adds	r3, #1
 80057c6:	82fb      	strh	r3, [r7, #22]
 80057c8:	8afa      	ldrh	r2, [r7, #22]
 80057ca:	8a7b      	ldrh	r3, [r7, #18]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d3bd      	bcc.n	800574c <fc_read_coil+0x7c>
	}

	pdu->len = pdu->data[2] + 5;	// include CRC
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	791b      	ldrb	r3, [r3, #4]
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	3305      	adds	r3, #5
 80057d8:	b29a      	uxth	r2, r3
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	801a      	strh	r2, [r3, #0]
	return 0;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <fc_read_input>:

static uint8_t fc_read_input(mb_slave_t* mb, mb_pdu_t* pdu)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2  |  2  |
	 * +----+----+------+-----+-----+
	 * len = 8
	 */

	if(pdu->len < 8)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	2b07      	cmp	r3, #7
 80057f8:	d801      	bhi.n	80057fe <fc_read_input+0x16>
		return MB_EXC_EXECUTE;
 80057fa:	2304      	movs	r3, #4
 80057fc:	e07d      	b.n	80058fa <fc_read_input+0x112>

	uint16_t addr = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	791b      	ldrb	r3, [r3, #4]
 8005802:	021b      	lsls	r3, r3, #8
 8005804:	b21a      	sxth	r2, r3
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	795b      	ldrb	r3, [r3, #5]
 800580a:	b21b      	sxth	r3, r3
 800580c:	4313      	orrs	r3, r2
 800580e:	b21b      	sxth	r3, r3
 8005810:	82bb      	strh	r3, [r7, #20]
	uint16_t qty  = pdu->data[MB_PDU_QTY_HI] << 8 | pdu->data[MB_PDU_QTY_LO];
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	799b      	ldrb	r3, [r3, #6]
 8005816:	021b      	lsls	r3, r3, #8
 8005818:	b21a      	sxth	r2, r3
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	79db      	ldrb	r3, [r3, #7]
 800581e:	b21b      	sxth	r3, r3
 8005820:	4313      	orrs	r3, r2
 8005822:	b21b      	sxth	r3, r3
 8005824:	827b      	strh	r3, [r7, #18]
	 * +----+----+-----+------+-----+
	 * | 1  |  1 |  1  |  n   |  2  |
	 * +----+----+-----+------+-----+
	 */

	pdu->data[2] = qty / 8;
 8005826:	8a7b      	ldrh	r3, [r7, #18]
 8005828:	08db      	lsrs	r3, r3, #3
 800582a:	b29b      	uxth	r3, r3
 800582c:	b2da      	uxtb	r2, r3
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	711a      	strb	r2, [r3, #4]
	if(qty % 8)
 8005832:	8a7b      	ldrh	r3, [r7, #18]
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d005      	beq.n	800584a <fc_read_input+0x62>
		pdu->data[2] += 1;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	791b      	ldrb	r3, [r3, #4]
 8005842:	3301      	adds	r3, #1
 8005844:	b2da      	uxtb	r2, r3
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	711a      	strb	r2, [r3, #4]

	uint8_t* data = &pdu->data[3];
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	3305      	adds	r3, #5
 800584e:	60fb      	str	r3, [r7, #12]
	memset(data, 0x00, pdu->data[2]);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	791b      	ldrb	r3, [r3, #4]
 8005854:	461a      	mov	r2, r3
 8005856:	2100      	movs	r1, #0
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f001 fa6d 	bl	8006d38 <memset>

	for(uint16_t i = 0; i < qty; i++)
 800585e:	2300      	movs	r3, #0
 8005860:	82fb      	strh	r3, [r7, #22]
 8005862:	e03e      	b.n	80058e2 <fc_read_input+0xfa>
	{
		uint8_t ibyte = i / 8;
 8005864:	8afb      	ldrh	r3, [r7, #22]
 8005866:	08db      	lsrs	r3, r3, #3
 8005868:	b29b      	uxth	r3, r3
 800586a:	72fb      	strb	r3, [r7, #11]
		uint8_t ibit  = i % 8;
 800586c:	8afb      	ldrh	r3, [r7, #22]
 800586e:	b2db      	uxtb	r3, r3
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	72bb      	strb	r3, [r7, #10]
		uint8_t val   = 1 << ibit;
 8005876:	7abb      	ldrb	r3, [r7, #10]
 8005878:	2201      	movs	r2, #1
 800587a:	fa02 f303 	lsl.w	r3, r2, r3
 800587e:	727b      	strb	r3, [r7, #9]

		if(mb->data->coil.get(&mb->data->input, addr + i))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 800588e:	f102 0014 	add.w	r0, r2, #20
 8005892:	8ab9      	ldrh	r1, [r7, #20]
 8005894:	8afa      	ldrh	r2, [r7, #22]
 8005896:	440a      	add	r2, r1
 8005898:	b292      	uxth	r2, r2
 800589a:	4611      	mov	r1, r2
 800589c:	4798      	blx	r3
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00b      	beq.n	80058bc <fc_read_input+0xd4>
			data[ibyte] = data[ibyte] | val;
 80058a4:	7afb      	ldrb	r3, [r7, #11]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4413      	add	r3, r2
 80058aa:	7819      	ldrb	r1, [r3, #0]
 80058ac:	7afb      	ldrb	r3, [r7, #11]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	4413      	add	r3, r2
 80058b2:	7a7a      	ldrb	r2, [r7, #9]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	b2d2      	uxtb	r2, r2
 80058b8:	701a      	strb	r2, [r3, #0]
 80058ba:	e00f      	b.n	80058dc <fc_read_input+0xf4>
		else
			data[ibyte] = data[ibyte] & (~val);
 80058bc:	7afb      	ldrb	r3, [r7, #11]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4413      	add	r3, r2
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	b25a      	sxtb	r2, r3
 80058c6:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80058ca:	43db      	mvns	r3, r3
 80058cc:	b25b      	sxtb	r3, r3
 80058ce:	4013      	ands	r3, r2
 80058d0:	b259      	sxtb	r1, r3
 80058d2:	7afb      	ldrb	r3, [r7, #11]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4413      	add	r3, r2
 80058d8:	b2ca      	uxtb	r2, r1
 80058da:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < qty; i++)
 80058dc:	8afb      	ldrh	r3, [r7, #22]
 80058de:	3301      	adds	r3, #1
 80058e0:	82fb      	strh	r3, [r7, #22]
 80058e2:	8afa      	ldrh	r2, [r7, #22]
 80058e4:	8a7b      	ldrh	r3, [r7, #18]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d3bc      	bcc.n	8005864 <fc_read_input+0x7c>
	}

	pdu->len = pdu->data[2] + 5;	// include CRC
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	791b      	ldrb	r3, [r3, #4]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	3305      	adds	r3, #5
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	801a      	strh	r2, [r3, #0]
	return 0;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <fc_read_reg_input>:

static uint8_t fc_read_reg_input(mb_slave_t* mb, mb_pdu_t* pdu)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b086      	sub	sp, #24
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
 800590a:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2  |  2  |
	 * +----+----+------+-----+-----+
	 * len = 8
	 */

	if(pdu->len < 8)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	2b07      	cmp	r3, #7
 8005912:	d801      	bhi.n	8005918 <fc_read_reg_input+0x16>
		return MB_EXC_EXECUTE;
 8005914:	2304      	movs	r3, #4
 8005916:	e05e      	b.n	80059d6 <fc_read_reg_input+0xd4>

	uint16_t addr = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	791b      	ldrb	r3, [r3, #4]
 800591c:	021b      	lsls	r3, r3, #8
 800591e:	b21a      	sxth	r2, r3
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	795b      	ldrb	r3, [r3, #5]
 8005924:	b21b      	sxth	r3, r3
 8005926:	4313      	orrs	r3, r2
 8005928:	b21b      	sxth	r3, r3
 800592a:	827b      	strh	r3, [r7, #18]
	uint16_t qty  = pdu->data[MB_PDU_QTY_HI] << 8 | pdu->data[MB_PDU_QTY_LO];
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	799b      	ldrb	r3, [r3, #6]
 8005930:	021b      	lsls	r3, r3, #8
 8005932:	b21a      	sxth	r2, r3
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	79db      	ldrb	r3, [r3, #7]
 8005938:	b21b      	sxth	r3, r3
 800593a:	4313      	orrs	r3, r2
 800593c:	b21b      	sxth	r3, r3
 800593e:	823b      	strh	r3, [r7, #16]
	 * +----+----+-----+------+-----+
	 * | 1  |  1 |  1  |  n   |  2  |
	 * +----+----+-----+------+-----+
	 */

	pdu->data[2] = qty * 2;
 8005940:	8a3b      	ldrh	r3, [r7, #16]
 8005942:	b2db      	uxtb	r3, r3
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	b2da      	uxtb	r2, r3
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	711a      	strb	r2, [r3, #4]
	uint8_t* data = &pdu->data[3];
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	3305      	adds	r3, #5
 8005950:	60fb      	str	r3, [r7, #12]
	memset(data, 0x00, pdu->data[2]);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	791b      	ldrb	r3, [r3, #4]
 8005956:	461a      	mov	r2, r3
 8005958:	2100      	movs	r1, #0
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f001 f9ec 	bl	8006d38 <memset>

	uint16_t data_index = 0;
 8005960:	2300      	movs	r3, #0
 8005962:	82fb      	strh	r3, [r7, #22]
	for(uint8_t i = 0; i < qty; i++)
 8005964:	2300      	movs	r3, #0
 8005966:	757b      	strb	r3, [r7, #21]
 8005968:	e028      	b.n	80059bc <fc_read_reg_input+0xba>
	{
		uint16_t value     = mb->data->reg_input.get(&mb->data->reg_input, addr + i);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 8005978:	f102 0024 	add.w	r0, r2, #36	; 0x24
 800597c:	7d7a      	ldrb	r2, [r7, #21]
 800597e:	b291      	uxth	r1, r2
 8005980:	8a7a      	ldrh	r2, [r7, #18]
 8005982:	440a      	add	r2, r1
 8005984:	b292      	uxth	r2, r2
 8005986:	4611      	mov	r1, r2
 8005988:	4798      	blx	r3
 800598a:	4603      	mov	r3, r0
 800598c:	817b      	strh	r3, [r7, #10]
		data[data_index++] = value >> 8;
 800598e:	897b      	ldrh	r3, [r7, #10]
 8005990:	0a1b      	lsrs	r3, r3, #8
 8005992:	b29a      	uxth	r2, r3
 8005994:	8afb      	ldrh	r3, [r7, #22]
 8005996:	1c59      	adds	r1, r3, #1
 8005998:	82f9      	strh	r1, [r7, #22]
 800599a:	4619      	mov	r1, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	440b      	add	r3, r1
 80059a0:	b2d2      	uxtb	r2, r2
 80059a2:	701a      	strb	r2, [r3, #0]
		data[data_index++] = (uint8_t)value;
 80059a4:	8afb      	ldrh	r3, [r7, #22]
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	82fa      	strh	r2, [r7, #22]
 80059aa:	461a      	mov	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4413      	add	r3, r2
 80059b0:	897a      	ldrh	r2, [r7, #10]
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < qty; i++)
 80059b6:	7d7b      	ldrb	r3, [r7, #21]
 80059b8:	3301      	adds	r3, #1
 80059ba:	757b      	strb	r3, [r7, #21]
 80059bc:	7d7b      	ldrb	r3, [r7, #21]
 80059be:	b29b      	uxth	r3, r3
 80059c0:	8a3a      	ldrh	r2, [r7, #16]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d8d1      	bhi.n	800596a <fc_read_reg_input+0x68>
	}

	pdu->len = pdu->data[2] + 5;	// include CRC
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	791b      	ldrb	r3, [r3, #4]
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	3305      	adds	r3, #5
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	801a      	strh	r2, [r3, #0]
	return 0;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <fc_read_reg_hodling>:

static uint8_t fc_read_reg_hodling(mb_slave_t* mb, mb_pdu_t* pdu)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b086      	sub	sp, #24
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2  |  2  |
	 * +----+----+------+-----+-----+
	 * len = 8
	 */

	if(pdu->len < 8)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	2b07      	cmp	r3, #7
 80059ee:	d801      	bhi.n	80059f4 <fc_read_reg_hodling+0x16>
		return MB_EXC_EXECUTE;
 80059f0:	2304      	movs	r3, #4
 80059f2:	e05e      	b.n	8005ab2 <fc_read_reg_hodling+0xd4>

	uint16_t addr = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	791b      	ldrb	r3, [r3, #4]
 80059f8:	021b      	lsls	r3, r3, #8
 80059fa:	b21a      	sxth	r2, r3
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	795b      	ldrb	r3, [r3, #5]
 8005a00:	b21b      	sxth	r3, r3
 8005a02:	4313      	orrs	r3, r2
 8005a04:	b21b      	sxth	r3, r3
 8005a06:	827b      	strh	r3, [r7, #18]
	uint16_t qty  = pdu->data[MB_PDU_QTY_HI] << 8 | pdu->data[MB_PDU_QTY_LO];
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	799b      	ldrb	r3, [r3, #6]
 8005a0c:	021b      	lsls	r3, r3, #8
 8005a0e:	b21a      	sxth	r2, r3
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	79db      	ldrb	r3, [r3, #7]
 8005a14:	b21b      	sxth	r3, r3
 8005a16:	4313      	orrs	r3, r2
 8005a18:	b21b      	sxth	r3, r3
 8005a1a:	823b      	strh	r3, [r7, #16]
	 * +----+----+-----+------+-----+
	 * | 1  |  1 |  1  |  n   |  2  |
	 * +----+----+-----+------+-----+
	 */

	uint16_t idata = 0;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	82fb      	strh	r3, [r7, #22]
	uint8_t* data  = &pdu->data[3];
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	3305      	adds	r3, #5
 8005a24:	60fb      	str	r3, [r7, #12]

	pdu->data[2] = qty * 2;
 8005a26:	8a3b      	ldrh	r3, [r7, #16]
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	b2da      	uxtb	r2, r3
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	711a      	strb	r2, [r3, #4]
	memset(data, 0x00, pdu->data[2]);
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	791b      	ldrb	r3, [r3, #4]
 8005a36:	461a      	mov	r2, r3
 8005a38:	2100      	movs	r1, #0
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f001 f97c 	bl	8006d38 <memset>

	for(uint8_t i = 0; i < qty; i++)
 8005a40:	2300      	movs	r3, #0
 8005a42:	757b      	strb	r3, [r7, #21]
 8005a44:	e028      	b.n	8005a98 <fc_read_reg_hodling+0xba>
	{
		uint16_t value = mb->data->reg_holding.get(&mb->data->reg_holding, addr + i);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 8005a54:	f102 0034 	add.w	r0, r2, #52	; 0x34
 8005a58:	7d7a      	ldrb	r2, [r7, #21]
 8005a5a:	b291      	uxth	r1, r2
 8005a5c:	8a7a      	ldrh	r2, [r7, #18]
 8005a5e:	440a      	add	r2, r1
 8005a60:	b292      	uxth	r2, r2
 8005a62:	4611      	mov	r1, r2
 8005a64:	4798      	blx	r3
 8005a66:	4603      	mov	r3, r0
 8005a68:	817b      	strh	r3, [r7, #10]
		data[idata++] = (uint8_t)(value >> 8);
 8005a6a:	897b      	ldrh	r3, [r7, #10]
 8005a6c:	0a1b      	lsrs	r3, r3, #8
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	8afb      	ldrh	r3, [r7, #22]
 8005a72:	1c59      	adds	r1, r3, #1
 8005a74:	82f9      	strh	r1, [r7, #22]
 8005a76:	4619      	mov	r1, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	440b      	add	r3, r1
 8005a7c:	b2d2      	uxtb	r2, r2
 8005a7e:	701a      	strb	r2, [r3, #0]
		data[idata++] = (uint8_t)(value);
 8005a80:	8afb      	ldrh	r3, [r7, #22]
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	82fa      	strh	r2, [r7, #22]
 8005a86:	461a      	mov	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	897a      	ldrh	r2, [r7, #10]
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < qty; i++)
 8005a92:	7d7b      	ldrb	r3, [r7, #21]
 8005a94:	3301      	adds	r3, #1
 8005a96:	757b      	strb	r3, [r7, #21]
 8005a98:	7d7b      	ldrb	r3, [r7, #21]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	8a3a      	ldrh	r2, [r7, #16]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d8d1      	bhi.n	8005a46 <fc_read_reg_hodling+0x68>
	}

	pdu->len = pdu->data[2] + 5;	// include CRC
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	791b      	ldrb	r3, [r3, #4]
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	3305      	adds	r3, #5
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	801a      	strh	r2, [r3, #0]
	return 0;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <fc_write_single_coil>:

static uint8_t fc_write_single_coil(mb_slave_t* mb, mb_pdu_t* pdu)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b084      	sub	sp, #16
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
 8005ac2:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2    |  2  |
	 * +----+----+------+-------+-----+
	 * len = 8
	 */

	if(pdu->len < 8)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	2b07      	cmp	r3, #7
 8005aca:	d801      	bhi.n	8005ad0 <fc_write_single_coil+0x16>
		return MB_EXC_EXECUTE;
 8005acc:	2304      	movs	r3, #4
 8005ace:	e02e      	b.n	8005b2e <fc_write_single_coil+0x74>

	uint16_t addr  = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	791b      	ldrb	r3, [r3, #4]
 8005ad4:	021b      	lsls	r3, r3, #8
 8005ad6:	b21a      	sxth	r2, r3
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	795b      	ldrb	r3, [r3, #5]
 8005adc:	b21b      	sxth	r3, r3
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	b21b      	sxth	r3, r3
 8005ae2:	81fb      	strh	r3, [r7, #14]
	uint16_t value = pdu->data[MB_PDU_QTY_HI]  << 8 | pdu->data[MB_PDU_QTY_LO];
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	799b      	ldrb	r3, [r3, #6]
 8005ae8:	021b      	lsls	r3, r3, #8
 8005aea:	b21a      	sxth	r2, r3
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	79db      	ldrb	r3, [r3, #7]
 8005af0:	b21b      	sxth	r3, r3
 8005af2:	4313      	orrs	r3, r2
 8005af4:	b21b      	sxth	r3, r3
 8005af6:	81bb      	strh	r3, [r7, #12]
	 * | 1  | 1  |   2  |  2    |  2  |
	 * +----+----+------+-------+-----+
	 * len = 8
	 */

	if (value == 0x00000)
 8005af8:	89bb      	ldrh	r3, [r7, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10b      	bne.n	8005b16 <fc_write_single_coil+0x5c>
		mb->data->coil.set(&mb->data->coil, addr, 0);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 8005b0c:	1d10      	adds	r0, r2, #4
 8005b0e:	89f9      	ldrh	r1, [r7, #14]
 8005b10:	2200      	movs	r2, #0
 8005b12:	4798      	blx	r3
 8005b14:	e00a      	b.n	8005b2c <fc_write_single_coil+0x72>
	else
		mb->data->coil.set(&mb->data->coil, addr, 1);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 8005b24:	1d10      	adds	r0, r2, #4
 8005b26:	89f9      	ldrh	r1, [r7, #14]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	4798      	blx	r3

	return 0;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <fc_write_single_reg>:

static uint8_t fc_write_single_reg(mb_slave_t* mb, mb_pdu_t* pdu)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b084      	sub	sp, #16
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
 8005b3e:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2    |  2  |
	 * +----+----+------+-------+-----+
	 * len = 8
	 */

	if(pdu->len < 8)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	2b07      	cmp	r3, #7
 8005b46:	d801      	bhi.n	8005b4c <fc_write_single_reg+0x16>
		return MB_EXC_EXECUTE;
 8005b48:	2304      	movs	r3, #4
 8005b4a:	e020      	b.n	8005b8e <fc_write_single_reg+0x58>

	uint16_t addr  = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	791b      	ldrb	r3, [r3, #4]
 8005b50:	021b      	lsls	r3, r3, #8
 8005b52:	b21a      	sxth	r2, r3
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	795b      	ldrb	r3, [r3, #5]
 8005b58:	b21b      	sxth	r3, r3
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	b21b      	sxth	r3, r3
 8005b5e:	81fb      	strh	r3, [r7, #14]
	uint16_t value = pdu->data[MB_PDU_QTY_HI]  << 8 | pdu->data[MB_PDU_QTY_LO];
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	799b      	ldrb	r3, [r3, #6]
 8005b64:	021b      	lsls	r3, r3, #8
 8005b66:	b21a      	sxth	r2, r3
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	79db      	ldrb	r3, [r3, #7]
 8005b6c:	b21b      	sxth	r3, r3
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	b21b      	sxth	r3, r3
 8005b72:	81bb      	strh	r3, [r7, #12]
	 * | 1  | 1  |   2  |  2    |  2  |
	 * +----+----+------+-------+-----+
	 * len = 8
	 */

	mb->data->reg_holding.set(&mb->data->reg_holding, addr, value);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 8005b82:	f102 0034 	add.w	r0, r2, #52	; 0x34
 8005b86:	89ba      	ldrh	r2, [r7, #12]
 8005b88:	89f9      	ldrh	r1, [r7, #14]
 8005b8a:	4798      	blx	r3

	return 0;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <fc_write_multi_coil>:

static uint8_t fc_write_multi_coil(mb_slave_t* mb, mb_pdu_t* pdu)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b086      	sub	sp, #24
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
 8005b9e:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2  |  1  |   N  |  2  |
	 * +----+----+------+-----+-----+------+-----+
	 * len_min = 10
	 */

	if(pdu->len < 10)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	2b09      	cmp	r3, #9
 8005ba6:	d801      	bhi.n	8005bac <fc_write_multi_coil+0x16>
		return MB_EXC_EXECUTE;
 8005ba8:	2304      	movs	r3, #4
 8005baa:	e063      	b.n	8005c74 <fc_write_multi_coil+0xde>

	uint16_t addr  = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	791b      	ldrb	r3, [r3, #4]
 8005bb0:	021b      	lsls	r3, r3, #8
 8005bb2:	b21a      	sxth	r2, r3
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	795b      	ldrb	r3, [r3, #5]
 8005bb8:	b21b      	sxth	r3, r3
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	b21b      	sxth	r3, r3
 8005bbe:	82bb      	strh	r3, [r7, #20]
	uint16_t qty   = pdu->data[MB_PDU_QTY_HI]  << 8 | pdu->data[MB_PDU_QTY_LO];
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	799b      	ldrb	r3, [r3, #6]
 8005bc4:	021b      	lsls	r3, r3, #8
 8005bc6:	b21a      	sxth	r2, r3
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	79db      	ldrb	r3, [r3, #7]
 8005bcc:	b21b      	sxth	r3, r3
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	b21b      	sxth	r3, r3
 8005bd2:	827b      	strh	r3, [r7, #18]
	uint8_t  b_cnt = pdu->data[MB_PDU_CNT];
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	7a1b      	ldrb	r3, [r3, #8]
 8005bd8:	747b      	strb	r3, [r7, #17]

	uint8_t _cnt = qty / 8;
 8005bda:	8a7b      	ldrh	r3, [r7, #18]
 8005bdc:	08db      	lsrs	r3, r3, #3
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	75fb      	strb	r3, [r7, #23]
	if(qty % 8)
 8005be2:	8a7b      	ldrh	r3, [r7, #18]
 8005be4:	f003 0307 	and.w	r3, r3, #7
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <fc_write_multi_coil+0x5e>
		_cnt += 1;
 8005bee:	7dfb      	ldrb	r3, [r7, #23]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	75fb      	strb	r3, [r7, #23]

	if (((b_cnt + 9) != pdu->len) || (_cnt != b_cnt))
 8005bf4:	7c7b      	ldrb	r3, [r7, #17]
 8005bf6:	3309      	adds	r3, #9
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	8812      	ldrh	r2, [r2, #0]
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d103      	bne.n	8005c08 <fc_write_multi_coil+0x72>
 8005c00:	7dfa      	ldrb	r2, [r7, #23]
 8005c02:	7c7b      	ldrb	r3, [r7, #17]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d001      	beq.n	8005c0c <fc_write_multi_coil+0x76>
		return MB_EXC_EXECUTE;
 8005c08:	2304      	movs	r3, #4
 8005c0a:	e033      	b.n	8005c74 <fc_write_multi_coil+0xde>

	uint8_t* data = &pdu->data[7];
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	3309      	adds	r3, #9
 8005c10:	60fb      	str	r3, [r7, #12]
	for(uint8_t i  = 0; i < qty; i++)
 8005c12:	2300      	movs	r3, #0
 8005c14:	75bb      	strb	r3, [r7, #22]
 8005c16:	e024      	b.n	8005c62 <fc_write_multi_coil+0xcc>
	{
		uint8_t ibyte = i / 8;
 8005c18:	7dbb      	ldrb	r3, [r7, #22]
 8005c1a:	08db      	lsrs	r3, r3, #3
 8005c1c:	72fb      	strb	r3, [r7, #11]
		uint8_t ibit  = i % 8;
 8005c1e:	7dbb      	ldrb	r3, [r7, #22]
 8005c20:	f003 0307 	and.w	r3, r3, #7
 8005c24:	72bb      	strb	r3, [r7, #10]

		uint8_t status = (data[ibyte] >> ibit) & 0x01;
 8005c26:	7afb      	ldrb	r3, [r7, #11]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	7abb      	ldrb	r3, [r7, #10]
 8005c32:	fa42 f303 	asr.w	r3, r2, r3
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	727b      	strb	r3, [r7, #9]
		mb->data->coil.set(&mb->data->coil, addr + i, status);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 8005c4c:	1d10      	adds	r0, r2, #4
 8005c4e:	7dba      	ldrb	r2, [r7, #22]
 8005c50:	b291      	uxth	r1, r2
 8005c52:	8aba      	ldrh	r2, [r7, #20]
 8005c54:	440a      	add	r2, r1
 8005c56:	b291      	uxth	r1, r2
 8005c58:	7a7a      	ldrb	r2, [r7, #9]
 8005c5a:	4798      	blx	r3
	for(uint8_t i  = 0; i < qty; i++)
 8005c5c:	7dbb      	ldrb	r3, [r7, #22]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	75bb      	strb	r3, [r7, #22]
 8005c62:	7dbb      	ldrb	r3, [r7, #22]
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	8a7a      	ldrh	r2, [r7, #18]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d8d5      	bhi.n	8005c18 <fc_write_multi_coil+0x82>
	 * | 1  | 1  |   2  |  2  |  2  |
	 * +----+----+------+-----+-----+
	 * len_min = 8
	 */

	pdu->len = 8;	// include CRC
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	2208      	movs	r2, #8
 8005c70:	801a      	strh	r2, [r3, #0]

	return 0;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <fc_write_multi_reg>:

static uint8_t fc_write_multi_reg(mb_slave_t* mb, mb_pdu_t* pdu)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b088      	sub	sp, #32
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2  |  1  |   N  |  2  |
	 * +----+----+------+-----+-----+------+-----+
	 * len_min = 11
	 */

	if(pdu->len < 11)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	2b0a      	cmp	r3, #10
 8005c8c:	d801      	bhi.n	8005c92 <fc_write_multi_reg+0x16>
		return MB_EXC_EXECUTE;
 8005c8e:	2304      	movs	r3, #4
 8005c90:	e05f      	b.n	8005d52 <fc_write_multi_reg+0xd6>

	uint16_t addr  = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	791b      	ldrb	r3, [r3, #4]
 8005c96:	021b      	lsls	r3, r3, #8
 8005c98:	b21a      	sxth	r2, r3
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	795b      	ldrb	r3, [r3, #5]
 8005c9e:	b21b      	sxth	r3, r3
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	b21b      	sxth	r3, r3
 8005ca4:	837b      	strh	r3, [r7, #26]
	uint16_t qty   = pdu->data[MB_PDU_QTY_HI]  << 8 | pdu->data[MB_PDU_QTY_LO];
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	799b      	ldrb	r3, [r3, #6]
 8005caa:	021b      	lsls	r3, r3, #8
 8005cac:	b21a      	sxth	r2, r3
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	79db      	ldrb	r3, [r3, #7]
 8005cb2:	b21b      	sxth	r3, r3
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	b21b      	sxth	r3, r3
 8005cb8:	833b      	strh	r3, [r7, #24]
	uint8_t  b_cnt = pdu->data[MB_PDU_CNT];
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	7a1b      	ldrb	r3, [r3, #8]
 8005cbe:	75fb      	strb	r3, [r7, #23]

	if ((qty*2 != b_cnt) || ((b_cnt + 9) != pdu->len))
 8005cc0:	8b3b      	ldrh	r3, [r7, #24]
 8005cc2:	005a      	lsls	r2, r3, #1
 8005cc4:	7dfb      	ldrb	r3, [r7, #23]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d105      	bne.n	8005cd6 <fc_write_multi_reg+0x5a>
 8005cca:	7dfb      	ldrb	r3, [r7, #23]
 8005ccc:	3309      	adds	r3, #9
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	8812      	ldrh	r2, [r2, #0]
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d001      	beq.n	8005cda <fc_write_multi_reg+0x5e>
		return MB_EXC_EXECUTE;
 8005cd6:	2304      	movs	r3, #4
 8005cd8:	e03b      	b.n	8005d52 <fc_write_multi_reg+0xd6>

	uint8_t* data = &pdu->data[7];
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	3309      	adds	r3, #9
 8005cde:	613b      	str	r3, [r7, #16]
	uint16_t data_index = 0;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	83fb      	strh	r3, [r7, #30]
	for(uint8_t i = 0; i < qty; i++)
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	777b      	strb	r3, [r7, #29]
 8005ce8:	e02a      	b.n	8005d40 <fc_write_multi_reg+0xc4>
	{
		uint8_t hi = data[data_index++];
 8005cea:	8bfb      	ldrh	r3, [r7, #30]
 8005cec:	1c5a      	adds	r2, r3, #1
 8005cee:	83fa      	strh	r2, [r7, #30]
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	73fb      	strb	r3, [r7, #15]
		uint8_t lo = data[data_index++];
 8005cfa:	8bfb      	ldrh	r3, [r7, #30]
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	83fa      	strh	r2, [r7, #30]
 8005d00:	461a      	mov	r2, r3
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	4413      	add	r3, r2
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	73bb      	strb	r3, [r7, #14]
		uint16_t value = hi << 8 | lo;
 8005d0a:	7bfb      	ldrb	r3, [r7, #15]
 8005d0c:	021b      	lsls	r3, r3, #8
 8005d0e:	b21a      	sxth	r2, r3
 8005d10:	7bbb      	ldrb	r3, [r7, #14]
 8005d12:	b21b      	sxth	r3, r3
 8005d14:	4313      	orrs	r3, r2
 8005d16:	b21b      	sxth	r3, r3
 8005d18:	81bb      	strh	r3, [r7, #12]
		mb->data->reg_holding.set(&mb->data->reg_holding, addr + i, value);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8005d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 8005d28:	f102 0034 	add.w	r0, r2, #52	; 0x34
 8005d2c:	7f7a      	ldrb	r2, [r7, #29]
 8005d2e:	b291      	uxth	r1, r2
 8005d30:	8b7a      	ldrh	r2, [r7, #26]
 8005d32:	440a      	add	r2, r1
 8005d34:	b291      	uxth	r1, r2
 8005d36:	89ba      	ldrh	r2, [r7, #12]
 8005d38:	4798      	blx	r3
	for(uint8_t i = 0; i < qty; i++)
 8005d3a:	7f7b      	ldrb	r3, [r7, #29]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	777b      	strb	r3, [r7, #29]
 8005d40:	7f7b      	ldrb	r3, [r7, #29]
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	8b3a      	ldrh	r2, [r7, #24]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d8cf      	bhi.n	8005cea <fc_write_multi_reg+0x6e>
	 * | 1  | 1  |   2  |  2  |  2  |
	 * +----+----+------+-----+-----+
	 * len_min = 8
	 */

	pdu->len = 8;	// include CRC
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2208      	movs	r2, #8
 8005d4e:	801a      	strh	r2, [r3, #0]

	return 0;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3720      	adds	r7, #32
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
	...

08005d5c <ring_buffer_init>:
static void     _get(ring_buffer_t *buf, uint8_t *obuf, uint16_t *buf_size);
static void     _flush(ring_buffer_t *buf);
static uint16_t _available(ring_buffer_t *buf);

void ring_buffer_init(ring_buffer_t *buf)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <ring_buffer_init+0x12>
 8005d6a:	f7fe fe4b 	bl	8004a04 <__mb_failure>
	buf->__tail      = 0;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	801a      	strh	r2, [r3, #0]
	buf->__head      = 0;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	805a      	strh	r2, [r3, #2]
	buf->__available = 0;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
	buf->overflow    = false;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	buf->add       = _add;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a09      	ldr	r2, [pc, #36]	; (8005db4 <ring_buffer_init+0x58>)
 8005d8e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	buf->get_data  = _get;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a08      	ldr	r2, [pc, #32]	; (8005db8 <ring_buffer_init+0x5c>)
 8005d96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	buf->available = _available;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a07      	ldr	r2, [pc, #28]	; (8005dbc <ring_buffer_init+0x60>)
 8005d9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	buf->flush     = _flush;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a06      	ldr	r2, [pc, #24]	; (8005dc0 <ring_buffer_init+0x64>)
 8005da6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8005daa:	bf00      	nop
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	08005dc5 	.word	0x08005dc5
 8005db8:	08005e87 	.word	0x08005e87
 8005dbc:	08005f3d 	.word	0x08005f3d
 8005dc0:	08005e51 	.word	0x08005e51

08005dc4 <_add>:

void _add(ring_buffer_t *buf, uint8_t data)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	460b      	mov	r3, r1
 8005dce:	70fb      	strb	r3, [r7, #3]
	mb_assert(buf);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <_add+0x16>
 8005dd6:	f7fe fe15 	bl	8004a04 <__mb_failure>
	if (buf->overflow)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d12e      	bne.n	8005e42 <_add+0x7e>
		return;

	buf->__data[buf->__head] = data;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	885b      	ldrh	r3, [r3, #2]
 8005de8:	78fa      	ldrb	r2, [r7, #3]
 8005dea:	b291      	uxth	r1, r2
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	4413      	add	r3, r2
 8005df2:	460a      	mov	r2, r1
 8005df4:	809a      	strh	r2, [r3, #4]
	buf->__head = (buf->__head + 1) % RING_BUFFER_SIZE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	885b      	ldrh	r3, [r3, #2]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	425a      	negs	r2, r3
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	bf58      	it	pl
 8005e04:	4253      	negpl	r3, r2
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	805a      	strh	r2, [r3, #2]
	if (buf->__available >= RING_BUFFER_SIZE)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8005e12:	2bff      	cmp	r3, #255	; 0xff
 8005e14:	d908      	bls.n	8005e28 <_add+0x64>
	{
		buf->overflow = true;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		mb_log("Ring buffer overflow\n");
 8005e1e:	490b      	ldr	r1, [pc, #44]	; (8005e4c <_add+0x88>)
 8005e20:	2000      	movs	r0, #0
 8005e22:	f000 ff3f 	bl	8006ca4 <SEGGER_RTT_printf>
 8005e26:	e00d      	b.n	8005e44 <_add+0x80>
	}
	else
	{
		buf->overflow = false;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		buf->__available++;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8005e36:	3301      	adds	r3, #1
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 8005e40:	e000      	b.n	8005e44 <_add+0x80>
		return;
 8005e42:	bf00      	nop
	}
}
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	08006e98 	.word	0x08006e98

08005e50 <_flush>:

void _flush(ring_buffer_t *buf)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d101      	bne.n	8005e62 <_flush+0x12>
 8005e5e:	f7fe fdd1 	bl	8004a04 <__mb_failure>
	buf->__tail      = 0;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	801a      	strh	r2, [r3, #0]
	buf->__head      = 0;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	805a      	strh	r2, [r3, #2]
	buf->__available = 0;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
	buf->overflow    = false;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
}
 8005e7e:	bf00      	nop
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <_get>:

void _get(ring_buffer_t *buf, uint8_t *data, uint16_t *data_size)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b086      	sub	sp, #24
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	60f8      	str	r0, [r7, #12]
 8005e8e:	60b9      	str	r1, [r7, #8]
 8005e90:	607a      	str	r2, [r7, #4]
	mb_assert(buf);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <_get+0x16>
 8005e98:	f7fe fdb4 	bl	8004a04 <__mb_failure>
	mb_assert(data);
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <_get+0x20>
 8005ea2:	f7fe fdaf 	bl	8004a04 <__mb_failure>
	mb_assert(*data_size);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	881b      	ldrh	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <_get+0x2c>
 8005eae:	f7fe fda9 	bl	8004a04 <__mb_failure>

	if (buf->__available == 0)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d103      	bne.n	8005ec4 <_get+0x3e>
	{
		*data_size = 0;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	801a      	strh	r2, [r3, #0]
		return;
 8005ec2:	e038      	b.n	8005f36 <_get+0xb0>
	}

	uint16_t len;
	len          = (buf->__available < *data_size) ? buf->__available : *data_size;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	881a      	ldrh	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	bf28      	it	cs
 8005ed2:	4613      	movcs	r3, r2
 8005ed4:	82bb      	strh	r3, [r7, #20]
	*data_size   = len;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	8aba      	ldrh	r2, [r7, #20]
 8005eda:	801a      	strh	r2, [r3, #0]

	for (uint16_t i = 0; i < len; i++)
 8005edc:	2300      	movs	r3, #0
 8005ede:	82fb      	strh	r3, [r7, #22]
 8005ee0:	e018      	b.n	8005f14 <_get+0x8e>
	{
		data[i]     = buf->__data[buf->__tail];
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	4413      	add	r3, r2
 8005eec:	8899      	ldrh	r1, [r3, #4]
 8005eee:	8afb      	ldrh	r3, [r7, #22]
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	b2ca      	uxtb	r2, r1
 8005ef6:	701a      	strb	r2, [r3, #0]
		buf->__tail = (buf->__tail + 1) % RING_BUFFER_SIZE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	3301      	adds	r3, #1
 8005efe:	425a      	negs	r2, r3
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	bf58      	it	pl
 8005f06:	4253      	negpl	r3, r2
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < len; i++)
 8005f0e:	8afb      	ldrh	r3, [r7, #22]
 8005f10:	3301      	adds	r3, #1
 8005f12:	82fb      	strh	r3, [r7, #22]
 8005f14:	8afa      	ldrh	r2, [r7, #22]
 8005f16:	8abb      	ldrh	r3, [r7, #20]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d3e2      	bcc.n	8005ee2 <_get+0x5c>
	}
	buf->__available = buf->__available - len;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f8b3 2204 	ldrh.w	r2, [r3, #516]	; 0x204
 8005f22:	8abb      	ldrh	r3, [r7, #20]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
	buf->overflow    = false;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
}
 8005f36:	3718      	adds	r7, #24
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <_available>:

uint16_t _available(ring_buffer_t *buf)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
	return buf->__available;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
	...

08005f58 <mb_data_init>:
static uint8_t  input_db[MB_INPUT_NUM/8];
static uint16_t reg_input_db[MB_REG_INPUT_NUM];
static uint16_t reg_holding_db[MB_REG_HOLDING_NUM];

void mb_data_init(mb_data_t* mb_data)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
	mb_assert(mb_data);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <mb_data_init+0x12>
 8005f66:	f7fe fd4d 	bl	8004a04 <__mb_failure>

	memset(coil_db       , 0, sizeof(coil_db));
 8005f6a:	22fa      	movs	r2, #250	; 0xfa
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	481d      	ldr	r0, [pc, #116]	; (8005fe4 <mb_data_init+0x8c>)
 8005f70:	f000 fee2 	bl	8006d38 <memset>
	memset(input_db      , 0, sizeof(input_db));
 8005f74:	22fa      	movs	r2, #250	; 0xfa
 8005f76:	2100      	movs	r1, #0
 8005f78:	481b      	ldr	r0, [pc, #108]	; (8005fe8 <mb_data_init+0x90>)
 8005f7a:	f000 fedd 	bl	8006d38 <memset>
	memset(reg_input_db  , 0, sizeof(reg_input_db));
 8005f7e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005f82:	2100      	movs	r1, #0
 8005f84:	4819      	ldr	r0, [pc, #100]	; (8005fec <mb_data_init+0x94>)
 8005f86:	f000 fed7 	bl	8006d38 <memset>
	memset(reg_holding_db, 0, sizeof(reg_holding_db));
 8005f8a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005f8e:	2100      	movs	r1, #0
 8005f90:	4817      	ldr	r0, [pc, #92]	; (8005ff0 <mb_data_init+0x98>)
 8005f92:	f000 fed1 	bl	8006d38 <memset>

	mb_data_bit_init(&mb_data->coil       , coil_db       , MB_COIL_NUM);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	3304      	adds	r3, #4
 8005f9a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005f9e:	4911      	ldr	r1, [pc, #68]	; (8005fe4 <mb_data_init+0x8c>)
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 f833 	bl	800600c <mb_data_bit_init>
	mb_data_bit_init(&mb_data->input      , input_db      , MB_INPUT_NUM);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	3314      	adds	r3, #20
 8005faa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005fae:	490e      	ldr	r1, [pc, #56]	; (8005fe8 <mb_data_init+0x90>)
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f000 f82b 	bl	800600c <mb_data_bit_init>
	mb_data_reg_init(&mb_data->reg_input  , reg_input_db  , MB_REG_INPUT_NUM);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	3324      	adds	r3, #36	; 0x24
 8005fba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005fbe:	490b      	ldr	r1, [pc, #44]	; (8005fec <mb_data_init+0x94>)
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f000 f8c3 	bl	800614c <mb_data_reg_init>
	mb_data_reg_init(&mb_data->reg_holding, reg_holding_db, MB_REG_HOLDING_NUM);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	3334      	adds	r3, #52	; 0x34
 8005fca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005fce:	4908      	ldr	r1, [pc, #32]	; (8005ff0 <mb_data_init+0x98>)
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 f8bb 	bl	800614c <mb_data_reg_init>

	mb_data->_is_init = true;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	701a      	strb	r2, [r3, #0]
}
 8005fdc:	bf00      	nop
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	20001c50 	.word	0x20001c50
 8005fe8:	20001d4c 	.word	0x20001d4c
 8005fec:	20001e48 	.word	0x20001e48
 8005ff0:	20002618 	.word	0x20002618

08005ff4 <mb_data_is_init>:

bool mb_data_is_init(mb_data_t* mb_data)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
	return mb_data->_is_init;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
}
 8006000:	4618      	mov	r0, r3
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <mb_data_bit_init>:

uint8_t _get_bit(mb_data_bit_t *bit, uint16_t addr);
void _set_bit(mb_data_bit_t *bit, uint16_t addr, uint8_t status);

void mb_data_bit_init(mb_data_bit_t *bit, uint8_t *data, uint16_t n_bit)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	4613      	mov	r3, r2
 8006018:	80fb      	strh	r3, [r7, #6]
	mb_assert(bit);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <mb_data_bit_init+0x18>
 8006020:	f7fe fcf0 	bl	8004a04 <__mb_failure>
	mb_assert(data);
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <mb_data_bit_init+0x22>
 800602a:	f7fe fceb 	bl	8004a04 <__mb_failure>
	mb_assert(n_bit);
 800602e:	88fb      	ldrh	r3, [r7, #6]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <mb_data_bit_init+0x2c>
 8006034:	f7fe fce6 	bl	8004a04 <__mb_failure>

	bit->data = data;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	601a      	str	r2, [r3, #0]
	bit->nbit = n_bit;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	88fa      	ldrh	r2, [r7, #6]
 8006042:	809a      	strh	r2, [r3, #4]
	bit->get  = _get_bit;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4a04      	ldr	r2, [pc, #16]	; (8006058 <mb_data_bit_init+0x4c>)
 8006048:	60da      	str	r2, [r3, #12]
	bit->set  = _set_bit;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	4a03      	ldr	r2, [pc, #12]	; (800605c <mb_data_bit_init+0x50>)
 800604e:	609a      	str	r2, [r3, #8]
}
 8006050:	bf00      	nop
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	08006061 	.word	0x08006061
 800605c:	080060b9 	.word	0x080060b9

08006060 <_get_bit>:

uint8_t _get_bit(mb_data_bit_t *bit, uint16_t addr)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	460b      	mov	r3, r1
 800606a:	807b      	strh	r3, [r7, #2]
	mb_assert(bit);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <_get_bit+0x16>
 8006072:	f7fe fcc7 	bl	8004a04 <__mb_failure>
	mb_assert(addr < bit->nbit);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	889b      	ldrh	r3, [r3, #4]
 800607a:	887a      	ldrh	r2, [r7, #2]
 800607c:	429a      	cmp	r2, r3
 800607e:	d301      	bcc.n	8006084 <_get_bit+0x24>
 8006080:	f7fe fcc0 	bl	8004a04 <__mb_failure>

	uint8_t byte_index = addr / 8;
 8006084:	887b      	ldrh	r3, [r7, #2]
 8006086:	08db      	lsrs	r3, r3, #3
 8006088:	b29b      	uxth	r3, r3
 800608a:	73fb      	strb	r3, [r7, #15]
	uint8_t bit_index  = addr % 8;
 800608c:	887b      	ldrh	r3, [r7, #2]
 800608e:	b2db      	uxtb	r3, r3
 8006090:	f003 0307 	and.w	r3, r3, #7
 8006094:	73bb      	strb	r3, [r7, #14]

	return (uint8_t)((bit->data[byte_index] >> bit_index) & 0x01);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	4413      	add	r3, r2
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	461a      	mov	r2, r3
 80060a2:	7bbb      	ldrb	r3, [r7, #14]
 80060a4:	fa42 f303 	asr.w	r3, r2, r3
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	b2db      	uxtb	r3, r3
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <_set_bit>:

void _set_bit(mb_data_bit_t *bit, uint16_t addr, uint8_t status)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	460b      	mov	r3, r1
 80060c2:	807b      	strh	r3, [r7, #2]
 80060c4:	4613      	mov	r3, r2
 80060c6:	707b      	strb	r3, [r7, #1]
	mb_assert(bit);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <_set_bit+0x1a>
 80060ce:	f7fe fc99 	bl	8004a04 <__mb_failure>
	mb_assert(addr < bit->nbit);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	889b      	ldrh	r3, [r3, #4]
 80060d6:	887a      	ldrh	r2, [r7, #2]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d301      	bcc.n	80060e0 <_set_bit+0x28>
 80060dc:	f7fe fc92 	bl	8004a04 <__mb_failure>

	uint8_t byte_index = addr / 8;
 80060e0:	887b      	ldrh	r3, [r7, #2]
 80060e2:	08db      	lsrs	r3, r3, #3
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	73fb      	strb	r3, [r7, #15]
	uint8_t bit_index  = addr % 8;
 80060e8:	887b      	ldrh	r3, [r7, #2]
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	f003 0307 	and.w	r3, r3, #7
 80060f0:	73bb      	strb	r3, [r7, #14]

	uint8_t val = 1 << bit_index;
 80060f2:	7bbb      	ldrb	r3, [r7, #14]
 80060f4:	2201      	movs	r2, #1
 80060f6:	fa02 f303 	lsl.w	r3, r2, r3
 80060fa:	737b      	strb	r3, [r7, #13]
	if (status)
 80060fc:	787b      	ldrb	r3, [r7, #1]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00d      	beq.n	800611e <_set_bit+0x66>
		bit->data[byte_index] = (uint8_t)(bit->data[byte_index] | val);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	7bfb      	ldrb	r3, [r7, #15]
 8006108:	4413      	add	r3, r2
 800610a:	7819      	ldrb	r1, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	7bfb      	ldrb	r3, [r7, #15]
 8006112:	4413      	add	r3, r2
 8006114:	7b7a      	ldrb	r2, [r7, #13]
 8006116:	430a      	orrs	r2, r1
 8006118:	b2d2      	uxtb	r2, r2
 800611a:	701a      	strb	r2, [r3, #0]
	else
		bit->data[byte_index] = (uint8_t)(bit->data[byte_index] & (~val));
}
 800611c:	e011      	b.n	8006142 <_set_bit+0x8a>
		bit->data[byte_index] = (uint8_t)(bit->data[byte_index] & (~val));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	7bfb      	ldrb	r3, [r7, #15]
 8006124:	4413      	add	r3, r2
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	b25a      	sxtb	r2, r3
 800612a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800612e:	43db      	mvns	r3, r3
 8006130:	b25b      	sxtb	r3, r3
 8006132:	4013      	ands	r3, r2
 8006134:	b259      	sxtb	r1, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	7bfb      	ldrb	r3, [r7, #15]
 800613c:	4413      	add	r3, r2
 800613e:	b2ca      	uxtb	r2, r1
 8006140:	701a      	strb	r2, [r3, #0]
}
 8006142:	bf00      	nop
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
	...

0800614c <mb_data_reg_init>:

static void     _reg_set(mb_data_reg_t* reg, uint16_t addr, uint16_t value);
static uint16_t _reg_get(mb_data_reg_t* reg, uint16_t addr);

void mb_data_reg_init(mb_data_reg_t* reg, uint16_t* data, uint16_t nreg)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	4613      	mov	r3, r2
 8006158:	80fb      	strh	r3, [r7, #6]
	mb_assert(reg);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <mb_data_reg_init+0x18>
 8006160:	f7fe fc50 	bl	8004a04 <__mb_failure>
	mb_assert(data);
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <mb_data_reg_init+0x22>
 800616a:	f7fe fc4b 	bl	8004a04 <__mb_failure>
	mb_assert(nreg);
 800616e:	88fb      	ldrh	r3, [r7, #6]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <mb_data_reg_init+0x2c>
 8006174:	f7fe fc46 	bl	8004a04 <__mb_failure>

	reg->data = data;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	601a      	str	r2, [r3, #0]
	reg->nreg = nreg;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	88fa      	ldrh	r2, [r7, #6]
 8006182:	809a      	strh	r2, [r3, #4]
	reg->get  = _reg_get;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4a04      	ldr	r2, [pc, #16]	; (8006198 <mb_data_reg_init+0x4c>)
 8006188:	60da      	str	r2, [r3, #12]
	reg->set  = _reg_set;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4a03      	ldr	r2, [pc, #12]	; (800619c <mb_data_reg_init+0x50>)
 800618e:	609a      	str	r2, [r3, #8]
}
 8006190:	bf00      	nop
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	080061df 	.word	0x080061df
 800619c:	080061a1 	.word	0x080061a1

080061a0 <_reg_set>:

static void _reg_set(mb_data_reg_t *reg, uint16_t addr, uint16_t value) {
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	807b      	strh	r3, [r7, #2]
 80061ac:	4613      	mov	r3, r2
 80061ae:	803b      	strh	r3, [r7, #0]
	mb_assert(reg);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <_reg_set+0x1a>
 80061b6:	f7fe fc25 	bl	8004a04 <__mb_failure>
	mb_assert(addr < reg->nreg);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	889b      	ldrh	r3, [r3, #4]
 80061be:	887a      	ldrh	r2, [r7, #2]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d301      	bcc.n	80061c8 <_reg_set+0x28>
 80061c4:	f7fe fc1e 	bl	8004a04 <__mb_failure>
	reg->data[addr] = value;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	887b      	ldrh	r3, [r7, #2]
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	4413      	add	r3, r2
 80061d2:	883a      	ldrh	r2, [r7, #0]
 80061d4:	801a      	strh	r2, [r3, #0]
}
 80061d6:	bf00      	nop
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <_reg_get>:

static uint16_t _reg_get(mb_data_reg_t *reg, uint16_t addr) {
 80061de:	b580      	push	{r7, lr}
 80061e0:	b082      	sub	sp, #8
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	460b      	mov	r3, r1
 80061e8:	807b      	strh	r3, [r7, #2]
	mb_assert(reg);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <_reg_get+0x16>
 80061f0:	f7fe fc08 	bl	8004a04 <__mb_failure>
	mb_assert(addr < reg->nreg);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	889b      	ldrh	r3, [r3, #4]
 80061f8:	887a      	ldrh	r2, [r7, #2]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d301      	bcc.n	8006202 <_reg_get+0x24>
 80061fe:	f7fe fc01 	bl	8004a04 <__mb_failure>
	
	return reg->data[addr];
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	887b      	ldrh	r3, [r7, #2]
 8006208:	005b      	lsls	r3, r3, #1
 800620a:	4413      	add	r3, r2
 800620c:	881b      	ldrh	r3, [r3, #0]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800621e:	4b25      	ldr	r3, [pc, #148]	; (80062b4 <_DoInit+0x9c>)
 8006220:	603b      	str	r3, [r7, #0]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2203      	movs	r2, #3
 8006226:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	2203      	movs	r2, #3
 800622c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	4a21      	ldr	r2, [pc, #132]	; (80062b8 <_DoInit+0xa0>)
 8006232:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	4a21      	ldr	r2, [pc, #132]	; (80062bc <_DoInit+0xa4>)
 8006238:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006240:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	2200      	movs	r2, #0
 8006246:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2200      	movs	r2, #0
 800624c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2200      	movs	r2, #0
 8006252:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	4a18      	ldr	r2, [pc, #96]	; (80062b8 <_DoInit+0xa0>)
 8006258:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	4a18      	ldr	r2, [pc, #96]	; (80062c0 <_DoInit+0xa8>)
 800625e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	2210      	movs	r2, #16
 8006264:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2200      	movs	r2, #0
 800626a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	2200      	movs	r2, #0
 8006270:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2200      	movs	r2, #0
 8006276:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8006278:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800627c:	2300      	movs	r3, #0
 800627e:	607b      	str	r3, [r7, #4]
 8006280:	e00c      	b.n	800629c <_DoInit+0x84>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f1c3 030f 	rsb	r3, r3, #15
 8006288:	4a0e      	ldr	r2, [pc, #56]	; (80062c4 <_DoInit+0xac>)
 800628a:	5cd1      	ldrb	r1, [r2, r3]
 800628c:	683a      	ldr	r2, [r7, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4413      	add	r3, r2
 8006292:	460a      	mov	r2, r1
 8006294:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	3301      	adds	r3, #1
 800629a:	607b      	str	r3, [r7, #4]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b0f      	cmp	r3, #15
 80062a0:	d9ef      	bls.n	8006282 <_DoInit+0x6a>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80062a2:	f3bf 8f5f 	dmb	sy
}
 80062a6:	bf00      	nop
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	20002de8 	.word	0x20002de8
 80062b8:	08006eb0 	.word	0x08006eb0
 80062bc:	20002e90 	.word	0x20002e90
 80062c0:	20003290 	.word	0x20003290
 80062c4:	08006f0c 	.word	0x08006f0c

080062c8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08a      	sub	sp, #40	; 0x28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80062d4:	2300      	movs	r3, #0
 80062d6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d905      	bls.n	80062f8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	3b01      	subs	r3, #1
 80062f4:	627b      	str	r3, [r7, #36]	; 0x24
 80062f6:	e007      	b.n	8006308 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	69b9      	ldr	r1, [r7, #24]
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	1acb      	subs	r3, r1, r3
 8006302:	4413      	add	r3, r2
 8006304:	3b01      	subs	r3, #1
 8006306:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006312:	4293      	cmp	r3, r2
 8006314:	bf28      	it	cs
 8006316:	4613      	movcs	r3, r2
 8006318:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800631a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4293      	cmp	r3, r2
 8006320:	bf28      	it	cs
 8006322:	4613      	movcs	r3, r2
 8006324:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	4413      	add	r3, r2
 800632e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8006330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006332:	68b9      	ldr	r1, [r7, #8]
 8006334:	6978      	ldr	r0, [r7, #20]
 8006336:	f000 fcf1 	bl	8006d1c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800633a:	6a3a      	ldr	r2, [r7, #32]
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	4413      	add	r3, r2
 8006340:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	4413      	add	r3, r2
 8006348:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8006352:	69fa      	ldr	r2, [r7, #28]
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	4413      	add	r3, r2
 8006358:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	69fa      	ldr	r2, [r7, #28]
 8006360:	429a      	cmp	r2, r3
 8006362:	d101      	bne.n	8006368 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8006364:	2300      	movs	r3, #0
 8006366:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006368:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	69fa      	ldr	r2, [r7, #28]
 8006370:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1b2      	bne.n	80062de <_WriteBlocking+0x16>
  return NumBytesWritten;
 8006378:	6a3b      	ldr	r3, [r7, #32]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3728      	adds	r7, #40	; 0x28
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8006382:	b580      	push	{r7, lr}
 8006384:	b088      	sub	sp, #32
 8006386:	af00      	add	r7, sp, #0
 8006388:	60f8      	str	r0, [r7, #12]
 800638a:	60b9      	str	r1, [r7, #8]
 800638c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	689a      	ldr	r2, [r3, #8]
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d911      	bls.n	80063ca <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	4413      	add	r3, r2
 80063ae:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	68b9      	ldr	r1, [r7, #8]
 80063b4:	6938      	ldr	r0, [r7, #16]
 80063b6:	f000 fcb1 	bl	8006d1c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80063ba:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80063be:	69fa      	ldr	r2, [r7, #28]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	441a      	add	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80063c8:	e01f      	b.n	800640a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	4413      	add	r3, r2
 80063d6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	68b9      	ldr	r1, [r7, #8]
 80063dc:	6938      	ldr	r0, [r7, #16]
 80063de:	f000 fc9d 	bl	8006d1c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	4413      	add	r3, r2
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	4619      	mov	r1, r3
 80063fa:	6938      	ldr	r0, [r7, #16]
 80063fc:	f000 fc8e 	bl	8006d1c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006400:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	60da      	str	r2, [r3, #12]
}
 800640a:	bf00      	nop
 800640c:	3720      	adds	r7, #32
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8006412:	b480      	push	{r7}
 8006414:	b087      	sub	sp, #28
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	429a      	cmp	r2, r3
 800642c:	d808      	bhi.n	8006440 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	689a      	ldr	r2, [r3, #8]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	1ad2      	subs	r2, r2, r3
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	4413      	add	r3, r2
 800643a:	3b01      	subs	r3, #1
 800643c:	617b      	str	r3, [r7, #20]
 800643e:	e004      	b.n	800644a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	3b01      	subs	r3, #1
 8006448:	617b      	str	r3, [r7, #20]
  }
  return r;
 800644a:	697b      	ldr	r3, [r7, #20]
}
 800644c:	4618      	mov	r0, r3
 800644e:	371c      	adds	r7, #28
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006458:	b580      	push	{r7, lr}
 800645a:	b088      	sub	sp, #32
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	4613      	mov	r3, r2
 800646e:	005b      	lsls	r3, r3, #1
 8006470:	4413      	add	r3, r2
 8006472:	00db      	lsls	r3, r3, #3
 8006474:	4a1f      	ldr	r2, [pc, #124]	; (80064f4 <SEGGER_RTT_WriteNoLock+0x9c>)
 8006476:	4413      	add	r3, r2
 8006478:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	2b02      	cmp	r3, #2
 8006480:	d029      	beq.n	80064d6 <SEGGER_RTT_WriteNoLock+0x7e>
 8006482:	2b02      	cmp	r3, #2
 8006484:	d82e      	bhi.n	80064e4 <SEGGER_RTT_WriteNoLock+0x8c>
 8006486:	2b00      	cmp	r3, #0
 8006488:	d002      	beq.n	8006490 <SEGGER_RTT_WriteNoLock+0x38>
 800648a:	2b01      	cmp	r3, #1
 800648c:	d013      	beq.n	80064b6 <SEGGER_RTT_WriteNoLock+0x5e>
 800648e:	e029      	b.n	80064e4 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006490:	6978      	ldr	r0, [r7, #20]
 8006492:	f7ff ffbe 	bl	8006412 <_GetAvailWriteSpace>
 8006496:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	429a      	cmp	r2, r3
 800649e:	d202      	bcs.n	80064a6 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80064a0:	2300      	movs	r3, #0
 80064a2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80064a4:	e021      	b.n	80064ea <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	69b9      	ldr	r1, [r7, #24]
 80064ae:	6978      	ldr	r0, [r7, #20]
 80064b0:	f7ff ff67 	bl	8006382 <_WriteNoCheck>
    break;
 80064b4:	e019      	b.n	80064ea <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80064b6:	6978      	ldr	r0, [r7, #20]
 80064b8:	f7ff ffab 	bl	8006412 <_GetAvailWriteSpace>
 80064bc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	4293      	cmp	r3, r2
 80064c4:	bf28      	it	cs
 80064c6:	4613      	movcs	r3, r2
 80064c8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80064ca:	69fa      	ldr	r2, [r7, #28]
 80064cc:	69b9      	ldr	r1, [r7, #24]
 80064ce:	6978      	ldr	r0, [r7, #20]
 80064d0:	f7ff ff57 	bl	8006382 <_WriteNoCheck>
    break;
 80064d4:	e009      	b.n	80064ea <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	69b9      	ldr	r1, [r7, #24]
 80064da:	6978      	ldr	r0, [r7, #20]
 80064dc:	f7ff fef4 	bl	80062c8 <_WriteBlocking>
 80064e0:	61f8      	str	r0, [r7, #28]
    break;
 80064e2:	e002      	b.n	80064ea <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80064e4:	2300      	movs	r3, #0
 80064e6:	61fb      	str	r3, [r7, #28]
    break;
 80064e8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80064ea:	69fb      	ldr	r3, [r7, #28]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3720      	adds	r7, #32
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	20002de8 	.word	0x20002de8

080064f8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b088      	sub	sp, #32
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8006504:	4b0e      	ldr	r3, [pc, #56]	; (8006540 <SEGGER_RTT_Write+0x48>)
 8006506:	61fb      	str	r3, [r7, #28]
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <SEGGER_RTT_Write+0x1e>
 8006512:	f7ff fe81 	bl	8006218 <_DoInit>
  SEGGER_RTT_LOCK();
 8006516:	f3ef 8311 	mrs	r3, BASEPRI
 800651a:	f04f 0120 	mov.w	r1, #32
 800651e:	f381 8811 	msr	BASEPRI, r1
 8006522:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	68b9      	ldr	r1, [r7, #8]
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f7ff ff95 	bl	8006458 <SEGGER_RTT_WriteNoLock>
 800652e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8006536:	697b      	ldr	r3, [r7, #20]
}
 8006538:	4618      	mov	r0, r3
 800653a:	3720      	adds	r7, #32
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	20002de8 	.word	0x20002de8

08006544 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006544:	b580      	push	{r7, lr}
 8006546:	b08a      	sub	sp, #40	; 0x28
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
 8006550:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_UP* pUp;

  INIT();
 8006552:	4b20      	ldr	r3, [pc, #128]	; (80065d4 <SEGGER_RTT_ConfigUpBuffer+0x90>)
 8006554:	623b      	str	r3, [r7, #32]
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	d101      	bne.n	8006564 <SEGGER_RTT_ConfigUpBuffer+0x20>
 8006560:	f7ff fe5a 	bl	8006218 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006564:	4b1b      	ldr	r3, [pc, #108]	; (80065d4 <SEGGER_RTT_ConfigUpBuffer+0x90>)
 8006566:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2b02      	cmp	r3, #2
 800656c:	d82a      	bhi.n	80065c4 <SEGGER_RTT_ConfigUpBuffer+0x80>
    SEGGER_RTT_LOCK();
 800656e:	f3ef 8311 	mrs	r3, BASEPRI
 8006572:	f04f 0120 	mov.w	r1, #32
 8006576:	f381 8811 	msr	BASEPRI, r1
 800657a:	61bb      	str	r3, [r7, #24]
    pUp = &pRTTCB->aUp[BufferIndex];
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	4613      	mov	r3, r2
 8006582:	005b      	lsls	r3, r3, #1
 8006584:	4413      	add	r3, r2
 8006586:	00db      	lsls	r3, r3, #3
 8006588:	69fa      	ldr	r2, [r7, #28]
 800658a:	4413      	add	r3, r2
 800658c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00e      	beq.n	80065b2 <SEGGER_RTT_ConfigUpBuffer+0x6e>
      pUp->sName        = sName;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	601a      	str	r2, [r3, #0]
      pUp->pBuffer      = (char*)pBuffer;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	605a      	str	r2, [r3, #4]
      pUp->SizeOfBuffer = BufferSize;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	609a      	str	r2, [r3, #8]
      pUp->RdOff        = 0u;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	2200      	movs	r2, #0
 80065aa:	611a      	str	r2, [r3, #16]
      pUp->WrOff        = 0u;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	2200      	movs	r2, #0
 80065b0:	60da      	str	r2, [r3, #12]
    }
    pUp->Flags          = Flags;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065b6:	615a      	str	r2, [r3, #20]
    SEGGER_RTT_UNLOCK();
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80065be:	2300      	movs	r3, #0
 80065c0:	627b      	str	r3, [r7, #36]	; 0x24
 80065c2:	e002      	b.n	80065ca <SEGGER_RTT_ConfigUpBuffer+0x86>
  } else {
    r = -1;
 80065c4:	f04f 33ff 	mov.w	r3, #4294967295
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3728      	adds	r7, #40	; 0x28
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	20002de8 	.word	0x20002de8

080065d8 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	460b      	mov	r3, r1
 80065e2:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	1c5a      	adds	r2, r3, #1
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d80e      	bhi.n	8006614 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	4413      	add	r3, r2
 80065fe:	78fa      	ldrb	r2, [r7, #3]
 8006600:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	1c5a      	adds	r2, r3, #1
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	1c5a      	adds	r2, r3, #1
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	689a      	ldr	r2, [r3, #8]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	429a      	cmp	r2, r3
 800661e:	d115      	bne.n	800664c <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6918      	ldr	r0, [r3, #16]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6819      	ldr	r1, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	461a      	mov	r2, r3
 800662e:	f7ff ff63 	bl	80064f8 <SEGGER_RTT_Write>
 8006632:	4602      	mov	r2, r0
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	429a      	cmp	r2, r3
 800663a:	d004      	beq.n	8006646 <_StoreChar+0x6e>
      p->ReturnValue = -1;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f04f 32ff 	mov.w	r2, #4294967295
 8006642:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8006644:	e002      	b.n	800664c <_StoreChar+0x74>
      p->Cnt = 0u;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	609a      	str	r2, [r3, #8]
}
 800664c:	bf00      	nop
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8006654:	b580      	push	{r7, lr}
 8006656:	b08a      	sub	sp, #40	; 0x28
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
 8006660:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8006666:	2301      	movs	r3, #1
 8006668:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800666a:	2301      	movs	r3, #1
 800666c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800666e:	e007      	b.n	8006680 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8006670:	6a3a      	ldr	r2, [r7, #32]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	fbb2 f3f3 	udiv	r3, r2, r3
 8006678:	623b      	str	r3, [r7, #32]
    Width++;
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	3301      	adds	r3, #1
 800667e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006680:	6a3a      	ldr	r2, [r7, #32]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	429a      	cmp	r2, r3
 8006686:	d2f3      	bcs.n	8006670 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	429a      	cmp	r2, r3
 800668e:	d901      	bls.n	8006694 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b00      	cmp	r3, #0
 800669c:	d125      	bne.n	80066ea <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 800669e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d022      	beq.n	80066ea <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80066a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d005      	beq.n	80066ba <_PrintUnsigned+0x66>
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d102      	bne.n	80066ba <_PrintUnsigned+0x66>
        c = '0';
 80066b4:	2330      	movs	r3, #48	; 0x30
 80066b6:	76fb      	strb	r3, [r7, #27]
 80066b8:	e001      	b.n	80066be <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80066ba:	2320      	movs	r3, #32
 80066bc:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80066be:	e00b      	b.n	80066d8 <_PrintUnsigned+0x84>
        FieldWidth--;
 80066c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c2:	3b01      	subs	r3, #1
 80066c4:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80066c6:	7efb      	ldrb	r3, [r7, #27]
 80066c8:	4619      	mov	r1, r3
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f7ff ff84 	bl	80065d8 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	db07      	blt.n	80066e8 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80066d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d005      	beq.n	80066ea <_PrintUnsigned+0x96>
 80066de:	69fa      	ldr	r2, [r7, #28]
 80066e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d3ec      	bcc.n	80066c0 <_PrintUnsigned+0x6c>
 80066e6:	e000      	b.n	80066ea <_PrintUnsigned+0x96>
          break;
 80066e8:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	db55      	blt.n	800679e <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d903      	bls.n	8006700 <_PrintUnsigned+0xac>
        NumDigits--;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	603b      	str	r3, [r7, #0]
 80066fe:	e009      	b.n	8006714 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006704:	fbb2 f3f3 	udiv	r3, r2, r3
 8006708:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	429a      	cmp	r2, r3
 8006710:	d200      	bcs.n	8006714 <_PrintUnsigned+0xc0>
          break;
 8006712:	e005      	b.n	8006720 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	fb02 f303 	mul.w	r3, r2, r3
 800671c:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800671e:	e7e8      	b.n	80066f2 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	fbb2 f3f3 	udiv	r3, r2, r3
 8006728:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800672e:	fb02 f303 	mul.w	r3, r2, r3
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8006738:	4a1b      	ldr	r2, [pc, #108]	; (80067a8 <_PrintUnsigned+0x154>)
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	4413      	add	r3, r2
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	4619      	mov	r1, r3
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f7ff ff48 	bl	80065d8 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	2b00      	cmp	r3, #0
 800674e:	db08      	blt.n	8006762 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8006750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	fbb2 f3f3 	udiv	r3, r2, r3
 8006758:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1df      	bne.n	8006720 <_PrintUnsigned+0xcc>
 8006760:	e000      	b.n	8006764 <_PrintUnsigned+0x110>
        break;
 8006762:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8006764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b00      	cmp	r3, #0
 800676c:	d017      	beq.n	800679e <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	2b00      	cmp	r3, #0
 8006772:	d014      	beq.n	800679e <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006774:	e00a      	b.n	800678c <_PrintUnsigned+0x138>
          FieldWidth--;
 8006776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006778:	3b01      	subs	r3, #1
 800677a:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 800677c:	2120      	movs	r1, #32
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f7ff ff2a 	bl	80065d8 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	2b00      	cmp	r3, #0
 800678a:	db07      	blt.n	800679c <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800678c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678e:	2b00      	cmp	r3, #0
 8006790:	d005      	beq.n	800679e <_PrintUnsigned+0x14a>
 8006792:	69fa      	ldr	r2, [r7, #28]
 8006794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006796:	429a      	cmp	r2, r3
 8006798:	d3ed      	bcc.n	8006776 <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 800679a:	e000      	b.n	800679e <_PrintUnsigned+0x14a>
            break;
 800679c:	bf00      	nop
}
 800679e:	bf00      	nop
 80067a0:	3728      	adds	r7, #40	; 0x28
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	08006f20 	.word	0x08006f20

080067ac <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af02      	add	r7, sp, #8
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
 80067b8:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	bfb8      	it	lt
 80067c0:	425b      	neglt	r3, r3
 80067c2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80067c4:	2301      	movs	r3, #1
 80067c6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80067c8:	e007      	b.n	80067da <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80067d2:	613b      	str	r3, [r7, #16]
    Width++;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	3301      	adds	r3, #1
 80067d8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	429a      	cmp	r2, r3
 80067e0:	daf3      	bge.n	80067ca <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d901      	bls.n	80067ee <_PrintInt+0x42>
    Width = NumDigits;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80067ee:	6a3b      	ldr	r3, [r7, #32]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00a      	beq.n	800680a <_PrintInt+0x5e>
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	db04      	blt.n	8006804 <_PrintInt+0x58>
 80067fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fc:	f003 0304 	and.w	r3, r3, #4
 8006800:	2b00      	cmp	r3, #0
 8006802:	d002      	beq.n	800680a <_PrintInt+0x5e>
    FieldWidth--;
 8006804:	6a3b      	ldr	r3, [r7, #32]
 8006806:	3b01      	subs	r3, #1
 8006808:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d002      	beq.n	800681a <_PrintInt+0x6e>
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d01c      	beq.n	8006854 <_PrintInt+0xa8>
 800681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b00      	cmp	r3, #0
 8006822:	d117      	bne.n	8006854 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d014      	beq.n	8006854 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800682a:	e00a      	b.n	8006842 <_PrintInt+0x96>
        FieldWidth--;
 800682c:	6a3b      	ldr	r3, [r7, #32]
 800682e:	3b01      	subs	r3, #1
 8006830:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8006832:	2120      	movs	r1, #32
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f7ff fecf 	bl	80065d8 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	2b00      	cmp	r3, #0
 8006840:	db07      	blt.n	8006852 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d005      	beq.n	8006854 <_PrintInt+0xa8>
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	6a3b      	ldr	r3, [r7, #32]
 800684c:	429a      	cmp	r2, r3
 800684e:	d3ed      	bcc.n	800682c <_PrintInt+0x80>
 8006850:	e000      	b.n	8006854 <_PrintInt+0xa8>
          break;
 8006852:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	db4a      	blt.n	80068f2 <_PrintInt+0x146>
    if (v < 0) {
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	2b00      	cmp	r3, #0
 8006860:	da07      	bge.n	8006872 <_PrintInt+0xc6>
      v = -v;
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	425b      	negs	r3, r3
 8006866:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8006868:	212d      	movs	r1, #45	; 0x2d
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f7ff feb4 	bl	80065d8 <_StoreChar>
 8006870:	e008      	b.n	8006884 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8006872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b00      	cmp	r3, #0
 800687a:	d003      	beq.n	8006884 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 800687c:	212b      	movs	r1, #43	; 0x2b
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f7ff feaa 	bl	80065d8 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	db32      	blt.n	80068f2 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d01f      	beq.n	80068d6 <_PrintInt+0x12a>
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	d11a      	bne.n	80068d6 <_PrintInt+0x12a>
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d117      	bne.n	80068d6 <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d014      	beq.n	80068d6 <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80068ac:	e00a      	b.n	80068c4 <_PrintInt+0x118>
            FieldWidth--;
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	3b01      	subs	r3, #1
 80068b2:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 80068b4:	2130      	movs	r1, #48	; 0x30
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f7ff fe8e 	bl	80065d8 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	db07      	blt.n	80068d4 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80068c4:	6a3b      	ldr	r3, [r7, #32]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d005      	beq.n	80068d6 <_PrintInt+0x12a>
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d3ed      	bcc.n	80068ae <_PrintInt+0x102>
 80068d2:	e000      	b.n	80068d6 <_PrintInt+0x12a>
              break;
 80068d4:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	db09      	blt.n	80068f2 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 80068de:	68b9      	ldr	r1, [r7, #8]
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	9301      	str	r3, [sp, #4]
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f7ff feb1 	bl	8006654 <_PrintUnsigned>
      }
    }
  }
}
 80068f2:	bf00      	nop
 80068f4:	3718      	adds	r7, #24
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
	...

080068fc <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b0a2      	sub	sp, #136	; 0x88
 8006900:	af02      	add	r7, sp, #8
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8006908:	f107 0310 	add.w	r3, r7, #16
 800690c:	653b      	str	r3, [r7, #80]	; 0x50
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 800690e:	2340      	movs	r3, #64	; 0x40
 8006910:	657b      	str	r3, [r7, #84]	; 0x54
  BufferDesc.Cnt            = 0u;
 8006912:	2300      	movs	r3, #0
 8006914:	65bb      	str	r3, [r7, #88]	; 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	663b      	str	r3, [r7, #96]	; 0x60
  BufferDesc.ReturnValue    = 0;
 800691a:	2300      	movs	r3, #0
 800691c:	65fb      	str	r3, [r7, #92]	; 0x5c

  do {
    c = *sFormat;
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    sFormat++;
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	3301      	adds	r3, #1
 800692a:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 800692c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006930:	2b00      	cmp	r3, #0
 8006932:	f000 819f 	beq.w	8006c74 <SEGGER_RTT_vprintf+0x378>
      break;
    }
    if (c == '%') {
 8006936:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800693a:	2b25      	cmp	r3, #37	; 0x25
 800693c:	f040 818d 	bne.w	8006c5a <SEGGER_RTT_vprintf+0x35e>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006940:	2300      	movs	r3, #0
 8006942:	673b      	str	r3, [r7, #112]	; 0x70
      v = 1;
 8006944:	2301      	movs	r3, #1
 8006946:	67bb      	str	r3, [r7, #120]	; 0x78
      do {
        c = *sFormat;
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        switch (c) {
 8006950:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006954:	3b23      	subs	r3, #35	; 0x23
 8006956:	2b0d      	cmp	r3, #13
 8006958:	d83e      	bhi.n	80069d8 <SEGGER_RTT_vprintf+0xdc>
 800695a:	a201      	add	r2, pc, #4	; (adr r2, 8006960 <SEGGER_RTT_vprintf+0x64>)
 800695c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006960:	080069c9 	.word	0x080069c9
 8006964:	080069d9 	.word	0x080069d9
 8006968:	080069d9 	.word	0x080069d9
 800696c:	080069d9 	.word	0x080069d9
 8006970:	080069d9 	.word	0x080069d9
 8006974:	080069d9 	.word	0x080069d9
 8006978:	080069d9 	.word	0x080069d9
 800697c:	080069d9 	.word	0x080069d9
 8006980:	080069b9 	.word	0x080069b9
 8006984:	080069d9 	.word	0x080069d9
 8006988:	08006999 	.word	0x08006999
 800698c:	080069d9 	.word	0x080069d9
 8006990:	080069d9 	.word	0x080069d9
 8006994:	080069a9 	.word	0x080069a9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006998:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800699a:	f043 0301 	orr.w	r3, r3, #1
 800699e:	673b      	str	r3, [r7, #112]	; 0x70
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	3301      	adds	r3, #1
 80069a4:	60bb      	str	r3, [r7, #8]
 80069a6:	e01a      	b.n	80069de <SEGGER_RTT_vprintf+0xe2>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80069a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069aa:	f043 0302 	orr.w	r3, r3, #2
 80069ae:	673b      	str	r3, [r7, #112]	; 0x70
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	3301      	adds	r3, #1
 80069b4:	60bb      	str	r3, [r7, #8]
 80069b6:	e012      	b.n	80069de <SEGGER_RTT_vprintf+0xe2>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80069b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069ba:	f043 0304 	orr.w	r3, r3, #4
 80069be:	673b      	str	r3, [r7, #112]	; 0x70
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	3301      	adds	r3, #1
 80069c4:	60bb      	str	r3, [r7, #8]
 80069c6:	e00a      	b.n	80069de <SEGGER_RTT_vprintf+0xe2>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80069c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069ca:	f043 0308 	orr.w	r3, r3, #8
 80069ce:	673b      	str	r3, [r7, #112]	; 0x70
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	3301      	adds	r3, #1
 80069d4:	60bb      	str	r3, [r7, #8]
 80069d6:	e002      	b.n	80069de <SEGGER_RTT_vprintf+0xe2>
        default:  v = 0; break;
 80069d8:	2300      	movs	r3, #0
 80069da:	67bb      	str	r3, [r7, #120]	; 0x78
 80069dc:	bf00      	nop
        }
      } while (v);
 80069de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1b1      	bne.n	8006948 <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80069e4:	2300      	movs	r3, #0
 80069e6:	66fb      	str	r3, [r7, #108]	; 0x6c
      do {
        c = *sFormat;
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c < '0') || (c > '9')) {
 80069f0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80069f4:	2b2f      	cmp	r3, #47	; 0x2f
 80069f6:	d912      	bls.n	8006a1e <SEGGER_RTT_vprintf+0x122>
 80069f8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80069fc:	2b39      	cmp	r3, #57	; 0x39
 80069fe:	d80e      	bhi.n	8006a1e <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	3301      	adds	r3, #1
 8006a04:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8006a06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a08:	4613      	mov	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	005b      	lsls	r3, r3, #1
 8006a10:	461a      	mov	r2, r3
 8006a12:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006a16:	4413      	add	r3, r2
 8006a18:	3b30      	subs	r3, #48	; 0x30
 8006a1a:	66fb      	str	r3, [r7, #108]	; 0x6c
        c = *sFormat;
 8006a1c:	e7e4      	b.n	80069e8 <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	677b      	str	r3, [r7, #116]	; 0x74
      c = *sFormat;
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      if (c == '.') {
 8006a2a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006a2e:	2b2e      	cmp	r3, #46	; 0x2e
 8006a30:	d11d      	bne.n	8006a6e <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	3301      	adds	r3, #1
 8006a36:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
          if ((c < '0') || (c > '9')) {
 8006a40:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006a44:	2b2f      	cmp	r3, #47	; 0x2f
 8006a46:	d912      	bls.n	8006a6e <SEGGER_RTT_vprintf+0x172>
 8006a48:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006a4c:	2b39      	cmp	r3, #57	; 0x39
 8006a4e:	d80e      	bhi.n	8006a6e <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	3301      	adds	r3, #1
 8006a54:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 8006a56:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006a58:	4613      	mov	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4413      	add	r3, r2
 8006a5e:	005b      	lsls	r3, r3, #1
 8006a60:	461a      	mov	r2, r3
 8006a62:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006a66:	4413      	add	r3, r2
 8006a68:	3b30      	subs	r3, #48	; 0x30
 8006a6a:	677b      	str	r3, [r7, #116]	; 0x74
          c = *sFormat;
 8006a6c:	e7e4      	b.n	8006a38 <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 8006a76:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006a7a:	2b6c      	cmp	r3, #108	; 0x6c
 8006a7c:	d003      	beq.n	8006a86 <SEGGER_RTT_vprintf+0x18a>
 8006a7e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006a82:	2b68      	cmp	r3, #104	; 0x68
 8006a84:	d107      	bne.n	8006a96 <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c == 'l') || (c == 'h')) {
 8006a94:	e7ef      	b.n	8006a76 <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006a96:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006a9a:	2b25      	cmp	r3, #37	; 0x25
 8006a9c:	f000 80d1 	beq.w	8006c42 <SEGGER_RTT_vprintf+0x346>
 8006aa0:	2b25      	cmp	r3, #37	; 0x25
 8006aa2:	f2c0 80d5 	blt.w	8006c50 <SEGGER_RTT_vprintf+0x354>
 8006aa6:	2b78      	cmp	r3, #120	; 0x78
 8006aa8:	f300 80d2 	bgt.w	8006c50 <SEGGER_RTT_vprintf+0x354>
 8006aac:	2b58      	cmp	r3, #88	; 0x58
 8006aae:	f2c0 80cf 	blt.w	8006c50 <SEGGER_RTT_vprintf+0x354>
 8006ab2:	3b58      	subs	r3, #88	; 0x58
 8006ab4:	2b20      	cmp	r3, #32
 8006ab6:	f200 80cb 	bhi.w	8006c50 <SEGGER_RTT_vprintf+0x354>
 8006aba:	a201      	add	r2, pc, #4	; (adr r2, 8006ac0 <SEGGER_RTT_vprintf+0x1c4>)
 8006abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac0:	08006bb7 	.word	0x08006bb7
 8006ac4:	08006c51 	.word	0x08006c51
 8006ac8:	08006c51 	.word	0x08006c51
 8006acc:	08006c51 	.word	0x08006c51
 8006ad0:	08006c51 	.word	0x08006c51
 8006ad4:	08006c51 	.word	0x08006c51
 8006ad8:	08006c51 	.word	0x08006c51
 8006adc:	08006c51 	.word	0x08006c51
 8006ae0:	08006c51 	.word	0x08006c51
 8006ae4:	08006c51 	.word	0x08006c51
 8006ae8:	08006c51 	.word	0x08006c51
 8006aec:	08006b45 	.word	0x08006b45
 8006af0:	08006b6b 	.word	0x08006b6b
 8006af4:	08006c51 	.word	0x08006c51
 8006af8:	08006c51 	.word	0x08006c51
 8006afc:	08006c51 	.word	0x08006c51
 8006b00:	08006c51 	.word	0x08006c51
 8006b04:	08006c51 	.word	0x08006c51
 8006b08:	08006c51 	.word	0x08006c51
 8006b0c:	08006c51 	.word	0x08006c51
 8006b10:	08006c51 	.word	0x08006c51
 8006b14:	08006c51 	.word	0x08006c51
 8006b18:	08006c51 	.word	0x08006c51
 8006b1c:	08006c51 	.word	0x08006c51
 8006b20:	08006c1d 	.word	0x08006c1d
 8006b24:	08006c51 	.word	0x08006c51
 8006b28:	08006c51 	.word	0x08006c51
 8006b2c:	08006bdd 	.word	0x08006bdd
 8006b30:	08006c51 	.word	0x08006c51
 8006b34:	08006b91 	.word	0x08006b91
 8006b38:	08006c51 	.word	0x08006c51
 8006b3c:	08006c51 	.word	0x08006c51
 8006b40:	08006bb7 	.word	0x08006bb7
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	1d19      	adds	r1, r3, #4
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	6011      	str	r1, [r2, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	67bb      	str	r3, [r7, #120]	; 0x78
        c0 = (char)v;
 8006b52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        _StoreChar(&BufferDesc, c0);
 8006b58:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8006b5c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006b60:	4611      	mov	r1, r2
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7ff fd38 	bl	80065d8 <_StoreChar>
        break;
 8006b68:	e073      	b.n	8006c52 <SEGGER_RTT_vprintf+0x356>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	1d19      	adds	r1, r3, #4
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	6011      	str	r1, [r2, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006b78:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8006b7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b7e:	9301      	str	r3, [sp, #4]
 8006b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b86:	220a      	movs	r2, #10
 8006b88:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006b8a:	f7ff fe0f 	bl	80067ac <_PrintInt>
        break;
 8006b8e:	e060      	b.n	8006c52 <SEGGER_RTT_vprintf+0x356>
      case 'u':
        v = va_arg(*pParamList, int);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	1d19      	adds	r1, r3, #4
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	6011      	str	r1, [r2, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006b9e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006ba0:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8006ba4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ba6:	9301      	str	r3, [sp, #4]
 8006ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bae:	220a      	movs	r2, #10
 8006bb0:	f7ff fd50 	bl	8006654 <_PrintUnsigned>
        break;
 8006bb4:	e04d      	b.n	8006c52 <SEGGER_RTT_vprintf+0x356>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	1d19      	adds	r1, r3, #4
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	6011      	str	r1, [r2, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006bc4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006bc6:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8006bca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bcc:	9301      	str	r3, [sp, #4]
 8006bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bd4:	2210      	movs	r2, #16
 8006bd6:	f7ff fd3d 	bl	8006654 <_PrintUnsigned>
        break;
 8006bda:	e03a      	b.n	8006c52 <SEGGER_RTT_vprintf+0x356>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	1d19      	adds	r1, r3, #4
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	6011      	str	r1, [r2, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	66bb      	str	r3, [r7, #104]	; 0x68
          do {
            c = *s;
 8006bea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            s++;
 8006bf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	66bb      	str	r3, [r7, #104]	; 0x68
            if (c == '\0') {
 8006bf8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00b      	beq.n	8006c18 <SEGGER_RTT_vprintf+0x31c>
              break;
            }
           _StoreChar(&BufferDesc, c);
 8006c00:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8006c04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006c08:	4611      	mov	r1, r2
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7ff fce4 	bl	80065d8 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8006c10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	dae9      	bge.n	8006bea <SEGGER_RTT_vprintf+0x2ee>
        }
        break;
 8006c16:	e01c      	b.n	8006c52 <SEGGER_RTT_vprintf+0x356>
              break;
 8006c18:	bf00      	nop
        break;
 8006c1a:	e01a      	b.n	8006c52 <SEGGER_RTT_vprintf+0x356>
      case 'p':
        v = va_arg(*pParamList, int);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	1d19      	adds	r1, r3, #4
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	6011      	str	r1, [r2, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8006c2a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006c2c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8006c30:	2300      	movs	r3, #0
 8006c32:	9301      	str	r3, [sp, #4]
 8006c34:	2308      	movs	r3, #8
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	2308      	movs	r3, #8
 8006c3a:	2210      	movs	r2, #16
 8006c3c:	f7ff fd0a 	bl	8006654 <_PrintUnsigned>
        break;
 8006c40:	e007      	b.n	8006c52 <SEGGER_RTT_vprintf+0x356>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006c42:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006c46:	2125      	movs	r1, #37	; 0x25
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7ff fcc5 	bl	80065d8 <_StoreChar>
        break;
 8006c4e:	e000      	b.n	8006c52 <SEGGER_RTT_vprintf+0x356>
      default:
        break;
 8006c50:	bf00      	nop
      }
      sFormat++;
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	3301      	adds	r3, #1
 8006c56:	60bb      	str	r3, [r7, #8]
 8006c58:	e007      	b.n	8006c6a <SEGGER_RTT_vprintf+0x36e>
    } else {
      _StoreChar(&BufferDesc, c);
 8006c5a:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8006c5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006c62:	4611      	mov	r1, r2
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7ff fcb7 	bl	80065d8 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8006c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f6bf ae56 	bge.w	800691e <SEGGER_RTT_vprintf+0x22>
 8006c72:	e000      	b.n	8006c76 <SEGGER_RTT_vprintf+0x37a>
      break;
 8006c74:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8006c76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	dd0d      	ble.n	8006c98 <SEGGER_RTT_vprintf+0x39c>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8006c7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d006      	beq.n	8006c90 <SEGGER_RTT_vprintf+0x394>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8006c82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c84:	f107 0310 	add.w	r3, r7, #16
 8006c88:	4619      	mov	r1, r3
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f7ff fc34 	bl	80064f8 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8006c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c94:	4413      	add	r3, r2
 8006c96:	65fb      	str	r3, [r7, #92]	; 0x5c
  }
  return BufferDesc.ReturnValue;
 8006c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3780      	adds	r7, #128	; 0x80
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop

08006ca4 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8006ca4:	b40e      	push	{r1, r2, r3}
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b085      	sub	sp, #20
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8006cae:	f107 0320 	add.w	r3, r7, #32
 8006cb2:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8006cb4:	f107 0308 	add.w	r3, r7, #8
 8006cb8:	461a      	mov	r2, r3
 8006cba:	69f9      	ldr	r1, [r7, #28]
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f7ff fe1d 	bl	80068fc <SEGGER_RTT_vprintf>
 8006cc2:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cd0:	b003      	add	sp, #12
 8006cd2:	4770      	bx	lr

08006cd4 <__libc_init_array>:
 8006cd4:	b570      	push	{r4, r5, r6, lr}
 8006cd6:	4d0d      	ldr	r5, [pc, #52]	; (8006d0c <__libc_init_array+0x38>)
 8006cd8:	4c0d      	ldr	r4, [pc, #52]	; (8006d10 <__libc_init_array+0x3c>)
 8006cda:	1b64      	subs	r4, r4, r5
 8006cdc:	10a4      	asrs	r4, r4, #2
 8006cde:	2600      	movs	r6, #0
 8006ce0:	42a6      	cmp	r6, r4
 8006ce2:	d109      	bne.n	8006cf8 <__libc_init_array+0x24>
 8006ce4:	4d0b      	ldr	r5, [pc, #44]	; (8006d14 <__libc_init_array+0x40>)
 8006ce6:	4c0c      	ldr	r4, [pc, #48]	; (8006d18 <__libc_init_array+0x44>)
 8006ce8:	f000 f82e 	bl	8006d48 <_init>
 8006cec:	1b64      	subs	r4, r4, r5
 8006cee:	10a4      	asrs	r4, r4, #2
 8006cf0:	2600      	movs	r6, #0
 8006cf2:	42a6      	cmp	r6, r4
 8006cf4:	d105      	bne.n	8006d02 <__libc_init_array+0x2e>
 8006cf6:	bd70      	pop	{r4, r5, r6, pc}
 8006cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cfc:	4798      	blx	r3
 8006cfe:	3601      	adds	r6, #1
 8006d00:	e7ee      	b.n	8006ce0 <__libc_init_array+0xc>
 8006d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d06:	4798      	blx	r3
 8006d08:	3601      	adds	r6, #1
 8006d0a:	e7f2      	b.n	8006cf2 <__libc_init_array+0x1e>
 8006d0c:	08006f38 	.word	0x08006f38
 8006d10:	08006f38 	.word	0x08006f38
 8006d14:	08006f38 	.word	0x08006f38
 8006d18:	08006f3c 	.word	0x08006f3c

08006d1c <memcpy>:
 8006d1c:	440a      	add	r2, r1
 8006d1e:	4291      	cmp	r1, r2
 8006d20:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d24:	d100      	bne.n	8006d28 <memcpy+0xc>
 8006d26:	4770      	bx	lr
 8006d28:	b510      	push	{r4, lr}
 8006d2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d32:	4291      	cmp	r1, r2
 8006d34:	d1f9      	bne.n	8006d2a <memcpy+0xe>
 8006d36:	bd10      	pop	{r4, pc}

08006d38 <memset>:
 8006d38:	4402      	add	r2, r0
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d100      	bne.n	8006d42 <memset+0xa>
 8006d40:	4770      	bx	lr
 8006d42:	f803 1b01 	strb.w	r1, [r3], #1
 8006d46:	e7f9      	b.n	8006d3c <memset+0x4>

08006d48 <_init>:
 8006d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d4a:	bf00      	nop
 8006d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d4e:	bc08      	pop	{r3}
 8006d50:	469e      	mov	lr, r3
 8006d52:	4770      	bx	lr

08006d54 <_fini>:
 8006d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d56:	bf00      	nop
 8006d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d5a:	bc08      	pop	{r3}
 8006d5c:	469e      	mov	lr, r3
 8006d5e:	4770      	bx	lr
