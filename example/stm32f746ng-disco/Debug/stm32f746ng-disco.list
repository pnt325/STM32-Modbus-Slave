
stm32f746ng-disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007184  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  0800734c  0800734c  0001734c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074ec  080074ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080074ec  080074ec  000174ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074f4  080074f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074f4  080074f4  000174f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074f8  080074f8  000174f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080074fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002560  2000000c  08007508  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000256c  08007508  0002256c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016305  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000347b  00000000  00000000  00036341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  000397c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a0  00000000  00000000  0003a9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f4d  00000000  00000000  0003ba78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018087  00000000  00000000  000639c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3e52  00000000  00000000  0007ba4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016f89e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004840  00000000  00000000  0016f8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007334 	.word	0x08007334

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08007334 	.word	0x08007334

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b090      	sub	sp, #64	; 0x40
 8000510:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000512:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000522:	4bae      	ldr	r3, [pc, #696]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4aad      	ldr	r2, [pc, #692]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000528:	f043 0310 	orr.w	r3, r3, #16
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4bab      	ldr	r3, [pc, #684]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0310 	and.w	r3, r3, #16
 8000536:	62bb      	str	r3, [r7, #40]	; 0x28
 8000538:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800053a:	4ba8      	ldr	r3, [pc, #672]	; (80007dc <MX_GPIO_Init+0x2d0>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4aa7      	ldr	r2, [pc, #668]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4ba5      	ldr	r3, [pc, #660]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800054e:	627b      	str	r3, [r7, #36]	; 0x24
 8000550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	4ba2      	ldr	r3, [pc, #648]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4aa1      	ldr	r2, [pc, #644]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b9f      	ldr	r3, [pc, #636]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	623b      	str	r3, [r7, #32]
 8000568:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056a:	4b9c      	ldr	r3, [pc, #624]	; (80007dc <MX_GPIO_Init+0x2d0>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a9b      	ldr	r2, [pc, #620]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000570:	f043 0308 	orr.w	r3, r3, #8
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b99      	ldr	r3, [pc, #612]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f003 0308 	and.w	r3, r3, #8
 800057e:	61fb      	str	r3, [r7, #28]
 8000580:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	4b96      	ldr	r3, [pc, #600]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a95      	ldr	r2, [pc, #596]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000588:	f043 0304 	orr.w	r3, r3, #4
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b93      	ldr	r3, [pc, #588]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0304 	and.w	r3, r3, #4
 8000596:	61bb      	str	r3, [r7, #24]
 8000598:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b90      	ldr	r3, [pc, #576]	; (80007dc <MX_GPIO_Init+0x2d0>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a8f      	ldr	r2, [pc, #572]	; (80007dc <MX_GPIO_Init+0x2d0>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b8d      	ldr	r3, [pc, #564]	; (80007dc <MX_GPIO_Init+0x2d0>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	617b      	str	r3, [r7, #20]
 80005b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80005b2:	4b8a      	ldr	r3, [pc, #552]	; (80007dc <MX_GPIO_Init+0x2d0>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a89      	ldr	r2, [pc, #548]	; (80007dc <MX_GPIO_Init+0x2d0>)
 80005b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b87      	ldr	r3, [pc, #540]	; (80007dc <MX_GPIO_Init+0x2d0>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80005ca:	4b84      	ldr	r3, [pc, #528]	; (80007dc <MX_GPIO_Init+0x2d0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a83      	ldr	r2, [pc, #524]	; (80007dc <MX_GPIO_Init+0x2d0>)
 80005d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b81      	ldr	r3, [pc, #516]	; (80007dc <MX_GPIO_Init+0x2d0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80005e2:	4b7e      	ldr	r3, [pc, #504]	; (80007dc <MX_GPIO_Init+0x2d0>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a7d      	ldr	r2, [pc, #500]	; (80007dc <MX_GPIO_Init+0x2d0>)
 80005e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b7b      	ldr	r3, [pc, #492]	; (80007dc <MX_GPIO_Init+0x2d0>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005fa:	4b78      	ldr	r3, [pc, #480]	; (80007dc <MX_GPIO_Init+0x2d0>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a77      	ldr	r2, [pc, #476]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000600:	f043 0320 	orr.w	r3, r3, #32
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b75      	ldr	r3, [pc, #468]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0320 	and.w	r3, r3, #32
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000612:	4b72      	ldr	r3, [pc, #456]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a71      	ldr	r2, [pc, #452]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b6f      	ldr	r3, [pc, #444]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800062a:	2201      	movs	r2, #1
 800062c:	2120      	movs	r1, #32
 800062e:	486c      	ldr	r0, [pc, #432]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 8000630:	f001 fa2a 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	210c      	movs	r1, #12
 8000638:	486a      	ldr	r0, [pc, #424]	; (80007e4 <MX_GPIO_Init+0x2d8>)
 800063a:	f001 fa25 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800063e:	2201      	movs	r2, #1
 8000640:	2108      	movs	r1, #8
 8000642:	4869      	ldr	r0, [pc, #420]	; (80007e8 <MX_GPIO_Init+0x2dc>)
 8000644:	f001 fa20 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800064e:	4865      	ldr	r0, [pc, #404]	; (80007e4 <MX_GPIO_Init+0x2d8>)
 8000650:	f001 fa1a 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065a:	4864      	ldr	r0, [pc, #400]	; (80007ec <MX_GPIO_Init+0x2e0>)
 800065c:	f001 fa14 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	21c8      	movs	r1, #200	; 0xc8
 8000664:	4862      	ldr	r0, [pc, #392]	; (80007f0 <MX_GPIO_Init+0x2e4>)
 8000666:	f001 fa0f 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 800066a:	2310      	movs	r3, #16
 800066c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066e:	2302      	movs	r3, #2
 8000670:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2300      	movs	r3, #0
 8000678:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800067a:	230e      	movs	r3, #14
 800067c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800067e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000682:	4619      	mov	r1, r3
 8000684:	485b      	ldr	r0, [pc, #364]	; (80007f4 <MX_GPIO_Init+0x2e8>)
 8000686:	f001 f853 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800068a:	2308      	movs	r3, #8
 800068c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800068e:	2300      	movs	r3, #0
 8000690:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000696:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800069a:	4619      	mov	r1, r3
 800069c:	4855      	ldr	r0, [pc, #340]	; (80007f4 <MX_GPIO_Init+0x2e8>)
 800069e:	f001 f847 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80006a2:	2304      	movs	r3, #4
 80006a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a6:	2302      	movs	r3, #2
 80006a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ae:	2303      	movs	r3, #3
 80006b0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80006b2:	2309      	movs	r3, #9
 80006b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80006b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006ba:	4619      	mov	r1, r3
 80006bc:	484d      	ldr	r0, [pc, #308]	; (80007f4 <MX_GPIO_Init+0x2e8>)
 80006be:	f001 f837 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80006c2:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d0:	2303      	movs	r3, #3
 80006d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006d4:	230b      	movs	r3, #11
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006dc:	4619      	mov	r1, r3
 80006de:	4844      	ldr	r0, [pc, #272]	; (80007f0 <MX_GPIO_Init+0x2e4>)
 80006e0:	f001 f826 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80006e4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80006e8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ea:	2302      	movs	r3, #2
 80006ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f2:	2303      	movs	r3, #3
 80006f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006f6:	230c      	movs	r3, #12
 80006f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006fe:	4619      	mov	r1, r3
 8000700:	483c      	ldr	r0, [pc, #240]	; (80007f4 <MX_GPIO_Init+0x2e8>)
 8000702:	f001 f815 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000706:	f44f 7340 	mov.w	r3, #768	; 0x300
 800070a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800070c:	2312      	movs	r3, #18
 800070e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000710:	2301      	movs	r3, #1
 8000712:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000718:	2304      	movs	r3, #4
 800071a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000720:	4619      	mov	r1, r3
 8000722:	4835      	ldr	r0, [pc, #212]	; (80007f8 <MX_GPIO_Init+0x2ec>)
 8000724:	f001 f804 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000728:	f643 4323 	movw	r3, #15395	; 0x3c23
 800072c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072e:	2302      	movs	r3, #2
 8000730:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000736:	2303      	movs	r3, #3
 8000738:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800073a:	230a      	movs	r3, #10
 800073c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000742:	4619      	mov	r1, r3
 8000744:	482c      	ldr	r0, [pc, #176]	; (80007f8 <MX_GPIO_Init+0x2ec>)
 8000746:	f000 fff3 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800074a:	2380      	movs	r3, #128	; 0x80
 800074c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074e:	2302      	movs	r3, #2
 8000750:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800075a:	2308      	movs	r3, #8
 800075c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000762:	4619      	mov	r1, r3
 8000764:	481e      	ldr	r0, [pc, #120]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 8000766:	f000 ffe3 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800076a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000770:	2302      	movs	r3, #2
 8000772:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000778:	2303      	movs	r3, #3
 800077a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800077c:	230c      	movs	r3, #12
 800077e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000780:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000784:	4619      	mov	r1, r3
 8000786:	481d      	ldr	r0, [pc, #116]	; (80007fc <MX_GPIO_Init+0x2f0>)
 8000788:	f000 ffd2 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800078c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000790:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000792:	2302      	movs	r3, #2
 8000794:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800079e:	2301      	movs	r3, #1
 80007a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80007a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007a6:	4619      	mov	r1, r3
 80007a8:	4815      	ldr	r0, [pc, #84]	; (8000800 <MX_GPIO_Init+0x2f4>)
 80007aa:	f000 ffc1 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80007ae:	2360      	movs	r3, #96	; 0x60
 80007b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b2:	2302      	movs	r3, #2
 80007b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007be:	230d      	movs	r3, #13
 80007c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007c6:	4619      	mov	r1, r3
 80007c8:	480a      	ldr	r0, [pc, #40]	; (80007f4 <MX_GPIO_Init+0x2e8>)
 80007ca:	f000 ffb1 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80007ce:	2380      	movs	r3, #128	; 0x80
 80007d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d2:	2302      	movs	r3, #2
 80007d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	e014      	b.n	8000804 <MX_GPIO_Init+0x2f8>
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020c00 	.word	0x40020c00
 80007e4:	40022000 	.word	0x40022000
 80007e8:	40022800 	.word	0x40022800
 80007ec:	40021c00 	.word	0x40021c00
 80007f0:	40021800 	.word	0x40021800
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40020400 	.word	0x40020400
 80007fc:	40020800 	.word	0x40020800
 8000800:	40020000 	.word	0x40020000
 8000804:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800080a:	2307      	movs	r3, #7
 800080c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000812:	4619      	mov	r1, r3
 8000814:	48bc      	ldr	r0, [pc, #752]	; (8000b08 <MX_GPIO_Init+0x5fc>)
 8000816:	f000 ff8b 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800081a:	2340      	movs	r3, #64	; 0x40
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000826:	2303      	movs	r3, #3
 8000828:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800082a:	230a      	movs	r3, #10
 800082c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000832:	4619      	mov	r1, r3
 8000834:	48b4      	ldr	r0, [pc, #720]	; (8000b08 <MX_GPIO_Init+0x5fc>)
 8000836:	f000 ff7b 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800083a:	f248 1333 	movw	r3, #33075	; 0x8133
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000848:	2303      	movs	r3, #3
 800084a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800084c:	230c      	movs	r3, #12
 800084e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000850:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000854:	4619      	mov	r1, r3
 8000856:	48ad      	ldr	r0, [pc, #692]	; (8000b0c <MX_GPIO_Init+0x600>)
 8000858:	f000 ff6a 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800085c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000860:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800086e:	230e      	movs	r3, #14
 8000870:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000872:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000876:	4619      	mov	r1, r3
 8000878:	48a5      	ldr	r0, [pc, #660]	; (8000b10 <MX_GPIO_Init+0x604>)
 800087a:	f000 ff59 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800087e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000882:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000884:	2300      	movs	r3, #0
 8000886:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000890:	4619      	mov	r1, r3
 8000892:	489f      	ldr	r0, [pc, #636]	; (8000b10 <MX_GPIO_Init+0x604>)
 8000894:	f000 ff4c 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000898:	2340      	movs	r3, #64	; 0x40
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800089c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008aa:	4619      	mov	r1, r3
 80008ac:	4899      	ldr	r0, [pc, #612]	; (8000b14 <MX_GPIO_Init+0x608>)
 80008ae:	f000 ff3f 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80008b2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008c4:	230c      	movs	r3, #12
 80008c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008cc:	4619      	mov	r1, r3
 80008ce:	4891      	ldr	r0, [pc, #580]	; (8000b14 <MX_GPIO_Init+0x608>)
 80008d0:	f000 ff2e 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80008d4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008e6:	230a      	movs	r3, #10
 80008e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008ee:	4619      	mov	r1, r3
 80008f0:	4889      	ldr	r0, [pc, #548]	; (8000b18 <MX_GPIO_Init+0x60c>)
 80008f2:	f000 ff1d 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80008f6:	23f0      	movs	r3, #240	; 0xf0
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000906:	230a      	movs	r3, #10
 8000908:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800090a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800090e:	4619      	mov	r1, r3
 8000910:	4882      	ldr	r0, [pc, #520]	; (8000b1c <MX_GPIO_Init+0x610>)
 8000912:	f000 ff0d 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000916:	23f7      	movs	r3, #247	; 0xf7
 8000918:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000926:	230e      	movs	r3, #14
 8000928:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800092a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800092e:	4619      	mov	r1, r3
 8000930:	487b      	ldr	r0, [pc, #492]	; (8000b20 <MX_GPIO_Init+0x614>)
 8000932:	f000 fefd 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000948:	2309      	movs	r3, #9
 800094a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000950:	4619      	mov	r1, r3
 8000952:	486e      	ldr	r0, [pc, #440]	; (8000b0c <MX_GPIO_Init+0x600>)
 8000954:	f000 feec 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800096a:	230a      	movs	r3, #10
 800096c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000972:	4619      	mov	r1, r3
 8000974:	4865      	ldr	r0, [pc, #404]	; (8000b0c <MX_GPIO_Init+0x600>)
 8000976:	f000 fedb 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800097a:	2320      	movs	r3, #32
 800097c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800098e:	4619      	mov	r1, r3
 8000990:	4860      	ldr	r0, [pc, #384]	; (8000b14 <MX_GPIO_Init+0x608>)
 8000992:	f000 fecd 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000996:	2308      	movs	r3, #8
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80009a6:	230d      	movs	r3, #13
 80009a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009ae:	4619      	mov	r1, r3
 80009b0:	4858      	ldr	r0, [pc, #352]	; (8000b14 <MX_GPIO_Init+0x608>)
 80009b2:	f000 febd 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80009b6:	f241 030c 	movw	r3, #4108	; 0x100c
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009cc:	4619      	mov	r1, r3
 80009ce:	4853      	ldr	r0, [pc, #332]	; (8000b1c <MX_GPIO_Init+0x610>)
 80009d0:	f000 feae 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80009d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009da:	2300      	movs	r3, #0
 80009dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e6:	4619      	mov	r1, r3
 80009e8:	484e      	ldr	r0, [pc, #312]	; (8000b24 <MX_GPIO_Init+0x618>)
 80009ea:	f000 fea1 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80009ee:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a00:	230c      	movs	r3, #12
 8000a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4847      	ldr	r0, [pc, #284]	; (8000b28 <MX_GPIO_Init+0x61c>)
 8000a0c:	f000 fe90 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000a10:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a22:	230e      	movs	r3, #14
 8000a24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	483b      	ldr	r0, [pc, #236]	; (8000b1c <MX_GPIO_Init+0x610>)
 8000a2e:	f000 fe7f 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000a32:	2308      	movs	r3, #8
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a46:	4619      	mov	r1, r3
 8000a48:	4835      	ldr	r0, [pc, #212]	; (8000b20 <MX_GPIO_Init+0x614>)
 8000a4a:	f000 fe71 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000a4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a60:	230d      	movs	r3, #13
 8000a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4828      	ldr	r0, [pc, #160]	; (8000b0c <MX_GPIO_Init+0x600>)
 8000a6c:	f000 fe60 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a70:	2310      	movs	r3, #16
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a74:	2300      	movs	r3, #0
 8000a76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a80:	4619      	mov	r1, r3
 8000a82:	4824      	ldr	r0, [pc, #144]	; (8000b14 <MX_GPIO_Init+0x608>)
 8000a84:	f000 fe54 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a94:	2303      	movs	r3, #3
 8000a96:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a98:	230c      	movs	r3, #12
 8000a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	481c      	ldr	r0, [pc, #112]	; (8000b14 <MX_GPIO_Init+0x608>)
 8000aa4:	f000 fe44 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000aa8:	f248 0304 	movw	r3, #32772	; 0x8004
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ab6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aba:	4619      	mov	r1, r3
 8000abc:	481b      	ldr	r0, [pc, #108]	; (8000b2c <MX_GPIO_Init+0x620>)
 8000abe:	f000 fe37 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ad2:	2305      	movs	r3, #5
 8000ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ada:	4619      	mov	r1, r3
 8000adc:	480f      	ldr	r0, [pc, #60]	; (8000b1c <MX_GPIO_Init+0x610>)
 8000ade:	f000 fe27 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000ae2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000af4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000af8:	4619      	mov	r1, r3
 8000afa:	480c      	ldr	r0, [pc, #48]	; (8000b2c <MX_GPIO_Init+0x620>)
 8000afc:	f000 fe18 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000b00:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000b04:	e014      	b.n	8000b30 <MX_GPIO_Init+0x624>
 8000b06:	bf00      	nop
 8000b08:	40020400 	.word	0x40020400
 8000b0c:	40021800 	.word	0x40021800
 8000b10:	40022400 	.word	0x40022400
 8000b14:	40020c00 	.word	0x40020c00
 8000b18:	40020000 	.word	0x40020000
 8000b1c:	40022000 	.word	0x40022000
 8000b20:	40022800 	.word	0x40022800
 8000b24:	40020800 	.word	0x40020800
 8000b28:	40021400 	.word	0x40021400
 8000b2c:	40021c00 	.word	0x40021c00
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b3e:	230d      	movs	r3, #13
 8000b40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b46:	4619      	mov	r1, r3
 8000b48:	48a6      	ldr	r0, [pc, #664]	; (8000de4 <MX_GPIO_Init+0x8d8>)
 8000b4a:	f000 fdf1 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b66:	4619      	mov	r1, r3
 8000b68:	489f      	ldr	r0, [pc, #636]	; (8000de8 <MX_GPIO_Init+0x8dc>)
 8000b6a:	f000 fde1 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b80:	2307      	movs	r3, #7
 8000b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4898      	ldr	r0, [pc, #608]	; (8000dec <MX_GPIO_Init+0x8e0>)
 8000b8c:	f000 fdd0 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000b90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000baa:	4619      	mov	r1, r3
 8000bac:	488f      	ldr	r0, [pc, #572]	; (8000dec <MX_GPIO_Init+0x8e0>)
 8000bae:	f000 fdbf 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000bb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bb8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4887      	ldr	r0, [pc, #540]	; (8000de8 <MX_GPIO_Init+0x8dc>)
 8000bca:	f000 fdb1 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000bce:	2310      	movs	r3, #16
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000bde:	230a      	movs	r3, #10
 8000be0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be6:	4619      	mov	r1, r3
 8000be8:	487e      	ldr	r0, [pc, #504]	; (8000de4 <MX_GPIO_Init+0x8d8>)
 8000bea:	f000 fda1 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000bee:	2328      	movs	r3, #40	; 0x28
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bfe:	230c      	movs	r3, #12
 8000c00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c06:	4619      	mov	r1, r3
 8000c08:	4876      	ldr	r0, [pc, #472]	; (8000de4 <MX_GPIO_Init+0x8d8>)
 8000c0a:	f000 fd91 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000c0e:	23c8      	movs	r3, #200	; 0xc8
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c22:	4619      	mov	r1, r3
 8000c24:	4872      	ldr	r0, [pc, #456]	; (8000df0 <MX_GPIO_Init+0x8e4>)
 8000c26:	f000 fd83 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000c2a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c30:	2303      	movs	r3, #3
 8000c32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	486d      	ldr	r0, [pc, #436]	; (8000df4 <MX_GPIO_Init+0x8e8>)
 8000c40:	f000 fd76 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000c44:	2308      	movs	r3, #8
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c54:	230c      	movs	r3, #12
 8000c56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4866      	ldr	r0, [pc, #408]	; (8000df8 <MX_GPIO_Init+0x8ec>)
 8000c60:	f000 fd66 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000c64:	2305      	movs	r3, #5
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c74:	230a      	movs	r3, #10
 8000c76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	485e      	ldr	r0, [pc, #376]	; (8000df8 <MX_GPIO_Init+0x8ec>)
 8000c80:	f000 fd56 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c84:	2332      	movs	r3, #50	; 0x32
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c94:	230b      	movs	r3, #11
 8000c96:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4856      	ldr	r0, [pc, #344]	; (8000df8 <MX_GPIO_Init+0x8ec>)
 8000ca0:	f000 fd46 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000cb4:	2309      	movs	r3, #9
 8000cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	484f      	ldr	r0, [pc, #316]	; (8000dfc <MX_GPIO_Init+0x8f0>)
 8000cc0:	f000 fd36 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000cc4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000cd6:	2309      	movs	r3, #9
 8000cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4847      	ldr	r0, [pc, #284]	; (8000e00 <MX_GPIO_Init+0x8f4>)
 8000ce2:	f000 fd25 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cea:	2300      	movs	r3, #0
 8000cec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	483d      	ldr	r0, [pc, #244]	; (8000df0 <MX_GPIO_Init+0x8e4>)
 8000cfa:	f000 fd19 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cfe:	2386      	movs	r3, #134	; 0x86
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d0e:	230b      	movs	r3, #11
 8000d10:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d16:	4619      	mov	r1, r3
 8000d18:	4834      	ldr	r0, [pc, #208]	; (8000dec <MX_GPIO_Init+0x8e0>)
 8000d1a:	f000 fd09 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d22:	2303      	movs	r3, #3
 8000d24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000d2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d2e:	4619      	mov	r1, r3
 8000d30:	482e      	ldr	r0, [pc, #184]	; (8000dec <MX_GPIO_Init+0x8e0>)
 8000d32:	f000 fcfd 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000d36:	2350      	movs	r3, #80	; 0x50
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d46:	230d      	movs	r3, #13
 8000d48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4826      	ldr	r0, [pc, #152]	; (8000dec <MX_GPIO_Init+0x8e0>)
 8000d52:	f000 fced 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000d56:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d5c:	2312      	movs	r3, #18
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d68:	2304      	movs	r3, #4
 8000d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d70:	4619      	mov	r1, r3
 8000d72:	481c      	ldr	r0, [pc, #112]	; (8000de4 <MX_GPIO_Init+0x8d8>)
 8000d74:	f000 fcdc 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000d78:	2328      	movs	r3, #40	; 0x28
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d88:	230a      	movs	r3, #10
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d90:	4619      	mov	r1, r3
 8000d92:	4816      	ldr	r0, [pc, #88]	; (8000dec <MX_GPIO_Init+0x8e0>)
 8000d94:	f000 fccc 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000d98:	2340      	movs	r3, #64	; 0x40
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000da8:	2309      	movs	r3, #9
 8000daa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db0:	4619      	mov	r1, r3
 8000db2:	480c      	ldr	r0, [pc, #48]	; (8000de4 <MX_GPIO_Init+0x8d8>)
 8000db4:	f000 fcbc 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000db8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dca:	2305      	movs	r3, #5
 8000dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4809      	ldr	r0, [pc, #36]	; (8000dfc <MX_GPIO_Init+0x8f0>)
 8000dd6:	f000 fcab 	bl	8001730 <HAL_GPIO_Init>

}
 8000dda:	bf00      	nop
 8000ddc:	3740      	adds	r7, #64	; 0x40
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40021c00 	.word	0x40021c00
 8000de8:	40022000 	.word	0x40022000
 8000dec:	40020000 	.word	0x40020000
 8000df0:	40021800 	.word	0x40021800
 8000df4:	40021400 	.word	0x40021400
 8000df8:	40020800 	.word	0x40020800
 8000dfc:	40020400 	.word	0x40020400
 8000e00:	40020c00 	.word	0x40020c00

08000e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e08:	f000 fa91 	bl	800132e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0c:	f000 f84c 	bl	8000ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e10:	f7ff fb7c 	bl	800050c <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000e14:	f000 f9cc 	bl	80011b0 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8000e18:	f000 f930 	bl	800107c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	bsp_mb_slave_init();
 8000e1c:	f004 f87e 	bl	8004f1c <bsp_mb_slave_init>

	// Update coil status
	bsp_mb_coil_set(0, 1);
 8000e20:	2101      	movs	r1, #1
 8000e22:	2000      	movs	r0, #0
 8000e24:	f004 f89c 	bl	8004f60 <bsp_mb_coil_set>
	bsp_mb_coil_set(1, 0);
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f004 f898 	bl	8004f60 <bsp_mb_coil_set>
	bsp_mb_coil_set(2, 1);
 8000e30:	2101      	movs	r1, #1
 8000e32:	2002      	movs	r0, #2
 8000e34:	f004 f894 	bl	8004f60 <bsp_mb_coil_set>
	bsp_mb_coil_set(3, 0);
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2003      	movs	r0, #3
 8000e3c:	f004 f890 	bl	8004f60 <bsp_mb_coil_set>

	// Update input register
	bsp_mb_discrete_input_set(0, 0);
 8000e40:	2100      	movs	r1, #0
 8000e42:	2000      	movs	r0, #0
 8000e44:	f004 f8a4 	bl	8004f90 <bsp_mb_discrete_input_set>
	bsp_mb_discrete_input_set(0, 1);
 8000e48:	2101      	movs	r1, #1
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f004 f8a0 	bl	8004f90 <bsp_mb_discrete_input_set>
	bsp_mb_discrete_input_set(0, 0);
 8000e50:	2100      	movs	r1, #0
 8000e52:	2000      	movs	r0, #0
 8000e54:	f004 f89c 	bl	8004f90 <bsp_mb_discrete_input_set>
	bsp_mb_discrete_input_set(0, 1);
 8000e58:	2101      	movs	r1, #1
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f004 f898 	bl	8004f90 <bsp_mb_discrete_input_set>

	// Update input register
	bsp_mb_input_reg_set(0, 1);
 8000e60:	2101      	movs	r1, #1
 8000e62:	2000      	movs	r0, #0
 8000e64:	f004 f8ac 	bl	8004fc0 <bsp_mb_input_reg_set>
	bsp_mb_input_reg_set(1, 2);
 8000e68:	2102      	movs	r1, #2
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f004 f8a8 	bl	8004fc0 <bsp_mb_input_reg_set>
	bsp_mb_input_reg_set(2, 3);
 8000e70:	2103      	movs	r1, #3
 8000e72:	2002      	movs	r0, #2
 8000e74:	f004 f8a4 	bl	8004fc0 <bsp_mb_input_reg_set>
	bsp_mb_input_reg_set(3, 4);
 8000e78:	2104      	movs	r1, #4
 8000e7a:	2003      	movs	r0, #3
 8000e7c:	f004 f8a0 	bl	8004fc0 <bsp_mb_input_reg_set>

	// Update holding register
	bsp_mb_holding_reg_set(0, 5);
 8000e80:	2105      	movs	r1, #5
 8000e82:	2000      	movs	r0, #0
 8000e84:	f004 f8b4 	bl	8004ff0 <bsp_mb_holding_reg_set>
	bsp_mb_holding_reg_set(1, 6);
 8000e88:	2106      	movs	r1, #6
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f004 f8b0 	bl	8004ff0 <bsp_mb_holding_reg_set>
	bsp_mb_holding_reg_set(2, 7);
 8000e90:	2107      	movs	r1, #7
 8000e92:	2002      	movs	r0, #2
 8000e94:	f004 f8ac 	bl	8004ff0 <bsp_mb_holding_reg_set>
	bsp_mb_holding_reg_set(3, 8);
 8000e98:	2108      	movs	r1, #8
 8000e9a:	2003      	movs	r0, #3
 8000e9c:	f004 f8a8 	bl	8004ff0 <bsp_mb_holding_reg_set>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  bsp_mb_slave_handle();
 8000ea0:	f004 f854 	bl	8004f4c <bsp_mb_slave_handle>
 8000ea4:	e7fc      	b.n	8000ea0 <main+0x9c>
	...

08000ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b094      	sub	sp, #80	; 0x50
 8000eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eae:	f107 0320 	add.w	r3, r7, #32
 8000eb2:	2230      	movs	r2, #48	; 0x30
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f006 fa34 	bl	8007324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ecc:	f000 fdf6 	bl	8001abc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed0:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <SystemClock_Config+0xd8>)
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	4a2a      	ldr	r2, [pc, #168]	; (8000f80 <SystemClock_Config+0xd8>)
 8000ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eda:	6413      	str	r3, [r2, #64]	; 0x40
 8000edc:	4b28      	ldr	r3, [pc, #160]	; (8000f80 <SystemClock_Config+0xd8>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee8:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <SystemClock_Config+0xdc>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a25      	ldr	r2, [pc, #148]	; (8000f84 <SystemClock_Config+0xdc>)
 8000eee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	4b23      	ldr	r3, [pc, #140]	; (8000f84 <SystemClock_Config+0xdc>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f00:	2301      	movs	r3, #1
 8000f02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f14:	2319      	movs	r3, #25
 8000f16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000f18:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000f1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000f22:	2309      	movs	r3, #9
 8000f24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f26:	f107 0320 	add.w	r3, r7, #32
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 fe26 	bl	8001b7c <HAL_RCC_OscConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f36:	f000 f827 	bl	8000f88 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f3a:	f000 fdcf 	bl	8001adc <HAL_PWREx_EnableOverDrive>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000f44:	f000 f820 	bl	8000f88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f48:	230f      	movs	r3, #15
 8000f4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	2106      	movs	r1, #6
 8000f66:	4618      	mov	r0, r3
 8000f68:	f001 f8ac 	bl	80020c4 <HAL_RCC_ClockConfig>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000f72:	f000 f809 	bl	8000f88 <Error_Handler>
  }
}
 8000f76:	bf00      	nop
 8000f78:	3750      	adds	r7, #80	; 0x50
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40007000 	.word	0x40007000

08000f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8c:	b672      	cpsid	i
}
 8000f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <Error_Handler+0x8>
	...

08000f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <HAL_MspInit+0x44>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800

08000fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <NMI_Handler+0x4>

08000fe2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <HardFault_Handler+0x4>

08000fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <MemManage_Handler+0x4>

08000fee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <BusFault_Handler+0x4>

08000ff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <UsageFault_Handler+0x4>

08000ffa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001028:	f000 f9be 	bl	80013a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <TIM3_IRQHandler+0x10>)
 8001036:	f001 ff1a 	bl	8002e6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000028 	.word	0x20000028

08001044 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <USART6_IRQHandler+0x10>)
 800104a:	f002 fcd7 	bl	80039fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000074 	.word	0x20000074

08001058 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <SystemInit+0x20>)
 800105e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <SystemInit+0x20>)
 8001064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001082:	f107 0310 	add.w	r3, r7, #16
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800109a:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <MX_TIM3_Init+0x94>)
 800109c:	4a1d      	ldr	r2, [pc, #116]	; (8001114 <MX_TIM3_Init+0x98>)
 800109e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 80010a0:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <MX_TIM3_Init+0x94>)
 80010a2:	2263      	movs	r2, #99	; 0x63
 80010a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a6:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <MX_TIM3_Init+0x94>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2917-1;
 80010ac:	4b18      	ldr	r3, [pc, #96]	; (8001110 <MX_TIM3_Init+0x94>)
 80010ae:	f640 3264 	movw	r2, #2916	; 0xb64
 80010b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b4:	4b16      	ldr	r3, [pc, #88]	; (8001110 <MX_TIM3_Init+0x94>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <MX_TIM3_Init+0x94>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010c0:	4813      	ldr	r0, [pc, #76]	; (8001110 <MX_TIM3_Init+0x94>)
 80010c2:	f001 fdd5 	bl	8002c70 <HAL_TIM_Base_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80010cc:	f7ff ff5c 	bl	8000f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010d6:	f107 0310 	add.w	r3, r7, #16
 80010da:	4619      	mov	r1, r3
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <MX_TIM3_Init+0x94>)
 80010de:	f001 ffe5 	bl	80030ac <HAL_TIM_ConfigClockSource>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80010e8:	f7ff ff4e 	bl	8000f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ec:	2300      	movs	r3, #0
 80010ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <MX_TIM3_Init+0x94>)
 80010fa:	f002 fa03 	bl	8003504 <HAL_TIMEx_MasterConfigSynchronization>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001104:	f7ff ff40 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000028 	.word	0x20000028
 8001114:	40000400 	.word	0x40000400

08001118 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08a      	sub	sp, #40	; 0x28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a1b      	ldr	r2, [pc, #108]	; (80011a4 <HAL_TIM_Base_MspInit+0x8c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d12f      	bne.n	800119a <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <HAL_TIM_Base_MspInit+0x90>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	4a1a      	ldr	r2, [pc, #104]	; (80011a8 <HAL_TIM_Base_MspInit+0x90>)
 8001140:	f043 0302 	orr.w	r3, r3, #2
 8001144:	6413      	str	r3, [r2, #64]	; 0x40
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <HAL_TIM_Base_MspInit+0x90>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <HAL_TIM_Base_MspInit+0x90>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <HAL_TIM_Base_MspInit+0x90>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <HAL_TIM_Base_MspInit+0x90>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800116a:	2310      	movs	r3, #16
 800116c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800117a:	2302      	movs	r3, #2
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	4809      	ldr	r0, [pc, #36]	; (80011ac <HAL_TIM_Base_MspInit+0x94>)
 8001186:	f000 fad3 	bl	8001730 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	201d      	movs	r0, #29
 8001190:	f000 fa05 	bl	800159e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001194:	201d      	movs	r0, #29
 8001196:	f000 fa1e 	bl	80015d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800119a:	bf00      	nop
 800119c:	3728      	adds	r7, #40	; 0x28
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40000400 	.word	0x40000400
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020400 	.word	0x40020400

080011b0 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <MX_USART6_UART_Init+0x58>)
 80011b6:	4a15      	ldr	r2, [pc, #84]	; (800120c <MX_USART6_UART_Init+0x5c>)
 80011b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <MX_USART6_UART_Init+0x58>)
 80011bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MX_USART6_UART_Init+0x58>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_USART6_UART_Init+0x58>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <MX_USART6_UART_Init+0x58>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <MX_USART6_UART_Init+0x58>)
 80011d6:	220c      	movs	r2, #12
 80011d8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <MX_USART6_UART_Init+0x58>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_USART6_UART_Init+0x58>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <MX_USART6_UART_Init+0x58>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_USART6_UART_Init+0x58>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_USART6_UART_Init+0x58>)
 80011f4:	f002 fa32 	bl	800365c <HAL_UART_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80011fe:	f7ff fec3 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000074 	.word	0x20000074
 800120c:	40011400 	.word	0x40011400

08001210 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b0aa      	sub	sp, #168	; 0xa8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	2284      	movs	r2, #132	; 0x84
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f006 f877 	bl	8007324 <memset>
  if(uartHandle->Instance==USART6)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a25      	ldr	r2, [pc, #148]	; (80012d0 <HAL_UART_MspInit+0xc0>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d143      	bne.n	80012c8 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001240:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001244:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001246:	2300      	movs	r3, #0
 8001248:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	4618      	mov	r0, r3
 8001250:	f001 f91e 	bl	8002490 <HAL_RCCEx_PeriphCLKConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800125a:	f7ff fe95 	bl	8000f88 <Error_Handler>
    }

    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <HAL_UART_MspInit+0xc4>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	4a1c      	ldr	r2, [pc, #112]	; (80012d4 <HAL_UART_MspInit+0xc4>)
 8001264:	f043 0320 	orr.w	r3, r3, #32
 8001268:	6453      	str	r3, [r2, #68]	; 0x44
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HAL_UART_MspInit+0xc4>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f003 0320 	and.w	r3, r3, #32
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <HAL_UART_MspInit+0xc4>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a16      	ldr	r2, [pc, #88]	; (80012d4 <HAL_UART_MspInit+0xc4>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <HAL_UART_MspInit+0xc4>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PC6     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800128e:	23c0      	movs	r3, #192	; 0xc0
 8001290:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80012a6:	2308      	movs	r3, #8
 80012a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012b0:	4619      	mov	r1, r3
 80012b2:	4809      	ldr	r0, [pc, #36]	; (80012d8 <HAL_UART_MspInit+0xc8>)
 80012b4:	f000 fa3c 	bl	8001730 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80012b8:	2200      	movs	r2, #0
 80012ba:	2100      	movs	r1, #0
 80012bc:	2047      	movs	r0, #71	; 0x47
 80012be:	f000 f96e 	bl	800159e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80012c2:	2047      	movs	r0, #71	; 0x47
 80012c4:	f000 f987 	bl	80015d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80012c8:	bf00      	nop
 80012ca:	37a8      	adds	r7, #168	; 0xa8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40011400 	.word	0x40011400
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020800 	.word	0x40020800

080012dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001314 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012e0:	480d      	ldr	r0, [pc, #52]	; (8001318 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012e2:	490e      	ldr	r1, [pc, #56]	; (800131c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012e4:	4a0e      	ldr	r2, [pc, #56]	; (8001320 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e8:	e002      	b.n	80012f0 <LoopCopyDataInit>

080012ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ee:	3304      	adds	r3, #4

080012f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f4:	d3f9      	bcc.n	80012ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f6:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012f8:	4c0b      	ldr	r4, [pc, #44]	; (8001328 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012fc:	e001      	b.n	8001302 <LoopFillZerobss>

080012fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001300:	3204      	adds	r2, #4

08001302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001304:	d3fb      	bcc.n	80012fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001306:	f7ff fea7 	bl	8001058 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800130a:	f005 ffd9 	bl	80072c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800130e:	f7ff fd79 	bl	8000e04 <main>
  bx  lr    
 8001312:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001314:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800131c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001320:	080074fc 	.word	0x080074fc
  ldr r2, =_sbss
 8001324:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001328:	2000256c 	.word	0x2000256c

0800132c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800132c:	e7fe      	b.n	800132c <ADC_IRQHandler>

0800132e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001332:	2003      	movs	r0, #3
 8001334:	f000 f928 	bl	8001588 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001338:	200f      	movs	r0, #15
 800133a:	f000 f805 	bl	8001348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800133e:	f7ff fe29 	bl	8000f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	bd80      	pop	{r7, pc}

08001348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_InitTick+0x54>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_InitTick+0x58>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4619      	mov	r1, r3
 800135a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001362:	fbb2 f3f3 	udiv	r3, r2, r3
 8001366:	4618      	mov	r0, r3
 8001368:	f000 f943 	bl	80015f2 <HAL_SYSTICK_Config>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e00e      	b.n	8001394 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b0f      	cmp	r3, #15
 800137a:	d80a      	bhi.n	8001392 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800137c:	2200      	movs	r2, #0
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	f000 f90b 	bl	800159e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001388:	4a06      	ldr	r2, [pc, #24]	; (80013a4 <HAL_InitTick+0x5c>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	e000      	b.n	8001394 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000000 	.word	0x20000000
 80013a0:	20000008 	.word	0x20000008
 80013a4:	20000004 	.word	0x20000004

080013a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_IncTick+0x20>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	461a      	mov	r2, r3
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_IncTick+0x24>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4413      	add	r3, r2
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <HAL_IncTick+0x24>)
 80013ba:	6013      	str	r3, [r2, #0]
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000008 	.word	0x20000008
 80013cc:	200000f8 	.word	0x200000f8

080013d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return uwTick;
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <HAL_GetTick+0x14>)
 80013d6:	681b      	ldr	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	200000f8 	.word	0x200000f8

080013e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <__NVIC_SetPriorityGrouping+0x40>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001404:	4013      	ands	r3, r2
 8001406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <__NVIC_SetPriorityGrouping+0x44>)
 8001412:	4313      	orrs	r3, r2
 8001414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001416:	4a04      	ldr	r2, [pc, #16]	; (8001428 <__NVIC_SetPriorityGrouping+0x40>)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	60d3      	str	r3, [r2, #12]
}
 800141c:	bf00      	nop
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00
 800142c:	05fa0000 	.word	0x05fa0000

08001430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001434:	4b04      	ldr	r3, [pc, #16]	; (8001448 <__NVIC_GetPriorityGrouping+0x18>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	f003 0307 	and.w	r3, r3, #7
}
 800143e:	4618      	mov	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db0b      	blt.n	8001476 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	f003 021f 	and.w	r2, r3, #31
 8001464:	4907      	ldr	r1, [pc, #28]	; (8001484 <__NVIC_EnableIRQ+0x38>)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	095b      	lsrs	r3, r3, #5
 800146c:	2001      	movs	r0, #1
 800146e:	fa00 f202 	lsl.w	r2, r0, r2
 8001472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000e100 	.word	0xe000e100

08001488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	6039      	str	r1, [r7, #0]
 8001492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001498:	2b00      	cmp	r3, #0
 800149a:	db0a      	blt.n	80014b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	490c      	ldr	r1, [pc, #48]	; (80014d4 <__NVIC_SetPriority+0x4c>)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	0112      	lsls	r2, r2, #4
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	440b      	add	r3, r1
 80014ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b0:	e00a      	b.n	80014c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4908      	ldr	r1, [pc, #32]	; (80014d8 <__NVIC_SetPriority+0x50>)
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	f003 030f 	and.w	r3, r3, #15
 80014be:	3b04      	subs	r3, #4
 80014c0:	0112      	lsls	r2, r2, #4
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	440b      	add	r3, r1
 80014c6:	761a      	strb	r2, [r3, #24]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000e100 	.word	0xe000e100
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014dc:	b480      	push	{r7}
 80014de:	b089      	sub	sp, #36	; 0x24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f1c3 0307 	rsb	r3, r3, #7
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	bf28      	it	cs
 80014fa:	2304      	movcs	r3, #4
 80014fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3304      	adds	r3, #4
 8001502:	2b06      	cmp	r3, #6
 8001504:	d902      	bls.n	800150c <NVIC_EncodePriority+0x30>
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3b03      	subs	r3, #3
 800150a:	e000      	b.n	800150e <NVIC_EncodePriority+0x32>
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	f04f 32ff 	mov.w	r2, #4294967295
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43da      	mvns	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	401a      	ands	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001524:	f04f 31ff 	mov.w	r1, #4294967295
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	fa01 f303 	lsl.w	r3, r1, r3
 800152e:	43d9      	mvns	r1, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	4313      	orrs	r3, r2
         );
}
 8001536:	4618      	mov	r0, r3
 8001538:	3724      	adds	r7, #36	; 0x24
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001554:	d301      	bcc.n	800155a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001556:	2301      	movs	r3, #1
 8001558:	e00f      	b.n	800157a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155a:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <SysTick_Config+0x40>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001562:	210f      	movs	r1, #15
 8001564:	f04f 30ff 	mov.w	r0, #4294967295
 8001568:	f7ff ff8e 	bl	8001488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <SysTick_Config+0x40>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001572:	4b04      	ldr	r3, [pc, #16]	; (8001584 <SysTick_Config+0x40>)
 8001574:	2207      	movs	r2, #7
 8001576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	e000e010 	.word	0xe000e010

08001588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff ff29 	bl	80013e8 <__NVIC_SetPriorityGrouping>
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800159e:	b580      	push	{r7, lr}
 80015a0:	b086      	sub	sp, #24
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
 80015aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b0:	f7ff ff3e 	bl	8001430 <__NVIC_GetPriorityGrouping>
 80015b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	6978      	ldr	r0, [r7, #20]
 80015bc:	f7ff ff8e 	bl	80014dc <NVIC_EncodePriority>
 80015c0:	4602      	mov	r2, r0
 80015c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff5d 	bl	8001488 <__NVIC_SetPriority>
}
 80015ce:	bf00      	nop
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff31 	bl	800144c <__NVIC_EnableIRQ>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ffa2 	bl	8001544 <SysTick_Config>
 8001600:	4603      	mov	r3, r0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b084      	sub	sp, #16
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001616:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001618:	f7ff feda 	bl	80013d0 <HAL_GetTick>
 800161c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d008      	beq.n	800163c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2280      	movs	r2, #128	; 0x80
 800162e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e052      	b.n	80016e2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0216 	bic.w	r2, r2, #22
 800164a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	695a      	ldr	r2, [r3, #20]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800165a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	2b00      	cmp	r3, #0
 8001662:	d103      	bne.n	800166c <HAL_DMA_Abort+0x62>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001668:	2b00      	cmp	r3, #0
 800166a:	d007      	beq.n	800167c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0208 	bic.w	r2, r2, #8
 800167a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0201 	bic.w	r2, r2, #1
 800168a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800168c:	e013      	b.n	80016b6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800168e:	f7ff fe9f 	bl	80013d0 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b05      	cmp	r3, #5
 800169a:	d90c      	bls.n	80016b6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2220      	movs	r2, #32
 80016a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2203      	movs	r2, #3
 80016a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e015      	b.n	80016e2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1e4      	bne.n	800168e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c8:	223f      	movs	r2, #63	; 0x3f
 80016ca:	409a      	lsls	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d004      	beq.n	8001708 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2280      	movs	r2, #128	; 0x80
 8001702:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e00c      	b.n	8001722 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2205      	movs	r2, #5
 800170c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0201 	bic.w	r2, r2, #1
 800171e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	; 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001746:	2300      	movs	r3, #0
 8001748:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	e175      	b.n	8001a3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001750:	2201      	movs	r2, #1
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	429a      	cmp	r2, r3
 800176a:	f040 8164 	bne.w	8001a36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	2b01      	cmp	r3, #1
 8001778:	d005      	beq.n	8001786 <HAL_GPIO_Init+0x56>
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d130      	bne.n	80017e8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	2203      	movs	r2, #3
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4013      	ands	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017bc:	2201      	movs	r2, #1
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	f003 0201 	and.w	r2, r3, #1
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d017      	beq.n	8001824 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	2203      	movs	r2, #3
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d123      	bne.n	8001878 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	08da      	lsrs	r2, r3, #3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3208      	adds	r2, #8
 8001838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800183c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	220f      	movs	r2, #15
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	691a      	ldr	r2, [r3, #16]
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	08da      	lsrs	r2, r3, #3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3208      	adds	r2, #8
 8001872:	69b9      	ldr	r1, [r7, #24]
 8001874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	2203      	movs	r2, #3
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0203 	and.w	r2, r3, #3
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80be 	beq.w	8001a36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ba:	4b66      	ldr	r3, [pc, #408]	; (8001a54 <HAL_GPIO_Init+0x324>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	4a65      	ldr	r2, [pc, #404]	; (8001a54 <HAL_GPIO_Init+0x324>)
 80018c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c4:	6453      	str	r3, [r2, #68]	; 0x44
 80018c6:	4b63      	ldr	r3, [pc, #396]	; (8001a54 <HAL_GPIO_Init+0x324>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80018d2:	4a61      	ldr	r2, [pc, #388]	; (8001a58 <HAL_GPIO_Init+0x328>)
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	3302      	adds	r3, #2
 80018da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	220f      	movs	r2, #15
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a58      	ldr	r2, [pc, #352]	; (8001a5c <HAL_GPIO_Init+0x32c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d037      	beq.n	800196e <HAL_GPIO_Init+0x23e>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a57      	ldr	r2, [pc, #348]	; (8001a60 <HAL_GPIO_Init+0x330>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d031      	beq.n	800196a <HAL_GPIO_Init+0x23a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a56      	ldr	r2, [pc, #344]	; (8001a64 <HAL_GPIO_Init+0x334>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d02b      	beq.n	8001966 <HAL_GPIO_Init+0x236>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a55      	ldr	r2, [pc, #340]	; (8001a68 <HAL_GPIO_Init+0x338>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d025      	beq.n	8001962 <HAL_GPIO_Init+0x232>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a54      	ldr	r2, [pc, #336]	; (8001a6c <HAL_GPIO_Init+0x33c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d01f      	beq.n	800195e <HAL_GPIO_Init+0x22e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a53      	ldr	r2, [pc, #332]	; (8001a70 <HAL_GPIO_Init+0x340>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d019      	beq.n	800195a <HAL_GPIO_Init+0x22a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a52      	ldr	r2, [pc, #328]	; (8001a74 <HAL_GPIO_Init+0x344>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d013      	beq.n	8001956 <HAL_GPIO_Init+0x226>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a51      	ldr	r2, [pc, #324]	; (8001a78 <HAL_GPIO_Init+0x348>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d00d      	beq.n	8001952 <HAL_GPIO_Init+0x222>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a50      	ldr	r2, [pc, #320]	; (8001a7c <HAL_GPIO_Init+0x34c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d007      	beq.n	800194e <HAL_GPIO_Init+0x21e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4f      	ldr	r2, [pc, #316]	; (8001a80 <HAL_GPIO_Init+0x350>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d101      	bne.n	800194a <HAL_GPIO_Init+0x21a>
 8001946:	2309      	movs	r3, #9
 8001948:	e012      	b.n	8001970 <HAL_GPIO_Init+0x240>
 800194a:	230a      	movs	r3, #10
 800194c:	e010      	b.n	8001970 <HAL_GPIO_Init+0x240>
 800194e:	2308      	movs	r3, #8
 8001950:	e00e      	b.n	8001970 <HAL_GPIO_Init+0x240>
 8001952:	2307      	movs	r3, #7
 8001954:	e00c      	b.n	8001970 <HAL_GPIO_Init+0x240>
 8001956:	2306      	movs	r3, #6
 8001958:	e00a      	b.n	8001970 <HAL_GPIO_Init+0x240>
 800195a:	2305      	movs	r3, #5
 800195c:	e008      	b.n	8001970 <HAL_GPIO_Init+0x240>
 800195e:	2304      	movs	r3, #4
 8001960:	e006      	b.n	8001970 <HAL_GPIO_Init+0x240>
 8001962:	2303      	movs	r3, #3
 8001964:	e004      	b.n	8001970 <HAL_GPIO_Init+0x240>
 8001966:	2302      	movs	r3, #2
 8001968:	e002      	b.n	8001970 <HAL_GPIO_Init+0x240>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <HAL_GPIO_Init+0x240>
 800196e:	2300      	movs	r3, #0
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	f002 0203 	and.w	r2, r2, #3
 8001976:	0092      	lsls	r2, r2, #2
 8001978:	4093      	lsls	r3, r2
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001980:	4935      	ldr	r1, [pc, #212]	; (8001a58 <HAL_GPIO_Init+0x328>)
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	089b      	lsrs	r3, r3, #2
 8001986:	3302      	adds	r3, #2
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800198e:	4b3d      	ldr	r3, [pc, #244]	; (8001a84 <HAL_GPIO_Init+0x354>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019b2:	4a34      	ldr	r2, [pc, #208]	; (8001a84 <HAL_GPIO_Init+0x354>)
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019b8:	4b32      	ldr	r3, [pc, #200]	; (8001a84 <HAL_GPIO_Init+0x354>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019dc:	4a29      	ldr	r2, [pc, #164]	; (8001a84 <HAL_GPIO_Init+0x354>)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019e2:	4b28      	ldr	r3, [pc, #160]	; (8001a84 <HAL_GPIO_Init+0x354>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a06:	4a1f      	ldr	r2, [pc, #124]	; (8001a84 <HAL_GPIO_Init+0x354>)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <HAL_GPIO_Init+0x354>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a30:	4a14      	ldr	r2, [pc, #80]	; (8001a84 <HAL_GPIO_Init+0x354>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	61fb      	str	r3, [r7, #28]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	2b0f      	cmp	r3, #15
 8001a40:	f67f ae86 	bls.w	8001750 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	3724      	adds	r7, #36	; 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40013800 	.word	0x40013800
 8001a5c:	40020000 	.word	0x40020000
 8001a60:	40020400 	.word	0x40020400
 8001a64:	40020800 	.word	0x40020800
 8001a68:	40020c00 	.word	0x40020c00
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40021400 	.word	0x40021400
 8001a74:	40021800 	.word	0x40021800
 8001a78:	40021c00 	.word	0x40021c00
 8001a7c:	40022000 	.word	0x40022000
 8001a80:	40022400 	.word	0x40022400
 8001a84:	40013c00 	.word	0x40013c00

08001a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
 8001a94:	4613      	mov	r3, r2
 8001a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a98:	787b      	ldrb	r3, [r7, #1]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001aa4:	e003      	b.n	8001aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	041a      	lsls	r2, r3, #16
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	619a      	str	r2, [r3, #24]
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aca:	6013      	str	r3, [r2, #0]
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40007000 	.word	0x40007000

08001adc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae6:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	4a22      	ldr	r2, [pc, #136]	; (8001b74 <HAL_PWREx_EnableOverDrive+0x98>)
 8001aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af0:	6413      	str	r3, [r2, #64]	; 0x40
 8001af2:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <HAL_PWREx_EnableOverDrive+0x98>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	603b      	str	r3, [r7, #0]
 8001afc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001afe:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a1d      	ldr	r2, [pc, #116]	; (8001b78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b08:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b0a:	f7ff fc61 	bl	80013d0 <HAL_GetTick>
 8001b0e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b10:	e009      	b.n	8001b26 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b12:	f7ff fc5d 	bl	80013d0 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b20:	d901      	bls.n	8001b26 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e022      	b.n	8001b6c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b26:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b32:	d1ee      	bne.n	8001b12 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b34:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a0f      	ldr	r2, [pc, #60]	; (8001b78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b3e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b40:	f7ff fc46 	bl	80013d0 <HAL_GetTick>
 8001b44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b46:	e009      	b.n	8001b5c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b48:	f7ff fc42 	bl	80013d0 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b56:	d901      	bls.n	8001b5c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e007      	b.n	8001b6c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b68:	d1ee      	bne.n	8001b48 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40007000 	.word	0x40007000

08001b7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001b84:	2300      	movs	r3, #0
 8001b86:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e291      	b.n	80020b6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 8087 	beq.w	8001cae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ba0:	4b96      	ldr	r3, [pc, #600]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 030c 	and.w	r3, r3, #12
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d00c      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bac:	4b93      	ldr	r3, [pc, #588]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 030c 	and.w	r3, r3, #12
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d112      	bne.n	8001bde <HAL_RCC_OscConfig+0x62>
 8001bb8:	4b90      	ldr	r3, [pc, #576]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bc4:	d10b      	bne.n	8001bde <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc6:	4b8d      	ldr	r3, [pc, #564]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d06c      	beq.n	8001cac <HAL_RCC_OscConfig+0x130>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d168      	bne.n	8001cac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e26b      	b.n	80020b6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be6:	d106      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x7a>
 8001be8:	4b84      	ldr	r3, [pc, #528]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a83      	ldr	r2, [pc, #524]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	e02e      	b.n	8001c54 <HAL_RCC_OscConfig+0xd8>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10c      	bne.n	8001c18 <HAL_RCC_OscConfig+0x9c>
 8001bfe:	4b7f      	ldr	r3, [pc, #508]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a7e      	ldr	r2, [pc, #504]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	4b7c      	ldr	r3, [pc, #496]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a7b      	ldr	r2, [pc, #492]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001c10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	e01d      	b.n	8001c54 <HAL_RCC_OscConfig+0xd8>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c20:	d10c      	bne.n	8001c3c <HAL_RCC_OscConfig+0xc0>
 8001c22:	4b76      	ldr	r3, [pc, #472]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a75      	ldr	r2, [pc, #468]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	4b73      	ldr	r3, [pc, #460]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a72      	ldr	r2, [pc, #456]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	e00b      	b.n	8001c54 <HAL_RCC_OscConfig+0xd8>
 8001c3c:	4b6f      	ldr	r3, [pc, #444]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a6e      	ldr	r2, [pc, #440]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	4b6c      	ldr	r3, [pc, #432]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a6b      	ldr	r2, [pc, #428]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d013      	beq.n	8001c84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5c:	f7ff fbb8 	bl	80013d0 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c64:	f7ff fbb4 	bl	80013d0 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b64      	cmp	r3, #100	; 0x64
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e21f      	b.n	80020b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c76:	4b61      	ldr	r3, [pc, #388]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0xe8>
 8001c82:	e014      	b.n	8001cae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c84:	f7ff fba4 	bl	80013d0 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c8c:	f7ff fba0 	bl	80013d0 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b64      	cmp	r3, #100	; 0x64
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e20b      	b.n	80020b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9e:	4b57      	ldr	r3, [pc, #348]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x110>
 8001caa:	e000      	b.n	8001cae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d069      	beq.n	8001d8e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cba:	4b50      	ldr	r3, [pc, #320]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00b      	beq.n	8001cde <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cc6:	4b4d      	ldr	r3, [pc, #308]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 030c 	and.w	r3, r3, #12
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d11c      	bne.n	8001d0c <HAL_RCC_OscConfig+0x190>
 8001cd2:	4b4a      	ldr	r3, [pc, #296]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d116      	bne.n	8001d0c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cde:	4b47      	ldr	r3, [pc, #284]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d005      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x17a>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d001      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e1df      	b.n	80020b6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf6:	4b41      	ldr	r3, [pc, #260]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	493d      	ldr	r1, [pc, #244]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0a:	e040      	b.n	8001d8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d023      	beq.n	8001d5c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d14:	4b39      	ldr	r3, [pc, #228]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a38      	ldr	r2, [pc, #224]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7ff fb56 	bl	80013d0 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d28:	f7ff fb52 	bl	80013d0 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e1bd      	b.n	80020b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3a:	4b30      	ldr	r3, [pc, #192]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f0      	beq.n	8001d28 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d46:	4b2d      	ldr	r3, [pc, #180]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4929      	ldr	r1, [pc, #164]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]
 8001d5a:	e018      	b.n	8001d8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d5c:	4b27      	ldr	r3, [pc, #156]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a26      	ldr	r2, [pc, #152]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001d62:	f023 0301 	bic.w	r3, r3, #1
 8001d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d68:	f7ff fb32 	bl	80013d0 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d70:	f7ff fb2e 	bl	80013d0 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e199      	b.n	80020b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d82:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d038      	beq.n	8001e0c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d019      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001da2:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001da6:	4a15      	ldr	r2, [pc, #84]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dae:	f7ff fb0f 	bl	80013d0 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db6:	f7ff fb0b 	bl	80013d0 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e176      	b.n	80020b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0f0      	beq.n	8001db6 <HAL_RCC_OscConfig+0x23a>
 8001dd4:	e01a      	b.n	8001e0c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dda:	4a08      	ldr	r2, [pc, #32]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001ddc:	f023 0301 	bic.w	r3, r3, #1
 8001de0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de2:	f7ff faf5 	bl	80013d0 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de8:	e00a      	b.n	8001e00 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dea:	f7ff faf1 	bl	80013d0 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d903      	bls.n	8001e00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e15c      	b.n	80020b6 <HAL_RCC_OscConfig+0x53a>
 8001dfc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e00:	4b91      	ldr	r3, [pc, #580]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1ee      	bne.n	8001dea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 80a4 	beq.w	8001f62 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e1a:	4b8b      	ldr	r3, [pc, #556]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10d      	bne.n	8001e42 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e26:	4b88      	ldr	r3, [pc, #544]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	4a87      	ldr	r2, [pc, #540]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e30:	6413      	str	r3, [r2, #64]	; 0x40
 8001e32:	4b85      	ldr	r3, [pc, #532]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e42:	4b82      	ldr	r3, [pc, #520]	; (800204c <HAL_RCC_OscConfig+0x4d0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d118      	bne.n	8001e80 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001e4e:	4b7f      	ldr	r3, [pc, #508]	; (800204c <HAL_RCC_OscConfig+0x4d0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a7e      	ldr	r2, [pc, #504]	; (800204c <HAL_RCC_OscConfig+0x4d0>)
 8001e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e5a:	f7ff fab9 	bl	80013d0 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e62:	f7ff fab5 	bl	80013d0 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b64      	cmp	r3, #100	; 0x64
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e120      	b.n	80020b6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e74:	4b75      	ldr	r3, [pc, #468]	; (800204c <HAL_RCC_OscConfig+0x4d0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0f0      	beq.n	8001e62 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d106      	bne.n	8001e96 <HAL_RCC_OscConfig+0x31a>
 8001e88:	4b6f      	ldr	r3, [pc, #444]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8c:	4a6e      	ldr	r2, [pc, #440]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6713      	str	r3, [r2, #112]	; 0x70
 8001e94:	e02d      	b.n	8001ef2 <HAL_RCC_OscConfig+0x376>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x33c>
 8001e9e:	4b6a      	ldr	r3, [pc, #424]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea2:	4a69      	ldr	r2, [pc, #420]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001ea4:	f023 0301 	bic.w	r3, r3, #1
 8001ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eaa:	4b67      	ldr	r3, [pc, #412]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eae:	4a66      	ldr	r2, [pc, #408]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001eb0:	f023 0304 	bic.w	r3, r3, #4
 8001eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb6:	e01c      	b.n	8001ef2 <HAL_RCC_OscConfig+0x376>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b05      	cmp	r3, #5
 8001ebe:	d10c      	bne.n	8001eda <HAL_RCC_OscConfig+0x35e>
 8001ec0:	4b61      	ldr	r3, [pc, #388]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec4:	4a60      	ldr	r2, [pc, #384]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001ec6:	f043 0304 	orr.w	r3, r3, #4
 8001eca:	6713      	str	r3, [r2, #112]	; 0x70
 8001ecc:	4b5e      	ldr	r3, [pc, #376]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed0:	4a5d      	ldr	r2, [pc, #372]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed8:	e00b      	b.n	8001ef2 <HAL_RCC_OscConfig+0x376>
 8001eda:	4b5b      	ldr	r3, [pc, #364]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ede:	4a5a      	ldr	r2, [pc, #360]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001ee0:	f023 0301 	bic.w	r3, r3, #1
 8001ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee6:	4b58      	ldr	r3, [pc, #352]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eea:	4a57      	ldr	r2, [pc, #348]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001eec:	f023 0304 	bic.w	r3, r3, #4
 8001ef0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d015      	beq.n	8001f26 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001efa:	f7ff fa69 	bl	80013d0 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f00:	e00a      	b.n	8001f18 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f02:	f7ff fa65 	bl	80013d0 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e0ce      	b.n	80020b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f18:	4b4b      	ldr	r3, [pc, #300]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0ee      	beq.n	8001f02 <HAL_RCC_OscConfig+0x386>
 8001f24:	e014      	b.n	8001f50 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f26:	f7ff fa53 	bl	80013d0 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f2c:	e00a      	b.n	8001f44 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2e:	f7ff fa4f 	bl	80013d0 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e0b8      	b.n	80020b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f44:	4b40      	ldr	r3, [pc, #256]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1ee      	bne.n	8001f2e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f50:	7dfb      	ldrb	r3, [r7, #23]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d105      	bne.n	8001f62 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f56:	4b3c      	ldr	r3, [pc, #240]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	4a3b      	ldr	r2, [pc, #236]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 80a4 	beq.w	80020b4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f6c:	4b36      	ldr	r3, [pc, #216]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 030c 	and.w	r3, r3, #12
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d06b      	beq.n	8002050 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d149      	bne.n	8002014 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f80:	4b31      	ldr	r3, [pc, #196]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a30      	ldr	r2, [pc, #192]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001f86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8c:	f7ff fa20 	bl	80013d0 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f94:	f7ff fa1c 	bl	80013d0 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e087      	b.n	80020b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa6:	4b28      	ldr	r3, [pc, #160]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f0      	bne.n	8001f94 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69da      	ldr	r2, [r3, #28]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	019b      	lsls	r3, r3, #6
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc8:	085b      	lsrs	r3, r3, #1
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	041b      	lsls	r3, r3, #16
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	061b      	lsls	r3, r3, #24
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	4a1b      	ldr	r2, [pc, #108]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001fda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fde:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fe0:	4b19      	ldr	r3, [pc, #100]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a18      	ldr	r2, [pc, #96]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fec:	f7ff f9f0 	bl	80013d0 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff4:	f7ff f9ec 	bl	80013d0 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e057      	b.n	80020b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0f0      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x478>
 8002012:	e04f      	b.n	80020b4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a0b      	ldr	r2, [pc, #44]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 800201a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800201e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002020:	f7ff f9d6 	bl	80013d0 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002028:	f7ff f9d2 	bl	80013d0 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e03d      	b.n	80020b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203a:	4b03      	ldr	r3, [pc, #12]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x4ac>
 8002046:	e035      	b.n	80020b4 <HAL_RCC_OscConfig+0x538>
 8002048:	40023800 	.word	0x40023800
 800204c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002050:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <HAL_RCC_OscConfig+0x544>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d028      	beq.n	80020b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002068:	429a      	cmp	r2, r3
 800206a:	d121      	bne.n	80020b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002076:	429a      	cmp	r2, r3
 8002078:	d11a      	bne.n	80020b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002080:	4013      	ands	r3, r2
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002086:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002088:	4293      	cmp	r3, r2
 800208a:	d111      	bne.n	80020b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002096:	085b      	lsrs	r3, r3, #1
 8002098:	3b01      	subs	r3, #1
 800209a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800209c:	429a      	cmp	r2, r3
 800209e:	d107      	bne.n	80020b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40023800 	.word	0x40023800

080020c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0d0      	b.n	800227e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020dc:	4b6a      	ldr	r3, [pc, #424]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 030f 	and.w	r3, r3, #15
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d910      	bls.n	800210c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ea:	4b67      	ldr	r3, [pc, #412]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f023 020f 	bic.w	r2, r3, #15
 80020f2:	4965      	ldr	r1, [pc, #404]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fa:	4b63      	ldr	r3, [pc, #396]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d001      	beq.n	800210c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0b8      	b.n	800227e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d020      	beq.n	800215a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002124:	4b59      	ldr	r3, [pc, #356]	; (800228c <HAL_RCC_ClockConfig+0x1c8>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	4a58      	ldr	r2, [pc, #352]	; (800228c <HAL_RCC_ClockConfig+0x1c8>)
 800212a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800212e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800213c:	4b53      	ldr	r3, [pc, #332]	; (800228c <HAL_RCC_ClockConfig+0x1c8>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	4a52      	ldr	r2, [pc, #328]	; (800228c <HAL_RCC_ClockConfig+0x1c8>)
 8002142:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002146:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002148:	4b50      	ldr	r3, [pc, #320]	; (800228c <HAL_RCC_ClockConfig+0x1c8>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	494d      	ldr	r1, [pc, #308]	; (800228c <HAL_RCC_ClockConfig+0x1c8>)
 8002156:	4313      	orrs	r3, r2
 8002158:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d040      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d107      	bne.n	800217e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216e:	4b47      	ldr	r3, [pc, #284]	; (800228c <HAL_RCC_ClockConfig+0x1c8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d115      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e07f      	b.n	800227e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d107      	bne.n	8002196 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002186:	4b41      	ldr	r3, [pc, #260]	; (800228c <HAL_RCC_ClockConfig+0x1c8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d109      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e073      	b.n	800227e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002196:	4b3d      	ldr	r3, [pc, #244]	; (800228c <HAL_RCC_ClockConfig+0x1c8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e06b      	b.n	800227e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021a6:	4b39      	ldr	r3, [pc, #228]	; (800228c <HAL_RCC_ClockConfig+0x1c8>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f023 0203 	bic.w	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	4936      	ldr	r1, [pc, #216]	; (800228c <HAL_RCC_ClockConfig+0x1c8>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021b8:	f7ff f90a 	bl	80013d0 <HAL_GetTick>
 80021bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021be:	e00a      	b.n	80021d6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c0:	f7ff f906 	bl	80013d0 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e053      	b.n	800227e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d6:	4b2d      	ldr	r3, [pc, #180]	; (800228c <HAL_RCC_ClockConfig+0x1c8>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 020c 	and.w	r2, r3, #12
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d1eb      	bne.n	80021c0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021e8:	4b27      	ldr	r3, [pc, #156]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 030f 	and.w	r3, r3, #15
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d210      	bcs.n	8002218 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f6:	4b24      	ldr	r3, [pc, #144]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 020f 	bic.w	r2, r3, #15
 80021fe:	4922      	ldr	r1, [pc, #136]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002206:	4b20      	ldr	r3, [pc, #128]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d001      	beq.n	8002218 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e032      	b.n	800227e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d008      	beq.n	8002236 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002224:	4b19      	ldr	r3, [pc, #100]	; (800228c <HAL_RCC_ClockConfig+0x1c8>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4916      	ldr	r1, [pc, #88]	; (800228c <HAL_RCC_ClockConfig+0x1c8>)
 8002232:	4313      	orrs	r3, r2
 8002234:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b00      	cmp	r3, #0
 8002240:	d009      	beq.n	8002256 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002242:	4b12      	ldr	r3, [pc, #72]	; (800228c <HAL_RCC_ClockConfig+0x1c8>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	490e      	ldr	r1, [pc, #56]	; (800228c <HAL_RCC_ClockConfig+0x1c8>)
 8002252:	4313      	orrs	r3, r2
 8002254:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002256:	f000 f821 	bl	800229c <HAL_RCC_GetSysClockFreq>
 800225a:	4602      	mov	r2, r0
 800225c:	4b0b      	ldr	r3, [pc, #44]	; (800228c <HAL_RCC_ClockConfig+0x1c8>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	490a      	ldr	r1, [pc, #40]	; (8002290 <HAL_RCC_ClockConfig+0x1cc>)
 8002268:	5ccb      	ldrb	r3, [r1, r3]
 800226a:	fa22 f303 	lsr.w	r3, r2, r3
 800226e:	4a09      	ldr	r2, [pc, #36]	; (8002294 <HAL_RCC_ClockConfig+0x1d0>)
 8002270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002272:	4b09      	ldr	r3, [pc, #36]	; (8002298 <HAL_RCC_ClockConfig+0x1d4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff f866 	bl	8001348 <HAL_InitTick>

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40023c00 	.word	0x40023c00
 800228c:	40023800 	.word	0x40023800
 8002290:	080074a8 	.word	0x080074a8
 8002294:	20000000 	.word	0x20000000
 8002298:	20000004 	.word	0x20000004

0800229c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800229c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022a0:	b090      	sub	sp, #64	; 0x40
 80022a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	637b      	str	r3, [r7, #52]	; 0x34
 80022a8:	2300      	movs	r3, #0
 80022aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022ac:	2300      	movs	r3, #0
 80022ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <HAL_RCC_GetSysClockFreq+0x180>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 030c 	and.w	r3, r3, #12
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d00d      	beq.n	80022dc <HAL_RCC_GetSysClockFreq+0x40>
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	f200 80a1 	bhi.w	8002408 <HAL_RCC_GetSysClockFreq+0x16c>
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d002      	beq.n	80022d0 <HAL_RCC_GetSysClockFreq+0x34>
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d003      	beq.n	80022d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80022ce:	e09b      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022d0:	4b53      	ldr	r3, [pc, #332]	; (8002420 <HAL_RCC_GetSysClockFreq+0x184>)
 80022d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022d4:	e09b      	b.n	800240e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022d6:	4b53      	ldr	r3, [pc, #332]	; (8002424 <HAL_RCC_GetSysClockFreq+0x188>)
 80022d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022da:	e098      	b.n	800240e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022dc:	4b4f      	ldr	r3, [pc, #316]	; (800241c <HAL_RCC_GetSysClockFreq+0x180>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022e4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80022e6:	4b4d      	ldr	r3, [pc, #308]	; (800241c <HAL_RCC_GetSysClockFreq+0x180>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d028      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022f2:	4b4a      	ldr	r3, [pc, #296]	; (800241c <HAL_RCC_GetSysClockFreq+0x180>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	099b      	lsrs	r3, r3, #6
 80022f8:	2200      	movs	r2, #0
 80022fa:	623b      	str	r3, [r7, #32]
 80022fc:	627a      	str	r2, [r7, #36]	; 0x24
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002304:	2100      	movs	r1, #0
 8002306:	4b47      	ldr	r3, [pc, #284]	; (8002424 <HAL_RCC_GetSysClockFreq+0x188>)
 8002308:	fb03 f201 	mul.w	r2, r3, r1
 800230c:	2300      	movs	r3, #0
 800230e:	fb00 f303 	mul.w	r3, r0, r3
 8002312:	4413      	add	r3, r2
 8002314:	4a43      	ldr	r2, [pc, #268]	; (8002424 <HAL_RCC_GetSysClockFreq+0x188>)
 8002316:	fba0 1202 	umull	r1, r2, r0, r2
 800231a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800231c:	460a      	mov	r2, r1
 800231e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002322:	4413      	add	r3, r2
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002328:	2200      	movs	r2, #0
 800232a:	61bb      	str	r3, [r7, #24]
 800232c:	61fa      	str	r2, [r7, #28]
 800232e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002332:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002336:	f7fd ff67 	bl	8000208 <__aeabi_uldivmod>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4613      	mov	r3, r2
 8002340:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002342:	e053      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002344:	4b35      	ldr	r3, [pc, #212]	; (800241c <HAL_RCC_GetSysClockFreq+0x180>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	099b      	lsrs	r3, r3, #6
 800234a:	2200      	movs	r2, #0
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	617a      	str	r2, [r7, #20]
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002356:	f04f 0b00 	mov.w	fp, #0
 800235a:	4652      	mov	r2, sl
 800235c:	465b      	mov	r3, fp
 800235e:	f04f 0000 	mov.w	r0, #0
 8002362:	f04f 0100 	mov.w	r1, #0
 8002366:	0159      	lsls	r1, r3, #5
 8002368:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800236c:	0150      	lsls	r0, r2, #5
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	ebb2 080a 	subs.w	r8, r2, sl
 8002376:	eb63 090b 	sbc.w	r9, r3, fp
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	f04f 0300 	mov.w	r3, #0
 8002382:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002386:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800238a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800238e:	ebb2 0408 	subs.w	r4, r2, r8
 8002392:	eb63 0509 	sbc.w	r5, r3, r9
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	00eb      	lsls	r3, r5, #3
 80023a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023a4:	00e2      	lsls	r2, r4, #3
 80023a6:	4614      	mov	r4, r2
 80023a8:	461d      	mov	r5, r3
 80023aa:	eb14 030a 	adds.w	r3, r4, sl
 80023ae:	603b      	str	r3, [r7, #0]
 80023b0:	eb45 030b 	adc.w	r3, r5, fp
 80023b4:	607b      	str	r3, [r7, #4]
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023c2:	4629      	mov	r1, r5
 80023c4:	028b      	lsls	r3, r1, #10
 80023c6:	4621      	mov	r1, r4
 80023c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023cc:	4621      	mov	r1, r4
 80023ce:	028a      	lsls	r2, r1, #10
 80023d0:	4610      	mov	r0, r2
 80023d2:	4619      	mov	r1, r3
 80023d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d6:	2200      	movs	r2, #0
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	60fa      	str	r2, [r7, #12]
 80023dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023e0:	f7fd ff12 	bl	8000208 <__aeabi_uldivmod>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	4613      	mov	r3, r2
 80023ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_GetSysClockFreq+0x180>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	0c1b      	lsrs	r3, r3, #16
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	3301      	adds	r3, #1
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80023fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002400:	fbb2 f3f3 	udiv	r3, r2, r3
 8002404:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002406:	e002      	b.n	800240e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <HAL_RCC_GetSysClockFreq+0x184>)
 800240a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800240c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800240e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002410:	4618      	mov	r0, r3
 8002412:	3740      	adds	r7, #64	; 0x40
 8002414:	46bd      	mov	sp, r7
 8002416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800
 8002420:	00f42400 	.word	0x00f42400
 8002424:	017d7840 	.word	0x017d7840

08002428 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <HAL_RCC_GetHCLKFreq+0x14>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	20000000 	.word	0x20000000

08002440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002444:	f7ff fff0 	bl	8002428 <HAL_RCC_GetHCLKFreq>
 8002448:	4602      	mov	r2, r0
 800244a:	4b05      	ldr	r3, [pc, #20]	; (8002460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	0a9b      	lsrs	r3, r3, #10
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	4903      	ldr	r1, [pc, #12]	; (8002464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002456:	5ccb      	ldrb	r3, [r1, r3]
 8002458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800245c:	4618      	mov	r0, r3
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40023800 	.word	0x40023800
 8002464:	080074b8 	.word	0x080074b8

08002468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800246c:	f7ff ffdc 	bl	8002428 <HAL_RCC_GetHCLKFreq>
 8002470:	4602      	mov	r2, r0
 8002472:	4b05      	ldr	r3, [pc, #20]	; (8002488 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	0b5b      	lsrs	r3, r3, #13
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	4903      	ldr	r1, [pc, #12]	; (800248c <HAL_RCC_GetPCLK2Freq+0x24>)
 800247e:	5ccb      	ldrb	r3, [r1, r3]
 8002480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002484:	4618      	mov	r0, r3
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40023800 	.word	0x40023800
 800248c:	080074b8 	.word	0x080074b8

08002490 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d012      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024b8:	4b69      	ldr	r3, [pc, #420]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	4a68      	ldr	r2, [pc, #416]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80024c2:	6093      	str	r3, [r2, #8]
 80024c4:	4b66      	ldr	r3, [pc, #408]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024cc:	4964      	ldr	r1, [pc, #400]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80024da:	2301      	movs	r3, #1
 80024dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d017      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024ea:	4b5d      	ldr	r3, [pc, #372]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f8:	4959      	ldr	r1, [pc, #356]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002504:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002508:	d101      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800250a:	2301      	movs	r3, #1
 800250c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002516:	2301      	movs	r3, #1
 8002518:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d017      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002526:	4b4e      	ldr	r3, [pc, #312]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800252c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	494a      	ldr	r1, [pc, #296]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002544:	d101      	bne.n	800254a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002546:	2301      	movs	r3, #1
 8002548:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002552:	2301      	movs	r3, #1
 8002554:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002562:	2301      	movs	r3, #1
 8002564:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0320 	and.w	r3, r3, #32
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 808b 	beq.w	800268a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002574:	4b3a      	ldr	r3, [pc, #232]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	4a39      	ldr	r2, [pc, #228]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800257a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257e:	6413      	str	r3, [r2, #64]	; 0x40
 8002580:	4b37      	ldr	r3, [pc, #220]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800258c:	4b35      	ldr	r3, [pc, #212]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a34      	ldr	r2, [pc, #208]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002596:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002598:	f7fe ff1a 	bl	80013d0 <HAL_GetTick>
 800259c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a0:	f7fe ff16 	bl	80013d0 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b64      	cmp	r3, #100	; 0x64
 80025ac:	d901      	bls.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e357      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80025b2:	4b2c      	ldr	r3, [pc, #176]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025be:	4b28      	ldr	r3, [pc, #160]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d035      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d02e      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025dc:	4b20      	ldr	r3, [pc, #128]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025e6:	4b1e      	ldr	r3, [pc, #120]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ea:	4a1d      	ldr	r2, [pc, #116]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025f2:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f6:	4a1a      	ldr	r2, [pc, #104]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80025fe:	4a18      	ldr	r2, [pc, #96]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002604:	4b16      	ldr	r3, [pc, #88]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b01      	cmp	r3, #1
 800260e:	d114      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002610:	f7fe fede 	bl	80013d0 <HAL_GetTick>
 8002614:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002616:	e00a      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002618:	f7fe feda 	bl	80013d0 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f241 3288 	movw	r2, #5000	; 0x1388
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e319      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262e:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0ee      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002642:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002646:	d111      	bne.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002648:	4b05      	ldr	r3, [pc, #20]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002656:	400b      	ands	r3, r1
 8002658:	4901      	ldr	r1, [pc, #4]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800265a:	4313      	orrs	r3, r2
 800265c:	608b      	str	r3, [r1, #8]
 800265e:	e00b      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002660:	40023800 	.word	0x40023800
 8002664:	40007000 	.word	0x40007000
 8002668:	0ffffcff 	.word	0x0ffffcff
 800266c:	4baa      	ldr	r3, [pc, #680]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	4aa9      	ldr	r2, [pc, #676]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002672:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002676:	6093      	str	r3, [r2, #8]
 8002678:	4ba7      	ldr	r3, [pc, #668]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800267a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002684:	49a4      	ldr	r1, [pc, #656]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002686:	4313      	orrs	r3, r2
 8002688:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0310 	and.w	r3, r3, #16
 8002692:	2b00      	cmp	r3, #0
 8002694:	d010      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002696:	4ba0      	ldr	r3, [pc, #640]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800269c:	4a9e      	ldr	r2, [pc, #632]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800269e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80026a6:	4b9c      	ldr	r3, [pc, #624]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b0:	4999      	ldr	r1, [pc, #612]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00a      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026c4:	4b94      	ldr	r3, [pc, #592]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026d2:	4991      	ldr	r1, [pc, #580]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00a      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026e6:	4b8c      	ldr	r3, [pc, #560]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026f4:	4988      	ldr	r1, [pc, #544]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00a      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002708:	4b83      	ldr	r3, [pc, #524]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002716:	4980      	ldr	r1, [pc, #512]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002718:	4313      	orrs	r3, r2
 800271a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00a      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800272a:	4b7b      	ldr	r3, [pc, #492]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800272c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002730:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002738:	4977      	ldr	r1, [pc, #476]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800273a:	4313      	orrs	r3, r2
 800273c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00a      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800274c:	4b72      	ldr	r3, [pc, #456]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800274e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002752:	f023 0203 	bic.w	r2, r3, #3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	496f      	ldr	r1, [pc, #444]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800275c:	4313      	orrs	r3, r2
 800275e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800276e:	4b6a      	ldr	r3, [pc, #424]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002774:	f023 020c 	bic.w	r2, r3, #12
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800277c:	4966      	ldr	r1, [pc, #408]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00a      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002790:	4b61      	ldr	r3, [pc, #388]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002796:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279e:	495e      	ldr	r1, [pc, #376]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00a      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027b2:	4b59      	ldr	r3, [pc, #356]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c0:	4955      	ldr	r1, [pc, #340]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00a      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027d4:	4b50      	ldr	r3, [pc, #320]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e2:	494d      	ldr	r1, [pc, #308]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00a      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80027f6:	4b48      	ldr	r3, [pc, #288]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002804:	4944      	ldr	r1, [pc, #272]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002818:	4b3f      	ldr	r3, [pc, #252]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800281a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002826:	493c      	ldr	r1, [pc, #240]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800283a:	4b37      	ldr	r3, [pc, #220]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800283c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002840:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002848:	4933      	ldr	r1, [pc, #204]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800285c:	4b2e      	ldr	r3, [pc, #184]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002862:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800286a:	492b      	ldr	r1, [pc, #172]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d011      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800287e:	4b26      	ldr	r3, [pc, #152]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002884:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800288c:	4922      	ldr	r1, [pc, #136]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002898:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800289c:	d101      	bne.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800289e:	2301      	movs	r3, #1
 80028a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80028ae:	2301      	movs	r3, #1
 80028b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028be:	4b16      	ldr	r3, [pc, #88]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028cc:	4912      	ldr	r1, [pc, #72]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00b      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028e0:	4b0d      	ldr	r3, [pc, #52]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028f0:	4909      	ldr	r1, [pc, #36]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d006      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 80d9 	beq.w	8002abe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800290c:	4b02      	ldr	r3, [pc, #8]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a01      	ldr	r2, [pc, #4]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002912:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002916:	e001      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002918:	40023800 	.word	0x40023800
 800291c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800291e:	f7fe fd57 	bl	80013d0 <HAL_GetTick>
 8002922:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002926:	f7fe fd53 	bl	80013d0 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b64      	cmp	r3, #100	; 0x64
 8002932:	d901      	bls.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e194      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002938:	4b6c      	ldr	r3, [pc, #432]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1f0      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	d021      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002954:	2b00      	cmp	r3, #0
 8002956:	d11d      	bne.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002958:	4b64      	ldr	r3, [pc, #400]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800295a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800295e:	0c1b      	lsrs	r3, r3, #16
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002966:	4b61      	ldr	r3, [pc, #388]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800296c:	0e1b      	lsrs	r3, r3, #24
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	019a      	lsls	r2, r3, #6
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	041b      	lsls	r3, r3, #16
 800297e:	431a      	orrs	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	061b      	lsls	r3, r3, #24
 8002984:	431a      	orrs	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	071b      	lsls	r3, r3, #28
 800298c:	4957      	ldr	r1, [pc, #348]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d004      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029a8:	d00a      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d02e      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029be:	d129      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029c0:	4b4a      	ldr	r3, [pc, #296]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029c6:	0c1b      	lsrs	r3, r3, #16
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029ce:	4b47      	ldr	r3, [pc, #284]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029d4:	0f1b      	lsrs	r3, r3, #28
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	019a      	lsls	r2, r3, #6
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	041b      	lsls	r3, r3, #16
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	061b      	lsls	r3, r3, #24
 80029ee:	431a      	orrs	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	071b      	lsls	r3, r3, #28
 80029f4:	493d      	ldr	r1, [pc, #244]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80029fc:	4b3b      	ldr	r3, [pc, #236]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a02:	f023 021f 	bic.w	r2, r3, #31
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	4937      	ldr	r1, [pc, #220]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d01d      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a20:	4b32      	ldr	r3, [pc, #200]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a26:	0e1b      	lsrs	r3, r3, #24
 8002a28:	f003 030f 	and.w	r3, r3, #15
 8002a2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a2e:	4b2f      	ldr	r3, [pc, #188]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a34:	0f1b      	lsrs	r3, r3, #28
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	019a      	lsls	r2, r3, #6
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	041b      	lsls	r3, r3, #16
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	061b      	lsls	r3, r3, #24
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	071b      	lsls	r3, r3, #28
 8002a54:	4925      	ldr	r1, [pc, #148]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d011      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	019a      	lsls	r2, r3, #6
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	041b      	lsls	r3, r3, #16
 8002a74:	431a      	orrs	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	061b      	lsls	r3, r3, #24
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	071b      	lsls	r3, r3, #28
 8002a84:	4919      	ldr	r1, [pc, #100]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a8c:	4b17      	ldr	r3, [pc, #92]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a16      	ldr	r2, [pc, #88]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a98:	f7fe fc9a 	bl	80013d0 <HAL_GetTick>
 8002a9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002aa0:	f7fe fc96 	bl	80013d0 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	; 0x64
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e0d7      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	f040 80cd 	bne.w	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ac6:	4b09      	ldr	r3, [pc, #36]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a08      	ldr	r2, [pc, #32]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ad2:	f7fe fc7d 	bl	80013d0 <HAL_GetTick>
 8002ad6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ad8:	e00a      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ada:	f7fe fc79 	bl	80013d0 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b64      	cmp	r3, #100	; 0x64
 8002ae6:	d903      	bls.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e0ba      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002aec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002af0:	4b5e      	ldr	r3, [pc, #376]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002afc:	d0ed      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d009      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d02e      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d12a      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b26:	4b51      	ldr	r3, [pc, #324]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2c:	0c1b      	lsrs	r3, r3, #16
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b34:	4b4d      	ldr	r3, [pc, #308]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3a:	0f1b      	lsrs	r3, r3, #28
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	019a      	lsls	r2, r3, #6
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	041b      	lsls	r3, r3, #16
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	061b      	lsls	r3, r3, #24
 8002b54:	431a      	orrs	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	071b      	lsls	r3, r3, #28
 8002b5a:	4944      	ldr	r1, [pc, #272]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b62:	4b42      	ldr	r3, [pc, #264]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b68:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	3b01      	subs	r3, #1
 8002b72:	021b      	lsls	r3, r3, #8
 8002b74:	493d      	ldr	r1, [pc, #244]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d022      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b90:	d11d      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b92:	4b36      	ldr	r3, [pc, #216]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b98:	0e1b      	lsrs	r3, r3, #24
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ba0:	4b32      	ldr	r3, [pc, #200]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba6:	0f1b      	lsrs	r3, r3, #28
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	019a      	lsls	r2, r3, #6
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	041b      	lsls	r3, r3, #16
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	061b      	lsls	r3, r3, #24
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	071b      	lsls	r3, r3, #28
 8002bc6:	4929      	ldr	r1, [pc, #164]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d028      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002bda:	4b24      	ldr	r3, [pc, #144]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be0:	0e1b      	lsrs	r3, r3, #24
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002be8:	4b20      	ldr	r3, [pc, #128]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bee:	0c1b      	lsrs	r3, r3, #16
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	019a      	lsls	r2, r3, #6
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	041b      	lsls	r3, r3, #16
 8002c00:	431a      	orrs	r2, r3
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	061b      	lsls	r3, r3, #24
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	071b      	lsls	r3, r3, #28
 8002c0e:	4917      	ldr	r1, [pc, #92]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c16:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	4911      	ldr	r1, [pc, #68]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c2c:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a0e      	ldr	r2, [pc, #56]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c38:	f7fe fbca 	bl	80013d0 <HAL_GetTick>
 8002c3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c40:	f7fe fbc6 	bl	80013d0 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b64      	cmp	r3, #100	; 0x64
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e007      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c52:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c5e:	d1ef      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3720      	adds	r7, #32
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40023800 	.word	0x40023800

08002c70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e049      	b.n	8002d16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7fe fa3e 	bl	8001118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3304      	adds	r3, #4
 8002cac:	4619      	mov	r1, r3
 8002cae:	4610      	mov	r0, r2
 8002cb0:	f000 faee 	bl	8003290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d001      	beq.n	8002d38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e054      	b.n	8002de2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0201 	orr.w	r2, r2, #1
 8002d4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a26      	ldr	r2, [pc, #152]	; (8002df0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d022      	beq.n	8002da0 <HAL_TIM_Base_Start_IT+0x80>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d62:	d01d      	beq.n	8002da0 <HAL_TIM_Base_Start_IT+0x80>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a22      	ldr	r2, [pc, #136]	; (8002df4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d018      	beq.n	8002da0 <HAL_TIM_Base_Start_IT+0x80>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a21      	ldr	r2, [pc, #132]	; (8002df8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d013      	beq.n	8002da0 <HAL_TIM_Base_Start_IT+0x80>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a1f      	ldr	r2, [pc, #124]	; (8002dfc <HAL_TIM_Base_Start_IT+0xdc>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00e      	beq.n	8002da0 <HAL_TIM_Base_Start_IT+0x80>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a1e      	ldr	r2, [pc, #120]	; (8002e00 <HAL_TIM_Base_Start_IT+0xe0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d009      	beq.n	8002da0 <HAL_TIM_Base_Start_IT+0x80>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a1c      	ldr	r2, [pc, #112]	; (8002e04 <HAL_TIM_Base_Start_IT+0xe4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d004      	beq.n	8002da0 <HAL_TIM_Base_Start_IT+0x80>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a1b      	ldr	r2, [pc, #108]	; (8002e08 <HAL_TIM_Base_Start_IT+0xe8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d115      	bne.n	8002dcc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	4b19      	ldr	r3, [pc, #100]	; (8002e0c <HAL_TIM_Base_Start_IT+0xec>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2b06      	cmp	r3, #6
 8002db0:	d015      	beq.n	8002dde <HAL_TIM_Base_Start_IT+0xbe>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db8:	d011      	beq.n	8002dde <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f042 0201 	orr.w	r2, r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dca:	e008      	b.n	8002dde <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	e000      	b.n	8002de0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40010000 	.word	0x40010000
 8002df4:	40000400 	.word	0x40000400
 8002df8:	40000800 	.word	0x40000800
 8002dfc:	40000c00 	.word	0x40000c00
 8002e00:	40010400 	.word	0x40010400
 8002e04:	40014000 	.word	0x40014000
 8002e08:	40001800 	.word	0x40001800
 8002e0c:	00010007 	.word	0x00010007

08002e10 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0201 	bic.w	r2, r2, #1
 8002e26:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6a1a      	ldr	r2, [r3, #32]
 8002e2e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e32:	4013      	ands	r3, r2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10f      	bne.n	8002e58 <HAL_TIM_Base_Stop_IT+0x48>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6a1a      	ldr	r2, [r3, #32]
 8002e3e:	f240 4344 	movw	r3, #1092	; 0x444
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d107      	bne.n	8002e58 <HAL_TIM_Base_Stop_IT+0x48>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0201 	bic.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d122      	bne.n	8002eca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d11b      	bne.n	8002eca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f06f 0202 	mvn.w	r2, #2
 8002e9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f9cf 	bl	8003254 <HAL_TIM_IC_CaptureCallback>
 8002eb6:	e005      	b.n	8002ec4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f9c1 	bl	8003240 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f9d2 	bl	8003268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d122      	bne.n	8002f1e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d11b      	bne.n	8002f1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f06f 0204 	mvn.w	r2, #4
 8002eee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f9a5 	bl	8003254 <HAL_TIM_IC_CaptureCallback>
 8002f0a:	e005      	b.n	8002f18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f997 	bl	8003240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f9a8 	bl	8003268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d122      	bne.n	8002f72 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d11b      	bne.n	8002f72 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f06f 0208 	mvn.w	r2, #8
 8002f42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2204      	movs	r2, #4
 8002f48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	f003 0303 	and.w	r3, r3, #3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f97b 	bl	8003254 <HAL_TIM_IC_CaptureCallback>
 8002f5e:	e005      	b.n	8002f6c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f96d 	bl	8003240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f97e 	bl	8003268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b10      	cmp	r3, #16
 8002f7e:	d122      	bne.n	8002fc6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f003 0310 	and.w	r3, r3, #16
 8002f8a:	2b10      	cmp	r3, #16
 8002f8c:	d11b      	bne.n	8002fc6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f06f 0210 	mvn.w	r2, #16
 8002f96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2208      	movs	r2, #8
 8002f9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f951 	bl	8003254 <HAL_TIM_IC_CaptureCallback>
 8002fb2:	e005      	b.n	8002fc0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f943 	bl	8003240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f954 	bl	8003268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d10e      	bne.n	8002ff2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d107      	bne.n	8002ff2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f06f 0201 	mvn.w	r2, #1
 8002fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f002 f817 	bl	8005020 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffc:	2b80      	cmp	r3, #128	; 0x80
 8002ffe:	d10e      	bne.n	800301e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300a:	2b80      	cmp	r3, #128	; 0x80
 800300c:	d107      	bne.n	800301e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 fb0b 	bl	8003634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800302c:	d10e      	bne.n	800304c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003038:	2b80      	cmp	r3, #128	; 0x80
 800303a:	d107      	bne.n	800304c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 fafe 	bl	8003648 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003056:	2b40      	cmp	r3, #64	; 0x40
 8003058:	d10e      	bne.n	8003078 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003064:	2b40      	cmp	r3, #64	; 0x40
 8003066:	d107      	bne.n	8003078 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f902 	bl	800327c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f003 0320 	and.w	r3, r3, #32
 8003082:	2b20      	cmp	r3, #32
 8003084:	d10e      	bne.n	80030a4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f003 0320 	and.w	r3, r3, #32
 8003090:	2b20      	cmp	r3, #32
 8003092:	d107      	bne.n	80030a4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f06f 0220 	mvn.w	r2, #32
 800309c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fabe 	bl	8003620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030a4:	bf00      	nop
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_TIM_ConfigClockSource+0x1c>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e0b4      	b.n	8003232 <HAL_TIM_ConfigClockSource+0x186>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	4b56      	ldr	r3, [pc, #344]	; (800323c <HAL_TIM_ConfigClockSource+0x190>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003100:	d03e      	beq.n	8003180 <HAL_TIM_ConfigClockSource+0xd4>
 8003102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003106:	f200 8087 	bhi.w	8003218 <HAL_TIM_ConfigClockSource+0x16c>
 800310a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800310e:	f000 8086 	beq.w	800321e <HAL_TIM_ConfigClockSource+0x172>
 8003112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003116:	d87f      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x16c>
 8003118:	2b70      	cmp	r3, #112	; 0x70
 800311a:	d01a      	beq.n	8003152 <HAL_TIM_ConfigClockSource+0xa6>
 800311c:	2b70      	cmp	r3, #112	; 0x70
 800311e:	d87b      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x16c>
 8003120:	2b60      	cmp	r3, #96	; 0x60
 8003122:	d050      	beq.n	80031c6 <HAL_TIM_ConfigClockSource+0x11a>
 8003124:	2b60      	cmp	r3, #96	; 0x60
 8003126:	d877      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x16c>
 8003128:	2b50      	cmp	r3, #80	; 0x50
 800312a:	d03c      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0xfa>
 800312c:	2b50      	cmp	r3, #80	; 0x50
 800312e:	d873      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x16c>
 8003130:	2b40      	cmp	r3, #64	; 0x40
 8003132:	d058      	beq.n	80031e6 <HAL_TIM_ConfigClockSource+0x13a>
 8003134:	2b40      	cmp	r3, #64	; 0x40
 8003136:	d86f      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x16c>
 8003138:	2b30      	cmp	r3, #48	; 0x30
 800313a:	d064      	beq.n	8003206 <HAL_TIM_ConfigClockSource+0x15a>
 800313c:	2b30      	cmp	r3, #48	; 0x30
 800313e:	d86b      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x16c>
 8003140:	2b20      	cmp	r3, #32
 8003142:	d060      	beq.n	8003206 <HAL_TIM_ConfigClockSource+0x15a>
 8003144:	2b20      	cmp	r3, #32
 8003146:	d867      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x16c>
 8003148:	2b00      	cmp	r3, #0
 800314a:	d05c      	beq.n	8003206 <HAL_TIM_ConfigClockSource+0x15a>
 800314c:	2b10      	cmp	r3, #16
 800314e:	d05a      	beq.n	8003206 <HAL_TIM_ConfigClockSource+0x15a>
 8003150:	e062      	b.n	8003218 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	6899      	ldr	r1, [r3, #8]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f000 f9af 	bl	80034c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003174:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	609a      	str	r2, [r3, #8]
      break;
 800317e:	e04f      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6818      	ldr	r0, [r3, #0]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	6899      	ldr	r1, [r3, #8]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f000 f998 	bl	80034c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031a2:	609a      	str	r2, [r3, #8]
      break;
 80031a4:	e03c      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6818      	ldr	r0, [r3, #0]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	6859      	ldr	r1, [r3, #4]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	461a      	mov	r2, r3
 80031b4:	f000 f90c 	bl	80033d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2150      	movs	r1, #80	; 0x50
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 f965 	bl	800348e <TIM_ITRx_SetConfig>
      break;
 80031c4:	e02c      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	6859      	ldr	r1, [r3, #4]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	461a      	mov	r2, r3
 80031d4:	f000 f92b 	bl	800342e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2160      	movs	r1, #96	; 0x60
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 f955 	bl	800348e <TIM_ITRx_SetConfig>
      break;
 80031e4:	e01c      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6818      	ldr	r0, [r3, #0]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	6859      	ldr	r1, [r3, #4]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	461a      	mov	r2, r3
 80031f4:	f000 f8ec 	bl	80033d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2140      	movs	r1, #64	; 0x40
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 f945 	bl	800348e <TIM_ITRx_SetConfig>
      break;
 8003204:	e00c      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4619      	mov	r1, r3
 8003210:	4610      	mov	r0, r2
 8003212:	f000 f93c 	bl	800348e <TIM_ITRx_SetConfig>
      break;
 8003216:	e003      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	73fb      	strb	r3, [r7, #15]
      break;
 800321c:	e000      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800321e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003230:	7bfb      	ldrb	r3, [r7, #15]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	fffeff88 	.word	0xfffeff88

08003240 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a40      	ldr	r2, [pc, #256]	; (80033a4 <TIM_Base_SetConfig+0x114>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d013      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ae:	d00f      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a3d      	ldr	r2, [pc, #244]	; (80033a8 <TIM_Base_SetConfig+0x118>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d00b      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a3c      	ldr	r2, [pc, #240]	; (80033ac <TIM_Base_SetConfig+0x11c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d007      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a3b      	ldr	r2, [pc, #236]	; (80033b0 <TIM_Base_SetConfig+0x120>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d003      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a3a      	ldr	r2, [pc, #232]	; (80033b4 <TIM_Base_SetConfig+0x124>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d108      	bne.n	80032e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a2f      	ldr	r2, [pc, #188]	; (80033a4 <TIM_Base_SetConfig+0x114>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d02b      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f0:	d027      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a2c      	ldr	r2, [pc, #176]	; (80033a8 <TIM_Base_SetConfig+0x118>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d023      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a2b      	ldr	r2, [pc, #172]	; (80033ac <TIM_Base_SetConfig+0x11c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d01f      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a2a      	ldr	r2, [pc, #168]	; (80033b0 <TIM_Base_SetConfig+0x120>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d01b      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a29      	ldr	r2, [pc, #164]	; (80033b4 <TIM_Base_SetConfig+0x124>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d017      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a28      	ldr	r2, [pc, #160]	; (80033b8 <TIM_Base_SetConfig+0x128>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d013      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a27      	ldr	r2, [pc, #156]	; (80033bc <TIM_Base_SetConfig+0x12c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00f      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a26      	ldr	r2, [pc, #152]	; (80033c0 <TIM_Base_SetConfig+0x130>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00b      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a25      	ldr	r2, [pc, #148]	; (80033c4 <TIM_Base_SetConfig+0x134>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d007      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a24      	ldr	r2, [pc, #144]	; (80033c8 <TIM_Base_SetConfig+0x138>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d003      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a23      	ldr	r2, [pc, #140]	; (80033cc <TIM_Base_SetConfig+0x13c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d108      	bne.n	8003354 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4313      	orrs	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a0a      	ldr	r2, [pc, #40]	; (80033a4 <TIM_Base_SetConfig+0x114>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d003      	beq.n	8003388 <TIM_Base_SetConfig+0xf8>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a0c      	ldr	r2, [pc, #48]	; (80033b4 <TIM_Base_SetConfig+0x124>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d103      	bne.n	8003390 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	615a      	str	r2, [r3, #20]
}
 8003396:	bf00      	nop
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40010000 	.word	0x40010000
 80033a8:	40000400 	.word	0x40000400
 80033ac:	40000800 	.word	0x40000800
 80033b0:	40000c00 	.word	0x40000c00
 80033b4:	40010400 	.word	0x40010400
 80033b8:	40014000 	.word	0x40014000
 80033bc:	40014400 	.word	0x40014400
 80033c0:	40014800 	.word	0x40014800
 80033c4:	40001800 	.word	0x40001800
 80033c8:	40001c00 	.word	0x40001c00
 80033cc:	40002000 	.word	0x40002000

080033d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	f023 0201 	bic.w	r2, r3, #1
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4313      	orrs	r3, r2
 8003404:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f023 030a 	bic.w	r3, r3, #10
 800340c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	4313      	orrs	r3, r2
 8003414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	621a      	str	r2, [r3, #32]
}
 8003422:	bf00      	nop
 8003424:	371c      	adds	r7, #28
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800342e:	b480      	push	{r7}
 8003430:	b087      	sub	sp, #28
 8003432:	af00      	add	r7, sp, #0
 8003434:	60f8      	str	r0, [r7, #12]
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	f023 0210 	bic.w	r2, r3, #16
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003458:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	031b      	lsls	r3, r3, #12
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	4313      	orrs	r3, r2
 8003462:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800346a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	621a      	str	r2, [r3, #32]
}
 8003482:	bf00      	nop
 8003484:	371c      	adds	r7, #28
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800348e:	b480      	push	{r7}
 8003490:	b085      	sub	sp, #20
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f043 0307 	orr.w	r3, r3, #7
 80034b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	609a      	str	r2, [r3, #8]
}
 80034b8:	bf00      	nop
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
 80034d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	021a      	lsls	r2, r3, #8
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	609a      	str	r2, [r3, #8]
}
 80034f8:	bf00      	nop
 80034fa:	371c      	adds	r7, #28
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003518:	2302      	movs	r3, #2
 800351a:	e06d      	b.n	80035f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a30      	ldr	r2, [pc, #192]	; (8003604 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d004      	beq.n	8003550 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a2f      	ldr	r2, [pc, #188]	; (8003608 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d108      	bne.n	8003562 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003556:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	4313      	orrs	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003568:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4313      	orrs	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a20      	ldr	r2, [pc, #128]	; (8003604 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d022      	beq.n	80035cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358e:	d01d      	beq.n	80035cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1d      	ldr	r2, [pc, #116]	; (800360c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d018      	beq.n	80035cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1c      	ldr	r2, [pc, #112]	; (8003610 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d013      	beq.n	80035cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1a      	ldr	r2, [pc, #104]	; (8003614 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00e      	beq.n	80035cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a15      	ldr	r2, [pc, #84]	; (8003608 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d009      	beq.n	80035cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a16      	ldr	r2, [pc, #88]	; (8003618 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d004      	beq.n	80035cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a15      	ldr	r2, [pc, #84]	; (800361c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d10c      	bne.n	80035e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	40010000 	.word	0x40010000
 8003608:	40010400 	.word	0x40010400
 800360c:	40000400 	.word	0x40000400
 8003610:	40000800 	.word	0x40000800
 8003614:	40000c00 	.word	0x40000c00
 8003618:	40014000 	.word	0x40014000
 800361c:	40001800 	.word	0x40001800

08003620 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e040      	b.n	80036f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003672:	2b00      	cmp	r3, #0
 8003674:	d106      	bne.n	8003684 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7fd fdc6 	bl	8001210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2224      	movs	r2, #36	; 0x24
 8003688:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0201 	bic.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 fc98 	bl	8003fd0 <UART_SetConfig>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e022      	b.n	80036f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 fef0 	bl	8004498 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0201 	orr.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 ff77 	bl	80045dc <UART_CheckIdleState>
 80036ee:	4603      	mov	r3, r0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b08b      	sub	sp, #44	; 0x2c
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	4613      	mov	r3, r2
 8003704:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800370a:	2b20      	cmp	r3, #32
 800370c:	d156      	bne.n	80037bc <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <HAL_UART_Transmit_IT+0x22>
 8003714:	88fb      	ldrh	r3, [r7, #6]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e04f      	b.n	80037be <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003724:	2b01      	cmp	r3, #1
 8003726:	d101      	bne.n	800372c <HAL_UART_Transmit_IT+0x34>
 8003728:	2302      	movs	r3, #2
 800372a:	e048      	b.n	80037be <HAL_UART_Transmit_IT+0xc6>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	88fa      	ldrh	r2, [r7, #6]
 800373e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	88fa      	ldrh	r2, [r7, #6]
 8003746:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2221      	movs	r2, #33	; 0x21
 800375c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003766:	d107      	bne.n	8003778 <HAL_UART_Transmit_IT+0x80>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d103      	bne.n	8003778 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4a16      	ldr	r2, [pc, #88]	; (80037cc <HAL_UART_Transmit_IT+0xd4>)
 8003774:	669a      	str	r2, [r3, #104]	; 0x68
 8003776:	e002      	b.n	800377e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4a15      	ldr	r2, [pc, #84]	; (80037d0 <HAL_UART_Transmit_IT+0xd8>)
 800377c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	e853 3f00 	ldrex	r3, [r3]
 8003792:	613b      	str	r3, [r7, #16]
   return(result);
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	623b      	str	r3, [r7, #32]
 80037a6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a8:	69f9      	ldr	r1, [r7, #28]
 80037aa:	6a3a      	ldr	r2, [r7, #32]
 80037ac:	e841 2300 	strex	r3, r2, [r1]
 80037b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e6      	bne.n	8003786 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	e000      	b.n	80037be <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80037bc:	2302      	movs	r3, #2
  }
}
 80037be:	4618      	mov	r0, r3
 80037c0:	372c      	adds	r7, #44	; 0x2c
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	08004b51 	.word	0x08004b51
 80037d0:	08004a9b 	.word	0x08004a9b

080037d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08a      	sub	sp, #40	; 0x28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	4613      	mov	r3, r2
 80037e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037e6:	2b20      	cmp	r3, #32
 80037e8:	d13d      	bne.n	8003866 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <HAL_UART_Receive_IT+0x22>
 80037f0:	88fb      	ldrh	r3, [r7, #6]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e036      	b.n	8003868 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_UART_Receive_IT+0x34>
 8003804:	2302      	movs	r3, #2
 8003806:	e02f      	b.n	8003868 <HAL_UART_Receive_IT+0x94>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d018      	beq.n	8003856 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	e853 3f00 	ldrex	r3, [r3]
 8003830:	613b      	str	r3, [r7, #16]
   return(result);
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003838:	627b      	str	r3, [r7, #36]	; 0x24
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	623b      	str	r3, [r7, #32]
 8003844:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003846:	69f9      	ldr	r1, [r7, #28]
 8003848:	6a3a      	ldr	r2, [r7, #32]
 800384a:	e841 2300 	strex	r3, r2, [r1]
 800384e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1e6      	bne.n	8003824 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003856:	88fb      	ldrh	r3, [r7, #6]
 8003858:	461a      	mov	r2, r3
 800385a:	68b9      	ldr	r1, [r7, #8]
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 ffb5 	bl	80047cc <UART_Start_Receive_IT>
 8003862:	4603      	mov	r3, r0
 8003864:	e000      	b.n	8003868 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003866:	2302      	movs	r3, #2
  }
}
 8003868:	4618      	mov	r0, r3
 800386a:	3728      	adds	r7, #40	; 0x28
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b09a      	sub	sp, #104	; 0x68
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003880:	e853 3f00 	ldrex	r3, [r3]
 8003884:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003888:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800388c:	667b      	str	r3, [r7, #100]	; 0x64
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003896:	657b      	str	r3, [r7, #84]	; 0x54
 8003898:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800389c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800389e:	e841 2300 	strex	r3, r2, [r1]
 80038a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80038a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1e6      	bne.n	8003878 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3308      	adds	r3, #8
 80038b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b4:	e853 3f00 	ldrex	r3, [r3]
 80038b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038bc:	f023 0301 	bic.w	r3, r3, #1
 80038c0:	663b      	str	r3, [r7, #96]	; 0x60
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3308      	adds	r3, #8
 80038c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038ca:	643a      	str	r2, [r7, #64]	; 0x40
 80038cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038d2:	e841 2300 	strex	r3, r2, [r1]
 80038d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1e5      	bne.n	80038aa <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d118      	bne.n	8003918 <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	e853 3f00 	ldrex	r3, [r3]
 80038f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f023 0310 	bic.w	r3, r3, #16
 80038fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003906:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003908:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800390a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800390c:	e841 2300 	strex	r3, r2, [r1]
 8003910:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1e6      	bne.n	80038e6 <HAL_UART_AbortReceive_IT+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b40      	cmp	r3, #64	; 0x40
 8003924:	d14e      	bne.n	80039c4 <HAL_UART_AbortReceive_IT+0x154>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3308      	adds	r3, #8
 800392c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	e853 3f00 	ldrex	r3, [r3]
 8003934:	60bb      	str	r3, [r7, #8]
   return(result);
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800393c:	65bb      	str	r3, [r7, #88]	; 0x58
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	3308      	adds	r3, #8
 8003944:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003946:	61ba      	str	r2, [r7, #24]
 8003948:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394a:	6979      	ldr	r1, [r7, #20]
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	e841 2300 	strex	r3, r2, [r1]
 8003952:	613b      	str	r3, [r7, #16]
   return(result);
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1e5      	bne.n	8003926 <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395e:	2b00      	cmp	r3, #0
 8003960:	d013      	beq.n	800398a <HAL_UART_AbortReceive_IT+0x11a>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003966:	4a24      	ldr	r2, [pc, #144]	; (80039f8 <HAL_UART_AbortReceive_IT+0x188>)
 8003968:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396e:	4618      	mov	r0, r3
 8003970:	f7fd febb 	bl	80016ea <HAL_DMA_Abort_IT>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d038      	beq.n	80039ec <HAL_UART_AbortReceive_IT+0x17c>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003984:	4610      	mov	r0, r2
 8003986:	4798      	blx	r3
 8003988:	e030      	b.n	80039ec <HAL_UART_AbortReceive_IT+0x17c>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	220f      	movs	r2, #15
 800399e:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699a      	ldr	r2, [r3, #24]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0208 	orr.w	r2, r2, #8
 80039ae:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2220      	movs	r2, #32
 80039b4:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 faf1 	bl	8003fa4 <HAL_UART_AbortReceiveCpltCallback>
 80039c2:	e013      	b.n	80039ec <HAL_UART_AbortReceive_IT+0x17c>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	220f      	movs	r2, #15
 80039d8:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2220      	movs	r2, #32
 80039de:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 fadc 	bl	8003fa4 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3768      	adds	r7, #104	; 0x68
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	08004a53 	.word	0x08004a53

080039fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b0ba      	sub	sp, #232	; 0xe8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003a26:	f640 030f 	movw	r3, #2063	; 0x80f
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003a30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d115      	bne.n	8003a64 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a3c:	f003 0320 	and.w	r3, r3, #32
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00f      	beq.n	8003a64 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a48:	f003 0320 	and.w	r3, r3, #32
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d009      	beq.n	8003a64 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 828f 	beq.w	8003f78 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	4798      	blx	r3
      }
      return;
 8003a62:	e289      	b.n	8003f78 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 8117 	beq.w	8003c9c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003a7e:	4b85      	ldr	r3, [pc, #532]	; (8003c94 <HAL_UART_IRQHandler+0x298>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 810a 	beq.w	8003c9c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d011      	beq.n	8003ab8 <HAL_UART_IRQHandler+0xbc>
 8003a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00b      	beq.n	8003ab8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aae:	f043 0201 	orr.w	r2, r3, #1
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d011      	beq.n	8003ae8 <HAL_UART_IRQHandler+0xec>
 8003ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00b      	beq.n	8003ae8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ade:	f043 0204 	orr.w	r2, r3, #4
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d011      	beq.n	8003b18 <HAL_UART_IRQHandler+0x11c>
 8003af4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00b      	beq.n	8003b18 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2204      	movs	r2, #4
 8003b06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b0e:	f043 0202 	orr.w	r2, r3, #2
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d017      	beq.n	8003b54 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d105      	bne.n	8003b3c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b34:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00b      	beq.n	8003b54 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2208      	movs	r2, #8
 8003b42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b4a:	f043 0208 	orr.w	r2, r3, #8
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d012      	beq.n	8003b86 <HAL_UART_IRQHandler+0x18a>
 8003b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00c      	beq.n	8003b86 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b7c:	f043 0220 	orr.w	r2, r3, #32
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 81f5 	beq.w	8003f7c <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b96:	f003 0320 	and.w	r3, r3, #32
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00d      	beq.n	8003bba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d007      	beq.n	8003bba <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bce:	2b40      	cmp	r3, #64	; 0x40
 8003bd0:	d005      	beq.n	8003bde <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003bd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bd6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d04f      	beq.n	8003c7e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 febe 	bl	8004960 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bee:	2b40      	cmp	r3, #64	; 0x40
 8003bf0:	d141      	bne.n	8003c76 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3308      	adds	r3, #8
 8003bf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c00:	e853 3f00 	ldrex	r3, [r3]
 8003c04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3308      	adds	r3, #8
 8003c1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1d9      	bne.n	8003bf2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d013      	beq.n	8003c6e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4a:	4a13      	ldr	r2, [pc, #76]	; (8003c98 <HAL_UART_IRQHandler+0x29c>)
 8003c4c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fd fd49 	bl	80016ea <HAL_DMA_Abort_IT>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d017      	beq.n	8003c8e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003c68:	4610      	mov	r0, r2
 8003c6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6c:	e00f      	b.n	8003c8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f98e 	bl	8003f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c74:	e00b      	b.n	8003c8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f98a 	bl	8003f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c7c:	e007      	b.n	8003c8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f986 	bl	8003f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003c8c:	e176      	b.n	8003f7c <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c8e:	bf00      	nop
    return;
 8003c90:	e174      	b.n	8003f7c <HAL_UART_IRQHandler+0x580>
 8003c92:	bf00      	nop
 8003c94:	04000120 	.word	0x04000120
 8003c98:	08004a27 	.word	0x08004a27

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	f040 8144 	bne.w	8003f2e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 813d 	beq.w	8003f2e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb8:	f003 0310 	and.w	r3, r3, #16
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 8136 	beq.w	8003f2e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2210      	movs	r2, #16
 8003cc8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd4:	2b40      	cmp	r3, #64	; 0x40
 8003cd6:	f040 80b2 	bne.w	8003e3e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ce6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 8148 	beq.w	8003f80 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003cf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	f080 8140 	bcs.w	8003f80 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d14:	f000 8085 	beq.w	8003e22 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d24:	e853 3f00 	ldrex	r3, [r3]
 8003d28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d46:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d52:	e841 2300 	strex	r3, r2, [r1]
 8003d56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1da      	bne.n	8003d18 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3308      	adds	r3, #8
 8003d68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d6c:	e853 3f00 	ldrex	r3, [r3]
 8003d70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d74:	f023 0301 	bic.w	r3, r3, #1
 8003d78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3308      	adds	r3, #8
 8003d82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d92:	e841 2300 	strex	r3, r2, [r1]
 8003d96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1e1      	bne.n	8003d62 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3308      	adds	r3, #8
 8003da4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003da8:	e853 3f00 	ldrex	r3, [r3]
 8003dac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003db4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3308      	adds	r3, #8
 8003dbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003dc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003dc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003dc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003dca:	e841 2300 	strex	r3, r2, [r1]
 8003dce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003dd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1e3      	bne.n	8003d9e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dea:	e853 3f00 	ldrex	r3, [r3]
 8003dee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003df0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df2:	f023 0310 	bic.w	r3, r3, #16
 8003df6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e04:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e06:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e0c:	e841 2300 	strex	r3, r2, [r1]
 8003e10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1e4      	bne.n	8003de2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fd fbf4 	bl	800160a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	4619      	mov	r1, r3
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f8be 	bl	8003fb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e3c:	e0a0      	b.n	8003f80 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 8092 	beq.w	8003f84 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8003e60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 808d 	beq.w	8003f84 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e72:	e853 3f00 	ldrex	r3, [r3]
 8003e76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	461a      	mov	r2, r3
 8003e88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8003e8e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e94:	e841 2300 	strex	r3, r2, [r1]
 8003e98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1e4      	bne.n	8003e6a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3308      	adds	r3, #8
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	e853 3f00 	ldrex	r3, [r3]
 8003eae:	623b      	str	r3, [r7, #32]
   return(result);
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	f023 0301 	bic.w	r3, r3, #1
 8003eb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3308      	adds	r3, #8
 8003ec0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ec4:	633a      	str	r2, [r7, #48]	; 0x30
 8003ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003eca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ecc:	e841 2300 	strex	r3, r2, [r1]
 8003ed0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1e3      	bne.n	8003ea0 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2220      	movs	r2, #32
 8003edc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	e853 3f00 	ldrex	r3, [r3]
 8003ef6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0310 	bic.w	r3, r3, #16
 8003efe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	461a      	mov	r2, r3
 8003f08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f10:	69b9      	ldr	r1, [r7, #24]
 8003f12:	69fa      	ldr	r2, [r7, #28]
 8003f14:	e841 2300 	strex	r3, r2, [r1]
 8003f18:	617b      	str	r3, [r7, #20]
   return(result);
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1e4      	bne.n	8003eea <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f24:	4619      	mov	r1, r3
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f846 	bl	8003fb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f2c:	e02a      	b.n	8003f84 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00e      	beq.n	8003f58 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d008      	beq.n	8003f58 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d01c      	beq.n	8003f88 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	4798      	blx	r3
    }
    return;
 8003f56:	e017      	b.n	8003f88 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d012      	beq.n	8003f8a <HAL_UART_IRQHandler+0x58e>
 8003f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00c      	beq.n	8003f8a <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 fe4d 	bl	8004c10 <UART_EndTransmit_IT>
    return;
 8003f76:	e008      	b.n	8003f8a <HAL_UART_IRQHandler+0x58e>
      return;
 8003f78:	bf00      	nop
 8003f7a:	e006      	b.n	8003f8a <HAL_UART_IRQHandler+0x58e>
    return;
 8003f7c:	bf00      	nop
 8003f7e:	e004      	b.n	8003f8a <HAL_UART_IRQHandler+0x58e>
      return;
 8003f80:	bf00      	nop
 8003f82:	e002      	b.n	8003f8a <HAL_UART_IRQHandler+0x58e>
      return;
 8003f84:	bf00      	nop
 8003f86:	e000      	b.n	8003f8a <HAL_UART_IRQHandler+0x58e>
    return;
 8003f88:	bf00      	nop
  }

}
 8003f8a:	37e8      	adds	r7, #232	; 0xe8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	4ba6      	ldr	r3, [pc, #664]	; (8004294 <UART_SetConfig+0x2c4>)
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6812      	ldr	r2, [r2, #0]
 8004002:	6979      	ldr	r1, [r7, #20]
 8004004:	430b      	orrs	r3, r1
 8004006:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	430a      	orrs	r2, r1
 8004040:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a94      	ldr	r2, [pc, #592]	; (8004298 <UART_SetConfig+0x2c8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d120      	bne.n	800408e <UART_SetConfig+0xbe>
 800404c:	4b93      	ldr	r3, [pc, #588]	; (800429c <UART_SetConfig+0x2cc>)
 800404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	2b03      	cmp	r3, #3
 8004058:	d816      	bhi.n	8004088 <UART_SetConfig+0xb8>
 800405a:	a201      	add	r2, pc, #4	; (adr r2, 8004060 <UART_SetConfig+0x90>)
 800405c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004060:	08004071 	.word	0x08004071
 8004064:	0800407d 	.word	0x0800407d
 8004068:	08004077 	.word	0x08004077
 800406c:	08004083 	.word	0x08004083
 8004070:	2301      	movs	r3, #1
 8004072:	77fb      	strb	r3, [r7, #31]
 8004074:	e150      	b.n	8004318 <UART_SetConfig+0x348>
 8004076:	2302      	movs	r3, #2
 8004078:	77fb      	strb	r3, [r7, #31]
 800407a:	e14d      	b.n	8004318 <UART_SetConfig+0x348>
 800407c:	2304      	movs	r3, #4
 800407e:	77fb      	strb	r3, [r7, #31]
 8004080:	e14a      	b.n	8004318 <UART_SetConfig+0x348>
 8004082:	2308      	movs	r3, #8
 8004084:	77fb      	strb	r3, [r7, #31]
 8004086:	e147      	b.n	8004318 <UART_SetConfig+0x348>
 8004088:	2310      	movs	r3, #16
 800408a:	77fb      	strb	r3, [r7, #31]
 800408c:	e144      	b.n	8004318 <UART_SetConfig+0x348>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a83      	ldr	r2, [pc, #524]	; (80042a0 <UART_SetConfig+0x2d0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d132      	bne.n	80040fe <UART_SetConfig+0x12e>
 8004098:	4b80      	ldr	r3, [pc, #512]	; (800429c <UART_SetConfig+0x2cc>)
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	2b0c      	cmp	r3, #12
 80040a4:	d828      	bhi.n	80040f8 <UART_SetConfig+0x128>
 80040a6:	a201      	add	r2, pc, #4	; (adr r2, 80040ac <UART_SetConfig+0xdc>)
 80040a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ac:	080040e1 	.word	0x080040e1
 80040b0:	080040f9 	.word	0x080040f9
 80040b4:	080040f9 	.word	0x080040f9
 80040b8:	080040f9 	.word	0x080040f9
 80040bc:	080040ed 	.word	0x080040ed
 80040c0:	080040f9 	.word	0x080040f9
 80040c4:	080040f9 	.word	0x080040f9
 80040c8:	080040f9 	.word	0x080040f9
 80040cc:	080040e7 	.word	0x080040e7
 80040d0:	080040f9 	.word	0x080040f9
 80040d4:	080040f9 	.word	0x080040f9
 80040d8:	080040f9 	.word	0x080040f9
 80040dc:	080040f3 	.word	0x080040f3
 80040e0:	2300      	movs	r3, #0
 80040e2:	77fb      	strb	r3, [r7, #31]
 80040e4:	e118      	b.n	8004318 <UART_SetConfig+0x348>
 80040e6:	2302      	movs	r3, #2
 80040e8:	77fb      	strb	r3, [r7, #31]
 80040ea:	e115      	b.n	8004318 <UART_SetConfig+0x348>
 80040ec:	2304      	movs	r3, #4
 80040ee:	77fb      	strb	r3, [r7, #31]
 80040f0:	e112      	b.n	8004318 <UART_SetConfig+0x348>
 80040f2:	2308      	movs	r3, #8
 80040f4:	77fb      	strb	r3, [r7, #31]
 80040f6:	e10f      	b.n	8004318 <UART_SetConfig+0x348>
 80040f8:	2310      	movs	r3, #16
 80040fa:	77fb      	strb	r3, [r7, #31]
 80040fc:	e10c      	b.n	8004318 <UART_SetConfig+0x348>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a68      	ldr	r2, [pc, #416]	; (80042a4 <UART_SetConfig+0x2d4>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d120      	bne.n	800414a <UART_SetConfig+0x17a>
 8004108:	4b64      	ldr	r3, [pc, #400]	; (800429c <UART_SetConfig+0x2cc>)
 800410a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004112:	2b30      	cmp	r3, #48	; 0x30
 8004114:	d013      	beq.n	800413e <UART_SetConfig+0x16e>
 8004116:	2b30      	cmp	r3, #48	; 0x30
 8004118:	d814      	bhi.n	8004144 <UART_SetConfig+0x174>
 800411a:	2b20      	cmp	r3, #32
 800411c:	d009      	beq.n	8004132 <UART_SetConfig+0x162>
 800411e:	2b20      	cmp	r3, #32
 8004120:	d810      	bhi.n	8004144 <UART_SetConfig+0x174>
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <UART_SetConfig+0x15c>
 8004126:	2b10      	cmp	r3, #16
 8004128:	d006      	beq.n	8004138 <UART_SetConfig+0x168>
 800412a:	e00b      	b.n	8004144 <UART_SetConfig+0x174>
 800412c:	2300      	movs	r3, #0
 800412e:	77fb      	strb	r3, [r7, #31]
 8004130:	e0f2      	b.n	8004318 <UART_SetConfig+0x348>
 8004132:	2302      	movs	r3, #2
 8004134:	77fb      	strb	r3, [r7, #31]
 8004136:	e0ef      	b.n	8004318 <UART_SetConfig+0x348>
 8004138:	2304      	movs	r3, #4
 800413a:	77fb      	strb	r3, [r7, #31]
 800413c:	e0ec      	b.n	8004318 <UART_SetConfig+0x348>
 800413e:	2308      	movs	r3, #8
 8004140:	77fb      	strb	r3, [r7, #31]
 8004142:	e0e9      	b.n	8004318 <UART_SetConfig+0x348>
 8004144:	2310      	movs	r3, #16
 8004146:	77fb      	strb	r3, [r7, #31]
 8004148:	e0e6      	b.n	8004318 <UART_SetConfig+0x348>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a56      	ldr	r2, [pc, #344]	; (80042a8 <UART_SetConfig+0x2d8>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d120      	bne.n	8004196 <UART_SetConfig+0x1c6>
 8004154:	4b51      	ldr	r3, [pc, #324]	; (800429c <UART_SetConfig+0x2cc>)
 8004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800415e:	2bc0      	cmp	r3, #192	; 0xc0
 8004160:	d013      	beq.n	800418a <UART_SetConfig+0x1ba>
 8004162:	2bc0      	cmp	r3, #192	; 0xc0
 8004164:	d814      	bhi.n	8004190 <UART_SetConfig+0x1c0>
 8004166:	2b80      	cmp	r3, #128	; 0x80
 8004168:	d009      	beq.n	800417e <UART_SetConfig+0x1ae>
 800416a:	2b80      	cmp	r3, #128	; 0x80
 800416c:	d810      	bhi.n	8004190 <UART_SetConfig+0x1c0>
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <UART_SetConfig+0x1a8>
 8004172:	2b40      	cmp	r3, #64	; 0x40
 8004174:	d006      	beq.n	8004184 <UART_SetConfig+0x1b4>
 8004176:	e00b      	b.n	8004190 <UART_SetConfig+0x1c0>
 8004178:	2300      	movs	r3, #0
 800417a:	77fb      	strb	r3, [r7, #31]
 800417c:	e0cc      	b.n	8004318 <UART_SetConfig+0x348>
 800417e:	2302      	movs	r3, #2
 8004180:	77fb      	strb	r3, [r7, #31]
 8004182:	e0c9      	b.n	8004318 <UART_SetConfig+0x348>
 8004184:	2304      	movs	r3, #4
 8004186:	77fb      	strb	r3, [r7, #31]
 8004188:	e0c6      	b.n	8004318 <UART_SetConfig+0x348>
 800418a:	2308      	movs	r3, #8
 800418c:	77fb      	strb	r3, [r7, #31]
 800418e:	e0c3      	b.n	8004318 <UART_SetConfig+0x348>
 8004190:	2310      	movs	r3, #16
 8004192:	77fb      	strb	r3, [r7, #31]
 8004194:	e0c0      	b.n	8004318 <UART_SetConfig+0x348>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a44      	ldr	r2, [pc, #272]	; (80042ac <UART_SetConfig+0x2dc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d125      	bne.n	80041ec <UART_SetConfig+0x21c>
 80041a0:	4b3e      	ldr	r3, [pc, #248]	; (800429c <UART_SetConfig+0x2cc>)
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041ae:	d017      	beq.n	80041e0 <UART_SetConfig+0x210>
 80041b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041b4:	d817      	bhi.n	80041e6 <UART_SetConfig+0x216>
 80041b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ba:	d00b      	beq.n	80041d4 <UART_SetConfig+0x204>
 80041bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041c0:	d811      	bhi.n	80041e6 <UART_SetConfig+0x216>
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <UART_SetConfig+0x1fe>
 80041c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ca:	d006      	beq.n	80041da <UART_SetConfig+0x20a>
 80041cc:	e00b      	b.n	80041e6 <UART_SetConfig+0x216>
 80041ce:	2300      	movs	r3, #0
 80041d0:	77fb      	strb	r3, [r7, #31]
 80041d2:	e0a1      	b.n	8004318 <UART_SetConfig+0x348>
 80041d4:	2302      	movs	r3, #2
 80041d6:	77fb      	strb	r3, [r7, #31]
 80041d8:	e09e      	b.n	8004318 <UART_SetConfig+0x348>
 80041da:	2304      	movs	r3, #4
 80041dc:	77fb      	strb	r3, [r7, #31]
 80041de:	e09b      	b.n	8004318 <UART_SetConfig+0x348>
 80041e0:	2308      	movs	r3, #8
 80041e2:	77fb      	strb	r3, [r7, #31]
 80041e4:	e098      	b.n	8004318 <UART_SetConfig+0x348>
 80041e6:	2310      	movs	r3, #16
 80041e8:	77fb      	strb	r3, [r7, #31]
 80041ea:	e095      	b.n	8004318 <UART_SetConfig+0x348>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a2f      	ldr	r2, [pc, #188]	; (80042b0 <UART_SetConfig+0x2e0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d125      	bne.n	8004242 <UART_SetConfig+0x272>
 80041f6:	4b29      	ldr	r3, [pc, #164]	; (800429c <UART_SetConfig+0x2cc>)
 80041f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004200:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004204:	d017      	beq.n	8004236 <UART_SetConfig+0x266>
 8004206:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800420a:	d817      	bhi.n	800423c <UART_SetConfig+0x26c>
 800420c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004210:	d00b      	beq.n	800422a <UART_SetConfig+0x25a>
 8004212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004216:	d811      	bhi.n	800423c <UART_SetConfig+0x26c>
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <UART_SetConfig+0x254>
 800421c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004220:	d006      	beq.n	8004230 <UART_SetConfig+0x260>
 8004222:	e00b      	b.n	800423c <UART_SetConfig+0x26c>
 8004224:	2301      	movs	r3, #1
 8004226:	77fb      	strb	r3, [r7, #31]
 8004228:	e076      	b.n	8004318 <UART_SetConfig+0x348>
 800422a:	2302      	movs	r3, #2
 800422c:	77fb      	strb	r3, [r7, #31]
 800422e:	e073      	b.n	8004318 <UART_SetConfig+0x348>
 8004230:	2304      	movs	r3, #4
 8004232:	77fb      	strb	r3, [r7, #31]
 8004234:	e070      	b.n	8004318 <UART_SetConfig+0x348>
 8004236:	2308      	movs	r3, #8
 8004238:	77fb      	strb	r3, [r7, #31]
 800423a:	e06d      	b.n	8004318 <UART_SetConfig+0x348>
 800423c:	2310      	movs	r3, #16
 800423e:	77fb      	strb	r3, [r7, #31]
 8004240:	e06a      	b.n	8004318 <UART_SetConfig+0x348>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a1b      	ldr	r2, [pc, #108]	; (80042b4 <UART_SetConfig+0x2e4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d138      	bne.n	80042be <UART_SetConfig+0x2ee>
 800424c:	4b13      	ldr	r3, [pc, #76]	; (800429c <UART_SetConfig+0x2cc>)
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004252:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004256:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800425a:	d017      	beq.n	800428c <UART_SetConfig+0x2bc>
 800425c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004260:	d82a      	bhi.n	80042b8 <UART_SetConfig+0x2e8>
 8004262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004266:	d00b      	beq.n	8004280 <UART_SetConfig+0x2b0>
 8004268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800426c:	d824      	bhi.n	80042b8 <UART_SetConfig+0x2e8>
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <UART_SetConfig+0x2aa>
 8004272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004276:	d006      	beq.n	8004286 <UART_SetConfig+0x2b6>
 8004278:	e01e      	b.n	80042b8 <UART_SetConfig+0x2e8>
 800427a:	2300      	movs	r3, #0
 800427c:	77fb      	strb	r3, [r7, #31]
 800427e:	e04b      	b.n	8004318 <UART_SetConfig+0x348>
 8004280:	2302      	movs	r3, #2
 8004282:	77fb      	strb	r3, [r7, #31]
 8004284:	e048      	b.n	8004318 <UART_SetConfig+0x348>
 8004286:	2304      	movs	r3, #4
 8004288:	77fb      	strb	r3, [r7, #31]
 800428a:	e045      	b.n	8004318 <UART_SetConfig+0x348>
 800428c:	2308      	movs	r3, #8
 800428e:	77fb      	strb	r3, [r7, #31]
 8004290:	e042      	b.n	8004318 <UART_SetConfig+0x348>
 8004292:	bf00      	nop
 8004294:	efff69f3 	.word	0xefff69f3
 8004298:	40011000 	.word	0x40011000
 800429c:	40023800 	.word	0x40023800
 80042a0:	40004400 	.word	0x40004400
 80042a4:	40004800 	.word	0x40004800
 80042a8:	40004c00 	.word	0x40004c00
 80042ac:	40005000 	.word	0x40005000
 80042b0:	40011400 	.word	0x40011400
 80042b4:	40007800 	.word	0x40007800
 80042b8:	2310      	movs	r3, #16
 80042ba:	77fb      	strb	r3, [r7, #31]
 80042bc:	e02c      	b.n	8004318 <UART_SetConfig+0x348>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a72      	ldr	r2, [pc, #456]	; (800448c <UART_SetConfig+0x4bc>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d125      	bne.n	8004314 <UART_SetConfig+0x344>
 80042c8:	4b71      	ldr	r3, [pc, #452]	; (8004490 <UART_SetConfig+0x4c0>)
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80042d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80042d6:	d017      	beq.n	8004308 <UART_SetConfig+0x338>
 80042d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80042dc:	d817      	bhi.n	800430e <UART_SetConfig+0x33e>
 80042de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042e2:	d00b      	beq.n	80042fc <UART_SetConfig+0x32c>
 80042e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042e8:	d811      	bhi.n	800430e <UART_SetConfig+0x33e>
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <UART_SetConfig+0x326>
 80042ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042f2:	d006      	beq.n	8004302 <UART_SetConfig+0x332>
 80042f4:	e00b      	b.n	800430e <UART_SetConfig+0x33e>
 80042f6:	2300      	movs	r3, #0
 80042f8:	77fb      	strb	r3, [r7, #31]
 80042fa:	e00d      	b.n	8004318 <UART_SetConfig+0x348>
 80042fc:	2302      	movs	r3, #2
 80042fe:	77fb      	strb	r3, [r7, #31]
 8004300:	e00a      	b.n	8004318 <UART_SetConfig+0x348>
 8004302:	2304      	movs	r3, #4
 8004304:	77fb      	strb	r3, [r7, #31]
 8004306:	e007      	b.n	8004318 <UART_SetConfig+0x348>
 8004308:	2308      	movs	r3, #8
 800430a:	77fb      	strb	r3, [r7, #31]
 800430c:	e004      	b.n	8004318 <UART_SetConfig+0x348>
 800430e:	2310      	movs	r3, #16
 8004310:	77fb      	strb	r3, [r7, #31]
 8004312:	e001      	b.n	8004318 <UART_SetConfig+0x348>
 8004314:	2310      	movs	r3, #16
 8004316:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004320:	d15b      	bne.n	80043da <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004322:	7ffb      	ldrb	r3, [r7, #31]
 8004324:	2b08      	cmp	r3, #8
 8004326:	d828      	bhi.n	800437a <UART_SetConfig+0x3aa>
 8004328:	a201      	add	r2, pc, #4	; (adr r2, 8004330 <UART_SetConfig+0x360>)
 800432a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432e:	bf00      	nop
 8004330:	08004355 	.word	0x08004355
 8004334:	0800435d 	.word	0x0800435d
 8004338:	08004365 	.word	0x08004365
 800433c:	0800437b 	.word	0x0800437b
 8004340:	0800436b 	.word	0x0800436b
 8004344:	0800437b 	.word	0x0800437b
 8004348:	0800437b 	.word	0x0800437b
 800434c:	0800437b 	.word	0x0800437b
 8004350:	08004373 	.word	0x08004373
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004354:	f7fe f874 	bl	8002440 <HAL_RCC_GetPCLK1Freq>
 8004358:	61b8      	str	r0, [r7, #24]
        break;
 800435a:	e013      	b.n	8004384 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800435c:	f7fe f884 	bl	8002468 <HAL_RCC_GetPCLK2Freq>
 8004360:	61b8      	str	r0, [r7, #24]
        break;
 8004362:	e00f      	b.n	8004384 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004364:	4b4b      	ldr	r3, [pc, #300]	; (8004494 <UART_SetConfig+0x4c4>)
 8004366:	61bb      	str	r3, [r7, #24]
        break;
 8004368:	e00c      	b.n	8004384 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800436a:	f7fd ff97 	bl	800229c <HAL_RCC_GetSysClockFreq>
 800436e:	61b8      	str	r0, [r7, #24]
        break;
 8004370:	e008      	b.n	8004384 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004376:	61bb      	str	r3, [r7, #24]
        break;
 8004378:	e004      	b.n	8004384 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	77bb      	strb	r3, [r7, #30]
        break;
 8004382:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d074      	beq.n	8004474 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	005a      	lsls	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	085b      	lsrs	r3, r3, #1
 8004394:	441a      	add	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	fbb2 f3f3 	udiv	r3, r2, r3
 800439e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	2b0f      	cmp	r3, #15
 80043a4:	d916      	bls.n	80043d4 <UART_SetConfig+0x404>
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ac:	d212      	bcs.n	80043d4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	f023 030f 	bic.w	r3, r3, #15
 80043b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	085b      	lsrs	r3, r3, #1
 80043bc:	b29b      	uxth	r3, r3
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	89fb      	ldrh	r3, [r7, #14]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	89fa      	ldrh	r2, [r7, #14]
 80043d0:	60da      	str	r2, [r3, #12]
 80043d2:	e04f      	b.n	8004474 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	77bb      	strb	r3, [r7, #30]
 80043d8:	e04c      	b.n	8004474 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043da:	7ffb      	ldrb	r3, [r7, #31]
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d828      	bhi.n	8004432 <UART_SetConfig+0x462>
 80043e0:	a201      	add	r2, pc, #4	; (adr r2, 80043e8 <UART_SetConfig+0x418>)
 80043e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e6:	bf00      	nop
 80043e8:	0800440d 	.word	0x0800440d
 80043ec:	08004415 	.word	0x08004415
 80043f0:	0800441d 	.word	0x0800441d
 80043f4:	08004433 	.word	0x08004433
 80043f8:	08004423 	.word	0x08004423
 80043fc:	08004433 	.word	0x08004433
 8004400:	08004433 	.word	0x08004433
 8004404:	08004433 	.word	0x08004433
 8004408:	0800442b 	.word	0x0800442b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800440c:	f7fe f818 	bl	8002440 <HAL_RCC_GetPCLK1Freq>
 8004410:	61b8      	str	r0, [r7, #24]
        break;
 8004412:	e013      	b.n	800443c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004414:	f7fe f828 	bl	8002468 <HAL_RCC_GetPCLK2Freq>
 8004418:	61b8      	str	r0, [r7, #24]
        break;
 800441a:	e00f      	b.n	800443c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800441c:	4b1d      	ldr	r3, [pc, #116]	; (8004494 <UART_SetConfig+0x4c4>)
 800441e:	61bb      	str	r3, [r7, #24]
        break;
 8004420:	e00c      	b.n	800443c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004422:	f7fd ff3b 	bl	800229c <HAL_RCC_GetSysClockFreq>
 8004426:	61b8      	str	r0, [r7, #24]
        break;
 8004428:	e008      	b.n	800443c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800442a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800442e:	61bb      	str	r3, [r7, #24]
        break;
 8004430:	e004      	b.n	800443c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	77bb      	strb	r3, [r7, #30]
        break;
 800443a:	bf00      	nop
    }

    if (pclk != 0U)
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d018      	beq.n	8004474 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	085a      	lsrs	r2, r3, #1
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	441a      	add	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	fbb2 f3f3 	udiv	r3, r2, r3
 8004454:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	2b0f      	cmp	r3, #15
 800445a:	d909      	bls.n	8004470 <UART_SetConfig+0x4a0>
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004462:	d205      	bcs.n	8004470 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	b29a      	uxth	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	60da      	str	r2, [r3, #12]
 800446e:	e001      	b.n	8004474 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004480:	7fbb      	ldrb	r3, [r7, #30]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3720      	adds	r7, #32
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40007c00 	.word	0x40007c00
 8004490:	40023800 	.word	0x40023800
 8004494:	00f42400 	.word	0x00f42400

08004498 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	f003 0310 	and.w	r3, r3, #16
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	f003 0320 	and.w	r3, r3, #32
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004574:	2b00      	cmp	r3, #0
 8004576:	d01a      	beq.n	80045ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004596:	d10a      	bne.n	80045ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	605a      	str	r2, [r3, #4]
  }
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af02      	add	r7, sp, #8
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045ec:	f7fc fef0 	bl	80013d0 <HAL_GetTick>
 80045f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d10e      	bne.n	800461e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004600:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f817 	bl	8004642 <UART_WaitOnFlagUntilTimeout>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e00d      	b.n	800463a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2220      	movs	r2, #32
 8004622:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2220      	movs	r2, #32
 8004628:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b09c      	sub	sp, #112	; 0x70
 8004646:	af00      	add	r7, sp, #0
 8004648:	60f8      	str	r0, [r7, #12]
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	603b      	str	r3, [r7, #0]
 800464e:	4613      	mov	r3, r2
 8004650:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004652:	e0a5      	b.n	80047a0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004654:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465a:	f000 80a1 	beq.w	80047a0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800465e:	f7fc feb7 	bl	80013d0 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800466a:	429a      	cmp	r2, r3
 800466c:	d302      	bcc.n	8004674 <UART_WaitOnFlagUntilTimeout+0x32>
 800466e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004670:	2b00      	cmp	r3, #0
 8004672:	d13e      	bne.n	80046f2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800467c:	e853 3f00 	ldrex	r3, [r3]
 8004680:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004684:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004688:	667b      	str	r3, [r7, #100]	; 0x64
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004692:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004694:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004696:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004698:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800469a:	e841 2300 	strex	r3, r2, [r1]
 800469e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80046a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1e6      	bne.n	8004674 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3308      	adds	r3, #8
 80046ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b0:	e853 3f00 	ldrex	r3, [r3]
 80046b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b8:	f023 0301 	bic.w	r3, r3, #1
 80046bc:	663b      	str	r3, [r7, #96]	; 0x60
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3308      	adds	r3, #8
 80046c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80046c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80046cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046ce:	e841 2300 	strex	r3, r2, [r1]
 80046d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80046d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1e5      	bne.n	80046a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2220      	movs	r2, #32
 80046de:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2220      	movs	r2, #32
 80046e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e067      	b.n	80047c2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d04f      	beq.n	80047a0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800470a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800470e:	d147      	bne.n	80047a0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004718:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004722:	e853 3f00 	ldrex	r3, [r3]
 8004726:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800472e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	461a      	mov	r2, r3
 8004736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004738:	637b      	str	r3, [r7, #52]	; 0x34
 800473a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800473e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004740:	e841 2300 	strex	r3, r2, [r1]
 8004744:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1e6      	bne.n	800471a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3308      	adds	r3, #8
 8004752:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	e853 3f00 	ldrex	r3, [r3]
 800475a:	613b      	str	r3, [r7, #16]
   return(result);
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f023 0301 	bic.w	r3, r3, #1
 8004762:	66bb      	str	r3, [r7, #104]	; 0x68
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	3308      	adds	r3, #8
 800476a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800476c:	623a      	str	r2, [r7, #32]
 800476e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004770:	69f9      	ldr	r1, [r7, #28]
 8004772:	6a3a      	ldr	r2, [r7, #32]
 8004774:	e841 2300 	strex	r3, r2, [r1]
 8004778:	61bb      	str	r3, [r7, #24]
   return(result);
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1e5      	bne.n	800474c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2220      	movs	r2, #32
 800478a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2220      	movs	r2, #32
 8004790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e010      	b.n	80047c2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	69da      	ldr	r2, [r3, #28]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	4013      	ands	r3, r2
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	bf0c      	ite	eq
 80047b0:	2301      	moveq	r3, #1
 80047b2:	2300      	movne	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	461a      	mov	r2, r3
 80047b8:	79fb      	ldrb	r3, [r7, #7]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	f43f af4a 	beq.w	8004654 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3770      	adds	r7, #112	; 0x70
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b097      	sub	sp, #92	; 0x5c
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	4613      	mov	r3, r2
 80047d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	88fa      	ldrh	r2, [r7, #6]
 80047e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	88fa      	ldrh	r2, [r7, #6]
 80047ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047fe:	d10e      	bne.n	800481e <UART_Start_Receive_IT+0x52>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d105      	bne.n	8004814 <UART_Start_Receive_IT+0x48>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800480e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004812:	e02d      	b.n	8004870 <UART_Start_Receive_IT+0xa4>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	22ff      	movs	r2, #255	; 0xff
 8004818:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800481c:	e028      	b.n	8004870 <UART_Start_Receive_IT+0xa4>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10d      	bne.n	8004842 <UART_Start_Receive_IT+0x76>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d104      	bne.n	8004838 <UART_Start_Receive_IT+0x6c>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	22ff      	movs	r2, #255	; 0xff
 8004832:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004836:	e01b      	b.n	8004870 <UART_Start_Receive_IT+0xa4>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	227f      	movs	r2, #127	; 0x7f
 800483c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004840:	e016      	b.n	8004870 <UART_Start_Receive_IT+0xa4>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800484a:	d10d      	bne.n	8004868 <UART_Start_Receive_IT+0x9c>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d104      	bne.n	800485e <UART_Start_Receive_IT+0x92>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	227f      	movs	r2, #127	; 0x7f
 8004858:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800485c:	e008      	b.n	8004870 <UART_Start_Receive_IT+0xa4>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	223f      	movs	r2, #63	; 0x3f
 8004862:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004866:	e003      	b.n	8004870 <UART_Start_Receive_IT+0xa4>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2222      	movs	r2, #34	; 0x22
 800487c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	3308      	adds	r3, #8
 8004884:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004888:	e853 3f00 	ldrex	r3, [r3]
 800488c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800488e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004890:	f043 0301 	orr.w	r3, r3, #1
 8004894:	657b      	str	r3, [r7, #84]	; 0x54
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3308      	adds	r3, #8
 800489c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800489e:	64ba      	str	r2, [r7, #72]	; 0x48
 80048a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048a6:	e841 2300 	strex	r3, r2, [r1]
 80048aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80048ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1e5      	bne.n	800487e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ba:	d107      	bne.n	80048cc <UART_Start_Receive_IT+0x100>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d103      	bne.n	80048cc <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4a24      	ldr	r2, [pc, #144]	; (8004958 <UART_Start_Receive_IT+0x18c>)
 80048c8:	665a      	str	r2, [r3, #100]	; 0x64
 80048ca:	e002      	b.n	80048d2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4a23      	ldr	r2, [pc, #140]	; (800495c <UART_Start_Receive_IT+0x190>)
 80048d0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d019      	beq.n	8004916 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	e853 3f00 	ldrex	r3, [r3]
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80048f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	461a      	mov	r2, r3
 80048fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004900:	637b      	str	r3, [r7, #52]	; 0x34
 8004902:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004904:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004906:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004908:	e841 2300 	strex	r3, r2, [r1]
 800490c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800490e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1e6      	bne.n	80048e2 <UART_Start_Receive_IT+0x116>
 8004914:	e018      	b.n	8004948 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	e853 3f00 	ldrex	r3, [r3]
 8004922:	613b      	str	r3, [r7, #16]
   return(result);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f043 0320 	orr.w	r3, r3, #32
 800492a:	653b      	str	r3, [r7, #80]	; 0x50
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	461a      	mov	r2, r3
 8004932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004934:	623b      	str	r3, [r7, #32]
 8004936:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	69f9      	ldr	r1, [r7, #28]
 800493a:	6a3a      	ldr	r2, [r7, #32]
 800493c:	e841 2300 	strex	r3, r2, [r1]
 8004940:	61bb      	str	r3, [r7, #24]
   return(result);
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e6      	bne.n	8004916 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	375c      	adds	r7, #92	; 0x5c
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	08004dc1 	.word	0x08004dc1
 800495c:	08004c65 	.word	0x08004c65

08004960 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004960:	b480      	push	{r7}
 8004962:	b095      	sub	sp, #84	; 0x54
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004970:	e853 3f00 	ldrex	r3, [r3]
 8004974:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004978:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800497c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	461a      	mov	r2, r3
 8004984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004986:	643b      	str	r3, [r7, #64]	; 0x40
 8004988:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800498c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800498e:	e841 2300 	strex	r3, r2, [r1]
 8004992:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1e6      	bne.n	8004968 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	3308      	adds	r3, #8
 80049a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	e853 3f00 	ldrex	r3, [r3]
 80049a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	f023 0301 	bic.w	r3, r3, #1
 80049b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3308      	adds	r3, #8
 80049b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049c2:	e841 2300 	strex	r3, r2, [r1]
 80049c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1e5      	bne.n	800499a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d118      	bne.n	8004a08 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	e853 3f00 	ldrex	r3, [r3]
 80049e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f023 0310 	bic.w	r3, r3, #16
 80049ea:	647b      	str	r3, [r7, #68]	; 0x44
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	461a      	mov	r2, r3
 80049f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f4:	61bb      	str	r3, [r7, #24]
 80049f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f8:	6979      	ldr	r1, [r7, #20]
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	e841 2300 	strex	r3, r2, [r1]
 8004a00:	613b      	str	r3, [r7, #16]
   return(result);
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1e6      	bne.n	80049d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004a1a:	bf00      	nop
 8004a1c:	3754      	adds	r7, #84	; 0x54
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b084      	sub	sp, #16
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f7ff faa3 	bl	8003f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a4a:	bf00      	nop
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b084      	sub	sp, #16
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5e:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	220f      	movs	r2, #15
 8004a6e:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699a      	ldr	r2, [r3, #24]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0208 	orr.w	r2, r2, #8
 8004a7e:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f7ff fa89 	bl	8003fa4 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a92:	bf00      	nop
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b08f      	sub	sp, #60	; 0x3c
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aa6:	2b21      	cmp	r3, #33	; 0x21
 8004aa8:	d14c      	bne.n	8004b44 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d132      	bne.n	8004b1c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	e853 3f00 	ldrex	r3, [r3]
 8004ac2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aca:	637b      	str	r3, [r7, #52]	; 0x34
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ad6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004adc:	e841 2300 	strex	r3, r2, [r1]
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1e6      	bne.n	8004ab6 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	e853 3f00 	ldrex	r3, [r3]
 8004af4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004afc:	633b      	str	r3, [r7, #48]	; 0x30
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	461a      	mov	r2, r3
 8004b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b06:	61bb      	str	r3, [r7, #24]
 8004b08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0a:	6979      	ldr	r1, [r7, #20]
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	e841 2300 	strex	r3, r2, [r1]
 8004b12:	613b      	str	r3, [r7, #16]
   return(result);
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1e6      	bne.n	8004ae8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004b1a:	e013      	b.n	8004b44 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b20:	781a      	ldrb	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004b44:	bf00      	nop
 8004b46:	373c      	adds	r7, #60	; 0x3c
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b091      	sub	sp, #68	; 0x44
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b5c:	2b21      	cmp	r3, #33	; 0x21
 8004b5e:	d151      	bne.n	8004c04 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d132      	bne.n	8004bd2 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	e853 3f00 	ldrex	r3, [r3]
 8004b78:	623b      	str	r3, [r7, #32]
   return(result);
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b80:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	461a      	mov	r2, r3
 8004b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8a:	633b      	str	r3, [r7, #48]	; 0x30
 8004b8c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b92:	e841 2300 	strex	r3, r2, [r1]
 8004b96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1e6      	bne.n	8004b6c <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	e853 3f00 	ldrex	r3, [r3]
 8004baa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bb2:	637b      	str	r3, [r7, #52]	; 0x34
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	461a      	mov	r2, r3
 8004bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bbc:	61fb      	str	r3, [r7, #28]
 8004bbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc0:	69b9      	ldr	r1, [r7, #24]
 8004bc2:	69fa      	ldr	r2, [r7, #28]
 8004bc4:	e841 2300 	strex	r3, r2, [r1]
 8004bc8:	617b      	str	r3, [r7, #20]
   return(result);
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1e6      	bne.n	8004b9e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004bd0:	e018      	b.n	8004c04 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bda:	881b      	ldrh	r3, [r3, #0]
 8004bdc:	461a      	mov	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004be6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bec:	1c9a      	adds	r2, r3, #2
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004c04:	bf00      	nop
 8004c06:	3744      	adds	r7, #68	; 0x44
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b088      	sub	sp, #32
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	e853 3f00 	ldrex	r3, [r3]
 8004c24:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c2c:	61fb      	str	r3, [r7, #28]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	461a      	mov	r2, r3
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	61bb      	str	r3, [r7, #24]
 8004c38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3a:	6979      	ldr	r1, [r7, #20]
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	e841 2300 	strex	r3, r2, [r1]
 8004c42:	613b      	str	r3, [r7, #16]
   return(result);
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1e6      	bne.n	8004c18 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fa06 	bl	8005068 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c5c:	bf00      	nop
 8004c5e:	3720      	adds	r7, #32
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b096      	sub	sp, #88	; 0x58
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c72:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c7a:	2b22      	cmp	r3, #34	; 0x22
 8004c7c:	f040 8094 	bne.w	8004da8 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004c8a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004c8e:	b2d9      	uxtb	r1, r3
 8004c90:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9a:	400a      	ands	r2, r1
 8004c9c:	b2d2      	uxtb	r2, r2
 8004c9e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d177      	bne.n	8004db8 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd0:	e853 3f00 	ldrex	r3, [r3]
 8004cd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cdc:	653b      	str	r3, [r7, #80]	; 0x50
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ce6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ce8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cee:	e841 2300 	strex	r3, r2, [r1]
 8004cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1e6      	bne.n	8004cc8 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	3308      	adds	r3, #8
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	e853 3f00 	ldrex	r3, [r3]
 8004d08:	623b      	str	r3, [r7, #32]
   return(result);
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	f023 0301 	bic.w	r3, r3, #1
 8004d10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3308      	adds	r3, #8
 8004d18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d1a:	633a      	str	r2, [r7, #48]	; 0x30
 8004d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d22:	e841 2300 	strex	r3, r2, [r1]
 8004d26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1e5      	bne.n	8004cfa <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2220      	movs	r2, #32
 8004d32:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d12e      	bne.n	8004da0 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f023 0310 	bic.w	r3, r3, #16
 8004d5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	461a      	mov	r2, r3
 8004d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d66:	61fb      	str	r3, [r7, #28]
 8004d68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6a:	69b9      	ldr	r1, [r7, #24]
 8004d6c:	69fa      	ldr	r2, [r7, #28]
 8004d6e:	e841 2300 	strex	r3, r2, [r1]
 8004d72:	617b      	str	r3, [r7, #20]
   return(result);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1e6      	bne.n	8004d48 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	2b10      	cmp	r3, #16
 8004d86:	d103      	bne.n	8004d90 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2210      	movs	r2, #16
 8004d8e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d96:	4619      	mov	r1, r3
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7ff f90d 	bl	8003fb8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d9e:	e00b      	b.n	8004db8 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f94f 	bl	8005044 <HAL_UART_RxCpltCallback>
}
 8004da6:	e007      	b.n	8004db8 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699a      	ldr	r2, [r3, #24]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0208 	orr.w	r2, r2, #8
 8004db6:	619a      	str	r2, [r3, #24]
}
 8004db8:	bf00      	nop
 8004dba:	3758      	adds	r7, #88	; 0x58
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b096      	sub	sp, #88	; 0x58
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004dce:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dd6:	2b22      	cmp	r3, #34	; 0x22
 8004dd8:	f040 8094 	bne.w	8004f04 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dea:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004dec:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004df0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004df4:	4013      	ands	r3, r2
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dfa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e00:	1c9a      	adds	r2, r3, #2
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d177      	bne.n	8004f14 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2c:	e853 3f00 	ldrex	r3, [r3]
 8004e30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e42:	643b      	str	r3, [r7, #64]	; 0x40
 8004e44:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e4a:	e841 2300 	strex	r3, r2, [r1]
 8004e4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1e6      	bne.n	8004e24 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	3308      	adds	r3, #8
 8004e5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	e853 3f00 	ldrex	r3, [r3]
 8004e64:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	f023 0301 	bic.w	r3, r3, #1
 8004e6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	3308      	adds	r3, #8
 8004e74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e7e:	e841 2300 	strex	r3, r2, [r1]
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1e5      	bne.n	8004e56 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d12e      	bne.n	8004efc <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	e853 3f00 	ldrex	r3, [r3]
 8004eb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	f023 0310 	bic.w	r3, r3, #16
 8004eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec2:	61bb      	str	r3, [r7, #24]
 8004ec4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec6:	6979      	ldr	r1, [r7, #20]
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	e841 2300 	strex	r3, r2, [r1]
 8004ece:	613b      	str	r3, [r7, #16]
   return(result);
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1e6      	bne.n	8004ea4 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	2b10      	cmp	r3, #16
 8004ee2:	d103      	bne.n	8004eec <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2210      	movs	r2, #16
 8004eea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7ff f85f 	bl	8003fb8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004efa:	e00b      	b.n	8004f14 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f8a1 	bl	8005044 <HAL_UART_RxCpltCallback>
}
 8004f02:	e007      	b.n	8004f14 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	699a      	ldr	r2, [r3, #24]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0208 	orr.w	r2, r2, #8
 8004f12:	619a      	str	r2, [r3, #24]
}
 8004f14:	bf00      	nop
 8004f16:	3758      	adds	r7, #88	; 0x58
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <bsp_mb_slave_init>:

/* public variable ============================================*/
extern UART_HandleTypeDef uart_instance;
extern TIM_HandleTypeDef timer_instance;

void bsp_mb_slave_init(void) {
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
	__mb.uart = &uart_instance;
 8004f20:	4b07      	ldr	r3, [pc, #28]	; (8004f40 <bsp_mb_slave_init+0x24>)
 8004f22:	4a08      	ldr	r2, [pc, #32]	; (8004f44 <bsp_mb_slave_init+0x28>)
 8004f24:	601a      	str	r2, [r3, #0]
	__mb.timer = &timer_instance;
 8004f26:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <bsp_mb_slave_init+0x24>)
 8004f28:	4a07      	ldr	r2, [pc, #28]	; (8004f48 <bsp_mb_slave_init+0x2c>)
 8004f2a:	605a      	str	r2, [r3, #4]
	mb_slave_init(&__mb, BSP_MB_SLAVE_ID, BSP_MB_SLAVE_SPEED, BSP_MB_TIMER_CLOCK_SOURCE);
 8004f2c:	2364      	movs	r3, #100	; 0x64
 8004f2e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004f32:	2101      	movs	r1, #1
 8004f34:	4802      	ldr	r0, [pc, #8]	; (8004f40 <bsp_mb_slave_init+0x24>)
 8004f36:	f000 f9df 	bl	80052f8 <mb_slave_init>
}
 8004f3a:	bf00      	nop
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	200000fc 	.word	0x200000fc
 8004f44:	20000074 	.word	0x20000074
 8004f48:	20000028 	.word	0x20000028

08004f4c <bsp_mb_slave_handle>:

void bsp_mb_slave_handle(void) {
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
	mb_slave_handle(&__mb);
 8004f50:	4802      	ldr	r0, [pc, #8]	; (8004f5c <bsp_mb_slave_handle+0x10>)
 8004f52:	f000 fa53 	bl	80053fc <mb_slave_handle>
}
 8004f56:	bf00      	nop
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	200000fc 	.word	0x200000fc

08004f60 <bsp_mb_coil_set>:

uint8_t bsp_mb_id_get(void) {
	return BSP_MB_SLAVE_ID;
}

void bsp_mb_coil_set(uint16_t addr, uint8_t status) {
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	4603      	mov	r3, r0
 8004f68:	460a      	mov	r2, r1
 8004f6a:	80fb      	strh	r3, [r7, #6]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	717b      	strb	r3, [r7, #5]
	__mb.data.coil.set(&__mb.data.coil, addr, status);
 8004f70:	4b05      	ldr	r3, [pc, #20]	; (8004f88 <bsp_mb_coil_set+0x28>)
 8004f72:	f8d3 3c60 	ldr.w	r3, [r3, #3168]	; 0xc60
 8004f76:	797a      	ldrb	r2, [r7, #5]
 8004f78:	88f9      	ldrh	r1, [r7, #6]
 8004f7a:	4804      	ldr	r0, [pc, #16]	; (8004f8c <bsp_mb_coil_set+0x2c>)
 8004f7c:	4798      	blx	r3
}
 8004f7e:	bf00      	nop
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	200000fc 	.word	0x200000fc
 8004f8c:	20000d54 	.word	0x20000d54

08004f90 <bsp_mb_discrete_input_set>:

uint8_t bsp_mb_coil_get(uint16_t addr) {
	return __mb.data.coil.get(&__mb.data.coil, addr);
}

void bsp_mb_discrete_input_set(uint16_t addr, uint8_t status) {
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	4603      	mov	r3, r0
 8004f98:	460a      	mov	r2, r1
 8004f9a:	80fb      	strh	r3, [r7, #6]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	717b      	strb	r3, [r7, #5]
	__mb.data.input.set(&__mb.data.input, addr, status);
 8004fa0:	4b05      	ldr	r3, [pc, #20]	; (8004fb8 <bsp_mb_discrete_input_set+0x28>)
 8004fa2:	f8d3 3c70 	ldr.w	r3, [r3, #3184]	; 0xc70
 8004fa6:	797a      	ldrb	r2, [r7, #5]
 8004fa8:	88f9      	ldrh	r1, [r7, #6]
 8004faa:	4804      	ldr	r0, [pc, #16]	; (8004fbc <bsp_mb_discrete_input_set+0x2c>)
 8004fac:	4798      	blx	r3
}
 8004fae:	bf00      	nop
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	200000fc 	.word	0x200000fc
 8004fbc:	20000d64 	.word	0x20000d64

08004fc0 <bsp_mb_input_reg_set>:

uint8_t bsp_mb_discrete_input_get(uint16_t addr) {
	return __mb.data.input.get(&__mb.data.input, addr);
}

void bsp_mb_input_reg_set(uint16_t addr, uint16_t value) {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	460a      	mov	r2, r1
 8004fca:	80fb      	strh	r3, [r7, #6]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	80bb      	strh	r3, [r7, #4]
	__mb.data.reg_input.set(&__mb.data.reg_input, addr, value);
 8004fd0:	4b05      	ldr	r3, [pc, #20]	; (8004fe8 <bsp_mb_input_reg_set+0x28>)
 8004fd2:	f8d3 3c80 	ldr.w	r3, [r3, #3200]	; 0xc80
 8004fd6:	88ba      	ldrh	r2, [r7, #4]
 8004fd8:	88f9      	ldrh	r1, [r7, #6]
 8004fda:	4804      	ldr	r0, [pc, #16]	; (8004fec <bsp_mb_input_reg_set+0x2c>)
 8004fdc:	4798      	blx	r3
}
 8004fde:	bf00      	nop
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	200000fc 	.word	0x200000fc
 8004fec:	20000d74 	.word	0x20000d74

08004ff0 <bsp_mb_holding_reg_set>:

uint16_t bsp_mb_input_reg_get(uint16_t addr) {
	return __mb.data.reg_input.get(&__mb.data.reg_input, addr);
}

void bsp_mb_holding_reg_set(uint16_t addr, uint16_t value) {
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	460a      	mov	r2, r1
 8004ffa:	80fb      	strh	r3, [r7, #6]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	80bb      	strh	r3, [r7, #4]
	__mb.data.reg_holding.set(&__mb.data.reg_holding, addr, value);
 8005000:	4b05      	ldr	r3, [pc, #20]	; (8005018 <bsp_mb_holding_reg_set+0x28>)
 8005002:	f8d3 3c90 	ldr.w	r3, [r3, #3216]	; 0xc90
 8005006:	88ba      	ldrh	r2, [r7, #4]
 8005008:	88f9      	ldrh	r1, [r7, #6]
 800500a:	4804      	ldr	r0, [pc, #16]	; (800501c <bsp_mb_holding_reg_set+0x2c>)
 800500c:	4798      	blx	r3
}
 800500e:	bf00      	nop
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	200000fc 	.word	0x200000fc
 800501c:	20000d84 	.word	0x20000d84

08005020 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
	if(__mb.timer == htim)
 8005028:	4b05      	ldr	r3, [pc, #20]	; (8005040 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	429a      	cmp	r2, r3
 8005030:	d102      	bne.n	8005038 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		_mb_slave_timer_irq(&__mb);
 8005032:	4803      	ldr	r0, [pc, #12]	; (8005040 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005034:	f000 fb32 	bl	800569c <_mb_slave_timer_irq>
	}
}
 8005038:	bf00      	nop
 800503a:	3708      	adds	r7, #8
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	200000fc 	.word	0x200000fc

08005044 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
	if(__mb.uart == huart)
 800504c:	4b05      	ldr	r3, [pc, #20]	; (8005064 <HAL_UART_RxCpltCallback+0x20>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	429a      	cmp	r2, r3
 8005054:	d102      	bne.n	800505c <HAL_UART_RxCpltCallback+0x18>
	{
		_mb_slave_rx_irq(&__mb);
 8005056:	4803      	ldr	r0, [pc, #12]	; (8005064 <HAL_UART_RxCpltCallback+0x20>)
 8005058:	f000 fafa 	bl	8005650 <_mb_slave_rx_irq>
	}
}
 800505c:	bf00      	nop
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	200000fc 	.word	0x200000fc

08005068 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
	if(__mb.uart == huart)
 8005070:	4b05      	ldr	r3, [pc, #20]	; (8005088 <HAL_UART_TxCpltCallback+0x20>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	429a      	cmp	r2, r3
 8005078:	d102      	bne.n	8005080 <HAL_UART_TxCpltCallback+0x18>
	{
		_mb_slave_tx_irq(&__mb);
 800507a:	4803      	ldr	r0, [pc, #12]	; (8005088 <HAL_UART_TxCpltCallback+0x20>)
 800507c:	f000 fabc 	bl	80055f8 <_mb_slave_tx_irq>
	}
}
 8005080:	bf00      	nop
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	200000fc 	.word	0x200000fc

0800508c <__mb_failure>:

#include "mb_assert.h"
#include "mb_stm32_include.h"

void __mb_failure(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005090:	b672      	cpsid	i
}
 8005092:	bf00      	nop
	__disable_irq();
	while(1);
 8005094:	e7fe      	b.n	8005094 <__mb_failure+0x8>
	...

08005098 <mb_buffer_init>:
static mb_pdu_t* _get_data(mb_buffer_t *buf);
static void      _commit_get(mb_buffer_t *buf);
static void      _flush(mb_buffer_t *buf);
static uint8_t   _available(mb_buffer_t *buf);

void mb_buffer_init(mb_buffer_t *buf) {
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <mb_buffer_init+0x12>
 80050a6:	f7ff fff1 	bl	800508c <__mb_failure>
	buf->__available = 0;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	709a      	strb	r2, [r3, #2]
	buf->__tail      = 0;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	705a      	strb	r2, [r3, #1]
	buf->__head      = 0;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	701a      	strb	r2, [r3, #0]

	buf->next        = _next;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a0d      	ldr	r2, [pc, #52]	; (80050f4 <mb_buffer_init+0x5c>)
 80050c0:	f8c3 2a18 	str.w	r2, [r3, #2584]	; 0xa18
	buf->commit_next = _commit_next;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a0c      	ldr	r2, [pc, #48]	; (80050f8 <mb_buffer_init+0x60>)
 80050c8:	f8c3 2a1c 	str.w	r2, [r3, #2588]	; 0xa1c
	buf->get_data    = _get_data;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a0b      	ldr	r2, [pc, #44]	; (80050fc <mb_buffer_init+0x64>)
 80050d0:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20
	buf->commit_get  = _commit_get;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a0a      	ldr	r2, [pc, #40]	; (8005100 <mb_buffer_init+0x68>)
 80050d8:	f8c3 2a24 	str.w	r2, [r3, #2596]	; 0xa24
	buf->flush       = _flush;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a09      	ldr	r2, [pc, #36]	; (8005104 <mb_buffer_init+0x6c>)
 80050e0:	f8c3 2a28 	str.w	r2, [r3, #2600]	; 0xa28
	buf->available   = _available;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a08      	ldr	r2, [pc, #32]	; (8005108 <mb_buffer_init+0x70>)
 80050e8:	f8c3 2a2c 	str.w	r2, [r3, #2604]	; 0xa2c
}
 80050ec:	bf00      	nop
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	0800510d 	.word	0x0800510d
 80050f8:	0800513d 	.word	0x0800513d
 80050fc:	0800519d 	.word	0x0800519d
 8005100:	080051cd 	.word	0x080051cd
 8005104:	08005221 	.word	0x08005221
 8005108:	0800524d 	.word	0x0800524d

0800510c <_next>:

static mb_pdu_t* _next(mb_buffer_t *buf) {
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <_next+0x12>
 800511a:	f7ff ffb7 	bl	800508c <__mb_failure>
	return &buf->__data[buf->__head];
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	4613      	mov	r3, r2
 8005126:	01db      	lsls	r3, r3, #7
 8005128:	4413      	add	r3, r2
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	4413      	add	r3, r2
 8005130:	3304      	adds	r3, #4
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <_commit_next>:

static void _commit_next(mb_buffer_t *buf) {
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <_commit_next+0x12>
 800514a:	f7ff ff9f 	bl	800508c <__mb_failure>
	if (buf->__available >= MB_BUFFER_SIZE) {
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	789b      	ldrb	r3, [r3, #2]
 8005152:	2b09      	cmp	r3, #9
 8005154:	d904      	bls.n	8005160 <_commit_next+0x24>
		mb_log("MB buffer overflow\n");
 8005156:	490f      	ldr	r1, [pc, #60]	; (8005194 <_commit_next+0x58>)
 8005158:	2000      	movs	r0, #0
 800515a:	f002 f899 	bl	8007290 <SEGGER_RTT_printf>
		return;
 800515e:	e016      	b.n	800518e <_commit_next+0x52>
	} else {
		buf->__head = (buf->__head + 1) % MB_BUFFER_SIZE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	4b0c      	ldr	r3, [pc, #48]	; (8005198 <_commit_next+0x5c>)
 8005168:	fb83 1302 	smull	r1, r3, r3, r2
 800516c:	1099      	asrs	r1, r3, #2
 800516e:	17d3      	asrs	r3, r2, #31
 8005170:	1ac9      	subs	r1, r1, r3
 8005172:	460b      	mov	r3, r1
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	440b      	add	r3, r1
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	1ad1      	subs	r1, r2, r3
 800517c:	b2ca      	uxtb	r2, r1
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	701a      	strb	r2, [r3, #0]
		buf->__available++;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	789b      	ldrb	r3, [r3, #2]
 8005186:	3301      	adds	r3, #1
 8005188:	b2da      	uxtb	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	709a      	strb	r2, [r3, #2]
	}
}
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	0800734c 	.word	0x0800734c
 8005198:	66666667 	.word	0x66666667

0800519c <_get_data>:

static mb_pdu_t* _get_data(mb_buffer_t *buf) {
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <_get_data+0x12>
 80051aa:	f7ff ff6f 	bl	800508c <__mb_failure>
	return &buf->__data[buf->__tail];
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	785b      	ldrb	r3, [r3, #1]
 80051b2:	461a      	mov	r2, r3
 80051b4:	4613      	mov	r3, r2
 80051b6:	01db      	lsls	r3, r3, #7
 80051b8:	4413      	add	r3, r2
 80051ba:	005b      	lsls	r3, r3, #1
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	4413      	add	r3, r2
 80051c0:	3304      	adds	r3, #4
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
	...

080051cc <_commit_get>:

static void _commit_get(mb_buffer_t *buf) {
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <_commit_get+0x12>
 80051da:	f7ff ff57 	bl	800508c <__mb_failure>
	if (buf->__available) {
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	789b      	ldrb	r3, [r3, #2]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d016      	beq.n	8005214 <_commit_get+0x48>
		buf->__tail = (buf->__tail + 1) % MB_BUFFER_SIZE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	785b      	ldrb	r3, [r3, #1]
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	4b0b      	ldr	r3, [pc, #44]	; (800521c <_commit_get+0x50>)
 80051ee:	fb83 1302 	smull	r1, r3, r3, r2
 80051f2:	1099      	asrs	r1, r3, #2
 80051f4:	17d3      	asrs	r3, r2, #31
 80051f6:	1ac9      	subs	r1, r1, r3
 80051f8:	460b      	mov	r3, r1
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	440b      	add	r3, r1
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	1ad1      	subs	r1, r2, r3
 8005202:	b2ca      	uxtb	r2, r1
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	705a      	strb	r2, [r3, #1]
		buf->__available--;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	789b      	ldrb	r3, [r3, #2]
 800520c:	3b01      	subs	r3, #1
 800520e:	b2da      	uxtb	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	709a      	strb	r2, [r3, #2]
	}
}
 8005214:	bf00      	nop
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	66666667 	.word	0x66666667

08005220 <_flush>:

static void _flush(mb_buffer_t *buf) {
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <_flush+0x12>
 800522e:	f7ff ff2d 	bl	800508c <__mb_failure>
	buf->__tail      = 0;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	705a      	strb	r2, [r3, #1]
	buf->__head      = 0;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	701a      	strb	r2, [r3, #0]
	buf->__available = 0;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	709a      	strb	r2, [r3, #2]
}
 8005244:	bf00      	nop
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <_available>:

static uint8_t _available(mb_buffer_t *buf) {
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <_available+0x12>
 800525a:	f7ff ff17 	bl	800508c <__mb_failure>
	
	return buf->__available;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	789b      	ldrb	r3, [r3, #2]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <mb_crc_calc>:
 */

#include "mb_crc.h"

uint16_t mb_crc_calc(uint8_t* data, uint16_t len)
{
 800526a:	b480      	push	{r7}
 800526c:	b087      	sub	sp, #28
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	460b      	mov	r3, r1
 8005274:	807b      	strh	r3, [r7, #2]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8005276:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800527a:	617b      	str	r3, [r7, #20]
    for (uint16_t i = 0; i < len; i++)
 800527c:	2300      	movs	r3, #0
 800527e:	827b      	strh	r3, [r7, #18]
 8005280:	e022      	b.n	80052c8 <mb_crc_calc+0x5e>
    {
        temp = temp ^ data[i];
 8005282:	8a7b      	ldrh	r3, [r7, #18]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	4413      	add	r3, r2
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	461a      	mov	r2, r3
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	4053      	eors	r3, r2
 8005290:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 1; j <= 8; j++)
 8005292:	2301      	movs	r3, #1
 8005294:	747b      	strb	r3, [r7, #17]
 8005296:	e011      	b.n	80052bc <mb_crc_calc+0x52>
        {
            flag = temp & 0x0001;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	085b      	lsrs	r3, r3, #1
 80052a4:	617b      	str	r3, [r7, #20]
            if (flag)
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d004      	beq.n	80052b6 <mb_crc_calc+0x4c>
                temp ^= 0xA001;
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	f24a 0301 	movw	r3, #40961	; 0xa001
 80052b2:	4053      	eors	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 1; j <= 8; j++)
 80052b6:	7c7b      	ldrb	r3, [r7, #17]
 80052b8:	3301      	adds	r3, #1
 80052ba:	747b      	strb	r3, [r7, #17]
 80052bc:	7c7b      	ldrb	r3, [r7, #17]
 80052be:	2b08      	cmp	r3, #8
 80052c0:	d9ea      	bls.n	8005298 <mb_crc_calc+0x2e>
    for (uint16_t i = 0; i < len; i++)
 80052c2:	8a7b      	ldrh	r3, [r7, #18]
 80052c4:	3301      	adds	r3, #1
 80052c6:	827b      	strh	r3, [r7, #18]
 80052c8:	8a7a      	ldrh	r2, [r7, #18]
 80052ca:	887b      	ldrh	r3, [r7, #2]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d3d8      	bcc.n	8005282 <mb_crc_calc+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	0a1b      	lsrs	r3, r3, #8
 80052d4:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	021b      	lsls	r3, r3, #8
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	4313      	orrs	r3, r2
 80052de:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	617b      	str	r3, [r7, #20]

    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	b29b      	uxth	r3, r3
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	371c      	adds	r7, #28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
	...

080052f8 <mb_slave_init>:
static uint8_t fc_write_single_reg(mb_slave_t* mb, mb_pdu_t* pdu);
static uint8_t fc_write_multi_coil(mb_slave_t* mb, mb_pdu_t* pdu);
static uint8_t fc_write_multi_reg(mb_slave_t* mb, mb_pdu_t* pdu);

mb_return_t mb_slave_init(mb_slave_t* mb, uint8_t sl_addr, uint32_t speed, uint32_t timer_clk_mhz)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af02      	add	r7, sp, #8
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	607a      	str	r2, [r7, #4]
 8005302:	603b      	str	r3, [r7, #0]
 8005304:	460b      	mov	r3, r1
 8005306:	72fb      	strb	r3, [r7, #11]
	mb_assert(mb);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <mb_slave_init+0x1a>
 800530e:	f7ff febd 	bl	800508c <__mb_failure>
	mb_assert(mb->uart);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <mb_slave_init+0x26>
 800531a:	f7ff feb7 	bl	800508c <__mb_failure>
	mb_assert(mb->timer);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <mb_slave_init+0x32>
 8005326:	f7ff feb1 	bl	800508c <__mb_failure>

	mb_log_init();
 800532a:	2300      	movs	r3, #0
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	2300      	movs	r3, #0
 8005330:	2200      	movs	r2, #0
 8005332:	2100      	movs	r1, #0
 8005334:	2000      	movs	r0, #0
 8005336:	f001 fbfb 	bl	8006b30 <SEGGER_RTT_ConfigUpBuffer>
	mb_log("MODBUS init\n");
 800533a:	492b      	ldr	r1, [pc, #172]	; (80053e8 <mb_slave_init+0xf0>)
 800533c:	2000      	movs	r0, #0
 800533e:	f001 ffa7 	bl	8007290 <SEGGER_RTT_printf>
	mb_log("Speed: %d\n", speed);
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	4929      	ldr	r1, [pc, #164]	; (80053ec <mb_slave_init+0xf4>)
 8005346:	2000      	movs	r0, #0
 8005348:	f001 ffa2 	bl	8007290 <SEGGER_RTT_printf>

	// Check address rule:
	// MODBUS address should in range from 1 to 247
	// NOTE: Check section "2.2 MODBUS Addressing rules" on "Modbus_over_serial_line_V1_02.pdf"
	if(sl_addr < 1 || sl_addr > 247)
 800534c:	7afb      	ldrb	r3, [r7, #11]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <mb_slave_init+0x60>
 8005352:	7afb      	ldrb	r3, [r7, #11]
 8005354:	2bf7      	cmp	r3, #247	; 0xf7
 8005356:	d907      	bls.n	8005368 <mb_slave_init+0x70>
	{
		mb_log("MODBUS error: address invalid: %d\n", sl_addr);
 8005358:	7afb      	ldrb	r3, [r7, #11]
 800535a:	461a      	mov	r2, r3
 800535c:	4924      	ldr	r1, [pc, #144]	; (80053f0 <mb_slave_init+0xf8>)
 800535e:	2000      	movs	r0, #0
 8005360:	f001 ff96 	bl	8007290 <SEGGER_RTT_printf>
		return MB_FAILURE;
 8005364:	2301      	movs	r3, #1
 8005366:	e03b      	b.n	80053e0 <mb_slave_init+0xe8>
	}

	ring_buffer_init(&mb->uart_buf);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3308      	adds	r3, #8
 800536c:	4618      	mov	r0, r3
 800536e:	f000 fffb 	bl	8006368 <ring_buffer_init>
	mb_buffer_init(&mb->buf);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff fe8d 	bl	8005098 <mb_buffer_init>
	mb_data_init(&mb->data);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f603 4358 	addw	r3, r3, #3160	; 0xc58
 8005384:	4618      	mov	r0, r3
 8005386:	f001 f8ed 	bl	8006564 <mb_data_init>
	mb->slave_addr = sl_addr;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	7afa      	ldrb	r2, [r7, #11]
 800538e:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

	// Timer configure
	__HAL_TIM_CLEAR_IT(mb->timer, TIM_IT_UPDATE);						// Clear IRQ pending
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f06f 0201 	mvn.w	r2, #1
 800539c:	611a      	str	r2, [r3, #16]
	__HAL_TIM_SET_PRESCALER(mb->timer, (timer_clk_mhz - 1));	// Set timer prescaler
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	3a01      	subs	r2, #1
 80053a8:	629a      	str	r2, [r3, #40]	; 0x28
	set_timer_period(mb, speed);
 80053aa:	6879      	ldr	r1, [r7, #4]
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 f9fb 	bl	80057a8 <set_timer_period>

	mb->is_init = true;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55

	tx_buf.tail = 0;
 80053ba:	4b0e      	ldr	r3, [pc, #56]	; (80053f4 <mb_slave_init+0xfc>)
 80053bc:	2200      	movs	r2, #0
 80053be:	805a      	strh	r2, [r3, #2]
	tx_buf.head = 0;
 80053c0:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <mb_slave_init+0xfc>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	801a      	strh	r2, [r3, #0]
	tx_len = 0;
 80053c6:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <mb_slave_init+0x100>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	801a      	strh	r2, [r3, #0]

	// Start receive UART
	HAL_UART_Receive_IT(mb->uart, &mb->uart_rx, 1);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6818      	ldr	r0, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80053d6:	2201      	movs	r2, #1
 80053d8:	4619      	mov	r1, r3
 80053da:	f7fe f9fb 	bl	80037d4 <HAL_UART_Receive_IT>

	return MB_SUCCESS;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	08007360 	.word	0x08007360
 80053ec:	08007370 	.word	0x08007370
 80053f0:	0800737c 	.word	0x0800737c
 80053f4:	20000d98 	.word	0x20000d98
 80053f8:	20000d94 	.word	0x20000d94

080053fc <mb_slave_handle>:
//	HAL_UART_Receive_IT(mb->uart, &mb->uart_rx, 1);
//
//	return MB_SUCCESS;
//}

void mb_slave_handle(mb_slave_t *mb) {
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
	mb_assert(mb);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <mb_slave_handle+0x12>
 800540a:	f7ff fe3f 	bl	800508c <__mb_failure>

	// Reject handle if MODBUS is not initialize
	if(mb->is_init == false){
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 8005414:	f083 0301 	eor.w	r3, r3, #1
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	f040 80d6 	bne.w	80055cc <mb_slave_handle+0x1d0>
		return;
	}

	// Handle received data
	if (mb->buf.available(&mb->buf) == 0) {
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	f502 7209 	add.w	r2, r2, #548	; 0x224
 800542c:	4610      	mov	r0, r2
 800542e:	4798      	blx	r3
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 80cc 	beq.w	80055d0 <mb_slave_handle+0x1d4>
		return;
	}

	// Check frame PDU data size
	mb_pdu_t* pdu = mb->buf.get_data(&mb->buf);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 3c44 	ldr.w	r3, [r3, #3140]	; 0xc44
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	f502 7209 	add.w	r2, r2, #548	; 0x224
 8005444:	4610      	mov	r0, r2
 8005446:	4798      	blx	r3
 8005448:	6138      	str	r0, [r7, #16]
	if(pdu->len < 8){
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	2b07      	cmp	r3, #7
 8005450:	d80f      	bhi.n	8005472 <mb_slave_handle+0x76>
		mb_log("MODBUS error: bad frame, len = %d", pdu->len);
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	461a      	mov	r2, r3
 8005458:	4960      	ldr	r1, [pc, #384]	; (80055dc <mb_slave_handle+0x1e0>)
 800545a:	2000      	movs	r0, #0
 800545c:	f001 ff18 	bl	8007290 <SEGGER_RTT_printf>
		mb->buf.commit_get(&mb->buf);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8d3 3c48 	ldr.w	r3, [r3, #3144]	; 0xc48
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	f502 7209 	add.w	r2, r2, #548	; 0x224
 800546c:	4610      	mov	r0, r2
 800546e:	4798      	blx	r3
		return;
 8005470:	e0b1      	b.n	80055d6 <mb_slave_handle+0x1da>
	}

	// Slave ID
	if(pdu->data[MB_PDU_ID] != mb->slave_addr){
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	789a      	ldrb	r2, [r3, #2]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 800547c:	429a      	cmp	r2, r3
 800547e:	f040 80a9 	bne.w	80055d4 <mb_slave_handle+0x1d8>
		return;
	}

#ifdef MB_LOG
	mb_log("Request: ");
 8005482:	4957      	ldr	r1, [pc, #348]	; (80055e0 <mb_slave_handle+0x1e4>)
 8005484:	2000      	movs	r0, #0
 8005486:	f001 ff03 	bl	8007290 <SEGGER_RTT_printf>
	for(uint8_t i = 0; i < pdu->len; i++)
 800548a:	2300      	movs	r3, #0
 800548c:	75fb      	strb	r3, [r7, #23]
 800548e:	e00b      	b.n	80054a8 <mb_slave_handle+0xac>
	{
		mb_log("%02x ", pdu->data[i]);
 8005490:	7dfb      	ldrb	r3, [r7, #23]
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4413      	add	r3, r2
 8005496:	789b      	ldrb	r3, [r3, #2]
 8005498:	461a      	mov	r2, r3
 800549a:	4952      	ldr	r1, [pc, #328]	; (80055e4 <mb_slave_handle+0x1e8>)
 800549c:	2000      	movs	r0, #0
 800549e:	f001 fef7 	bl	8007290 <SEGGER_RTT_printf>
	for(uint8_t i = 0; i < pdu->len; i++)
 80054a2:	7dfb      	ldrb	r3, [r7, #23]
 80054a4:	3301      	adds	r3, #1
 80054a6:	75fb      	strb	r3, [r7, #23]
 80054a8:	7dfb      	ldrb	r3, [r7, #23]
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d3ed      	bcc.n	8005490 <mb_slave_handle+0x94>
	}
	mb_log("\n");
 80054b4:	494c      	ldr	r1, [pc, #304]	; (80055e8 <mb_slave_handle+0x1ec>)
 80054b6:	2000      	movs	r0, #0
 80054b8:	f001 feea 	bl	8007290 <SEGGER_RTT_printf>
	mb_log("Func code: %d\n", pdu->data[MB_PDU_FUNC]);
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	78db      	ldrb	r3, [r3, #3]
 80054c0:	461a      	mov	r2, r3
 80054c2:	494a      	ldr	r1, [pc, #296]	; (80055ec <mb_slave_handle+0x1f0>)
 80054c4:	2000      	movs	r0, #0
 80054c6:	f001 fee3 	bl	8007290 <SEGGER_RTT_printf>
	mb_log("Address  : %d\n", (uint16_t)((uint16_t)pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO]));
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	791b      	ldrb	r3, [r3, #4]
 80054ce:	021b      	lsls	r3, r3, #8
 80054d0:	b21a      	sxth	r2, r3
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	795b      	ldrb	r3, [r3, #5]
 80054d6:	b21b      	sxth	r3, r3
 80054d8:	4313      	orrs	r3, r2
 80054da:	b21b      	sxth	r3, r3
 80054dc:	b29b      	uxth	r3, r3
 80054de:	461a      	mov	r2, r3
 80054e0:	4943      	ldr	r1, [pc, #268]	; (80055f0 <mb_slave_handle+0x1f4>)
 80054e2:	2000      	movs	r0, #0
 80054e4:	f001 fed4 	bl	8007290 <SEGGER_RTT_printf>
#endif

	// Verify CRC
	uint16_t crc = (pdu->data[pdu->len - 2] << 8) | pdu->data[pdu->len - 1];
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	3b02      	subs	r3, #2
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	4413      	add	r3, r2
 80054f2:	789b      	ldrb	r3, [r3, #2]
 80054f4:	021b      	lsls	r3, r3, #8
 80054f6:	b21a      	sxth	r2, r3
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	3b01      	subs	r3, #1
 80054fe:	6939      	ldr	r1, [r7, #16]
 8005500:	440b      	add	r3, r1
 8005502:	789b      	ldrb	r3, [r3, #2]
 8005504:	b21b      	sxth	r3, r3
 8005506:	4313      	orrs	r3, r2
 8005508:	b21b      	sxth	r3, r3
 800550a:	81fb      	strh	r3, [r7, #14]
	if(crc != mb_crc_calc(pdu->data, pdu->len - 2))
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	1c9a      	adds	r2, r3, #2
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	3b02      	subs	r3, #2
 8005516:	b29b      	uxth	r3, r3
 8005518:	4619      	mov	r1, r3
 800551a:	4610      	mov	r0, r2
 800551c:	f7ff fea5 	bl	800526a <mb_crc_calc>
 8005520:	4603      	mov	r3, r0
 8005522:	461a      	mov	r2, r3
 8005524:	89fb      	ldrh	r3, [r7, #14]
 8005526:	4293      	cmp	r3, r2
 8005528:	d004      	beq.n	8005534 <mb_slave_handle+0x138>
	{
		mb_log("MODBUS error: CRC invalid\n");
 800552a:	4932      	ldr	r1, [pc, #200]	; (80055f4 <mb_slave_handle+0x1f8>)
 800552c:	2000      	movs	r0, #0
 800552e:	f001 feaf 	bl	8007290 <SEGGER_RTT_printf>
		return;
 8005532:	e050      	b.n	80055d6 <mb_slave_handle+0x1da>
	}

	// Handle request
	uint8_t err_code = valid_request(mb, pdu);
 8005534:	6939      	ldr	r1, [r7, #16]
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f94e 	bl	80057d8 <valid_request>
 800553c:	4603      	mov	r3, r0
 800553e:	737b      	strb	r3, [r7, #13]
	if (err_code) {
 8005540:	7b7b      	ldrb	r3, [r7, #13]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d006      	beq.n	8005554 <mb_slave_handle+0x158>
		build_exc(mb, pdu, err_code);
 8005546:	7b7b      	ldrb	r3, [r7, #13]
 8005548:	461a      	mov	r2, r3
 800554a:	6939      	ldr	r1, [r7, #16]
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 fb25 	bl	8005b9c <build_exc>
 8005552:	e00e      	b.n	8005572 <mb_slave_handle+0x176>
	} else {
		err_code = execute_func(mb, pdu);
 8005554:	6939      	ldr	r1, [r7, #16]
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fabc 	bl	8005ad4 <execute_func>
 800555c:	4603      	mov	r3, r0
 800555e:	737b      	strb	r3, [r7, #13]
		if (err_code)
 8005560:	7b7b      	ldrb	r3, [r7, #13]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d005      	beq.n	8005572 <mb_slave_handle+0x176>
			build_exc(mb, pdu, err_code);
 8005566:	7b7b      	ldrb	r3, [r7, #13]
 8005568:	461a      	mov	r2, r3
 800556a:	6939      	ldr	r1, [r7, #16]
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 fb15 	bl	8005b9c <build_exc>
	}

	// Response data
	crc = mb_crc_calc(pdu->data, pdu->len - 2);
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1c9a      	adds	r2, r3, #2
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	881b      	ldrh	r3, [r3, #0]
 800557a:	3b02      	subs	r3, #2
 800557c:	b29b      	uxth	r3, r3
 800557e:	4619      	mov	r1, r3
 8005580:	4610      	mov	r0, r2
 8005582:	f7ff fe72 	bl	800526a <mb_crc_calc>
 8005586:	4603      	mov	r3, r0
 8005588:	81fb      	strh	r3, [r7, #14]
	pdu->data[pdu->len - 2] = (uint8_t) (crc >> 8);
 800558a:	89fb      	ldrh	r3, [r7, #14]
 800558c:	0a1b      	lsrs	r3, r3, #8
 800558e:	b29a      	uxth	r2, r3
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	3b02      	subs	r3, #2
 8005596:	b2d1      	uxtb	r1, r2
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	4413      	add	r3, r2
 800559c:	460a      	mov	r2, r1
 800559e:	709a      	strb	r2, [r3, #2]
	pdu->data[pdu->len - 1] = (uint8_t) (crc & 0x00FF);
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	3b01      	subs	r3, #1
 80055a6:	89fa      	ldrh	r2, [r7, #14]
 80055a8:	b2d1      	uxtb	r1, r2
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	4413      	add	r3, r2
 80055ae:	460a      	mov	r2, r1
 80055b0:	709a      	strb	r2, [r3, #2]
	set_tx(mb, pdu);
 80055b2:	6939      	ldr	r1, [r7, #16]
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 fb11 	bl	8005bdc <set_tx>

	// Commit processed data
	mb->buf.commit_get(&mb->buf);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 3c48 	ldr.w	r3, [r3, #3144]	; 0xc48
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	f502 7209 	add.w	r2, r2, #548	; 0x224
 80055c6:	4610      	mov	r0, r2
 80055c8:	4798      	blx	r3
 80055ca:	e004      	b.n	80055d6 <mb_slave_handle+0x1da>
		return;
 80055cc:	bf00      	nop
 80055ce:	e002      	b.n	80055d6 <mb_slave_handle+0x1da>
		return;
 80055d0:	bf00      	nop
 80055d2:	e000      	b.n	80055d6 <mb_slave_handle+0x1da>
		return;
 80055d4:	bf00      	nop
}
 80055d6:	3718      	adds	r7, #24
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	080073b0 	.word	0x080073b0
 80055e0:	080073d4 	.word	0x080073d4
 80055e4:	080073e0 	.word	0x080073e0
 80055e8:	080073e8 	.word	0x080073e8
 80055ec:	080073ec 	.word	0x080073ec
 80055f0:	080073fc 	.word	0x080073fc
 80055f4:	0800740c 	.word	0x0800740c

080055f8 <_mb_slave_tx_irq>:

void _mb_slave_tx_irq(mb_slave_t* mb)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
	mb_assert(mb);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <_mb_slave_tx_irq+0x12>
 8005606:	f7ff fd41 	bl	800508c <__mb_failure>
	tx_buf.tail = (tx_buf.tail + tx_len) % UART_TX_BUF_SIZE;
 800560a:	4b0e      	ldr	r3, [pc, #56]	; (8005644 <_mb_slave_tx_irq+0x4c>)
 800560c:	885b      	ldrh	r3, [r3, #2]
 800560e:	461a      	mov	r2, r3
 8005610:	4b0d      	ldr	r3, [pc, #52]	; (8005648 <_mb_slave_tx_irq+0x50>)
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	b29b      	uxth	r3, r3
 8005616:	441a      	add	r2, r3
 8005618:	4b0c      	ldr	r3, [pc, #48]	; (800564c <_mb_slave_tx_irq+0x54>)
 800561a:	fb83 1302 	smull	r1, r3, r3, r2
 800561e:	1199      	asrs	r1, r3, #6
 8005620:	17d3      	asrs	r3, r2, #31
 8005622:	1ac9      	subs	r1, r1, r3
 8005624:	460b      	mov	r3, r1
 8005626:	005b      	lsls	r3, r3, #1
 8005628:	440b      	add	r3, r1
 800562a:	01db      	lsls	r3, r3, #7
 800562c:	1ad1      	subs	r1, r2, r3
 800562e:	b28a      	uxth	r2, r1
 8005630:	4b04      	ldr	r3, [pc, #16]	; (8005644 <_mb_slave_tx_irq+0x4c>)
 8005632:	805a      	strh	r2, [r3, #2]
	start_transmit(mb);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 fb31 	bl	8005c9c <start_transmit>
}
 800563a:	bf00      	nop
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	20000d98 	.word	0x20000d98
 8005648:	20000d94 	.word	0x20000d94
 800564c:	2aaaaaab 	.word	0x2aaaaaab

08005650 <_mb_slave_rx_irq>:

void _mb_slave_rx_irq(mb_slave_t* mb)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
	mb->uart_buf.add(&mb->uart_buf, mb->uart_rx);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	f102 0008 	add.w	r0, r2, #8
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	f892 2220 	ldrb.w	r2, [r2, #544]	; 0x220
 800566a:	4611      	mov	r1, r2
 800566c:	4798      	blx	r3

	// Restart timer
	__HAL_TIM_SET_COUNTER(mb->timer, 0);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2200      	movs	r2, #0
 8005676:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(mb->timer);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	4618      	mov	r0, r3
 800567e:	f7fd fb4f 	bl	8002d20 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(mb->uart, &mb->uart_rx, 1);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6818      	ldr	r0, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800568c:	2201      	movs	r2, #1
 800568e:	4619      	mov	r1, r3
 8005690:	f7fe f8a0 	bl	80037d4 <HAL_UART_Receive_IT>
}
 8005694:	bf00      	nop
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <_mb_slave_timer_irq>:

void _mb_slave_timer_irq(mb_slave_t* mb)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
	// Stop receive UART
	HAL_UART_AbortReceive_IT(mb->uart);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7fe f8e1 	bl	8003870 <HAL_UART_AbortReceive_IT>
	HAL_TIM_Base_Stop_IT(mb->timer);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fd fbac 	bl	8002e10 <HAL_TIM_Base_Stop_IT>

	// Copy data from buffer to MODBUS packet
	if(mb->uart_buf.overflow)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 320e 	ldrb.w	r3, [r3, #526]	; 0x20e
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d007      	beq.n	80056d2 <_mb_slave_timer_irq+0x36>
	{
		mb->uart_buf.flush(&mb->uart_buf);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	3208      	adds	r2, #8
 80056cc:	4610      	mov	r0, r2
 80056ce:	4798      	blx	r3
 80056d0:	e01e      	b.n	8005710 <_mb_slave_timer_irq+0x74>
	}
	else
	{
		mb_pdu_t *pdu = mb->buf.next(&mb->buf);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8d3 3c3c 	ldr.w	r3, [r3, #3132]	; 0xc3c
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	f502 7209 	add.w	r2, r2, #548	; 0x224
 80056de:	4610      	mov	r0, r2
 80056e0:	4798      	blx	r3
 80056e2:	60f8      	str	r0, [r7, #12]
		pdu->len = MB_PDU_SIZE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056ea:	801a      	strh	r2, [r3, #0]
		mb->uart_buf.get_data(&mb->uart_buf, pdu->data, &pdu->len);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	f102 0008 	add.w	r0, r2, #8
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	1c91      	adds	r1, r2, #2
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	4798      	blx	r3
		mb->buf.commit_next(&mb->buf);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 3c40 	ldr.w	r3, [r3, #3136]	; 0xc40
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	f502 7209 	add.w	r2, r2, #548	; 0x224
 800570c:	4610      	mov	r0, r2
 800570e:	4798      	blx	r3
	}

	// Start receive UART
	HAL_UART_Receive_IT(mb->uart, &mb->uart_rx, 1);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6818      	ldr	r0, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800571a:	2201      	movs	r2, #1
 800571c:	4619      	mov	r1, r3
 800571e:	f7fe f859 	bl	80037d4 <HAL_UART_Receive_IT>
}
 8005722:	bf00      	nop
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
	...

0800572c <get_t35>:

static uint32_t get_t35(uint32_t speed) {
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
	mb_assert(speed);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <get_t35+0x12>
 800573a:	f7ff fca7 	bl	800508c <__mb_failure>

	float f_speed = (1000000.0f / ((float) speed / 8.0f));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	ee07 3a90 	vmov	s15, r3
 8005744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005748:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800574c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005750:	eddf 6a13 	vldr	s13, [pc, #76]	; 80057a0 <get_t35+0x74>
 8005754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005758:	edc7 7a03 	vstr	s15, [r7, #12]
	f_speed = f_speed * 3.5f;
 800575c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005760:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8005764:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005768:	edc7 7a03 	vstr	s15, [r7, #12]

	mb_log("Get T35: speed = %u, T35 = %u (us)\n", speed, (uint32_t)f_speed);
 800576c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005770:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005774:	ee17 3a90 	vmov	r3, s15
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	490a      	ldr	r1, [pc, #40]	; (80057a4 <get_t35+0x78>)
 800577c:	2000      	movs	r0, #0
 800577e:	f001 fd87 	bl	8007290 <SEGGER_RTT_printf>
	return (uint32_t) (f_speed + 1);
 8005782:	edd7 7a03 	vldr	s15, [r7, #12]
 8005786:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800578a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800578e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005792:	ee17 3a90 	vmov	r3, s15
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	49742400 	.word	0x49742400
 80057a4:	08007428 	.word	0x08007428

080057a8 <set_timer_period>:
/**
 * @brief Set timer period of 3.5 char transmit time of UART speed
 * @param speed speed of UART
 */
static void set_timer_period(mb_slave_t* mb ,uint32_t speed)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
	uint32_t t35 = get_t35(speed);
 80057b2:	6838      	ldr	r0, [r7, #0]
 80057b4:	f7ff ffba 	bl	800572c <get_t35>
 80057b8:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(mb->timer, t35 - 1);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	3a01      	subs	r2, #1
 80057c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	3a01      	subs	r2, #1
 80057ce:	60da      	str	r2, [r3, #12]
}
 80057d0:	bf00      	nop
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <valid_request>:

static uint8_t valid_request(mb_slave_t* mb,mb_pdu_t* pdu)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for(i = 0; i < sizeof(mb_support_fc);i++)
 80057e2:	2300      	movs	r3, #0
 80057e4:	73fb      	strb	r3, [r7, #15]
 80057e6:	e009      	b.n	80057fc <valid_request+0x24>
	{
		if(pdu->data[MB_PDU_FUNC] == mb_support_fc[i])
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	78da      	ldrb	r2, [r3, #3]
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
 80057ee:	4999      	ldr	r1, [pc, #612]	; (8005a54 <valid_request+0x27c>)
 80057f0:	5ccb      	ldrb	r3, [r1, r3]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d006      	beq.n	8005804 <valid_request+0x2c>
	for(i = 0; i < sizeof(mb_support_fc);i++)
 80057f6:	7bfb      	ldrb	r3, [r7, #15]
 80057f8:	3301      	adds	r3, #1
 80057fa:	73fb      	strb	r3, [r7, #15]
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
 80057fe:	2b07      	cmp	r3, #7
 8005800:	d9f2      	bls.n	80057e8 <valid_request+0x10>
 8005802:	e000      	b.n	8005806 <valid_request+0x2e>
		break;
 8005804:	bf00      	nop
	}

	// Function code not support
	if (i >= sizeof(mb_support_fc)) {
 8005806:	7bfb      	ldrb	r3, [r7, #15]
 8005808:	2b07      	cmp	r3, #7
 800580a:	d905      	bls.n	8005818 <valid_request+0x40>
		mb_log("MB function not support\n");
 800580c:	4992      	ldr	r1, [pc, #584]	; (8005a58 <valid_request+0x280>)
 800580e:	2000      	movs	r0, #0
 8005810:	f001 fd3e 	bl	8007290 <SEGGER_RTT_printf>
		return MB_EXC_FUNC;
 8005814:	2301      	movs	r3, #1
 8005816:	e158      	b.n	8005aca <valid_request+0x2f2>
	}

	uint16_t addr;	// start address
	uint16_t nreg;	// number of reg

	addr = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	791b      	ldrb	r3, [r3, #4]
 800581c:	021b      	lsls	r3, r3, #8
 800581e:	b21a      	sxth	r2, r3
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	795b      	ldrb	r3, [r3, #5]
 8005824:	b21b      	sxth	r3, r3
 8005826:	4313      	orrs	r3, r2
 8005828:	b21b      	sxth	r3, r3
 800582a:	81bb      	strh	r3, [r7, #12]
	nreg = pdu->data[MB_PDU_QTY_HI] << 8 | pdu->data[MB_PDU_QTY_LO];
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	799b      	ldrb	r3, [r3, #6]
 8005830:	021b      	lsls	r3, r3, #8
 8005832:	b21a      	sxth	r2, r3
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	79db      	ldrb	r3, [r3, #7]
 8005838:	b21b      	sxth	r3, r3
 800583a:	4313      	orrs	r3, r2
 800583c:	b21b      	sxth	r3, r3
 800583e:	817b      	strh	r3, [r7, #10]

	switch(pdu->data[MB_PDU_FUNC])
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	78db      	ldrb	r3, [r3, #3]
 8005844:	3b01      	subs	r3, #1
 8005846:	2b0f      	cmp	r3, #15
 8005848:	f200 813e 	bhi.w	8005ac8 <valid_request+0x2f0>
 800584c:	a201      	add	r2, pc, #4	; (adr r2, 8005854 <valid_request+0x7c>)
 800584e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005852:	bf00      	nop
 8005854:	08005895 	.word	0x08005895
 8005858:	080058cd 	.word	0x080058cd
 800585c:	08005957 	.word	0x08005957
 8005860:	08005905 	.word	0x08005905
 8005864:	08005a03 	.word	0x08005a03
 8005868:	08005a9b 	.word	0x08005a9b
 800586c:	08005ac9 	.word	0x08005ac9
 8005870:	08005ac9 	.word	0x08005ac9
 8005874:	08005ac9 	.word	0x08005ac9
 8005878:	08005ac9 	.word	0x08005ac9
 800587c:	08005ac9 	.word	0x08005ac9
 8005880:	08005ac9 	.word	0x08005ac9
 8005884:	08005ac9 	.word	0x08005ac9
 8005888:	08005ac9 	.word	0x08005ac9
 800588c:	080059a9 	.word	0x080059a9
 8005890:	08005a25 	.word	0x08005a25
	{
	case MB_FC_READ_COIL:
		if (!((nreg >= 1) && (nreg <= mb->data.coil.nbit)))
 8005894:	897b      	ldrh	r3, [r7, #10]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d005      	beq.n	80058a6 <valid_request+0xce>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8b3 3c5c 	ldrh.w	r3, [r3, #3164]	; 0xc5c
 80058a0:	897a      	ldrh	r2, [r7, #10]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d901      	bls.n	80058aa <valid_request+0xd2>
			return MB_EXC_ADDR_RANGE;
 80058a6:	2302      	movs	r3, #2
 80058a8:	e10f      	b.n	8005aca <valid_request+0x2f2>
		if(!((addr < mb->data.coil.nbit) && ((addr + nreg) <= mb->data.coil.nbit)))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8b3 3c5c 	ldrh.w	r3, [r3, #3164]	; 0xc5c
 80058b0:	89ba      	ldrh	r2, [r7, #12]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d208      	bcs.n	80058c8 <valid_request+0xf0>
 80058b6:	89ba      	ldrh	r2, [r7, #12]
 80058b8:	897b      	ldrh	r3, [r7, #10]
 80058ba:	4413      	add	r3, r2
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	f8b2 2c5c 	ldrh.w	r2, [r2, #3164]	; 0xc5c
 80058c2:	4293      	cmp	r3, r2
 80058c4:	f340 80f1 	ble.w	8005aaa <valid_request+0x2d2>
			return MB_EXC_REG_QTY;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e0fe      	b.n	8005aca <valid_request+0x2f2>
		break;
	case MB_FC_READ_DISCRETE_INPUT:
		if (!((nreg >= 1) && (nreg <= mb->data.input.nbit)))
 80058cc:	897b      	ldrh	r3, [r7, #10]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d005      	beq.n	80058de <valid_request+0x106>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8b3 3c6c 	ldrh.w	r3, [r3, #3180]	; 0xc6c
 80058d8:	897a      	ldrh	r2, [r7, #10]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d901      	bls.n	80058e2 <valid_request+0x10a>
			return MB_EXC_ADDR_RANGE;
 80058de:	2302      	movs	r3, #2
 80058e0:	e0f3      	b.n	8005aca <valid_request+0x2f2>
		if(!((addr < mb->data.input.nbit) && ((addr + nreg) <= mb->data.input.nbit)))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8b3 3c6c 	ldrh.w	r3, [r3, #3180]	; 0xc6c
 80058e8:	89ba      	ldrh	r2, [r7, #12]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d208      	bcs.n	8005900 <valid_request+0x128>
 80058ee:	89ba      	ldrh	r2, [r7, #12]
 80058f0:	897b      	ldrh	r3, [r7, #10]
 80058f2:	4413      	add	r3, r2
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	f8b2 2c6c 	ldrh.w	r2, [r2, #3180]	; 0xc6c
 80058fa:	4293      	cmp	r3, r2
 80058fc:	f340 80d7 	ble.w	8005aae <valid_request+0x2d6>
			return MB_EXC_REG_QTY;
 8005900:	2303      	movs	r3, #3
 8005902:	e0e2      	b.n	8005aca <valid_request+0x2f2>
		break;
	case MB_FC_READ_INPUT_REG:
		if (mb->data.reg_input.nreg > 0x7D) {
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8b3 3c7c 	ldrh.w	r3, [r3, #3196]	; 0xc7c
 800590a:	2b7d      	cmp	r3, #125	; 0x7d
 800590c:	d907      	bls.n	800591e <valid_request+0x146>
			if (!(nreg >= 1 && nreg <= 0x7D))
 800590e:	897b      	ldrh	r3, [r7, #10]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <valid_request+0x142>
 8005914:	897b      	ldrh	r3, [r7, #10]
 8005916:	2b7d      	cmp	r3, #125	; 0x7d
 8005918:	d90c      	bls.n	8005934 <valid_request+0x15c>
				return MB_EXC_ADDR_RANGE;
 800591a:	2302      	movs	r3, #2
 800591c:	e0d5      	b.n	8005aca <valid_request+0x2f2>
		} else {
			if (!(nreg >= 1 && nreg <= mb->data.reg_input.nreg))
 800591e:	897b      	ldrh	r3, [r7, #10]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d005      	beq.n	8005930 <valid_request+0x158>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8b3 3c7c 	ldrh.w	r3, [r3, #3196]	; 0xc7c
 800592a:	897a      	ldrh	r2, [r7, #10]
 800592c:	429a      	cmp	r2, r3
 800592e:	d901      	bls.n	8005934 <valid_request+0x15c>
				return MB_EXC_ADDR_RANGE;
 8005930:	2302      	movs	r3, #2
 8005932:	e0ca      	b.n	8005aca <valid_request+0x2f2>
		}
		if(!((addr < mb->data.reg_input.nreg) && ((addr + nreg ) <= mb->data.reg_input.nreg)))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8b3 3c7c 	ldrh.w	r3, [r3, #3196]	; 0xc7c
 800593a:	89ba      	ldrh	r2, [r7, #12]
 800593c:	429a      	cmp	r2, r3
 800593e:	d208      	bcs.n	8005952 <valid_request+0x17a>
 8005940:	89ba      	ldrh	r2, [r7, #12]
 8005942:	897b      	ldrh	r3, [r7, #10]
 8005944:	4413      	add	r3, r2
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	f8b2 2c7c 	ldrh.w	r2, [r2, #3196]	; 0xc7c
 800594c:	4293      	cmp	r3, r2
 800594e:	f340 80b0 	ble.w	8005ab2 <valid_request+0x2da>
			return MB_EXC_REG_QTY;
 8005952:	2303      	movs	r3, #3
 8005954:	e0b9      	b.n	8005aca <valid_request+0x2f2>
		break;
	case MB_FC_READ_HOLDING_REG:
		if (mb->data.reg_holding.nreg > 0x7D) {
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8b3 3c8c 	ldrh.w	r3, [r3, #3212]	; 0xc8c
 800595c:	2b7d      	cmp	r3, #125	; 0x7d
 800595e:	d907      	bls.n	8005970 <valid_request+0x198>
			if (!(nreg >= 1 && nreg <= 0x7D))
 8005960:	897b      	ldrh	r3, [r7, #10]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d002      	beq.n	800596c <valid_request+0x194>
 8005966:	897b      	ldrh	r3, [r7, #10]
 8005968:	2b7d      	cmp	r3, #125	; 0x7d
 800596a:	d90c      	bls.n	8005986 <valid_request+0x1ae>
				return MB_EXC_ADDR_RANGE;
 800596c:	2302      	movs	r3, #2
 800596e:	e0ac      	b.n	8005aca <valid_request+0x2f2>
		} else {
			if (!((nreg >= 1) && (nreg <= mb->data.reg_holding.nreg)))
 8005970:	897b      	ldrh	r3, [r7, #10]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d005      	beq.n	8005982 <valid_request+0x1aa>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8b3 3c8c 	ldrh.w	r3, [r3, #3212]	; 0xc8c
 800597c:	897a      	ldrh	r2, [r7, #10]
 800597e:	429a      	cmp	r2, r3
 8005980:	d901      	bls.n	8005986 <valid_request+0x1ae>
				return MB_EXC_ADDR_RANGE;
 8005982:	2302      	movs	r3, #2
 8005984:	e0a1      	b.n	8005aca <valid_request+0x2f2>
		}
		if(!((addr < mb->data.reg_holding.nreg) && ((addr + nreg ) <= mb->data.reg_holding.nreg)))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8b3 3c8c 	ldrh.w	r3, [r3, #3212]	; 0xc8c
 800598c:	89ba      	ldrh	r2, [r7, #12]
 800598e:	429a      	cmp	r2, r3
 8005990:	d208      	bcs.n	80059a4 <valid_request+0x1cc>
 8005992:	89ba      	ldrh	r2, [r7, #12]
 8005994:	897b      	ldrh	r3, [r7, #10]
 8005996:	4413      	add	r3, r2
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	f8b2 2c8c 	ldrh.w	r2, [r2, #3212]	; 0xc8c
 800599e:	4293      	cmp	r3, r2
 80059a0:	f340 8089 	ble.w	8005ab6 <valid_request+0x2de>
			return MB_EXC_REG_QTY;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e090      	b.n	8005aca <valid_request+0x2f2>
		break;
	case MB_FC_WRITE_MULTI_COIL:
	{
		// Get number of byte
		uint8_t nbyte = nreg / 8;
 80059a8:	897b      	ldrh	r3, [r7, #10]
 80059aa:	08db      	lsrs	r3, r3, #3
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	73bb      	strb	r3, [r7, #14]
		if(nreg % 8)
 80059b0:	897b      	ldrh	r3, [r7, #10]
 80059b2:	f003 0307 	and.w	r3, r3, #7
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <valid_request+0x1ea>
			nbyte += 1;
 80059bc:	7bbb      	ldrb	r3, [r7, #14]
 80059be:	3301      	adds	r3, #1
 80059c0:	73bb      	strb	r3, [r7, #14]

		if(!((nreg >= 1) && (nreg <= mb->data.coil.nbit) && (nbyte == pdu->data[MB_PDU_CNT])))
 80059c2:	897b      	ldrh	r3, [r7, #10]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00a      	beq.n	80059de <valid_request+0x206>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8b3 3c5c 	ldrh.w	r3, [r3, #3164]	; 0xc5c
 80059ce:	897a      	ldrh	r2, [r7, #10]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d804      	bhi.n	80059de <valid_request+0x206>
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	7a1b      	ldrb	r3, [r3, #8]
 80059d8:	7bba      	ldrb	r2, [r7, #14]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d001      	beq.n	80059e2 <valid_request+0x20a>
			return MB_EXC_REG_QTY;
 80059de:	2303      	movs	r3, #3
 80059e0:	e073      	b.n	8005aca <valid_request+0x2f2>
		if(!((addr < mb->data.coil.nbit) && ((addr + nreg) <= mb->data.coil.nbit)))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8b3 3c5c 	ldrh.w	r3, [r3, #3164]	; 0xc5c
 80059e8:	89ba      	ldrh	r2, [r7, #12]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d207      	bcs.n	80059fe <valid_request+0x226>
 80059ee:	89ba      	ldrh	r2, [r7, #12]
 80059f0:	897b      	ldrh	r3, [r7, #10]
 80059f2:	4413      	add	r3, r2
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	f8b2 2c5c 	ldrh.w	r2, [r2, #3164]	; 0xc5c
 80059fa:	4293      	cmp	r3, r2
 80059fc:	dd5d      	ble.n	8005aba <valid_request+0x2e2>
			return MB_EXC_ADDR_RANGE;
 80059fe:	2302      	movs	r3, #2
 8005a00:	e063      	b.n	8005aca <valid_request+0x2f2>
		break;
	}
	case MB_FC_WRITE_SINGLE_COIL:
		if(!((nreg == 0x0000) || (nreg == 0xFF00)))
 8005a02:	897b      	ldrh	r3, [r7, #10]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d005      	beq.n	8005a14 <valid_request+0x23c>
 8005a08:	897b      	ldrh	r3, [r7, #10]
 8005a0a:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8005a0e:	d001      	beq.n	8005a14 <valid_request+0x23c>
			return MB_EXC_REG_QTY;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e05a      	b.n	8005aca <valid_request+0x2f2>
		if(!(addr < mb->data.coil.nbit))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8b3 3c5c 	ldrh.w	r3, [r3, #3164]	; 0xc5c
 8005a1a:	89ba      	ldrh	r2, [r7, #12]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d34e      	bcc.n	8005abe <valid_request+0x2e6>
			return MB_EXC_ADDR_RANGE;
 8005a20:	2302      	movs	r3, #2
 8005a22:	e052      	b.n	8005aca <valid_request+0x2f2>
		break;
	case MB_FC_WRITE_MULTI_REG:
		if(mb->data.reg_holding.nreg < 0x7B) {
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8b3 3c8c 	ldrh.w	r3, [r3, #3212]	; 0xc8c
 8005a2a:	2b7a      	cmp	r3, #122	; 0x7a
 8005a2c:	d816      	bhi.n	8005a5c <valid_request+0x284>
			if (!((nreg >= 1) && (nreg <= mb->data.reg_holding.nreg) && (pdu->data[MB_PDU_CNT] == nreg * 2)))
 8005a2e:	897b      	ldrh	r3, [r7, #10]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00c      	beq.n	8005a4e <valid_request+0x276>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8b3 3c8c 	ldrh.w	r3, [r3, #3212]	; 0xc8c
 8005a3a:	897a      	ldrh	r2, [r7, #10]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d806      	bhi.n	8005a4e <valid_request+0x276>
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	7a1b      	ldrb	r3, [r3, #8]
 8005a44:	461a      	mov	r2, r3
 8005a46:	897b      	ldrh	r3, [r7, #10]
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d015      	beq.n	8005a7a <valid_request+0x2a2>
				return MB_EXC_REG_QTY;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e03b      	b.n	8005aca <valid_request+0x2f2>
 8005a52:	bf00      	nop
 8005a54:	080074c0 	.word	0x080074c0
 8005a58:	0800744c 	.word	0x0800744c
		} else {
			if (!((nreg >= 1) && (nreg <= 0x7B) && (pdu->data[MB_PDU_CNT] == nreg * 2)))
 8005a5c:	897b      	ldrh	r3, [r7, #10]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d009      	beq.n	8005a76 <valid_request+0x29e>
 8005a62:	897b      	ldrh	r3, [r7, #10]
 8005a64:	2b7b      	cmp	r3, #123	; 0x7b
 8005a66:	d806      	bhi.n	8005a76 <valid_request+0x29e>
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	7a1b      	ldrb	r3, [r3, #8]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	897b      	ldrh	r3, [r7, #10]
 8005a70:	005b      	lsls	r3, r3, #1
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d001      	beq.n	8005a7a <valid_request+0x2a2>
				return MB_EXC_REG_QTY;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e027      	b.n	8005aca <valid_request+0x2f2>
		}
		if(!((addr < mb->data.reg_holding.nreg) && ((addr + nreg) <= mb->data.reg_holding.nreg)))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8b3 3c8c 	ldrh.w	r3, [r3, #3212]	; 0xc8c
 8005a80:	89ba      	ldrh	r2, [r7, #12]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d207      	bcs.n	8005a96 <valid_request+0x2be>
 8005a86:	89ba      	ldrh	r2, [r7, #12]
 8005a88:	897b      	ldrh	r3, [r7, #10]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	f8b2 2c8c 	ldrh.w	r2, [r2, #3212]	; 0xc8c
 8005a92:	4293      	cmp	r3, r2
 8005a94:	dd15      	ble.n	8005ac2 <valid_request+0x2ea>
			return MB_EXC_ADDR_RANGE;
 8005a96:	2302      	movs	r3, #2
 8005a98:	e017      	b.n	8005aca <valid_request+0x2f2>
		break;
	case MB_FC_WRITE_SINGLE_REG:
		if(!(addr <= mb->data.reg_holding.nreg))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8b3 3c8c 	ldrh.w	r3, [r3, #3212]	; 0xc8c
 8005aa0:	89ba      	ldrh	r2, [r7, #12]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d90f      	bls.n	8005ac6 <valid_request+0x2ee>
			return MB_EXC_ADDR_RANGE;
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	e00f      	b.n	8005aca <valid_request+0x2f2>
		break;
 8005aaa:	bf00      	nop
 8005aac:	e00c      	b.n	8005ac8 <valid_request+0x2f0>
		break;
 8005aae:	bf00      	nop
 8005ab0:	e00a      	b.n	8005ac8 <valid_request+0x2f0>
		break;
 8005ab2:	bf00      	nop
 8005ab4:	e008      	b.n	8005ac8 <valid_request+0x2f0>
		break;
 8005ab6:	bf00      	nop
 8005ab8:	e006      	b.n	8005ac8 <valid_request+0x2f0>
		break;
 8005aba:	bf00      	nop
 8005abc:	e004      	b.n	8005ac8 <valid_request+0x2f0>
		break;
 8005abe:	bf00      	nop
 8005ac0:	e002      	b.n	8005ac8 <valid_request+0x2f0>
		break;
 8005ac2:	bf00      	nop
 8005ac4:	e000      	b.n	8005ac8 <valid_request+0x2f0>
		break;
 8005ac6:	bf00      	nop
	}

	return 0;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop

08005ad4 <execute_func>:

static uint8_t execute_func(mb_slave_t* mb, mb_pdu_t* pdu)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
	switch (pdu->data[MB_PDU_FUNC]) {
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	78db      	ldrb	r3, [r3, #3]
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	2b0f      	cmp	r3, #15
 8005ae6:	d853      	bhi.n	8005b90 <execute_func+0xbc>
 8005ae8:	a201      	add	r2, pc, #4	; (adr r2, 8005af0 <execute_func+0x1c>)
 8005aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aee:	bf00      	nop
 8005af0:	08005b31 	.word	0x08005b31
 8005af4:	08005b3d 	.word	0x08005b3d
 8005af8:	08005b49 	.word	0x08005b49
 8005afc:	08005b55 	.word	0x08005b55
 8005b00:	08005b61 	.word	0x08005b61
 8005b04:	08005b6d 	.word	0x08005b6d
 8005b08:	08005b91 	.word	0x08005b91
 8005b0c:	08005b91 	.word	0x08005b91
 8005b10:	08005b91 	.word	0x08005b91
 8005b14:	08005b91 	.word	0x08005b91
 8005b18:	08005b91 	.word	0x08005b91
 8005b1c:	08005b91 	.word	0x08005b91
 8005b20:	08005b91 	.word	0x08005b91
 8005b24:	08005b91 	.word	0x08005b91
 8005b28:	08005b79 	.word	0x08005b79
 8005b2c:	08005b85 	.word	0x08005b85
	case MB_FC_READ_COIL:
		return fc_read_coil(mb, pdu);
 8005b30:	6839      	ldr	r1, [r7, #0]
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f8ea 	bl	8005d0c <fc_read_coil>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	e02b      	b.n	8005b94 <execute_func+0xc0>
	case MB_FC_READ_DISCRETE_INPUT:
		return fc_read_input(mb, pdu);
 8005b3c:	6839      	ldr	r1, [r7, #0]
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f96e 	bl	8005e20 <fc_read_input>
 8005b44:	4603      	mov	r3, r0
 8005b46:	e025      	b.n	8005b94 <execute_func+0xc0>
	case MB_FC_READ_HOLDING_REG:
		return fc_read_reg_hodling(mb, pdu);
 8005b48:	6839      	ldr	r1, [r7, #0]
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fa5d 	bl	800600a <fc_read_reg_hodling>
 8005b50:	4603      	mov	r3, r0
 8005b52:	e01f      	b.n	8005b94 <execute_func+0xc0>
	case MB_FC_READ_INPUT_REG:
		return fc_read_reg_input(mb, pdu);
 8005b54:	6839      	ldr	r1, [r7, #0]
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f9ec 	bl	8005f34 <fc_read_reg_input>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	e019      	b.n	8005b94 <execute_func+0xc0>
	case MB_FC_WRITE_SINGLE_COIL:
		return fc_write_single_coil(mb, pdu);
 8005b60:	6839      	ldr	r1, [r7, #0]
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fabc 	bl	80060e0 <fc_write_single_coil>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	e013      	b.n	8005b94 <execute_func+0xc0>
	case MB_FC_WRITE_SINGLE_REG:
		return fc_write_single_reg(mb, pdu);
 8005b6c:	6839      	ldr	r1, [r7, #0]
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 faf0 	bl	8006154 <fc_write_single_reg>
 8005b74:	4603      	mov	r3, r0
 8005b76:	e00d      	b.n	8005b94 <execute_func+0xc0>
	case MB_FC_WRITE_MULTI_COIL:
		return fc_write_multi_coil(mb, pdu);
 8005b78:	6839      	ldr	r1, [r7, #0]
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fb17 	bl	80061ae <fc_write_multi_coil>
 8005b80:	4603      	mov	r3, r0
 8005b82:	e007      	b.n	8005b94 <execute_func+0xc0>
	case MB_FC_WRITE_MULTI_REG:
		return fc_write_multi_reg(mb, pdu);
 8005b84:	6839      	ldr	r1, [r7, #0]
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fb82 	bl	8006290 <fc_write_multi_reg>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	e001      	b.n	8005b94 <execute_func+0xc0>
	default:
		break;
 8005b90:	bf00      	nop
	}
	return 0;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <build_exc>:

static void build_exc(mb_slave_t* mb, mb_pdu_t* pdu, uint8_t code)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	71fb      	strb	r3, [r7, #7]
	 * | 1  | 1  |   1      |  2  |
	 * +----+----+----------+-----+
	 * len = 5
	 */

	pdu->data[MB_PDU_FUNC] = pdu->data[MB_PDU_FUNC] + 0x80;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	78db      	ldrb	r3, [r3, #3]
 8005bae:	3b80      	subs	r3, #128	; 0x80
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	70da      	strb	r2, [r3, #3]
	pdu->data[2] = code;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	79fa      	ldrb	r2, [r7, #7]
 8005bba:	711a      	strb	r2, [r3, #4]
	pdu->len = 5;
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2205      	movs	r2, #5
 8005bc0:	801a      	strh	r2, [r3, #0]

	mb_log("EXC code: %d\n", pdu->data[MB_PDU_FUNC]);
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	78db      	ldrb	r3, [r3, #3]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	4903      	ldr	r1, [pc, #12]	; (8005bd8 <build_exc+0x3c>)
 8005bca:	2000      	movs	r0, #0
 8005bcc:	f001 fb60 	bl	8007290 <SEGGER_RTT_printf>
}
 8005bd0:	bf00      	nop
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	08007468 	.word	0x08007468

08005bdc <set_tx>:

static void set_tx(mb_slave_t* mb, mb_pdu_t* pdu)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
#ifdef MB_LOG
	mb_log("Response: ");
 8005be6:	4928      	ldr	r1, [pc, #160]	; (8005c88 <set_tx+0xac>)
 8005be8:	2000      	movs	r0, #0
 8005bea:	f001 fb51 	bl	8007290 <SEGGER_RTT_printf>
	for(uint16_t i = 0; i < pdu->len; i++)
 8005bee:	2300      	movs	r3, #0
 8005bf0:	81fb      	strh	r3, [r7, #14]
 8005bf2:	e00b      	b.n	8005c0c <set_tx+0x30>
	{
		mb_log("%02x ", pdu->data[i]);
 8005bf4:	89fb      	ldrh	r3, [r7, #14]
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	789b      	ldrb	r3, [r3, #2]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	4923      	ldr	r1, [pc, #140]	; (8005c8c <set_tx+0xb0>)
 8005c00:	2000      	movs	r0, #0
 8005c02:	f001 fb45 	bl	8007290 <SEGGER_RTT_printf>
	for(uint16_t i = 0; i < pdu->len; i++)
 8005c06:	89fb      	ldrh	r3, [r7, #14]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	81fb      	strh	r3, [r7, #14]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	881b      	ldrh	r3, [r3, #0]
 8005c10:	89fa      	ldrh	r2, [r7, #14]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d3ee      	bcc.n	8005bf4 <set_tx+0x18>
	}
	mb_log("\n");
 8005c16:	491e      	ldr	r1, [pc, #120]	; (8005c90 <set_tx+0xb4>)
 8005c18:	2000      	movs	r0, #0
 8005c1a:	f001 fb39 	bl	8007290 <SEGGER_RTT_printf>
#endif

	// Copy data to tx buffer
	for (uint16_t i = 0; i < pdu->len; i++) {
 8005c1e:	2300      	movs	r3, #0
 8005c20:	81bb      	strh	r3, [r7, #12]
 8005c22:	e025      	b.n	8005c70 <set_tx+0x94>
		tx_buf.data[tx_buf.head] = pdu->data[i];
 8005c24:	89bb      	ldrh	r3, [r7, #12]
 8005c26:	4a1b      	ldr	r2, [pc, #108]	; (8005c94 <set_tx+0xb8>)
 8005c28:	8812      	ldrh	r2, [r2, #0]
 8005c2a:	4611      	mov	r1, r2
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	4413      	add	r3, r2
 8005c30:	789a      	ldrb	r2, [r3, #2]
 8005c32:	4b18      	ldr	r3, [pc, #96]	; (8005c94 <set_tx+0xb8>)
 8005c34:	440b      	add	r3, r1
 8005c36:	711a      	strb	r2, [r3, #4]
		tx_buf.head = (tx_buf.head + 1) % UART_TX_BUF_SIZE;
 8005c38:	4b16      	ldr	r3, [pc, #88]	; (8005c94 <set_tx+0xb8>)
 8005c3a:	881b      	ldrh	r3, [r3, #0]
 8005c3c:	1c5a      	adds	r2, r3, #1
 8005c3e:	4b16      	ldr	r3, [pc, #88]	; (8005c98 <set_tx+0xbc>)
 8005c40:	fb83 1302 	smull	r1, r3, r3, r2
 8005c44:	1199      	asrs	r1, r3, #6
 8005c46:	17d3      	asrs	r3, r2, #31
 8005c48:	1ac9      	subs	r1, r1, r3
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	440b      	add	r3, r1
 8005c50:	01db      	lsls	r3, r3, #7
 8005c52:	1ad1      	subs	r1, r2, r3
 8005c54:	b28a      	uxth	r2, r1
 8005c56:	4b0f      	ldr	r3, [pc, #60]	; (8005c94 <set_tx+0xb8>)
 8005c58:	801a      	strh	r2, [r3, #0]
		mb_assert(tx_buf.head != tx_buf.tail);
 8005c5a:	4b0e      	ldr	r3, [pc, #56]	; (8005c94 <set_tx+0xb8>)
 8005c5c:	881a      	ldrh	r2, [r3, #0]
 8005c5e:	4b0d      	ldr	r3, [pc, #52]	; (8005c94 <set_tx+0xb8>)
 8005c60:	885b      	ldrh	r3, [r3, #2]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d101      	bne.n	8005c6a <set_tx+0x8e>
 8005c66:	f7ff fa11 	bl	800508c <__mb_failure>
	for (uint16_t i = 0; i < pdu->len; i++) {
 8005c6a:	89bb      	ldrh	r3, [r7, #12]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	81bb      	strh	r3, [r7, #12]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	89ba      	ldrh	r2, [r7, #12]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d3d4      	bcc.n	8005c24 <set_tx+0x48>
	}

	start_transmit(mb);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f80e 	bl	8005c9c <start_transmit>
}
 8005c80:	bf00      	nop
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	08007478 	.word	0x08007478
 8005c8c:	080073e0 	.word	0x080073e0
 8005c90:	080073e8 	.word	0x080073e8
 8005c94:	20000d98 	.word	0x20000d98
 8005c98:	2aaaaaab 	.word	0x2aaaaaab

08005c9c <start_transmit>:

static void start_transmit(mb_slave_t* mb) {
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
	if (tx_buf.tail == tx_buf.head)
 8005ca4:	4b17      	ldr	r3, [pc, #92]	; (8005d04 <start_transmit+0x68>)
 8005ca6:	885a      	ldrh	r2, [r3, #2]
 8005ca8:	4b16      	ldr	r3, [pc, #88]	; (8005d04 <start_transmit+0x68>)
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d024      	beq.n	8005cfa <start_transmit+0x5e>
		return;

	if (tx_buf.tail < tx_buf.head) {
 8005cb0:	4b14      	ldr	r3, [pc, #80]	; (8005d04 <start_transmit+0x68>)
 8005cb2:	885a      	ldrh	r2, [r3, #2]
 8005cb4:	4b13      	ldr	r3, [pc, #76]	; (8005d04 <start_transmit+0x68>)
 8005cb6:	881b      	ldrh	r3, [r3, #0]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d208      	bcs.n	8005cce <start_transmit+0x32>
		tx_len = tx_buf.head - tx_buf.tail;
 8005cbc:	4b11      	ldr	r3, [pc, #68]	; (8005d04 <start_transmit+0x68>)
 8005cbe:	881a      	ldrh	r2, [r3, #0]
 8005cc0:	4b10      	ldr	r3, [pc, #64]	; (8005d04 <start_transmit+0x68>)
 8005cc2:	885b      	ldrh	r3, [r3, #2]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	4b0f      	ldr	r3, [pc, #60]	; (8005d08 <start_transmit+0x6c>)
 8005cca:	801a      	strh	r2, [r3, #0]
 8005ccc:	e006      	b.n	8005cdc <start_transmit+0x40>
	} else {
		tx_len = UART_TX_BUF_SIZE - tx_buf.tail;
 8005cce:	4b0d      	ldr	r3, [pc, #52]	; (8005d04 <start_transmit+0x68>)
 8005cd0:	885b      	ldrh	r3, [r3, #2]
 8005cd2:	f5c3 73c0 	rsb	r3, r3, #384	; 0x180
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	4b0b      	ldr	r3, [pc, #44]	; (8005d08 <start_transmit+0x6c>)
 8005cda:	801a      	strh	r2, [r3, #0]
	}

	HAL_UART_Transmit_IT(mb->uart, &tx_buf.data[tx_buf.tail], tx_len);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6818      	ldr	r0, [r3, #0]
 8005ce0:	4b08      	ldr	r3, [pc, #32]	; (8005d04 <start_transmit+0x68>)
 8005ce2:	885b      	ldrh	r3, [r3, #2]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	4b07      	ldr	r3, [pc, #28]	; (8005d04 <start_transmit+0x68>)
 8005ce8:	4413      	add	r3, r2
 8005cea:	3304      	adds	r3, #4
 8005cec:	4a06      	ldr	r2, [pc, #24]	; (8005d08 <start_transmit+0x6c>)
 8005cee:	8812      	ldrh	r2, [r2, #0]
 8005cf0:	b292      	uxth	r2, r2
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	f7fd fd00 	bl	80036f8 <HAL_UART_Transmit_IT>
 8005cf8:	e000      	b.n	8005cfc <start_transmit+0x60>
		return;
 8005cfa:	bf00      	nop
}
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	20000d98 	.word	0x20000d98
 8005d08:	20000d94 	.word	0x20000d94

08005d0c <fc_read_coil>:

static uint8_t fc_read_coil(mb_slave_t* mb, mb_pdu_t* pdu)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2  |  2  |
	 * +----+----+------+-----+-----+
	 * len = 8
	 */

	if(pdu->len < 8)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	2b07      	cmp	r3, #7
 8005d1c:	d801      	bhi.n	8005d22 <fc_read_coil+0x16>
		return MB_EXC_EXECUTE;
 8005d1e:	2304      	movs	r3, #4
 8005d20:	e07a      	b.n	8005e18 <fc_read_coil+0x10c>

	uint16_t addr = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	791b      	ldrb	r3, [r3, #4]
 8005d26:	021b      	lsls	r3, r3, #8
 8005d28:	b21a      	sxth	r2, r3
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	795b      	ldrb	r3, [r3, #5]
 8005d2e:	b21b      	sxth	r3, r3
 8005d30:	4313      	orrs	r3, r2
 8005d32:	b21b      	sxth	r3, r3
 8005d34:	82bb      	strh	r3, [r7, #20]
	uint16_t qty  = pdu->data[MB_PDU_QTY_HI] << 8 | pdu->data[MB_PDU_QTY_LO];
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	799b      	ldrb	r3, [r3, #6]
 8005d3a:	021b      	lsls	r3, r3, #8
 8005d3c:	b21a      	sxth	r2, r3
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	79db      	ldrb	r3, [r3, #7]
 8005d42:	b21b      	sxth	r3, r3
 8005d44:	4313      	orrs	r3, r2
 8005d46:	b21b      	sxth	r3, r3
 8005d48:	827b      	strh	r3, [r7, #18]
	 * +----+----+-----+------+-----+
	 * | 1  |  1 |  1  |  n   |  2  |
	 * +----+----+-----+------+-----+
	 */

	pdu->data[2] = qty / 8;
 8005d4a:	8a7b      	ldrh	r3, [r7, #18]
 8005d4c:	08db      	lsrs	r3, r3, #3
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	711a      	strb	r2, [r3, #4]
	if(qty % 8)
 8005d56:	8a7b      	ldrh	r3, [r7, #18]
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d005      	beq.n	8005d6e <fc_read_coil+0x62>
		pdu->data[2] += 1;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	791b      	ldrb	r3, [r3, #4]
 8005d66:	3301      	adds	r3, #1
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	711a      	strb	r2, [r3, #4]

	uint8_t* data = &pdu->data[3];
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	3305      	adds	r3, #5
 8005d72:	60fb      	str	r3, [r7, #12]
	memset(data, 0x00, pdu->data[2]);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	791b      	ldrb	r3, [r3, #4]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f001 fad1 	bl	8007324 <memset>

	for(uint16_t i = 0; i < qty; i++)
 8005d82:	2300      	movs	r3, #0
 8005d84:	82fb      	strh	r3, [r7, #22]
 8005d86:	e03b      	b.n	8005e00 <fc_read_coil+0xf4>
	{
		uint8_t ibyte = i / 8;
 8005d88:	8afb      	ldrh	r3, [r7, #22]
 8005d8a:	08db      	lsrs	r3, r3, #3
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	72fb      	strb	r3, [r7, #11]
		uint8_t ibit  = i % 8;
 8005d90:	8afb      	ldrh	r3, [r7, #22]
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	f003 0307 	and.w	r3, r3, #7
 8005d98:	72bb      	strb	r3, [r7, #10]
		uint8_t val   = 1 << ibit;
 8005d9a:	7abb      	ldrb	r3, [r7, #10]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005da2:	727b      	strb	r3, [r7, #9]

		if(mb->data.coil.get(&mb->data.coil, addr + i))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 3c64 	ldr.w	r3, [r3, #3172]	; 0xc64
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	f602 4058 	addw	r0, r2, #3160	; 0xc58
 8005db0:	8ab9      	ldrh	r1, [r7, #20]
 8005db2:	8afa      	ldrh	r2, [r7, #22]
 8005db4:	440a      	add	r2, r1
 8005db6:	b292      	uxth	r2, r2
 8005db8:	4611      	mov	r1, r2
 8005dba:	4798      	blx	r3
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00b      	beq.n	8005dda <fc_read_coil+0xce>
			data[ibyte] = data[ibyte] | val;
 8005dc2:	7afb      	ldrb	r3, [r7, #11]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	7819      	ldrb	r1, [r3, #0]
 8005dca:	7afb      	ldrb	r3, [r7, #11]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	4413      	add	r3, r2
 8005dd0:	7a7a      	ldrb	r2, [r7, #9]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	b2d2      	uxtb	r2, r2
 8005dd6:	701a      	strb	r2, [r3, #0]
 8005dd8:	e00f      	b.n	8005dfa <fc_read_coil+0xee>
		else
			data[ibyte] = data[ibyte] & (~val);
 8005dda:	7afb      	ldrb	r3, [r7, #11]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	4413      	add	r3, r2
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	b25a      	sxtb	r2, r3
 8005de4:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8005de8:	43db      	mvns	r3, r3
 8005dea:	b25b      	sxtb	r3, r3
 8005dec:	4013      	ands	r3, r2
 8005dee:	b259      	sxtb	r1, r3
 8005df0:	7afb      	ldrb	r3, [r7, #11]
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	4413      	add	r3, r2
 8005df6:	b2ca      	uxtb	r2, r1
 8005df8:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < qty; i++)
 8005dfa:	8afb      	ldrh	r3, [r7, #22]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	82fb      	strh	r3, [r7, #22]
 8005e00:	8afa      	ldrh	r2, [r7, #22]
 8005e02:	8a7b      	ldrh	r3, [r7, #18]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d3bf      	bcc.n	8005d88 <fc_read_coil+0x7c>
	}

	pdu->len = pdu->data[2] + 5;	// include CRC
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	791b      	ldrb	r3, [r3, #4]
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	3305      	adds	r3, #5
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	801a      	strh	r2, [r3, #0]
	return 0;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3718      	adds	r7, #24
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <fc_read_input>:

static uint8_t fc_read_input(mb_slave_t* mb, mb_pdu_t* pdu)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2  |  2  |
	 * +----+----+------+-----+-----+
	 * len = 8
	 */

	if(pdu->len < 8)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	2b07      	cmp	r3, #7
 8005e30:	d801      	bhi.n	8005e36 <fc_read_input+0x16>
		return MB_EXC_EXECUTE;
 8005e32:	2304      	movs	r3, #4
 8005e34:	e07a      	b.n	8005f2c <fc_read_input+0x10c>

	uint16_t addr = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	791b      	ldrb	r3, [r3, #4]
 8005e3a:	021b      	lsls	r3, r3, #8
 8005e3c:	b21a      	sxth	r2, r3
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	795b      	ldrb	r3, [r3, #5]
 8005e42:	b21b      	sxth	r3, r3
 8005e44:	4313      	orrs	r3, r2
 8005e46:	b21b      	sxth	r3, r3
 8005e48:	82bb      	strh	r3, [r7, #20]
	uint16_t qty  = pdu->data[MB_PDU_QTY_HI] << 8 | pdu->data[MB_PDU_QTY_LO];
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	799b      	ldrb	r3, [r3, #6]
 8005e4e:	021b      	lsls	r3, r3, #8
 8005e50:	b21a      	sxth	r2, r3
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	79db      	ldrb	r3, [r3, #7]
 8005e56:	b21b      	sxth	r3, r3
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	b21b      	sxth	r3, r3
 8005e5c:	827b      	strh	r3, [r7, #18]
	 * +----+----+-----+------+-----+
	 * | 1  |  1 |  1  |  n   |  2  |
	 * +----+----+-----+------+-----+
	 */

	pdu->data[2] = qty / 8;
 8005e5e:	8a7b      	ldrh	r3, [r7, #18]
 8005e60:	08db      	lsrs	r3, r3, #3
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	711a      	strb	r2, [r3, #4]
	if(qty % 8)
 8005e6a:	8a7b      	ldrh	r3, [r7, #18]
 8005e6c:	f003 0307 	and.w	r3, r3, #7
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d005      	beq.n	8005e82 <fc_read_input+0x62>
		pdu->data[2] += 1;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	791b      	ldrb	r3, [r3, #4]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	711a      	strb	r2, [r3, #4]

	uint8_t* data = &pdu->data[3];
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	3305      	adds	r3, #5
 8005e86:	60fb      	str	r3, [r7, #12]
	memset(data, 0x00, pdu->data[2]);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	791b      	ldrb	r3, [r3, #4]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	2100      	movs	r1, #0
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f001 fa47 	bl	8007324 <memset>

	for(uint16_t i = 0; i < qty; i++)
 8005e96:	2300      	movs	r3, #0
 8005e98:	82fb      	strh	r3, [r7, #22]
 8005e9a:	e03b      	b.n	8005f14 <fc_read_input+0xf4>
	{
		uint8_t ibyte = i / 8;
 8005e9c:	8afb      	ldrh	r3, [r7, #22]
 8005e9e:	08db      	lsrs	r3, r3, #3
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	72fb      	strb	r3, [r7, #11]
		uint8_t ibit  = i % 8;
 8005ea4:	8afb      	ldrh	r3, [r7, #22]
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	f003 0307 	and.w	r3, r3, #7
 8005eac:	72bb      	strb	r3, [r7, #10]
		uint8_t val   = 1 << ibit;
 8005eae:	7abb      	ldrb	r3, [r7, #10]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb6:	727b      	strb	r3, [r7, #9]

		if(mb->data.coil.get(&mb->data.input, addr + i))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 3c64 	ldr.w	r3, [r3, #3172]	; 0xc64
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	f602 4068 	addw	r0, r2, #3176	; 0xc68
 8005ec4:	8ab9      	ldrh	r1, [r7, #20]
 8005ec6:	8afa      	ldrh	r2, [r7, #22]
 8005ec8:	440a      	add	r2, r1
 8005eca:	b292      	uxth	r2, r2
 8005ecc:	4611      	mov	r1, r2
 8005ece:	4798      	blx	r3
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00b      	beq.n	8005eee <fc_read_input+0xce>
			data[ibyte] = data[ibyte] | val;
 8005ed6:	7afb      	ldrb	r3, [r7, #11]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	4413      	add	r3, r2
 8005edc:	7819      	ldrb	r1, [r3, #0]
 8005ede:	7afb      	ldrb	r3, [r7, #11]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	7a7a      	ldrb	r2, [r7, #9]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	b2d2      	uxtb	r2, r2
 8005eea:	701a      	strb	r2, [r3, #0]
 8005eec:	e00f      	b.n	8005f0e <fc_read_input+0xee>
		else
			data[ibyte] = data[ibyte] & (~val);
 8005eee:	7afb      	ldrb	r3, [r7, #11]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	b25a      	sxtb	r2, r3
 8005ef8:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8005efc:	43db      	mvns	r3, r3
 8005efe:	b25b      	sxtb	r3, r3
 8005f00:	4013      	ands	r3, r2
 8005f02:	b259      	sxtb	r1, r3
 8005f04:	7afb      	ldrb	r3, [r7, #11]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	4413      	add	r3, r2
 8005f0a:	b2ca      	uxtb	r2, r1
 8005f0c:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < qty; i++)
 8005f0e:	8afb      	ldrh	r3, [r7, #22]
 8005f10:	3301      	adds	r3, #1
 8005f12:	82fb      	strh	r3, [r7, #22]
 8005f14:	8afa      	ldrh	r2, [r7, #22]
 8005f16:	8a7b      	ldrh	r3, [r7, #18]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d3bf      	bcc.n	8005e9c <fc_read_input+0x7c>
	}

	pdu->len = pdu->data[2] + 5;	// include CRC
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	791b      	ldrb	r3, [r3, #4]
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	3305      	adds	r3, #5
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	801a      	strh	r2, [r3, #0]
	return 0;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3718      	adds	r7, #24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <fc_read_reg_input>:

static uint8_t fc_read_reg_input(mb_slave_t* mb, mb_pdu_t* pdu)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2  |  2  |
	 * +----+----+------+-----+-----+
	 * len = 8
	 */

	if(pdu->len < 8)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	2b07      	cmp	r3, #7
 8005f44:	d801      	bhi.n	8005f4a <fc_read_reg_input+0x16>
		return MB_EXC_EXECUTE;
 8005f46:	2304      	movs	r3, #4
 8005f48:	e05b      	b.n	8006002 <fc_read_reg_input+0xce>

	uint16_t addr = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	791b      	ldrb	r3, [r3, #4]
 8005f4e:	021b      	lsls	r3, r3, #8
 8005f50:	b21a      	sxth	r2, r3
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	795b      	ldrb	r3, [r3, #5]
 8005f56:	b21b      	sxth	r3, r3
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	b21b      	sxth	r3, r3
 8005f5c:	827b      	strh	r3, [r7, #18]
	uint16_t qty  = pdu->data[MB_PDU_QTY_HI] << 8 | pdu->data[MB_PDU_QTY_LO];
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	799b      	ldrb	r3, [r3, #6]
 8005f62:	021b      	lsls	r3, r3, #8
 8005f64:	b21a      	sxth	r2, r3
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	79db      	ldrb	r3, [r3, #7]
 8005f6a:	b21b      	sxth	r3, r3
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	b21b      	sxth	r3, r3
 8005f70:	823b      	strh	r3, [r7, #16]
	 * +----+----+-----+------+-----+
	 * | 1  |  1 |  1  |  n   |  2  |
	 * +----+----+-----+------+-----+
	 */

	pdu->data[2] = qty * 2;
 8005f72:	8a3b      	ldrh	r3, [r7, #16]
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	711a      	strb	r2, [r3, #4]
	uint8_t* data = &pdu->data[3];
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	3305      	adds	r3, #5
 8005f82:	60fb      	str	r3, [r7, #12]
	memset(data, 0x00, pdu->data[2]);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	791b      	ldrb	r3, [r3, #4]
 8005f88:	461a      	mov	r2, r3
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f001 f9c9 	bl	8007324 <memset>

	uint16_t data_index = 0;
 8005f92:	2300      	movs	r3, #0
 8005f94:	82fb      	strh	r3, [r7, #22]
	for(uint8_t i = 0; i < qty; i++)
 8005f96:	2300      	movs	r3, #0
 8005f98:	757b      	strb	r3, [r7, #21]
 8005f9a:	e025      	b.n	8005fe8 <fc_read_reg_input+0xb4>
	{
		uint16_t value     = mb->data.reg_input.get(&mb->data.reg_input, addr + i);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 3c84 	ldr.w	r3, [r3, #3204]	; 0xc84
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	f602 4078 	addw	r0, r2, #3192	; 0xc78
 8005fa8:	7d7a      	ldrb	r2, [r7, #21]
 8005faa:	b291      	uxth	r1, r2
 8005fac:	8a7a      	ldrh	r2, [r7, #18]
 8005fae:	440a      	add	r2, r1
 8005fb0:	b292      	uxth	r2, r2
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	4798      	blx	r3
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	817b      	strh	r3, [r7, #10]
		data[data_index++] = value >> 8;
 8005fba:	897b      	ldrh	r3, [r7, #10]
 8005fbc:	0a1b      	lsrs	r3, r3, #8
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	8afb      	ldrh	r3, [r7, #22]
 8005fc2:	1c59      	adds	r1, r3, #1
 8005fc4:	82f9      	strh	r1, [r7, #22]
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	440b      	add	r3, r1
 8005fcc:	b2d2      	uxtb	r2, r2
 8005fce:	701a      	strb	r2, [r3, #0]
		data[data_index++] = (uint8_t)value;
 8005fd0:	8afb      	ldrh	r3, [r7, #22]
 8005fd2:	1c5a      	adds	r2, r3, #1
 8005fd4:	82fa      	strh	r2, [r7, #22]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4413      	add	r3, r2
 8005fdc:	897a      	ldrh	r2, [r7, #10]
 8005fde:	b2d2      	uxtb	r2, r2
 8005fe0:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < qty; i++)
 8005fe2:	7d7b      	ldrb	r3, [r7, #21]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	757b      	strb	r3, [r7, #21]
 8005fe8:	7d7b      	ldrb	r3, [r7, #21]
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	8a3a      	ldrh	r2, [r7, #16]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d8d4      	bhi.n	8005f9c <fc_read_reg_input+0x68>
	}

	pdu->len = pdu->data[2] + 5;	// include CRC
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	791b      	ldrb	r3, [r3, #4]
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	3305      	adds	r3, #5
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	801a      	strh	r2, [r3, #0]
	return 0;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <fc_read_reg_hodling>:

static uint8_t fc_read_reg_hodling(mb_slave_t* mb, mb_pdu_t* pdu)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b086      	sub	sp, #24
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2  |  2  |
	 * +----+----+------+-----+-----+
	 * len = 8
	 */

	if(pdu->len < 8)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	2b07      	cmp	r3, #7
 800601a:	d801      	bhi.n	8006020 <fc_read_reg_hodling+0x16>
		return MB_EXC_EXECUTE;
 800601c:	2304      	movs	r3, #4
 800601e:	e05b      	b.n	80060d8 <fc_read_reg_hodling+0xce>

	uint16_t addr = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	791b      	ldrb	r3, [r3, #4]
 8006024:	021b      	lsls	r3, r3, #8
 8006026:	b21a      	sxth	r2, r3
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	795b      	ldrb	r3, [r3, #5]
 800602c:	b21b      	sxth	r3, r3
 800602e:	4313      	orrs	r3, r2
 8006030:	b21b      	sxth	r3, r3
 8006032:	827b      	strh	r3, [r7, #18]
	uint16_t qty  = pdu->data[MB_PDU_QTY_HI] << 8 | pdu->data[MB_PDU_QTY_LO];
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	799b      	ldrb	r3, [r3, #6]
 8006038:	021b      	lsls	r3, r3, #8
 800603a:	b21a      	sxth	r2, r3
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	79db      	ldrb	r3, [r3, #7]
 8006040:	b21b      	sxth	r3, r3
 8006042:	4313      	orrs	r3, r2
 8006044:	b21b      	sxth	r3, r3
 8006046:	823b      	strh	r3, [r7, #16]
	 * +----+----+-----+------+-----+
	 * | 1  |  1 |  1  |  n   |  2  |
	 * +----+----+-----+------+-----+
	 */

	uint16_t idata = 0;
 8006048:	2300      	movs	r3, #0
 800604a:	82fb      	strh	r3, [r7, #22]
	uint8_t* data       = &pdu->data[3];
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	3305      	adds	r3, #5
 8006050:	60fb      	str	r3, [r7, #12]

	pdu->data[2]  = qty * 2;
 8006052:	8a3b      	ldrh	r3, [r7, #16]
 8006054:	b2db      	uxtb	r3, r3
 8006056:	005b      	lsls	r3, r3, #1
 8006058:	b2da      	uxtb	r2, r3
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	711a      	strb	r2, [r3, #4]
	memset(data, 0x00, pdu->data[2]);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	791b      	ldrb	r3, [r3, #4]
 8006062:	461a      	mov	r2, r3
 8006064:	2100      	movs	r1, #0
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f001 f95c 	bl	8007324 <memset>

	for(uint8_t i = 0; i < qty; i++)
 800606c:	2300      	movs	r3, #0
 800606e:	757b      	strb	r3, [r7, #21]
 8006070:	e025      	b.n	80060be <fc_read_reg_hodling+0xb4>
	{
		uint16_t value = mb->data.reg_holding.get(&mb->data.reg_holding, addr + i);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8d3 3c94 	ldr.w	r3, [r3, #3220]	; 0xc94
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	f602 4088 	addw	r0, r2, #3208	; 0xc88
 800607e:	7d7a      	ldrb	r2, [r7, #21]
 8006080:	b291      	uxth	r1, r2
 8006082:	8a7a      	ldrh	r2, [r7, #18]
 8006084:	440a      	add	r2, r1
 8006086:	b292      	uxth	r2, r2
 8006088:	4611      	mov	r1, r2
 800608a:	4798      	blx	r3
 800608c:	4603      	mov	r3, r0
 800608e:	817b      	strh	r3, [r7, #10]
		data[idata++] = (uint8_t)(value >> 8);
 8006090:	897b      	ldrh	r3, [r7, #10]
 8006092:	0a1b      	lsrs	r3, r3, #8
 8006094:	b29a      	uxth	r2, r3
 8006096:	8afb      	ldrh	r3, [r7, #22]
 8006098:	1c59      	adds	r1, r3, #1
 800609a:	82f9      	strh	r1, [r7, #22]
 800609c:	4619      	mov	r1, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	440b      	add	r3, r1
 80060a2:	b2d2      	uxtb	r2, r2
 80060a4:	701a      	strb	r2, [r3, #0]
		data[idata++] = (uint8_t)(value);
 80060a6:	8afb      	ldrh	r3, [r7, #22]
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	82fa      	strh	r2, [r7, #22]
 80060ac:	461a      	mov	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	4413      	add	r3, r2
 80060b2:	897a      	ldrh	r2, [r7, #10]
 80060b4:	b2d2      	uxtb	r2, r2
 80060b6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < qty; i++)
 80060b8:	7d7b      	ldrb	r3, [r7, #21]
 80060ba:	3301      	adds	r3, #1
 80060bc:	757b      	strb	r3, [r7, #21]
 80060be:	7d7b      	ldrb	r3, [r7, #21]
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	8a3a      	ldrh	r2, [r7, #16]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d8d4      	bhi.n	8006072 <fc_read_reg_hodling+0x68>
	}

	pdu->len = pdu->data[2] + 5;	// include CRC
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	791b      	ldrb	r3, [r3, #4]
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	3305      	adds	r3, #5
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	801a      	strh	r2, [r3, #0]
	return 0;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3718      	adds	r7, #24
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <fc_write_single_coil>:

static uint8_t fc_write_single_coil(mb_slave_t* mb, mb_pdu_t* pdu)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2    |  2  |
	 * +----+----+------+-------+-----+
	 * len = 8
	 */

	if(pdu->len < 8)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	2b07      	cmp	r3, #7
 80060f0:	d801      	bhi.n	80060f6 <fc_write_single_coil+0x16>
		return MB_EXC_EXECUTE;
 80060f2:	2304      	movs	r3, #4
 80060f4:	e02a      	b.n	800614c <fc_write_single_coil+0x6c>

	uint16_t addr  = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	791b      	ldrb	r3, [r3, #4]
 80060fa:	021b      	lsls	r3, r3, #8
 80060fc:	b21a      	sxth	r2, r3
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	795b      	ldrb	r3, [r3, #5]
 8006102:	b21b      	sxth	r3, r3
 8006104:	4313      	orrs	r3, r2
 8006106:	b21b      	sxth	r3, r3
 8006108:	81fb      	strh	r3, [r7, #14]
	uint16_t value = pdu->data[MB_PDU_QTY_HI]  << 8 | pdu->data[MB_PDU_QTY_LO];
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	799b      	ldrb	r3, [r3, #6]
 800610e:	021b      	lsls	r3, r3, #8
 8006110:	b21a      	sxth	r2, r3
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	79db      	ldrb	r3, [r3, #7]
 8006116:	b21b      	sxth	r3, r3
 8006118:	4313      	orrs	r3, r2
 800611a:	b21b      	sxth	r3, r3
 800611c:	81bb      	strh	r3, [r7, #12]
	 * | 1  | 1  |   2  |  2    |  2  |
	 * +----+----+------+-------+-----+
	 * len = 8
	 */

	if (value == 0x00000)
 800611e:	89bb      	ldrh	r3, [r7, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d109      	bne.n	8006138 <fc_write_single_coil+0x58>
		mb->data.coil.set(&mb->data.coil, addr, 0);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 3c60 	ldr.w	r3, [r3, #3168]	; 0xc60
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	f602 4058 	addw	r0, r2, #3160	; 0xc58
 8006130:	89f9      	ldrh	r1, [r7, #14]
 8006132:	2200      	movs	r2, #0
 8006134:	4798      	blx	r3
 8006136:	e008      	b.n	800614a <fc_write_single_coil+0x6a>
	else
		mb->data.coil.set(&mb->data.coil, addr, 1);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 3c60 	ldr.w	r3, [r3, #3168]	; 0xc60
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	f602 4058 	addw	r0, r2, #3160	; 0xc58
 8006144:	89f9      	ldrh	r1, [r7, #14]
 8006146:	2201      	movs	r2, #1
 8006148:	4798      	blx	r3

	return 0;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <fc_write_single_reg>:

static uint8_t fc_write_single_reg(mb_slave_t* mb, mb_pdu_t* pdu)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2    |  2  |
	 * +----+----+------+-------+-----+
	 * len = 8
	 */

	if(pdu->len < 8)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	2b07      	cmp	r3, #7
 8006164:	d801      	bhi.n	800616a <fc_write_single_reg+0x16>
		return MB_EXC_EXECUTE;
 8006166:	2304      	movs	r3, #4
 8006168:	e01d      	b.n	80061a6 <fc_write_single_reg+0x52>

	uint16_t addr  = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	791b      	ldrb	r3, [r3, #4]
 800616e:	021b      	lsls	r3, r3, #8
 8006170:	b21a      	sxth	r2, r3
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	795b      	ldrb	r3, [r3, #5]
 8006176:	b21b      	sxth	r3, r3
 8006178:	4313      	orrs	r3, r2
 800617a:	b21b      	sxth	r3, r3
 800617c:	81fb      	strh	r3, [r7, #14]
	uint16_t value = pdu->data[MB_PDU_QTY_HI]  << 8 | pdu->data[MB_PDU_QTY_LO];
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	799b      	ldrb	r3, [r3, #6]
 8006182:	021b      	lsls	r3, r3, #8
 8006184:	b21a      	sxth	r2, r3
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	79db      	ldrb	r3, [r3, #7]
 800618a:	b21b      	sxth	r3, r3
 800618c:	4313      	orrs	r3, r2
 800618e:	b21b      	sxth	r3, r3
 8006190:	81bb      	strh	r3, [r7, #12]
	 * | 1  | 1  |   2  |  2    |  2  |
	 * +----+----+------+-------+-----+
	 * len = 8
	 */

	mb->data.reg_holding.set(&mb->data.reg_holding, addr, value);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 3c90 	ldr.w	r3, [r3, #3216]	; 0xc90
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	f602 4088 	addw	r0, r2, #3208	; 0xc88
 800619e:	89ba      	ldrh	r2, [r7, #12]
 80061a0:	89f9      	ldrh	r1, [r7, #14]
 80061a2:	4798      	blx	r3

	return 0;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <fc_write_multi_coil>:

static uint8_t fc_write_multi_coil(mb_slave_t* mb, mb_pdu_t* pdu)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b086      	sub	sp, #24
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2  |  1  |   N  |  2  |
	 * +----+----+------+-----+-----+------+-----+
	 * len_min = 10
	 */

	if(pdu->len < 10)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	2b09      	cmp	r3, #9
 80061be:	d801      	bhi.n	80061c4 <fc_write_multi_coil+0x16>
		return MB_EXC_EXECUTE;
 80061c0:	2304      	movs	r3, #4
 80061c2:	e061      	b.n	8006288 <fc_write_multi_coil+0xda>

	uint16_t addr  = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	791b      	ldrb	r3, [r3, #4]
 80061c8:	021b      	lsls	r3, r3, #8
 80061ca:	b21a      	sxth	r2, r3
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	795b      	ldrb	r3, [r3, #5]
 80061d0:	b21b      	sxth	r3, r3
 80061d2:	4313      	orrs	r3, r2
 80061d4:	b21b      	sxth	r3, r3
 80061d6:	82bb      	strh	r3, [r7, #20]
	uint16_t qty   = pdu->data[MB_PDU_QTY_HI]  << 8 | pdu->data[MB_PDU_QTY_LO];
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	799b      	ldrb	r3, [r3, #6]
 80061dc:	021b      	lsls	r3, r3, #8
 80061de:	b21a      	sxth	r2, r3
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	79db      	ldrb	r3, [r3, #7]
 80061e4:	b21b      	sxth	r3, r3
 80061e6:	4313      	orrs	r3, r2
 80061e8:	b21b      	sxth	r3, r3
 80061ea:	827b      	strh	r3, [r7, #18]
	uint8_t  b_cnt = pdu->data[MB_PDU_CNT];
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	7a1b      	ldrb	r3, [r3, #8]
 80061f0:	747b      	strb	r3, [r7, #17]

	uint8_t _cnt = qty / 8;
 80061f2:	8a7b      	ldrh	r3, [r7, #18]
 80061f4:	08db      	lsrs	r3, r3, #3
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	75fb      	strb	r3, [r7, #23]
	if(qty % 8)
 80061fa:	8a7b      	ldrh	r3, [r7, #18]
 80061fc:	f003 0307 	and.w	r3, r3, #7
 8006200:	b29b      	uxth	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d002      	beq.n	800620c <fc_write_multi_coil+0x5e>
		_cnt += 1;
 8006206:	7dfb      	ldrb	r3, [r7, #23]
 8006208:	3301      	adds	r3, #1
 800620a:	75fb      	strb	r3, [r7, #23]

	if (((b_cnt + 9) != pdu->len) || (_cnt != b_cnt))
 800620c:	7c7b      	ldrb	r3, [r7, #17]
 800620e:	3309      	adds	r3, #9
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	8812      	ldrh	r2, [r2, #0]
 8006214:	4293      	cmp	r3, r2
 8006216:	d103      	bne.n	8006220 <fc_write_multi_coil+0x72>
 8006218:	7dfa      	ldrb	r2, [r7, #23]
 800621a:	7c7b      	ldrb	r3, [r7, #17]
 800621c:	429a      	cmp	r2, r3
 800621e:	d001      	beq.n	8006224 <fc_write_multi_coil+0x76>
		return MB_EXC_EXECUTE;
 8006220:	2304      	movs	r3, #4
 8006222:	e031      	b.n	8006288 <fc_write_multi_coil+0xda>

	uint8_t* data = &pdu->data[7];
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	3309      	adds	r3, #9
 8006228:	60fb      	str	r3, [r7, #12]
	for(uint8_t i  = 0; i < qty; i++)
 800622a:	2300      	movs	r3, #0
 800622c:	75bb      	strb	r3, [r7, #22]
 800622e:	e022      	b.n	8006276 <fc_write_multi_coil+0xc8>
	{
		uint8_t ibyte = i / 8;
 8006230:	7dbb      	ldrb	r3, [r7, #22]
 8006232:	08db      	lsrs	r3, r3, #3
 8006234:	72fb      	strb	r3, [r7, #11]
		uint8_t ibit  = i % 8;
 8006236:	7dbb      	ldrb	r3, [r7, #22]
 8006238:	f003 0307 	and.w	r3, r3, #7
 800623c:	72bb      	strb	r3, [r7, #10]

		uint8_t status = (data[ibyte] >> ibit) & 0x01;
 800623e:	7afb      	ldrb	r3, [r7, #11]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	4413      	add	r3, r2
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	461a      	mov	r2, r3
 8006248:	7abb      	ldrb	r3, [r7, #10]
 800624a:	fa42 f303 	asr.w	r3, r2, r3
 800624e:	b2db      	uxtb	r3, r3
 8006250:	f003 0301 	and.w	r3, r3, #1
 8006254:	727b      	strb	r3, [r7, #9]
		mb->data.coil.set(&mb->data.coil, addr + i, status);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 3c60 	ldr.w	r3, [r3, #3168]	; 0xc60
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	f602 4058 	addw	r0, r2, #3160	; 0xc58
 8006262:	7dba      	ldrb	r2, [r7, #22]
 8006264:	b291      	uxth	r1, r2
 8006266:	8aba      	ldrh	r2, [r7, #20]
 8006268:	440a      	add	r2, r1
 800626a:	b291      	uxth	r1, r2
 800626c:	7a7a      	ldrb	r2, [r7, #9]
 800626e:	4798      	blx	r3
	for(uint8_t i  = 0; i < qty; i++)
 8006270:	7dbb      	ldrb	r3, [r7, #22]
 8006272:	3301      	adds	r3, #1
 8006274:	75bb      	strb	r3, [r7, #22]
 8006276:	7dbb      	ldrb	r3, [r7, #22]
 8006278:	b29b      	uxth	r3, r3
 800627a:	8a7a      	ldrh	r2, [r7, #18]
 800627c:	429a      	cmp	r2, r3
 800627e:	d8d7      	bhi.n	8006230 <fc_write_multi_coil+0x82>
	 * | 1  | 1  |   2  |  2  |  2  |
	 * +----+----+------+-----+-----+
	 * len_min = 8
	 */

	pdu->len = 8;	// include CRC
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	2208      	movs	r2, #8
 8006284:	801a      	strh	r2, [r3, #0]

	return 0;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <fc_write_multi_reg>:

static uint8_t fc_write_multi_reg(mb_slave_t* mb, mb_pdu_t* pdu)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b088      	sub	sp, #32
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
	 * | 1  | 1  |   2  |  2  |  1  |   N  |  2  |
	 * +----+----+------+-----+-----+------+-----+
	 * len_min = 11
	 */

	if(pdu->len < 11)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	2b0a      	cmp	r3, #10
 80062a0:	d801      	bhi.n	80062a6 <fc_write_multi_reg+0x16>
		return MB_EXC_EXECUTE;
 80062a2:	2304      	movs	r3, #4
 80062a4:	e05c      	b.n	8006360 <fc_write_multi_reg+0xd0>

	uint16_t addr  = pdu->data[MB_PDU_ADDR_HI] << 8 | pdu->data[MB_PDU_ADDR_LO];
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	791b      	ldrb	r3, [r3, #4]
 80062aa:	021b      	lsls	r3, r3, #8
 80062ac:	b21a      	sxth	r2, r3
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	795b      	ldrb	r3, [r3, #5]
 80062b2:	b21b      	sxth	r3, r3
 80062b4:	4313      	orrs	r3, r2
 80062b6:	b21b      	sxth	r3, r3
 80062b8:	837b      	strh	r3, [r7, #26]
	uint16_t qty   = pdu->data[MB_PDU_QTY_HI]  << 8 | pdu->data[MB_PDU_QTY_LO];
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	799b      	ldrb	r3, [r3, #6]
 80062be:	021b      	lsls	r3, r3, #8
 80062c0:	b21a      	sxth	r2, r3
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	79db      	ldrb	r3, [r3, #7]
 80062c6:	b21b      	sxth	r3, r3
 80062c8:	4313      	orrs	r3, r2
 80062ca:	b21b      	sxth	r3, r3
 80062cc:	833b      	strh	r3, [r7, #24]
	uint8_t  b_cnt = pdu->data[MB_PDU_CNT];
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	7a1b      	ldrb	r3, [r3, #8]
 80062d2:	75fb      	strb	r3, [r7, #23]

	if ((qty*2 != b_cnt) || ((b_cnt + 9) != pdu->len))
 80062d4:	8b3b      	ldrh	r3, [r7, #24]
 80062d6:	005a      	lsls	r2, r3, #1
 80062d8:	7dfb      	ldrb	r3, [r7, #23]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d105      	bne.n	80062ea <fc_write_multi_reg+0x5a>
 80062de:	7dfb      	ldrb	r3, [r7, #23]
 80062e0:	3309      	adds	r3, #9
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	8812      	ldrh	r2, [r2, #0]
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d001      	beq.n	80062ee <fc_write_multi_reg+0x5e>
		return MB_EXC_EXECUTE;
 80062ea:	2304      	movs	r3, #4
 80062ec:	e038      	b.n	8006360 <fc_write_multi_reg+0xd0>

	uint8_t* data = &pdu->data[7];
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	3309      	adds	r3, #9
 80062f2:	613b      	str	r3, [r7, #16]
	uint16_t data_index = 0;
 80062f4:	2300      	movs	r3, #0
 80062f6:	83fb      	strh	r3, [r7, #30]
	for(uint8_t i = 0; i < qty; i++)
 80062f8:	2300      	movs	r3, #0
 80062fa:	777b      	strb	r3, [r7, #29]
 80062fc:	e027      	b.n	800634e <fc_write_multi_reg+0xbe>
	{
		uint8_t hi = data[data_index++];
 80062fe:	8bfb      	ldrh	r3, [r7, #30]
 8006300:	1c5a      	adds	r2, r3, #1
 8006302:	83fa      	strh	r2, [r7, #30]
 8006304:	461a      	mov	r2, r3
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	4413      	add	r3, r2
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	73fb      	strb	r3, [r7, #15]
		uint8_t lo = data[data_index++];
 800630e:	8bfb      	ldrh	r3, [r7, #30]
 8006310:	1c5a      	adds	r2, r3, #1
 8006312:	83fa      	strh	r2, [r7, #30]
 8006314:	461a      	mov	r2, r3
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	4413      	add	r3, r2
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	73bb      	strb	r3, [r7, #14]
		uint16_t value = hi << 8 | lo;
 800631e:	7bfb      	ldrb	r3, [r7, #15]
 8006320:	021b      	lsls	r3, r3, #8
 8006322:	b21a      	sxth	r2, r3
 8006324:	7bbb      	ldrb	r3, [r7, #14]
 8006326:	b21b      	sxth	r3, r3
 8006328:	4313      	orrs	r3, r2
 800632a:	b21b      	sxth	r3, r3
 800632c:	81bb      	strh	r3, [r7, #12]
		mb->data.reg_holding.set(&mb->data.reg_holding, addr + i, value);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 3c90 	ldr.w	r3, [r3, #3216]	; 0xc90
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	f602 4088 	addw	r0, r2, #3208	; 0xc88
 800633a:	7f7a      	ldrb	r2, [r7, #29]
 800633c:	b291      	uxth	r1, r2
 800633e:	8b7a      	ldrh	r2, [r7, #26]
 8006340:	440a      	add	r2, r1
 8006342:	b291      	uxth	r1, r2
 8006344:	89ba      	ldrh	r2, [r7, #12]
 8006346:	4798      	blx	r3
	for(uint8_t i = 0; i < qty; i++)
 8006348:	7f7b      	ldrb	r3, [r7, #29]
 800634a:	3301      	adds	r3, #1
 800634c:	777b      	strb	r3, [r7, #29]
 800634e:	7f7b      	ldrb	r3, [r7, #29]
 8006350:	b29b      	uxth	r3, r3
 8006352:	8b3a      	ldrh	r2, [r7, #24]
 8006354:	429a      	cmp	r2, r3
 8006356:	d8d2      	bhi.n	80062fe <fc_write_multi_reg+0x6e>
	 * | 1  | 1  |   2  |  2  |  2  |
	 * +----+----+------+-----+-----+
	 * len_min = 8
	 */

	pdu->len = 8;	// include CRC
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	2208      	movs	r2, #8
 800635c:	801a      	strh	r2, [r3, #0]

	return 0;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3720      	adds	r7, #32
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <ring_buffer_init>:
static void     _get(ring_buffer_t *buf, uint8_t *obuf, uint16_t *buf_size);
static void     _flush(ring_buffer_t *buf);
static uint16_t _available(ring_buffer_t *buf);

void ring_buffer_init(ring_buffer_t *buf)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <ring_buffer_init+0x12>
 8006376:	f7fe fe89 	bl	800508c <__mb_failure>
	buf->__tail      = 0;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	801a      	strh	r2, [r3, #0]
	buf->__head      = 0;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	805a      	strh	r2, [r3, #2]
	buf->__available = 0;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
	buf->overflow    = false;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	buf->add       = _add;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a09      	ldr	r2, [pc, #36]	; (80063c0 <ring_buffer_init+0x58>)
 800639a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	buf->get_data  = _get;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a08      	ldr	r2, [pc, #32]	; (80063c4 <ring_buffer_init+0x5c>)
 80063a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	buf->available = _available;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a07      	ldr	r2, [pc, #28]	; (80063c8 <ring_buffer_init+0x60>)
 80063aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	buf->flush     = _flush;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a06      	ldr	r2, [pc, #24]	; (80063cc <ring_buffer_init+0x64>)
 80063b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80063b6:	bf00      	nop
 80063b8:	3708      	adds	r7, #8
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	080063d1 	.word	0x080063d1
 80063c4:	08006493 	.word	0x08006493
 80063c8:	08006549 	.word	0x08006549
 80063cc:	0800645d 	.word	0x0800645d

080063d0 <_add>:

void _add(ring_buffer_t *buf, uint8_t data)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	460b      	mov	r3, r1
 80063da:	70fb      	strb	r3, [r7, #3]
	mb_assert(buf);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <_add+0x16>
 80063e2:	f7fe fe53 	bl	800508c <__mb_failure>
	if (buf->overflow)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d12e      	bne.n	800644e <_add+0x7e>
		return;

	buf->__data[buf->__head] = data;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	885b      	ldrh	r3, [r3, #2]
 80063f4:	78fa      	ldrb	r2, [r7, #3]
 80063f6:	b291      	uxth	r1, r2
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	4413      	add	r3, r2
 80063fe:	460a      	mov	r2, r1
 8006400:	809a      	strh	r2, [r3, #4]
	buf->__head = (buf->__head + 1) % RING_BUFFER_SIZE;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	885b      	ldrh	r3, [r3, #2]
 8006406:	3301      	adds	r3, #1
 8006408:	425a      	negs	r2, r3
 800640a:	b2db      	uxtb	r3, r3
 800640c:	b2d2      	uxtb	r2, r2
 800640e:	bf58      	it	pl
 8006410:	4253      	negpl	r3, r2
 8006412:	b29a      	uxth	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	805a      	strh	r2, [r3, #2]
	if (buf->__available >= RING_BUFFER_SIZE)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800641e:	2bff      	cmp	r3, #255	; 0xff
 8006420:	d908      	bls.n	8006434 <_add+0x64>
	{
		buf->overflow = true;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		mb_log("Ring buffer overflow\n");
 800642a:	490b      	ldr	r1, [pc, #44]	; (8006458 <_add+0x88>)
 800642c:	2000      	movs	r0, #0
 800642e:	f000 ff2f 	bl	8007290 <SEGGER_RTT_printf>
 8006432:	e00d      	b.n	8006450 <_add+0x80>
	}
	else
	{
		buf->overflow = false;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		buf->__available++;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8006442:	3301      	adds	r3, #1
 8006444:	b29a      	uxth	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 800644c:	e000      	b.n	8006450 <_add+0x80>
		return;
 800644e:	bf00      	nop
	}
}
 8006450:	3708      	adds	r7, #8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	08007484 	.word	0x08007484

0800645c <_flush>:

void _flush(ring_buffer_t *buf)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
	mb_assert(buf);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <_flush+0x12>
 800646a:	f7fe fe0f 	bl	800508c <__mb_failure>
	buf->__tail      = 0;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	801a      	strh	r2, [r3, #0]
	buf->__head      = 0;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	805a      	strh	r2, [r3, #2]
	buf->__available = 0;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
	buf->overflow    = false;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
}
 800648a:	bf00      	nop
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <_get>:

void _get(ring_buffer_t *buf, uint8_t *data, uint16_t *data_size)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b086      	sub	sp, #24
 8006496:	af00      	add	r7, sp, #0
 8006498:	60f8      	str	r0, [r7, #12]
 800649a:	60b9      	str	r1, [r7, #8]
 800649c:	607a      	str	r2, [r7, #4]
	mb_assert(buf);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <_get+0x16>
 80064a4:	f7fe fdf2 	bl	800508c <__mb_failure>
	mb_assert(data);
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <_get+0x20>
 80064ae:	f7fe fded 	bl	800508c <__mb_failure>
	mb_assert(*data_size);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	881b      	ldrh	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <_get+0x2c>
 80064ba:	f7fe fde7 	bl	800508c <__mb_failure>

	if (buf->__available == 0)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d103      	bne.n	80064d0 <_get+0x3e>
	{
		*data_size = 0;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	801a      	strh	r2, [r3, #0]
		return;
 80064ce:	e038      	b.n	8006542 <_get+0xb0>
	}

	uint16_t len;
	len          = (buf->__available < *data_size) ? buf->__available : *data_size;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	881a      	ldrh	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 80064da:	4293      	cmp	r3, r2
 80064dc:	bf28      	it	cs
 80064de:	4613      	movcs	r3, r2
 80064e0:	82bb      	strh	r3, [r7, #20]
	*data_size   = len;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	8aba      	ldrh	r2, [r7, #20]
 80064e6:	801a      	strh	r2, [r3, #0]

	for (uint16_t i = 0; i < len; i++)
 80064e8:	2300      	movs	r3, #0
 80064ea:	82fb      	strh	r3, [r7, #22]
 80064ec:	e018      	b.n	8006520 <_get+0x8e>
	{
		data[i]     = buf->__data[buf->__tail];
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	005b      	lsls	r3, r3, #1
 80064f6:	4413      	add	r3, r2
 80064f8:	8899      	ldrh	r1, [r3, #4]
 80064fa:	8afb      	ldrh	r3, [r7, #22]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	4413      	add	r3, r2
 8006500:	b2ca      	uxtb	r2, r1
 8006502:	701a      	strb	r2, [r3, #0]
		buf->__tail = (buf->__tail + 1) % RING_BUFFER_SIZE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	3301      	adds	r3, #1
 800650a:	425a      	negs	r2, r3
 800650c:	b2db      	uxtb	r3, r3
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	bf58      	it	pl
 8006512:	4253      	negpl	r3, r2
 8006514:	b29a      	uxth	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < len; i++)
 800651a:	8afb      	ldrh	r3, [r7, #22]
 800651c:	3301      	adds	r3, #1
 800651e:	82fb      	strh	r3, [r7, #22]
 8006520:	8afa      	ldrh	r2, [r7, #22]
 8006522:	8abb      	ldrh	r3, [r7, #20]
 8006524:	429a      	cmp	r2, r3
 8006526:	d3e2      	bcc.n	80064ee <_get+0x5c>
	}
	buf->__available = buf->__available - len;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f8b3 2204 	ldrh.w	r2, [r3, #516]	; 0x204
 800652e:	8abb      	ldrh	r3, [r7, #20]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	b29a      	uxth	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
	buf->overflow    = false;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
}
 8006542:	3718      	adds	r7, #24
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <_available>:

uint16_t _available(ring_buffer_t *buf)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
	return buf->__available;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
}
 8006556:	4618      	mov	r0, r3
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
	...

08006564 <mb_data_init>:
static uint8_t  input_db[MB_INPUT_NUM/8];
static uint16_t reg_input_db[MB_REG_INPUT_NUM];
static uint16_t reg_holding_db[MB_REG_HOLDING_NUM];

void mb_data_init(mb_data_t* mb_data)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
	mb_assert(mb_data);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <mb_data_init+0x12>
 8006572:	f7fe fd8b 	bl	800508c <__mb_failure>

	memset(coil_db       , 0, sizeof(coil_db));
 8006576:	22fa      	movs	r2, #250	; 0xfa
 8006578:	2100      	movs	r1, #0
 800657a:	481b      	ldr	r0, [pc, #108]	; (80065e8 <mb_data_init+0x84>)
 800657c:	f000 fed2 	bl	8007324 <memset>
	memset(input_db      , 0, sizeof(input_db));
 8006580:	22fa      	movs	r2, #250	; 0xfa
 8006582:	2100      	movs	r1, #0
 8006584:	4819      	ldr	r0, [pc, #100]	; (80065ec <mb_data_init+0x88>)
 8006586:	f000 fecd 	bl	8007324 <memset>
	memset(reg_input_db  , 0, sizeof(reg_input_db));
 800658a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800658e:	2100      	movs	r1, #0
 8006590:	4817      	ldr	r0, [pc, #92]	; (80065f0 <mb_data_init+0x8c>)
 8006592:	f000 fec7 	bl	8007324 <memset>
	memset(reg_holding_db, 0, sizeof(reg_holding_db));
 8006596:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800659a:	2100      	movs	r1, #0
 800659c:	4815      	ldr	r0, [pc, #84]	; (80065f4 <mb_data_init+0x90>)
 800659e:	f000 fec1 	bl	8007324 <memset>

	mb_data_bit_init(&mb_data->coil       , coil_db       , MB_COIL_NUM);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80065a8:	490f      	ldr	r1, [pc, #60]	; (80065e8 <mb_data_init+0x84>)
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 f824 	bl	80065f8 <mb_data_bit_init>
	mb_data_bit_init(&mb_data->input      , input_db      , MB_INPUT_NUM);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	3310      	adds	r3, #16
 80065b4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80065b8:	490c      	ldr	r1, [pc, #48]	; (80065ec <mb_data_init+0x88>)
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 f81c 	bl	80065f8 <mb_data_bit_init>
	mb_data_reg_init(&mb_data->reg_input  , reg_input_db  , MB_REG_INPUT_NUM);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	3320      	adds	r3, #32
 80065c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80065c8:	4909      	ldr	r1, [pc, #36]	; (80065f0 <mb_data_init+0x8c>)
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 f8b4 	bl	8006738 <mb_data_reg_init>
	mb_data_reg_init(&mb_data->reg_holding, reg_holding_db, MB_REG_HOLDING_NUM);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	3330      	adds	r3, #48	; 0x30
 80065d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80065d8:	4906      	ldr	r1, [pc, #24]	; (80065f4 <mb_data_init+0x90>)
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 f8ac 	bl	8006738 <mb_data_reg_init>
}
 80065e0:	bf00      	nop
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	20000f1c 	.word	0x20000f1c
 80065ec:	20001018 	.word	0x20001018
 80065f0:	20001114 	.word	0x20001114
 80065f4:	200018e4 	.word	0x200018e4

080065f8 <mb_data_bit_init>:

uint8_t _get_bit(mb_data_bit_t *bit, uint16_t addr);
void _set_bit(mb_data_bit_t *bit, uint16_t addr, uint8_t status);

void mb_data_bit_init(mb_data_bit_t *bit, uint8_t *data, uint16_t n_bit)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	4613      	mov	r3, r2
 8006604:	80fb      	strh	r3, [r7, #6]
	mb_assert(bit);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <mb_data_bit_init+0x18>
 800660c:	f7fe fd3e 	bl	800508c <__mb_failure>
	mb_assert(data);
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <mb_data_bit_init+0x22>
 8006616:	f7fe fd39 	bl	800508c <__mb_failure>
	mb_assert(n_bit);
 800661a:	88fb      	ldrh	r3, [r7, #6]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <mb_data_bit_init+0x2c>
 8006620:	f7fe fd34 	bl	800508c <__mb_failure>

	bit->data = data;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	601a      	str	r2, [r3, #0]
	bit->nbit = n_bit;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	88fa      	ldrh	r2, [r7, #6]
 800662e:	809a      	strh	r2, [r3, #4]
	bit->get  = _get_bit;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4a04      	ldr	r2, [pc, #16]	; (8006644 <mb_data_bit_init+0x4c>)
 8006634:	60da      	str	r2, [r3, #12]
	bit->set  = _set_bit;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4a03      	ldr	r2, [pc, #12]	; (8006648 <mb_data_bit_init+0x50>)
 800663a:	609a      	str	r2, [r3, #8]
}
 800663c:	bf00      	nop
 800663e:	3710      	adds	r7, #16
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	0800664d 	.word	0x0800664d
 8006648:	080066a5 	.word	0x080066a5

0800664c <_get_bit>:

uint8_t _get_bit(mb_data_bit_t *bit, uint16_t addr)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	460b      	mov	r3, r1
 8006656:	807b      	strh	r3, [r7, #2]
	mb_assert(bit);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <_get_bit+0x16>
 800665e:	f7fe fd15 	bl	800508c <__mb_failure>
	mb_assert(addr < bit->nbit);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	889b      	ldrh	r3, [r3, #4]
 8006666:	887a      	ldrh	r2, [r7, #2]
 8006668:	429a      	cmp	r2, r3
 800666a:	d301      	bcc.n	8006670 <_get_bit+0x24>
 800666c:	f7fe fd0e 	bl	800508c <__mb_failure>

	uint8_t byte_index = addr / 8;
 8006670:	887b      	ldrh	r3, [r7, #2]
 8006672:	08db      	lsrs	r3, r3, #3
 8006674:	b29b      	uxth	r3, r3
 8006676:	73fb      	strb	r3, [r7, #15]
	uint8_t bit_index  = addr % 8;
 8006678:	887b      	ldrh	r3, [r7, #2]
 800667a:	b2db      	uxtb	r3, r3
 800667c:	f003 0307 	and.w	r3, r3, #7
 8006680:	73bb      	strb	r3, [r7, #14]

	return (uint8_t)((bit->data[byte_index] >> bit_index) & 0x01);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	7bfb      	ldrb	r3, [r7, #15]
 8006688:	4413      	add	r3, r2
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	461a      	mov	r2, r3
 800668e:	7bbb      	ldrb	r3, [r7, #14]
 8006690:	fa42 f303 	asr.w	r3, r2, r3
 8006694:	b2db      	uxtb	r3, r3
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	b2db      	uxtb	r3, r3
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <_set_bit>:

void _set_bit(mb_data_bit_t *bit, uint16_t addr, uint8_t status)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	460b      	mov	r3, r1
 80066ae:	807b      	strh	r3, [r7, #2]
 80066b0:	4613      	mov	r3, r2
 80066b2:	707b      	strb	r3, [r7, #1]
	mb_assert(bit);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <_set_bit+0x1a>
 80066ba:	f7fe fce7 	bl	800508c <__mb_failure>
	mb_assert(addr < bit->nbit);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	889b      	ldrh	r3, [r3, #4]
 80066c2:	887a      	ldrh	r2, [r7, #2]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d301      	bcc.n	80066cc <_set_bit+0x28>
 80066c8:	f7fe fce0 	bl	800508c <__mb_failure>

	uint8_t byte_index = addr / 8;
 80066cc:	887b      	ldrh	r3, [r7, #2]
 80066ce:	08db      	lsrs	r3, r3, #3
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	73fb      	strb	r3, [r7, #15]
	uint8_t bit_index  = addr % 8;
 80066d4:	887b      	ldrh	r3, [r7, #2]
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	f003 0307 	and.w	r3, r3, #7
 80066dc:	73bb      	strb	r3, [r7, #14]

	uint8_t val = 1 << bit_index;
 80066de:	7bbb      	ldrb	r3, [r7, #14]
 80066e0:	2201      	movs	r2, #1
 80066e2:	fa02 f303 	lsl.w	r3, r2, r3
 80066e6:	737b      	strb	r3, [r7, #13]
	if (status)
 80066e8:	787b      	ldrb	r3, [r7, #1]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00d      	beq.n	800670a <_set_bit+0x66>
		bit->data[byte_index] = (uint8_t)(bit->data[byte_index] | val);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	7bfb      	ldrb	r3, [r7, #15]
 80066f4:	4413      	add	r3, r2
 80066f6:	7819      	ldrb	r1, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	7bfb      	ldrb	r3, [r7, #15]
 80066fe:	4413      	add	r3, r2
 8006700:	7b7a      	ldrb	r2, [r7, #13]
 8006702:	430a      	orrs	r2, r1
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	701a      	strb	r2, [r3, #0]
	else
		bit->data[byte_index] = (uint8_t)(bit->data[byte_index] & (~val));
}
 8006708:	e011      	b.n	800672e <_set_bit+0x8a>
		bit->data[byte_index] = (uint8_t)(bit->data[byte_index] & (~val));
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	7bfb      	ldrb	r3, [r7, #15]
 8006710:	4413      	add	r3, r2
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	b25a      	sxtb	r2, r3
 8006716:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800671a:	43db      	mvns	r3, r3
 800671c:	b25b      	sxtb	r3, r3
 800671e:	4013      	ands	r3, r2
 8006720:	b259      	sxtb	r1, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	7bfb      	ldrb	r3, [r7, #15]
 8006728:	4413      	add	r3, r2
 800672a:	b2ca      	uxtb	r2, r1
 800672c:	701a      	strb	r2, [r3, #0]
}
 800672e:	bf00      	nop
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
	...

08006738 <mb_data_reg_init>:

static void     _reg_set(mb_data_reg_t* reg, uint16_t addr, uint16_t value);
static uint16_t _reg_get(mb_data_reg_t* reg, uint16_t addr);

void mb_data_reg_init(mb_data_reg_t* reg, uint16_t* data, uint16_t nreg)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	4613      	mov	r3, r2
 8006744:	80fb      	strh	r3, [r7, #6]
	mb_assert(reg);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <mb_data_reg_init+0x18>
 800674c:	f7fe fc9e 	bl	800508c <__mb_failure>
	mb_assert(data);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <mb_data_reg_init+0x22>
 8006756:	f7fe fc99 	bl	800508c <__mb_failure>
	mb_assert(nreg);
 800675a:	88fb      	ldrh	r3, [r7, #6]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <mb_data_reg_init+0x2c>
 8006760:	f7fe fc94 	bl	800508c <__mb_failure>

	reg->data = data;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	601a      	str	r2, [r3, #0]
	reg->nreg = nreg;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	88fa      	ldrh	r2, [r7, #6]
 800676e:	809a      	strh	r2, [r3, #4]
	reg->get  = _reg_get;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4a04      	ldr	r2, [pc, #16]	; (8006784 <mb_data_reg_init+0x4c>)
 8006774:	60da      	str	r2, [r3, #12]
	reg->set  = _reg_set;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	4a03      	ldr	r2, [pc, #12]	; (8006788 <mb_data_reg_init+0x50>)
 800677a:	609a      	str	r2, [r3, #8]
}
 800677c:	bf00      	nop
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	080067cb 	.word	0x080067cb
 8006788:	0800678d 	.word	0x0800678d

0800678c <_reg_set>:

static void _reg_set(mb_data_reg_t *reg, uint16_t addr, uint16_t value) {
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	460b      	mov	r3, r1
 8006796:	807b      	strh	r3, [r7, #2]
 8006798:	4613      	mov	r3, r2
 800679a:	803b      	strh	r3, [r7, #0]
	mb_assert(reg);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <_reg_set+0x1a>
 80067a2:	f7fe fc73 	bl	800508c <__mb_failure>
	mb_assert(addr < reg->nreg);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	889b      	ldrh	r3, [r3, #4]
 80067aa:	887a      	ldrh	r2, [r7, #2]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d301      	bcc.n	80067b4 <_reg_set+0x28>
 80067b0:	f7fe fc6c 	bl	800508c <__mb_failure>
	reg->data[addr] = value;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	887b      	ldrh	r3, [r7, #2]
 80067ba:	005b      	lsls	r3, r3, #1
 80067bc:	4413      	add	r3, r2
 80067be:	883a      	ldrh	r2, [r7, #0]
 80067c0:	801a      	strh	r2, [r3, #0]
}
 80067c2:	bf00      	nop
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <_reg_get>:

static uint16_t _reg_get(mb_data_reg_t *reg, uint16_t addr) {
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b082      	sub	sp, #8
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	460b      	mov	r3, r1
 80067d4:	807b      	strh	r3, [r7, #2]
	mb_assert(reg);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <_reg_get+0x16>
 80067dc:	f7fe fc56 	bl	800508c <__mb_failure>
	mb_assert(addr < reg->nreg);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	889b      	ldrh	r3, [r3, #4]
 80067e4:	887a      	ldrh	r2, [r7, #2]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d301      	bcc.n	80067ee <_reg_get+0x24>
 80067ea:	f7fe fc4f 	bl	800508c <__mb_failure>
	
	return reg->data[addr];
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	887b      	ldrh	r3, [r7, #2]
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	4413      	add	r3, r2
 80067f8:	881b      	ldrh	r3, [r3, #0]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
	...

08006804 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800680a:	4b25      	ldr	r3, [pc, #148]	; (80068a0 <_DoInit+0x9c>)
 800680c:	603b      	str	r3, [r7, #0]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2203      	movs	r2, #3
 8006812:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	2203      	movs	r2, #3
 8006818:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	4a21      	ldr	r2, [pc, #132]	; (80068a4 <_DoInit+0xa0>)
 800681e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	4a21      	ldr	r2, [pc, #132]	; (80068a8 <_DoInit+0xa4>)
 8006824:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800682c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2200      	movs	r2, #0
 8006832:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	2200      	movs	r2, #0
 8006838:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2200      	movs	r2, #0
 800683e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	4a18      	ldr	r2, [pc, #96]	; (80068a4 <_DoInit+0xa0>)
 8006844:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	4a18      	ldr	r2, [pc, #96]	; (80068ac <_DoInit+0xa8>)
 800684a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	2210      	movs	r2, #16
 8006850:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2200      	movs	r2, #0
 8006856:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	2200      	movs	r2, #0
 800685c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2200      	movs	r2, #0
 8006862:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8006864:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8006868:	2300      	movs	r3, #0
 800686a:	607b      	str	r3, [r7, #4]
 800686c:	e00c      	b.n	8006888 <_DoInit+0x84>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f1c3 030f 	rsb	r3, r3, #15
 8006874:	4a0e      	ldr	r2, [pc, #56]	; (80068b0 <_DoInit+0xac>)
 8006876:	5cd1      	ldrb	r1, [r2, r3]
 8006878:	683a      	ldr	r2, [r7, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4413      	add	r3, r2
 800687e:	460a      	mov	r2, r1
 8006880:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	3301      	adds	r3, #1
 8006886:	607b      	str	r3, [r7, #4]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b0f      	cmp	r3, #15
 800688c:	d9ef      	bls.n	800686e <_DoInit+0x6a>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800688e:	f3bf 8f5f 	dmb	sy
}
 8006892:	bf00      	nop
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	200020b4 	.word	0x200020b4
 80068a4:	0800749c 	.word	0x0800749c
 80068a8:	2000215c 	.word	0x2000215c
 80068ac:	2000255c 	.word	0x2000255c
 80068b0:	080074c8 	.word	0x080074c8

080068b4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b08a      	sub	sp, #40	; 0x28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80068c0:	2300      	movs	r3, #0
 80068c2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80068d0:	69ba      	ldr	r2, [r7, #24]
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d905      	bls.n	80068e4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80068d8:	69ba      	ldr	r2, [r7, #24]
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	3b01      	subs	r3, #1
 80068e0:	627b      	str	r3, [r7, #36]	; 0x24
 80068e2:	e007      	b.n	80068f4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	689a      	ldr	r2, [r3, #8]
 80068e8:	69b9      	ldr	r1, [r7, #24]
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	1acb      	subs	r3, r1, r3
 80068ee:	4413      	add	r3, r2
 80068f0:	3b01      	subs	r3, #1
 80068f2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068fe:	4293      	cmp	r3, r2
 8006900:	bf28      	it	cs
 8006902:	4613      	movcs	r3, r2
 8006904:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8006906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4293      	cmp	r3, r2
 800690c:	bf28      	it	cs
 800690e:	4613      	movcs	r3, r2
 8006910:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	4413      	add	r3, r2
 800691a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800691c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800691e:	68b9      	ldr	r1, [r7, #8]
 8006920:	6978      	ldr	r0, [r7, #20]
 8006922:	f000 fcf1 	bl	8007308 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8006926:	6a3a      	ldr	r2, [r7, #32]
 8006928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692a:	4413      	add	r3, r2
 800692c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	4413      	add	r3, r2
 8006934:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800693e:	69fa      	ldr	r2, [r7, #28]
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	4413      	add	r3, r2
 8006944:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	69fa      	ldr	r2, [r7, #28]
 800694c:	429a      	cmp	r2, r3
 800694e:	d101      	bne.n	8006954 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8006950:	2300      	movs	r3, #0
 8006952:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006954:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	69fa      	ldr	r2, [r7, #28]
 800695c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1b2      	bne.n	80068ca <_WriteBlocking+0x16>
  return NumBytesWritten;
 8006964:	6a3b      	ldr	r3, [r7, #32]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3728      	adds	r7, #40	; 0x28
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800696e:	b580      	push	{r7, lr}
 8006970:	b088      	sub	sp, #32
 8006972:	af00      	add	r7, sp, #0
 8006974:	60f8      	str	r0, [r7, #12]
 8006976:	60b9      	str	r1, [r7, #8]
 8006978:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800698a:	69ba      	ldr	r2, [r7, #24]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	429a      	cmp	r2, r3
 8006990:	d911      	bls.n	80069b6 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	4413      	add	r3, r2
 800699a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	68b9      	ldr	r1, [r7, #8]
 80069a0:	6938      	ldr	r0, [r7, #16]
 80069a2:	f000 fcb1 	bl	8007308 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80069a6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80069aa:	69fa      	ldr	r2, [r7, #28]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	441a      	add	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80069b4:	e01f      	b.n	80069f6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	4413      	add	r3, r2
 80069c2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	68b9      	ldr	r1, [r7, #8]
 80069c8:	6938      	ldr	r0, [r7, #16]
 80069ca:	f000 fc9d 	bl	8007308 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	4413      	add	r3, r2
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	4619      	mov	r1, r3
 80069e6:	6938      	ldr	r0, [r7, #16]
 80069e8:	f000 fc8e 	bl	8007308 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80069ec:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	60da      	str	r2, [r3, #12]
}
 80069f6:	bf00      	nop
 80069f8:	3720      	adds	r7, #32
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80069fe:	b480      	push	{r7}
 8006a00:	b087      	sub	sp, #28
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d808      	bhi.n	8006a2c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	689a      	ldr	r2, [r3, #8]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	1ad2      	subs	r2, r2, r3
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	4413      	add	r3, r2
 8006a26:	3b01      	subs	r3, #1
 8006a28:	617b      	str	r3, [r7, #20]
 8006a2a:	e004      	b.n	8006a36 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	3b01      	subs	r3, #1
 8006a34:	617b      	str	r3, [r7, #20]
  }
  return r;
 8006a36:	697b      	ldr	r3, [r7, #20]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	371c      	adds	r7, #28
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b088      	sub	sp, #32
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	1c5a      	adds	r2, r3, #1
 8006a58:	4613      	mov	r3, r2
 8006a5a:	005b      	lsls	r3, r3, #1
 8006a5c:	4413      	add	r3, r2
 8006a5e:	00db      	lsls	r3, r3, #3
 8006a60:	4a1f      	ldr	r2, [pc, #124]	; (8006ae0 <SEGGER_RTT_WriteNoLock+0x9c>)
 8006a62:	4413      	add	r3, r2
 8006a64:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d029      	beq.n	8006ac2 <SEGGER_RTT_WriteNoLock+0x7e>
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d82e      	bhi.n	8006ad0 <SEGGER_RTT_WriteNoLock+0x8c>
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d002      	beq.n	8006a7c <SEGGER_RTT_WriteNoLock+0x38>
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d013      	beq.n	8006aa2 <SEGGER_RTT_WriteNoLock+0x5e>
 8006a7a:	e029      	b.n	8006ad0 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006a7c:	6978      	ldr	r0, [r7, #20]
 8006a7e:	f7ff ffbe 	bl	80069fe <_GetAvailWriteSpace>
 8006a82:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d202      	bcs.n	8006a92 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8006a90:	e021      	b.n	8006ad6 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	69b9      	ldr	r1, [r7, #24]
 8006a9a:	6978      	ldr	r0, [r7, #20]
 8006a9c:	f7ff ff67 	bl	800696e <_WriteNoCheck>
    break;
 8006aa0:	e019      	b.n	8006ad6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006aa2:	6978      	ldr	r0, [r7, #20]
 8006aa4:	f7ff ffab 	bl	80069fe <_GetAvailWriteSpace>
 8006aa8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	bf28      	it	cs
 8006ab2:	4613      	movcs	r3, r2
 8006ab4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8006ab6:	69fa      	ldr	r2, [r7, #28]
 8006ab8:	69b9      	ldr	r1, [r7, #24]
 8006aba:	6978      	ldr	r0, [r7, #20]
 8006abc:	f7ff ff57 	bl	800696e <_WriteNoCheck>
    break;
 8006ac0:	e009      	b.n	8006ad6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	69b9      	ldr	r1, [r7, #24]
 8006ac6:	6978      	ldr	r0, [r7, #20]
 8006ac8:	f7ff fef4 	bl	80068b4 <_WriteBlocking>
 8006acc:	61f8      	str	r0, [r7, #28]
    break;
 8006ace:	e002      	b.n	8006ad6 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	61fb      	str	r3, [r7, #28]
    break;
 8006ad4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8006ad6:	69fb      	ldr	r3, [r7, #28]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3720      	adds	r7, #32
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	200020b4 	.word	0x200020b4

08006ae4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b088      	sub	sp, #32
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8006af0:	4b0e      	ldr	r3, [pc, #56]	; (8006b2c <SEGGER_RTT_Write+0x48>)
 8006af2:	61fb      	str	r3, [r7, #28]
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <SEGGER_RTT_Write+0x1e>
 8006afe:	f7ff fe81 	bl	8006804 <_DoInit>
  SEGGER_RTT_LOCK();
 8006b02:	f3ef 8311 	mrs	r3, BASEPRI
 8006b06:	f04f 0120 	mov.w	r1, #32
 8006b0a:	f381 8811 	msr	BASEPRI, r1
 8006b0e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	68b9      	ldr	r1, [r7, #8]
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f7ff ff95 	bl	8006a44 <SEGGER_RTT_WriteNoLock>
 8006b1a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8006b22:	697b      	ldr	r3, [r7, #20]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3720      	adds	r7, #32
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	200020b4 	.word	0x200020b4

08006b30 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b08a      	sub	sp, #40	; 0x28
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
 8006b3c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_UP* pUp;

  INIT();
 8006b3e:	4b20      	ldr	r3, [pc, #128]	; (8006bc0 <SEGGER_RTT_ConfigUpBuffer+0x90>)
 8006b40:	623b      	str	r3, [r7, #32]
 8006b42:	6a3b      	ldr	r3, [r7, #32]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <SEGGER_RTT_ConfigUpBuffer+0x20>
 8006b4c:	f7ff fe5a 	bl	8006804 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006b50:	4b1b      	ldr	r3, [pc, #108]	; (8006bc0 <SEGGER_RTT_ConfigUpBuffer+0x90>)
 8006b52:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d82a      	bhi.n	8006bb0 <SEGGER_RTT_ConfigUpBuffer+0x80>
    SEGGER_RTT_LOCK();
 8006b5a:	f3ef 8311 	mrs	r3, BASEPRI
 8006b5e:	f04f 0120 	mov.w	r1, #32
 8006b62:	f381 8811 	msr	BASEPRI, r1
 8006b66:	61bb      	str	r3, [r7, #24]
    pUp = &pRTTCB->aUp[BufferIndex];
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	1c5a      	adds	r2, r3, #1
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	005b      	lsls	r3, r3, #1
 8006b70:	4413      	add	r3, r2
 8006b72:	00db      	lsls	r3, r3, #3
 8006b74:	69fa      	ldr	r2, [r7, #28]
 8006b76:	4413      	add	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00e      	beq.n	8006b9e <SEGGER_RTT_ConfigUpBuffer+0x6e>
      pUp->sName        = sName;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	601a      	str	r2, [r3, #0]
      pUp->pBuffer      = (char*)pBuffer;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	605a      	str	r2, [r3, #4]
      pUp->SizeOfBuffer = BufferSize;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	683a      	ldr	r2, [r7, #0]
 8006b90:	609a      	str	r2, [r3, #8]
      pUp->RdOff        = 0u;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2200      	movs	r2, #0
 8006b96:	611a      	str	r2, [r3, #16]
      pUp->WrOff        = 0u;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	60da      	str	r2, [r3, #12]
    }
    pUp->Flags          = Flags;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ba2:	615a      	str	r2, [r3, #20]
    SEGGER_RTT_UNLOCK();
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8006baa:	2300      	movs	r3, #0
 8006bac:	627b      	str	r3, [r7, #36]	; 0x24
 8006bae:	e002      	b.n	8006bb6 <SEGGER_RTT_ConfigUpBuffer+0x86>
  } else {
    r = -1;
 8006bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8006bb4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3728      	adds	r7, #40	; 0x28
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	200020b4 	.word	0x200020b4

08006bc4 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	460b      	mov	r3, r1
 8006bce:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	1c5a      	adds	r2, r3, #1
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d80e      	bhi.n	8006c00 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	4413      	add	r3, r2
 8006bea:	78fa      	ldrb	r2, [r7, #3]
 8006bec:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	1c5a      	adds	r2, r3, #1
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	1c5a      	adds	r2, r3, #1
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	689a      	ldr	r2, [r3, #8]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d115      	bne.n	8006c38 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6918      	ldr	r0, [r3, #16]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6819      	ldr	r1, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	f7ff ff63 	bl	8006ae4 <SEGGER_RTT_Write>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d004      	beq.n	8006c32 <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c2e:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8006c30:	e002      	b.n	8006c38 <_StoreChar+0x74>
      p->Cnt = 0u;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	609a      	str	r2, [r3, #8]
}
 8006c38:	bf00      	nop
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b08a      	sub	sp, #40	; 0x28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
 8006c4c:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8006c52:	2301      	movs	r3, #1
 8006c54:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8006c56:	2301      	movs	r3, #1
 8006c58:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006c5a:	e007      	b.n	8006c6c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8006c5c:	6a3a      	ldr	r2, [r7, #32]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c64:	623b      	str	r3, [r7, #32]
    Width++;
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006c6c:	6a3a      	ldr	r2, [r7, #32]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d2f3      	bcs.n	8006c5c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d901      	bls.n	8006c80 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d125      	bne.n	8006cd6 <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d022      	beq.n	8006cd6 <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8006c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d005      	beq.n	8006ca6 <_PrintUnsigned+0x66>
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d102      	bne.n	8006ca6 <_PrintUnsigned+0x66>
        c = '0';
 8006ca0:	2330      	movs	r3, #48	; 0x30
 8006ca2:	76fb      	strb	r3, [r7, #27]
 8006ca4:	e001      	b.n	8006caa <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8006ca6:	2320      	movs	r3, #32
 8006ca8:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006caa:	e00b      	b.n	8006cc4 <_PrintUnsigned+0x84>
        FieldWidth--;
 8006cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8006cb2:	7efb      	ldrb	r3, [r7, #27]
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f7ff ff84 	bl	8006bc4 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	db07      	blt.n	8006cd4 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d005      	beq.n	8006cd6 <_PrintUnsigned+0x96>
 8006cca:	69fa      	ldr	r2, [r7, #28]
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d3ec      	bcc.n	8006cac <_PrintUnsigned+0x6c>
 8006cd2:	e000      	b.n	8006cd6 <_PrintUnsigned+0x96>
          break;
 8006cd4:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	db55      	blt.n	8006d8a <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d903      	bls.n	8006cec <_PrintUnsigned+0xac>
        NumDigits--;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	603b      	str	r3, [r7, #0]
 8006cea:	e009      	b.n	8006d00 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf4:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d200      	bcs.n	8006d00 <_PrintUnsigned+0xc0>
          break;
 8006cfe:	e005      	b.n	8006d0c <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	fb02 f303 	mul.w	r3, r2, r3
 8006d08:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006d0a:	e7e8      	b.n	8006cde <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d14:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d1a:	fb02 f303 	mul.w	r3, r2, r3
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8006d24:	4a1b      	ldr	r2, [pc, #108]	; (8006d94 <_PrintUnsigned+0x154>)
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	4413      	add	r3, r2
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f7ff ff48 	bl	8006bc4 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	db08      	blt.n	8006d4e <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8006d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d44:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 8006d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1df      	bne.n	8006d0c <_PrintUnsigned+0xcc>
 8006d4c:	e000      	b.n	8006d50 <_PrintUnsigned+0x110>
        break;
 8006d4e:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8006d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d017      	beq.n	8006d8a <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d014      	beq.n	8006d8a <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006d60:	e00a      	b.n	8006d78 <_PrintUnsigned+0x138>
          FieldWidth--;
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	3b01      	subs	r3, #1
 8006d66:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 8006d68:	2120      	movs	r1, #32
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f7ff ff2a 	bl	8006bc4 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	db07      	blt.n	8006d88 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d005      	beq.n	8006d8a <_PrintUnsigned+0x14a>
 8006d7e:	69fa      	ldr	r2, [r7, #28]
 8006d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d3ed      	bcc.n	8006d62 <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8006d86:	e000      	b.n	8006d8a <_PrintUnsigned+0x14a>
            break;
 8006d88:	bf00      	nop
}
 8006d8a:	bf00      	nop
 8006d8c:	3728      	adds	r7, #40	; 0x28
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	080074dc 	.word	0x080074dc

08006d98 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b088      	sub	sp, #32
 8006d9c:	af02      	add	r7, sp, #8
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
 8006da4:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	bfb8      	it	lt
 8006dac:	425b      	neglt	r3, r3
 8006dae:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006db0:	2301      	movs	r3, #1
 8006db2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006db4:	e007      	b.n	8006dc6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	fb92 f3f3 	sdiv	r3, r2, r3
 8006dbe:	613b      	str	r3, [r7, #16]
    Width++;
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	daf3      	bge.n	8006db6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d901      	bls.n	8006dda <_PrintInt+0x42>
    Width = NumDigits;
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00a      	beq.n	8006df6 <_PrintInt+0x5e>
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	db04      	blt.n	8006df0 <_PrintInt+0x58>
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	f003 0304 	and.w	r3, r3, #4
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d002      	beq.n	8006df6 <_PrintInt+0x5e>
    FieldWidth--;
 8006df0:	6a3b      	ldr	r3, [r7, #32]
 8006df2:	3b01      	subs	r3, #1
 8006df4:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <_PrintInt+0x6e>
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d01c      	beq.n	8006e40 <_PrintInt+0xa8>
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d117      	bne.n	8006e40 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d014      	beq.n	8006e40 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006e16:	e00a      	b.n	8006e2e <_PrintInt+0x96>
        FieldWidth--;
 8006e18:	6a3b      	ldr	r3, [r7, #32]
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8006e1e:	2120      	movs	r1, #32
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f7ff fecf 	bl	8006bc4 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	db07      	blt.n	8006e3e <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006e2e:	6a3b      	ldr	r3, [r7, #32]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d005      	beq.n	8006e40 <_PrintInt+0xa8>
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d3ed      	bcc.n	8006e18 <_PrintInt+0x80>
 8006e3c:	e000      	b.n	8006e40 <_PrintInt+0xa8>
          break;
 8006e3e:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	db4a      	blt.n	8006ede <_PrintInt+0x146>
    if (v < 0) {
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	da07      	bge.n	8006e5e <_PrintInt+0xc6>
      v = -v;
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	425b      	negs	r3, r3
 8006e52:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8006e54:	212d      	movs	r1, #45	; 0x2d
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f7ff feb4 	bl	8006bc4 <_StoreChar>
 8006e5c:	e008      	b.n	8006e70 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e60:	f003 0304 	and.w	r3, r3, #4
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d003      	beq.n	8006e70 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 8006e68:	212b      	movs	r1, #43	; 0x2b
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f7ff feaa 	bl	8006bc4 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	db32      	blt.n	8006ede <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d01f      	beq.n	8006ec2 <_PrintInt+0x12a>
 8006e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e84:	f003 0301 	and.w	r3, r3, #1
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d11a      	bne.n	8006ec2 <_PrintInt+0x12a>
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d117      	bne.n	8006ec2 <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8006e92:	6a3b      	ldr	r3, [r7, #32]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d014      	beq.n	8006ec2 <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006e98:	e00a      	b.n	8006eb0 <_PrintInt+0x118>
            FieldWidth--;
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8006ea0:	2130      	movs	r1, #48	; 0x30
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f7ff fe8e 	bl	8006bc4 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	db07      	blt.n	8006ec0 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d005      	beq.n	8006ec2 <_PrintInt+0x12a>
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d3ed      	bcc.n	8006e9a <_PrintInt+0x102>
 8006ebe:	e000      	b.n	8006ec2 <_PrintInt+0x12a>
              break;
 8006ec0:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	db09      	blt.n	8006ede <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8006eca:	68b9      	ldr	r1, [r7, #8]
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	9301      	str	r3, [sp, #4]
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f7ff feb1 	bl	8006c40 <_PrintUnsigned>
      }
    }
  }
}
 8006ede:	bf00      	nop
 8006ee0:	3718      	adds	r7, #24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
	...

08006ee8 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b0a2      	sub	sp, #136	; 0x88
 8006eec:	af02      	add	r7, sp, #8
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8006ef4:	f107 0310 	add.w	r3, r7, #16
 8006ef8:	653b      	str	r3, [r7, #80]	; 0x50
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8006efa:	2340      	movs	r3, #64	; 0x40
 8006efc:	657b      	str	r3, [r7, #84]	; 0x54
  BufferDesc.Cnt            = 0u;
 8006efe:	2300      	movs	r3, #0
 8006f00:	65bb      	str	r3, [r7, #88]	; 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	663b      	str	r3, [r7, #96]	; 0x60
  BufferDesc.ReturnValue    = 0;
 8006f06:	2300      	movs	r3, #0
 8006f08:	65fb      	str	r3, [r7, #92]	; 0x5c

  do {
    c = *sFormat;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    sFormat++;
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	3301      	adds	r3, #1
 8006f16:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8006f18:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 819f 	beq.w	8007260 <SEGGER_RTT_vprintf+0x378>
      break;
    }
    if (c == '%') {
 8006f22:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006f26:	2b25      	cmp	r3, #37	; 0x25
 8006f28:	f040 818d 	bne.w	8007246 <SEGGER_RTT_vprintf+0x35e>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	673b      	str	r3, [r7, #112]	; 0x70
      v = 1;
 8006f30:	2301      	movs	r3, #1
 8006f32:	67bb      	str	r3, [r7, #120]	; 0x78
      do {
        c = *sFormat;
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        switch (c) {
 8006f3c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006f40:	3b23      	subs	r3, #35	; 0x23
 8006f42:	2b0d      	cmp	r3, #13
 8006f44:	d83e      	bhi.n	8006fc4 <SEGGER_RTT_vprintf+0xdc>
 8006f46:	a201      	add	r2, pc, #4	; (adr r2, 8006f4c <SEGGER_RTT_vprintf+0x64>)
 8006f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4c:	08006fb5 	.word	0x08006fb5
 8006f50:	08006fc5 	.word	0x08006fc5
 8006f54:	08006fc5 	.word	0x08006fc5
 8006f58:	08006fc5 	.word	0x08006fc5
 8006f5c:	08006fc5 	.word	0x08006fc5
 8006f60:	08006fc5 	.word	0x08006fc5
 8006f64:	08006fc5 	.word	0x08006fc5
 8006f68:	08006fc5 	.word	0x08006fc5
 8006f6c:	08006fa5 	.word	0x08006fa5
 8006f70:	08006fc5 	.word	0x08006fc5
 8006f74:	08006f85 	.word	0x08006f85
 8006f78:	08006fc5 	.word	0x08006fc5
 8006f7c:	08006fc5 	.word	0x08006fc5
 8006f80:	08006f95 	.word	0x08006f95
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006f84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f86:	f043 0301 	orr.w	r3, r3, #1
 8006f8a:	673b      	str	r3, [r7, #112]	; 0x70
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	60bb      	str	r3, [r7, #8]
 8006f92:	e01a      	b.n	8006fca <SEGGER_RTT_vprintf+0xe2>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006f94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f96:	f043 0302 	orr.w	r3, r3, #2
 8006f9a:	673b      	str	r3, [r7, #112]	; 0x70
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	60bb      	str	r3, [r7, #8]
 8006fa2:	e012      	b.n	8006fca <SEGGER_RTT_vprintf+0xe2>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006fa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fa6:	f043 0304 	orr.w	r3, r3, #4
 8006faa:	673b      	str	r3, [r7, #112]	; 0x70
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	60bb      	str	r3, [r7, #8]
 8006fb2:	e00a      	b.n	8006fca <SEGGER_RTT_vprintf+0xe2>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006fb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fb6:	f043 0308 	orr.w	r3, r3, #8
 8006fba:	673b      	str	r3, [r7, #112]	; 0x70
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	60bb      	str	r3, [r7, #8]
 8006fc2:	e002      	b.n	8006fca <SEGGER_RTT_vprintf+0xe2>
        default:  v = 0; break;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fc8:	bf00      	nop
        }
      } while (v);
 8006fca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1b1      	bne.n	8006f34 <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	66fb      	str	r3, [r7, #108]	; 0x6c
      do {
        c = *sFormat;
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c < '0') || (c > '9')) {
 8006fdc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006fe0:	2b2f      	cmp	r3, #47	; 0x2f
 8006fe2:	d912      	bls.n	800700a <SEGGER_RTT_vprintf+0x122>
 8006fe4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006fe8:	2b39      	cmp	r3, #57	; 0x39
 8006fea:	d80e      	bhi.n	800700a <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8006ff2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	4413      	add	r3, r2
 8006ffa:	005b      	lsls	r3, r3, #1
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007002:	4413      	add	r3, r2
 8007004:	3b30      	subs	r3, #48	; 0x30
 8007006:	66fb      	str	r3, [r7, #108]	; 0x6c
        c = *sFormat;
 8007008:	e7e4      	b.n	8006fd4 <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800700a:	2300      	movs	r3, #0
 800700c:	677b      	str	r3, [r7, #116]	; 0x74
      c = *sFormat;
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      if (c == '.') {
 8007016:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800701a:	2b2e      	cmp	r3, #46	; 0x2e
 800701c:	d11d      	bne.n	800705a <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	3301      	adds	r3, #1
 8007022:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
          if ((c < '0') || (c > '9')) {
 800702c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007030:	2b2f      	cmp	r3, #47	; 0x2f
 8007032:	d912      	bls.n	800705a <SEGGER_RTT_vprintf+0x172>
 8007034:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007038:	2b39      	cmp	r3, #57	; 0x39
 800703a:	d80e      	bhi.n	800705a <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	3301      	adds	r3, #1
 8007040:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 8007042:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007044:	4613      	mov	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	005b      	lsls	r3, r3, #1
 800704c:	461a      	mov	r2, r3
 800704e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007052:	4413      	add	r3, r2
 8007054:	3b30      	subs	r3, #48	; 0x30
 8007056:	677b      	str	r3, [r7, #116]	; 0x74
          c = *sFormat;
 8007058:	e7e4      	b.n	8007024 <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 8007062:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007066:	2b6c      	cmp	r3, #108	; 0x6c
 8007068:	d003      	beq.n	8007072 <SEGGER_RTT_vprintf+0x18a>
 800706a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800706e:	2b68      	cmp	r3, #104	; 0x68
 8007070:	d107      	bne.n	8007082 <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	3301      	adds	r3, #1
 8007076:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c == 'l') || (c == 'h')) {
 8007080:	e7ef      	b.n	8007062 <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8007082:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007086:	2b25      	cmp	r3, #37	; 0x25
 8007088:	f000 80d1 	beq.w	800722e <SEGGER_RTT_vprintf+0x346>
 800708c:	2b25      	cmp	r3, #37	; 0x25
 800708e:	f2c0 80d5 	blt.w	800723c <SEGGER_RTT_vprintf+0x354>
 8007092:	2b78      	cmp	r3, #120	; 0x78
 8007094:	f300 80d2 	bgt.w	800723c <SEGGER_RTT_vprintf+0x354>
 8007098:	2b58      	cmp	r3, #88	; 0x58
 800709a:	f2c0 80cf 	blt.w	800723c <SEGGER_RTT_vprintf+0x354>
 800709e:	3b58      	subs	r3, #88	; 0x58
 80070a0:	2b20      	cmp	r3, #32
 80070a2:	f200 80cb 	bhi.w	800723c <SEGGER_RTT_vprintf+0x354>
 80070a6:	a201      	add	r2, pc, #4	; (adr r2, 80070ac <SEGGER_RTT_vprintf+0x1c4>)
 80070a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ac:	080071a3 	.word	0x080071a3
 80070b0:	0800723d 	.word	0x0800723d
 80070b4:	0800723d 	.word	0x0800723d
 80070b8:	0800723d 	.word	0x0800723d
 80070bc:	0800723d 	.word	0x0800723d
 80070c0:	0800723d 	.word	0x0800723d
 80070c4:	0800723d 	.word	0x0800723d
 80070c8:	0800723d 	.word	0x0800723d
 80070cc:	0800723d 	.word	0x0800723d
 80070d0:	0800723d 	.word	0x0800723d
 80070d4:	0800723d 	.word	0x0800723d
 80070d8:	08007131 	.word	0x08007131
 80070dc:	08007157 	.word	0x08007157
 80070e0:	0800723d 	.word	0x0800723d
 80070e4:	0800723d 	.word	0x0800723d
 80070e8:	0800723d 	.word	0x0800723d
 80070ec:	0800723d 	.word	0x0800723d
 80070f0:	0800723d 	.word	0x0800723d
 80070f4:	0800723d 	.word	0x0800723d
 80070f8:	0800723d 	.word	0x0800723d
 80070fc:	0800723d 	.word	0x0800723d
 8007100:	0800723d 	.word	0x0800723d
 8007104:	0800723d 	.word	0x0800723d
 8007108:	0800723d 	.word	0x0800723d
 800710c:	08007209 	.word	0x08007209
 8007110:	0800723d 	.word	0x0800723d
 8007114:	0800723d 	.word	0x0800723d
 8007118:	080071c9 	.word	0x080071c9
 800711c:	0800723d 	.word	0x0800723d
 8007120:	0800717d 	.word	0x0800717d
 8007124:	0800723d 	.word	0x0800723d
 8007128:	0800723d 	.word	0x0800723d
 800712c:	080071a3 	.word	0x080071a3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	1d19      	adds	r1, r3, #4
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	6011      	str	r1, [r2, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	67bb      	str	r3, [r7, #120]	; 0x78
        c0 = (char)v;
 800713e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007140:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        _StoreChar(&BufferDesc, c0);
 8007144:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8007148:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800714c:	4611      	mov	r1, r2
 800714e:	4618      	mov	r0, r3
 8007150:	f7ff fd38 	bl	8006bc4 <_StoreChar>
        break;
 8007154:	e073      	b.n	800723e <SEGGER_RTT_vprintf+0x356>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	1d19      	adds	r1, r3, #4
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	6011      	str	r1, [r2, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8007164:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8007168:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800716a:	9301      	str	r3, [sp, #4]
 800716c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007172:	220a      	movs	r2, #10
 8007174:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007176:	f7ff fe0f 	bl	8006d98 <_PrintInt>
        break;
 800717a:	e060      	b.n	800723e <SEGGER_RTT_vprintf+0x356>
      case 'u':
        v = va_arg(*pParamList, int);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	1d19      	adds	r1, r3, #4
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	6011      	str	r1, [r2, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800718a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800718c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8007190:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007192:	9301      	str	r3, [sp, #4]
 8007194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800719a:	220a      	movs	r2, #10
 800719c:	f7ff fd50 	bl	8006c40 <_PrintUnsigned>
        break;
 80071a0:	e04d      	b.n	800723e <SEGGER_RTT_vprintf+0x356>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	1d19      	adds	r1, r3, #4
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	6011      	str	r1, [r2, #0]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80071b0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80071b2:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80071b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071b8:	9301      	str	r3, [sp, #4]
 80071ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071bc:	9300      	str	r3, [sp, #0]
 80071be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071c0:	2210      	movs	r2, #16
 80071c2:	f7ff fd3d 	bl	8006c40 <_PrintUnsigned>
        break;
 80071c6:	e03a      	b.n	800723e <SEGGER_RTT_vprintf+0x356>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	1d19      	adds	r1, r3, #4
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	6011      	str	r1, [r2, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	66bb      	str	r3, [r7, #104]	; 0x68
          do {
            c = *s;
 80071d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            s++;
 80071de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071e0:	3301      	adds	r3, #1
 80071e2:	66bb      	str	r3, [r7, #104]	; 0x68
            if (c == '\0') {
 80071e4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00b      	beq.n	8007204 <SEGGER_RTT_vprintf+0x31c>
              break;
            }
           _StoreChar(&BufferDesc, c);
 80071ec:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 80071f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80071f4:	4611      	mov	r1, r2
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7ff fce4 	bl	8006bc4 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 80071fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071fe:	2b00      	cmp	r3, #0
 8007200:	dae9      	bge.n	80071d6 <SEGGER_RTT_vprintf+0x2ee>
        }
        break;
 8007202:	e01c      	b.n	800723e <SEGGER_RTT_vprintf+0x356>
              break;
 8007204:	bf00      	nop
        break;
 8007206:	e01a      	b.n	800723e <SEGGER_RTT_vprintf+0x356>
      case 'p':
        v = va_arg(*pParamList, int);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	1d19      	adds	r1, r3, #4
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	6011      	str	r1, [r2, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8007216:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007218:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800721c:	2300      	movs	r3, #0
 800721e:	9301      	str	r3, [sp, #4]
 8007220:	2308      	movs	r3, #8
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	2308      	movs	r3, #8
 8007226:	2210      	movs	r2, #16
 8007228:	f7ff fd0a 	bl	8006c40 <_PrintUnsigned>
        break;
 800722c:	e007      	b.n	800723e <SEGGER_RTT_vprintf+0x356>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800722e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007232:	2125      	movs	r1, #37	; 0x25
 8007234:	4618      	mov	r0, r3
 8007236:	f7ff fcc5 	bl	8006bc4 <_StoreChar>
        break;
 800723a:	e000      	b.n	800723e <SEGGER_RTT_vprintf+0x356>
      default:
        break;
 800723c:	bf00      	nop
      }
      sFormat++;
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	3301      	adds	r3, #1
 8007242:	60bb      	str	r3, [r7, #8]
 8007244:	e007      	b.n	8007256 <SEGGER_RTT_vprintf+0x36e>
    } else {
      _StoreChar(&BufferDesc, c);
 8007246:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800724a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800724e:	4611      	mov	r1, r2
 8007250:	4618      	mov	r0, r3
 8007252:	f7ff fcb7 	bl	8006bc4 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8007256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007258:	2b00      	cmp	r3, #0
 800725a:	f6bf ae56 	bge.w	8006f0a <SEGGER_RTT_vprintf+0x22>
 800725e:	e000      	b.n	8007262 <SEGGER_RTT_vprintf+0x37a>
      break;
 8007260:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8007262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007264:	2b00      	cmp	r3, #0
 8007266:	dd0d      	ble.n	8007284 <SEGGER_RTT_vprintf+0x39c>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8007268:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800726a:	2b00      	cmp	r3, #0
 800726c:	d006      	beq.n	800727c <SEGGER_RTT_vprintf+0x394>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 800726e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007270:	f107 0310 	add.w	r3, r7, #16
 8007274:	4619      	mov	r1, r3
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f7ff fc34 	bl	8006ae4 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 800727c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800727e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007280:	4413      	add	r3, r2
 8007282:	65fb      	str	r3, [r7, #92]	; 0x5c
  }
  return BufferDesc.ReturnValue;
 8007284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8007286:	4618      	mov	r0, r3
 8007288:	3780      	adds	r7, #128	; 0x80
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop

08007290 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8007290:	b40e      	push	{r1, r2, r3}
 8007292:	b580      	push	{r7, lr}
 8007294:	b085      	sub	sp, #20
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 800729a:	f107 0320 	add.w	r3, r7, #32
 800729e:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 80072a0:	f107 0308 	add.w	r3, r7, #8
 80072a4:	461a      	mov	r2, r3
 80072a6:	69f9      	ldr	r1, [r7, #28]
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7ff fe1d 	bl	8006ee8 <SEGGER_RTT_vprintf>
 80072ae:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 80072b0:	68fb      	ldr	r3, [r7, #12]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072bc:	b003      	add	sp, #12
 80072be:	4770      	bx	lr

080072c0 <__libc_init_array>:
 80072c0:	b570      	push	{r4, r5, r6, lr}
 80072c2:	4d0d      	ldr	r5, [pc, #52]	; (80072f8 <__libc_init_array+0x38>)
 80072c4:	4c0d      	ldr	r4, [pc, #52]	; (80072fc <__libc_init_array+0x3c>)
 80072c6:	1b64      	subs	r4, r4, r5
 80072c8:	10a4      	asrs	r4, r4, #2
 80072ca:	2600      	movs	r6, #0
 80072cc:	42a6      	cmp	r6, r4
 80072ce:	d109      	bne.n	80072e4 <__libc_init_array+0x24>
 80072d0:	4d0b      	ldr	r5, [pc, #44]	; (8007300 <__libc_init_array+0x40>)
 80072d2:	4c0c      	ldr	r4, [pc, #48]	; (8007304 <__libc_init_array+0x44>)
 80072d4:	f000 f82e 	bl	8007334 <_init>
 80072d8:	1b64      	subs	r4, r4, r5
 80072da:	10a4      	asrs	r4, r4, #2
 80072dc:	2600      	movs	r6, #0
 80072de:	42a6      	cmp	r6, r4
 80072e0:	d105      	bne.n	80072ee <__libc_init_array+0x2e>
 80072e2:	bd70      	pop	{r4, r5, r6, pc}
 80072e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80072e8:	4798      	blx	r3
 80072ea:	3601      	adds	r6, #1
 80072ec:	e7ee      	b.n	80072cc <__libc_init_array+0xc>
 80072ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80072f2:	4798      	blx	r3
 80072f4:	3601      	adds	r6, #1
 80072f6:	e7f2      	b.n	80072de <__libc_init_array+0x1e>
 80072f8:	080074f4 	.word	0x080074f4
 80072fc:	080074f4 	.word	0x080074f4
 8007300:	080074f4 	.word	0x080074f4
 8007304:	080074f8 	.word	0x080074f8

08007308 <memcpy>:
 8007308:	440a      	add	r2, r1
 800730a:	4291      	cmp	r1, r2
 800730c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007310:	d100      	bne.n	8007314 <memcpy+0xc>
 8007312:	4770      	bx	lr
 8007314:	b510      	push	{r4, lr}
 8007316:	f811 4b01 	ldrb.w	r4, [r1], #1
 800731a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800731e:	4291      	cmp	r1, r2
 8007320:	d1f9      	bne.n	8007316 <memcpy+0xe>
 8007322:	bd10      	pop	{r4, pc}

08007324 <memset>:
 8007324:	4402      	add	r2, r0
 8007326:	4603      	mov	r3, r0
 8007328:	4293      	cmp	r3, r2
 800732a:	d100      	bne.n	800732e <memset+0xa>
 800732c:	4770      	bx	lr
 800732e:	f803 1b01 	strb.w	r1, [r3], #1
 8007332:	e7f9      	b.n	8007328 <memset+0x4>

08007334 <_init>:
 8007334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007336:	bf00      	nop
 8007338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800733a:	bc08      	pop	{r3}
 800733c:	469e      	mov	lr, r3
 800733e:	4770      	bx	lr

08007340 <_fini>:
 8007340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007342:	bf00      	nop
 8007344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007346:	bc08      	pop	{r3}
 8007348:	469e      	mov	lr, r3
 800734a:	4770      	bx	lr
